Right, so there have been a number of things Iâ€™ve noticed as I got more familiar with the repo. I'll try to explain them here to get the conversation started.

*Lots of repeated code* which could be minimized/separated into functions to improve readability
1) All threshold tooltips had exact same formatting, one long hard to read html string
2) Very similar _meta generations in premarket.py that could be split into functions (e.g. https://bitbucket.etrade.com/projects/TOOL/repos/etdash/browse/html/premarket/_bin/premarket/premarket.py?at=refs%2Fheads%2FTOOLS-8821#3014)
3) In premarket.py, around lines 3000-4000 and especially 3630, these almost all have the same format (`if X in _area: get_data() && put_in_meta() && append_to_output_json()`)
4) I think every datasource file had (almost) the same `get_data()` and `main()` methods, which basically call `_get_data()` and write to data.json

*Inconsistent naming/coding conventions* which obscure data flow/functionality and slow the understanding of the system for devs, especially newcomers
1) Variable names tend to vary and aren't descriptive (what purpose does `_data` really serve since it only supplies some data for some services? what does `_areas()` do?)
2) Inconsistent spacing amounts
3) Inconsistent placement of config information (at least, it hasn't been clear to me when config entries should be considered global vs area-only)
4) Inconsistent placement of data processing (e.g. premarket.py vs areas/area_X.py)
5) Lots of use of _variables when they aren't actually private
6) `get_data()` is vague
7) Very long lines, makes reading difficult

*Separation of concerns isn't very clear* which also slows understanding
1) The `_cfg` dict holds both global and local information even though it doesn't need to have the local information
2) The `_cfg` dict is located in premarket.py and premarket.py imports all other files. Any file that needs specific config information either needs to import premarket.py (creating cyclic dependencies) or pass the _cfg dict through a bunch of functions that might not need it. It seems like this would be a good example of something that should be in a separate file
3) Splitting code into different functions/files would help with this, too

There is a lot of stuff here, admittedly some of which might come from my lack of understanding about what data does what and how the system works, but I think these could provide at least somewhat of a good starting point.

I've tried to think about how to approach this in a few different ways. What I was trying to say in the standup was just one approach that I've thought of so far. It would help solve the repeated code/separation of concerns issues by putting more code in util files and splitting code into functions. Likewise, I would imagine that separating global config information into one (external) file and then putting datasource-specific information in the datasource file would also be a good idea to show what belongs with what. I attached an example of what could be a minimal example of how this kind of stuff would look.