{
	"scope": "source.java",
	"completions":
	[
		{"trigger": "I-ASCII\tinit", "contents": "ASCII ${1:ascii} = new ASCII($2);"},
		{"trigger": "I-ASCIIReader\tinit", "contents": "ASCIIReader ${1:reader} = new ASCIIReader($2);"},
		{"trigger": "I-ASCII_CharStream\tinit", "contents": "ASCII_CharStream ${1:stream} = new ASCII_CharStream($2);"},
		{"trigger": "I-ASTORE\tinit", "contents": "ASTORE ${1:astore} = new ASTORE($2);"},
		{"trigger": "I-ATHROW\tinit", "contents": "ATHROW ${1:athrow} = new ATHROW($2);"},
		{"trigger": "I-AWTError\tinit", "contents": "AWTError ${1:error} = new AWTError($2);"},
		{"trigger": "I-AWTEvent\tinit", "contents": "AWTEvent ${1:event} = new AWTEvent($2);"},
		{"trigger": "I-AWTEventListener\tinit", "contents": "AWTEventListener ${1:listener} = new AWTEventListener($2);"},
		{"trigger": "I-AWTEventListenerProxy\tinit", "contents": "AWTEventListenerProxy ${1:proxy} = new AWTEventListenerProxy($2);"},
		{"trigger": "I-AWTEventMulticaster\tinit", "contents": "AWTEventMulticaster ${1:multicaster} = new AWTEventMulticaster($2);"},
		{"trigger": "I-AWTException\tinit", "contents": "AWTException ${1:exception} = new AWTException($2);"},
		{"trigger": "I-AWTKeyStroke\tinit", "contents": "AWTKeyStroke ${1:stroke} = new AWTKeyStroke($2);"},
		{"trigger": "I-AWTPermission\tinit", "contents": "AWTPermission ${1:permission} = new AWTPermission($2);"},
		{"trigger": "I-AboutURLConnection\tinit", "contents": "AboutURLConnection ${1:connection} = new AboutURLConnection($2);"},
		{"trigger": "I-AbsoluteIterator\tinit", "contents": "AbsoluteIterator ${1:iterator} = new AbsoluteIterator($2);"},
		{"trigger": "I-AbsoluteLocationPath\tinit", "contents": "AbsoluteLocationPath ${1:path} = new AbsoluteLocationPath($2);"},
		{"trigger": "I-AbsolutePathPattern\tinit", "contents": "AbsolutePathPattern ${1:pattern} = new AbsolutePathPattern($2);"},
		{"trigger": "I-AbstractAction\tinit", "contents": "AbstractAction ${1:action} = new AbstractAction($2);"},
		{"trigger": "I-AbstractAnnotationValueVisitor\tinit", "contents": "AbstractAnnotationValueVisitor ${1:visitor} = new AbstractAnnotationValueVisitor($2);"},
		{"trigger": "I-AbstractAsyncOperation\tinit", "contents": "AbstractAsyncOperation ${1:operation} = new AbstractAsyncOperation($2);"},
		{"trigger": "I-AbstractBorder\tinit", "contents": "AbstractBorder ${1:border} = new AbstractBorder($2);"},
		{"trigger": "I-AbstractButton\tinit", "contents": "AbstractButton ${1:button} = new AbstractButton($2);"},
		{"trigger": "I-AbstractCellEditor\tinit", "contents": "AbstractCellEditor ${1:editor} = new AbstractCellEditor($2);"},
		{"trigger": "I-AbstractChronology\tinit", "contents": "AbstractChronology ${1:chronology} = new AbstractChronology($2);"},
		{"trigger": "I-AbstractCollection\tinit", "contents": "AbstractCollection ${1:collection} = new AbstractCollection($2);"},
		{"trigger": "I-AbstractColorChooserPanel\tinit", "contents": "AbstractColorChooserPanel ${1:panel} = new AbstractColorChooserPanel($2);"},
		{"trigger": "I-AbstractDOMParser\tinit", "contents": "AbstractDOMParser ${1:parser} = new AbstractDOMParser($2);"},
		{"trigger": "I-AbstractDateTimeDV\tinit", "contents": "AbstractDateTimeDV ${1:abstractdatetimedv} = new AbstractDateTimeDV($2);"},
		{"trigger": "I-AbstractDocument\tinit", "contents": "AbstractDocument ${1:document} = new AbstractDocument($2);"},
		{"trigger": "I-AbstractEvents\tinit", "contents": "AbstractEvents ${1:events} = new AbstractEvents($2);"},
		{"trigger": "I-AbstractExecutorService\tinit", "contents": "AbstractExecutorService ${1:service} = new AbstractExecutorService($2);"},
		{"trigger": "I-AbstractFilter\tinit", "contents": "AbstractFilter ${1:filter} = new AbstractFilter($2);"},
		{"trigger": "I-AbstractInterruptibleChannel\tinit", "contents": "AbstractInterruptibleChannel ${1:channel} = new AbstractInterruptibleChannel($2);"},
		{"trigger": "I-AbstractLayoutCache\tinit", "contents": "AbstractLayoutCache ${1:cache} = new AbstractLayoutCache($2);"},
		{"trigger": "I-AbstractList\tinit", "contents": "AbstractList ${1:list} = new AbstractList($2);"},
		{"trigger": "I-AbstractListModel\tinit", "contents": "AbstractListModel ${1:model} = new AbstractListModel($2);"},
		{"trigger": "I-AbstractMap\tinit", "contents": "AbstractMap ${1:map} = new AbstractMap($2);"},
		{"trigger": "I-AbstractMarshallerImpl\tinit", "contents": "AbstractMarshallerImpl ${1:impl} = new AbstractMarshallerImpl($2);"},
		{"trigger": "I-AbstractMasterTimer\tinit", "contents": "AbstractMasterTimer ${1:timer} = new AbstractMasterTimer($2);"},
		{"trigger": "I-AbstractMethodError\tinit", "contents": "AbstractMethodError ${1:error} = new AbstractMethodError($2);"},
		{"trigger": "I-AbstractNotifyListener\tinit", "contents": "AbstractNotifyListener ${1:listener} = new AbstractNotifyListener($2);"},
		{"trigger": "I-AbstractOwnableSynchronizer\tinit", "contents": "AbstractOwnableSynchronizer ${1:synchronizer} = new AbstractOwnableSynchronizer($2);"},
		{"trigger": "I-AbstractPipeline\tinit", "contents": "AbstractPipeline ${1:pipeline} = new AbstractPipeline($2);"},
		{"trigger": "I-AbstractPlainDatagramSocketImpl\tinit", "contents": "AbstractPlainDatagramSocketImpl ${1:impl} = new AbstractPlainDatagramSocketImpl($2);"},
		{"trigger": "I-AbstractPlainSocketImpl\tinit", "contents": "AbstractPlainSocketImpl ${1:impl} = new AbstractPlainSocketImpl($2);"},
		{"trigger": "I-AbstractPreferences\tinit", "contents": "AbstractPreferences ${1:preferences} = new AbstractPreferences($2);"},
		{"trigger": "I-AbstractProcessor\tinit", "contents": "AbstractProcessor ${1:processor} = new AbstractProcessor($2);"},
		{"trigger": "I-AbstractQueue\tinit", "contents": "AbstractQueue ${1:queue} = new AbstractQueue($2);"},
		{"trigger": "I-AbstractQueuedLongSynchronizer\tinit", "contents": "AbstractQueuedLongSynchronizer ${1:synchronizer} = new AbstractQueuedLongSynchronizer($2);"},
		{"trigger": "I-AbstractQueuedSynchronizer\tinit", "contents": "AbstractQueuedSynchronizer ${1:synchronizer} = new AbstractQueuedSynchronizer($2);"},
		{"trigger": "I-AbstractRegionPainter\tinit", "contents": "AbstractRegionPainter ${1:painter} = new AbstractRegionPainter($2);"},
		{"trigger": "I-AbstractRemoteResource\tinit", "contents": "AbstractRemoteResource ${1:resource} = new AbstractRemoteResource($2);"},
		{"trigger": "I-AbstractSAXParser\tinit", "contents": "AbstractSAXParser ${1:parser} = new AbstractSAXParser($2);"},
		{"trigger": "I-AbstractScriptEngine\tinit", "contents": "AbstractScriptEngine ${1:engine} = new AbstractScriptEngine($2);"},
		{"trigger": "I-AbstractSelectableChannel\tinit", "contents": "AbstractSelectableChannel ${1:channel} = new AbstractSelectableChannel($2);"},
		{"trigger": "I-AbstractSelectionKey\tinit", "contents": "AbstractSelectionKey ${1:key} = new AbstractSelectionKey($2);"},
		{"trigger": "I-AbstractSelector\tinit", "contents": "AbstractSelector ${1:selector} = new AbstractSelector($2);"},
		{"trigger": "I-AbstractSequentialList\tinit", "contents": "AbstractSequentialList ${1:list} = new AbstractSequentialList($2);"},
		{"trigger": "I-AbstractSerializer\tinit", "contents": "AbstractSerializer ${1:serializer} = new AbstractSerializer($2);"},
		{"trigger": "I-AbstractSet\tinit", "contents": "AbstractSet ${1:set} = new AbstractSet($2);"},
		{"trigger": "I-AbstractShadow\tinit", "contents": "AbstractShadow ${1:shadow} = new AbstractShadow($2);"},
		{"trigger": "I-AbstractShortCircuitTask\tinit", "contents": "AbstractShortCircuitTask ${1:task} = new AbstractShortCircuitTask($2);"},
		{"trigger": "I-AbstractSpinedBuffer\tinit", "contents": "AbstractSpinedBuffer ${1:buffer} = new AbstractSpinedBuffer($2);"},
		{"trigger": "I-AbstractSpinnerModel\tinit", "contents": "AbstractSpinnerModel ${1:model} = new AbstractSpinnerModel($2);"},
		{"trigger": "I-AbstractStringBuilder\tinit", "contents": "AbstractStringBuilder ${1:builder} = new AbstractStringBuilder($2);"},
		{"trigger": "I-AbstractSurface\tinit", "contents": "AbstractSurface ${1:surface} = new AbstractSurface($2);"},
		{"trigger": "I-AbstractTableModel\tinit", "contents": "AbstractTableModel ${1:model} = new AbstractTableModel($2);"},
		{"trigger": "I-AbstractTask\tinit", "contents": "AbstractTask ${1:task} = new AbstractTask($2);"},
		{"trigger": "I-AbstractTranslet\tinit", "contents": "AbstractTranslet ${1:translet} = new AbstractTranslet($2);"},
		{"trigger": "I-AbstractUndoableEdit\tinit", "contents": "AbstractUndoableEdit ${1:edit} = new AbstractUndoableEdit($2);"},
		{"trigger": "I-AbstractUnmarshallerImpl\tinit", "contents": "AbstractUnmarshallerImpl ${1:impl} = new AbstractUnmarshallerImpl($2);"},
		{"trigger": "I-AbstractValidatingLambdaMetafactory\tinit", "contents": "AbstractValidatingLambdaMetafactory ${1:metafactory} = new AbstractValidatingLambdaMetafactory($2);"},
		{"trigger": "I-AbstractView\tinit", "contents": "AbstractView ${1:view} = new AbstractView($2);"},
		{"trigger": "I-AbstractWriter\tinit", "contents": "AbstractWriter ${1:writer} = new AbstractWriter($2);"},
		{"trigger": "I-AbstractXMLDocumentParser\tinit", "contents": "AbstractXMLDocumentParser ${1:parser} = new AbstractXMLDocumentParser($2);"},
		{"trigger": "I-AbstractXMLSchema\tinit", "contents": "AbstractXMLSchema ${1:schema} = new AbstractXMLSchema($2);"},
		{"trigger": "I-AcceleratedScreen\tinit", "contents": "AcceleratedScreen ${1:screen} = new AcceleratedScreen($2);"},
		{"trigger": "I-AcceptPendingException\tinit", "contents": "AcceptPendingException ${1:exception} = new AcceptPendingException($2);"},
		{"trigger": "I-AccessControlContext\tinit", "contents": "AccessControlContext ${1:context} = new AccessControlContext($2);"},
		{"trigger": "I-AccessControlException\tinit", "contents": "AccessControlException ${1:exception} = new AccessControlException($2);"},
		{"trigger": "I-AccessController\tinit", "contents": "AccessController ${1:controller} = new AccessController($2);"},
		{"trigger": "I-AccessDeniedException\tinit", "contents": "AccessDeniedException ${1:exception} = new AccessDeniedException($2);"},
		{"trigger": "I-AccessException\tinit", "contents": "AccessException ${1:exception} = new AccessException($2);"},
		{"trigger": "I-AccessFlags\tinit", "contents": "AccessFlags ${1:flags} = new AccessFlags($2);"},
		{"trigger": "I-AccessHelper\tinit", "contents": "AccessHelper ${1:helper} = new AccessHelper($2);"},
		{"trigger": "I-AccessMode\tinit", "contents": "AccessMode ${1:mode} = new AccessMode($2);"},
		{"trigger": "I-Accessible\tinit", "contents": "Accessible ${1:accessible} = new Accessible($2);"},
		{"trigger": "I-AccessibleAction\tinit", "contents": "AccessibleAction ${1:action} = new AccessibleAction($2);"},
		{"trigger": "I-AccessibleAttribute\tinit", "contents": "AccessibleAttribute ${1:attribute} = new AccessibleAttribute($2);"},
		{"trigger": "I-AccessibleAttributeSequence\tinit", "contents": "AccessibleAttributeSequence ${1:sequence} = new AccessibleAttributeSequence($2);"},
		{"trigger": "I-AccessibleBundle\tinit", "contents": "AccessibleBundle ${1:bundle} = new AccessibleBundle($2);"},
		{"trigger": "I-AccessibleComponent\tinit", "contents": "AccessibleComponent ${1:component} = new AccessibleComponent($2);"},
		{"trigger": "I-AccessibleContext\tinit", "contents": "AccessibleContext ${1:context} = new AccessibleContext($2);"},
		{"trigger": "I-AccessibleEditableText\tinit", "contents": "AccessibleEditableText ${1:text} = new AccessibleEditableText($2);"},
		{"trigger": "I-AccessibleExtendedComponent\tinit", "contents": "AccessibleExtendedComponent ${1:component} = new AccessibleExtendedComponent($2);"},
		{"trigger": "I-AccessibleExtendedTable\tinit", "contents": "AccessibleExtendedTable ${1:table} = new AccessibleExtendedTable($2);"},
		{"trigger": "I-AccessibleExtendedText\tinit", "contents": "AccessibleExtendedText ${1:text} = new AccessibleExtendedText($2);"},
		{"trigger": "I-AccessibleHTML\tinit", "contents": "AccessibleHTML ${1:accessiblehtml} = new AccessibleHTML($2);"},
		{"trigger": "I-AccessibleHyperlink\tinit", "contents": "AccessibleHyperlink ${1:hyperlink} = new AccessibleHyperlink($2);"},
		{"trigger": "I-AccessibleHypertext\tinit", "contents": "AccessibleHypertext ${1:hypertext} = new AccessibleHypertext($2);"},
		{"trigger": "I-AccessibleIcon\tinit", "contents": "AccessibleIcon ${1:icon} = new AccessibleIcon($2);"},
		{"trigger": "I-AccessibleKeyBinding\tinit", "contents": "AccessibleKeyBinding ${1:binding} = new AccessibleKeyBinding($2);"},
		{"trigger": "I-AccessibleObject\tinit", "contents": "AccessibleObject ${1:object} = new AccessibleObject($2);"},
		{"trigger": "I-AccessibleRelation\tinit", "contents": "AccessibleRelation ${1:relation} = new AccessibleRelation($2);"},
		{"trigger": "I-AccessibleRelationSet\tinit", "contents": "AccessibleRelationSet ${1:set} = new AccessibleRelationSet($2);"},
		{"trigger": "I-AccessibleResourceBundle\tinit", "contents": "AccessibleResourceBundle ${1:bundle} = new AccessibleResourceBundle($2);"},
		{"trigger": "I-AccessibleRole\tinit", "contents": "AccessibleRole ${1:role} = new AccessibleRole($2);"},
		{"trigger": "I-AccessibleSelection\tinit", "contents": "AccessibleSelection ${1:selection} = new AccessibleSelection($2);"},
		{"trigger": "I-AccessibleState\tinit", "contents": "AccessibleState ${1:state} = new AccessibleState($2);"},
		{"trigger": "I-AccessibleStateSet\tinit", "contents": "AccessibleStateSet ${1:set} = new AccessibleStateSet($2);"},
		{"trigger": "I-AccessibleStreamable\tinit", "contents": "AccessibleStreamable ${1:streamable} = new AccessibleStreamable($2);"},
		{"trigger": "I-AccessibleTable\tinit", "contents": "AccessibleTable ${1:table} = new AccessibleTable($2);"},
		{"trigger": "I-AccessibleTableModelChange\tinit", "contents": "AccessibleTableModelChange ${1:change} = new AccessibleTableModelChange($2);"},
		{"trigger": "I-AccessibleText\tinit", "contents": "AccessibleText ${1:text} = new AccessibleText($2);"},
		{"trigger": "I-AccessibleTextSequence\tinit", "contents": "AccessibleTextSequence ${1:sequence} = new AccessibleTextSequence($2);"},
		{"trigger": "I-AccessibleValue\tinit", "contents": "AccessibleValue ${1:value} = new AccessibleValue($2);"},
		{"trigger": "I-Accessor\tinit", "contents": "Accessor ${1:accessor} = new Accessor($2);"},
		{"trigger": "I-Accordion\tinit", "contents": "Accordion ${1:accordion} = new Accordion($2);"},
		{"trigger": "I-AccordionBehavior\tinit", "contents": "AccordionBehavior ${1:behavior} = new AccordionBehavior($2);"},
		{"trigger": "I-AccordionBuilder\tinit", "contents": "AccordionBuilder ${1:builder} = new AccordionBuilder($2);"},
		{"trigger": "I-AccordionSkin\tinit", "contents": "AccordionSkin ${1:skin} = new AccordionSkin($2);"},
		{"trigger": "I-AccountException\tinit", "contents": "AccountException ${1:exception} = new AccountException($2);"},
		{"trigger": "I-AccountExpiredException\tinit", "contents": "AccountExpiredException ${1:exception} = new AccountExpiredException($2);"},
		{"trigger": "I-AccountLockedException\tinit", "contents": "AccountLockedException ${1:exception} = new AccountLockedException($2);"},
		{"trigger": "I-AccountNotFoundException\tinit", "contents": "AccountNotFoundException ${1:exception} = new AccountNotFoundException($2);"},
		{"trigger": "I-Acl\tinit", "contents": "Acl ${1:acl} = new Acl($2);"},
		{"trigger": "I-AclEntry\tinit", "contents": "AclEntry ${1:entry} = new AclEntry($2);"},
		{"trigger": "I-AclEntryFlag\tinit", "contents": "AclEntryFlag ${1:flag} = new AclEntryFlag($2);"},
		{"trigger": "I-AclEntryImpl\tinit", "contents": "AclEntryImpl ${1:impl} = new AclEntryImpl($2);"},
		{"trigger": "I-AclEntryPermission\tinit", "contents": "AclEntryPermission ${1:permission} = new AclEntryPermission($2);"},
		{"trigger": "I-AclEntryType\tinit", "contents": "AclEntryType ${1:type} = new AclEntryType($2);"},
		{"trigger": "I-AclFileAttributeView\tinit", "contents": "AclFileAttributeView ${1:view} = new AclFileAttributeView($2);"},
		{"trigger": "I-AclImpl\tinit", "contents": "AclImpl ${1:impl} = new AclImpl($2);"},
		{"trigger": "I-AclNotFoundException\tinit", "contents": "AclNotFoundException ${1:exception} = new AclNotFoundException($2);"},
		{"trigger": "I-AcmChecker\tinit", "contents": "AcmChecker ${1:checker} = new AcmChecker($2);"},
		{"trigger": "I-Action\tinit", "contents": "Action ${1:action} = new Action($2);"},
		{"trigger": "I-ActionBase\tinit", "contents": "ActionBase ${1:base} = new ActionBase($2);"},
		{"trigger": "I-ActionEvent\tinit", "contents": "ActionEvent ${1:event} = new ActionEvent($2);"},
		{"trigger": "I-ActionListener\tinit", "contents": "ActionListener ${1:listener} = new ActionListener($2);"},
		{"trigger": "I-ActionMap\tinit", "contents": "ActionMap ${1:map} = new ActionMap($2);"},
		{"trigger": "I-ActionMapUIResource\tinit", "contents": "ActionMapUIResource ${1:resource} = new ActionMapUIResource($2);"},
		{"trigger": "I-ActionPropertyChangeListener\tinit", "contents": "ActionPropertyChangeListener ${1:listener} = new ActionPropertyChangeListener($2);"},
		{"trigger": "I-Activatable\tinit", "contents": "Activatable ${1:activatable} = new Activatable($2);"},
		{"trigger": "I-ActivateFailedException\tinit", "contents": "ActivateFailedException ${1:exception} = new ActivateFailedException($2);"},
		{"trigger": "I-ActivationDesc\tinit", "contents": "ActivationDesc ${1:desc} = new ActivationDesc($2);"},
		{"trigger": "I-ActivationException\tinit", "contents": "ActivationException ${1:exception} = new ActivationException($2);"},
		{"trigger": "I-ActivationGroup\tinit", "contents": "ActivationGroup ${1:group} = new ActivationGroup($2);"},
		{"trigger": "I-ActivationGroupDesc\tinit", "contents": "ActivationGroupDesc ${1:desc} = new ActivationGroupDesc($2);"},
		{"trigger": "I-ActivationGroupID\tinit", "contents": "ActivationGroupID ${1:activationgroupid} = new ActivationGroupID($2);"},
		{"trigger": "I-ActivationID\tinit", "contents": "ActivationID ${1:activationid} = new ActivationID($2);"},
		{"trigger": "I-ActivationInstantiator\tinit", "contents": "ActivationInstantiator ${1:instantiator} = new ActivationInstantiator($2);"},
		{"trigger": "I-ActivationMonitor\tinit", "contents": "ActivationMonitor ${1:monitor} = new ActivationMonitor($2);"},
		{"trigger": "I-ActivationSystem\tinit", "contents": "ActivationSystem ${1:system} = new ActivationSystem($2);"},
		{"trigger": "I-Activator\tinit", "contents": "Activator ${1:activator} = new Activator($2);"},
		{"trigger": "I-ActivatorHelper\tinit", "contents": "ActivatorHelper ${1:helper} = new ActivatorHelper($2);"},
		{"trigger": "I-ActivatorHolder\tinit", "contents": "ActivatorHolder ${1:holder} = new ActivatorHolder($2);"},
		{"trigger": "I-ActivatorOperations\tinit", "contents": "ActivatorOperations ${1:operations} = new ActivatorOperations($2);"},
		{"trigger": "I-ActiveEvent\tinit", "contents": "ActiveEvent ${1:event} = new ActiveEvent($2);"},
		{"trigger": "I-Activity\tinit", "contents": "Activity ${1:activity} = new Activity($2);"},
		{"trigger": "I-AdapterActivator\tinit", "contents": "AdapterActivator ${1:activator} = new AdapterActivator($2);"},
		{"trigger": "I-AdapterActivatorOperations\tinit", "contents": "AdapterActivatorOperations ${1:operations} = new AdapterActivatorOperations($2);"},
		{"trigger": "I-AdapterAlreadyExists\tinit", "contents": "AdapterAlreadyExists ${1:exists} = new AdapterAlreadyExists($2);"},
		{"trigger": "I-AdapterAlreadyExistsHelper\tinit", "contents": "AdapterAlreadyExistsHelper ${1:helper} = new AdapterAlreadyExistsHelper($2);"},
		{"trigger": "I-AdapterInactive\tinit", "contents": "AdapterInactive ${1:inactive} = new AdapterInactive($2);"},
		{"trigger": "I-AdapterInactiveHelper\tinit", "contents": "AdapterInactiveHelper ${1:helper} = new AdapterInactiveHelper($2);"},
		{"trigger": "I-AdapterManagerIdHelper\tinit", "contents": "AdapterManagerIdHelper ${1:helper} = new AdapterManagerIdHelper($2);"},
		{"trigger": "I-AdapterNameHelper\tinit", "contents": "AdapterNameHelper ${1:helper} = new AdapterNameHelper($2);"},
		{"trigger": "I-AdapterNonExistent\tinit", "contents": "AdapterNonExistent ${1:existent} = new AdapterNonExistent($2);"},
		{"trigger": "I-AdapterNonExistentHelper\tinit", "contents": "AdapterNonExistentHelper ${1:helper} = new AdapterNonExistentHelper($2);"},
		{"trigger": "I-AdapterStateHelper\tinit", "contents": "AdapterStateHelper ${1:helper} = new AdapterStateHelper($2);"},
		{"trigger": "I-AdaptiveResultTreeImpl\tinit", "contents": "AdaptiveResultTreeImpl ${1:impl} = new AdaptiveResultTreeImpl($2);"},
		{"trigger": "I-AddressHelper\tinit", "contents": "AddressHelper ${1:helper} = new AddressHelper($2);"},
		{"trigger": "I-Addressing\tinit", "contents": "Addressing ${1:addressing} = new Addressing($2);"},
		{"trigger": "I-AddressingFeature\tinit", "contents": "AddressingFeature ${1:feature} = new AddressingFeature($2);"},
		{"trigger": "I-Adjustable\tinit", "contents": "Adjustable ${1:adjustable} = new Adjustable($2);"},
		{"trigger": "I-AdjustmentEvent\tinit", "contents": "AdjustmentEvent ${1:event} = new AdjustmentEvent($2);"},
		{"trigger": "I-AdjustmentListener\tinit", "contents": "AdjustmentListener ${1:listener} = new AdjustmentListener($2);"},
		{"trigger": "I-AdobeMarkerSegment\tinit", "contents": "AdobeMarkerSegment ${1:segment} = new AdobeMarkerSegment($2);"},
		{"trigger": "I-Affine\tinit", "contents": "Affine ${1:affine} = new Affine($2);"},
		{"trigger": "I-Affine2D\tinit", "contents": "Affine2D ${1:affine2d} = new Affine2D($2);"},
		{"trigger": "I-Affine3D\tinit", "contents": "Affine3D ${1:affine3d} = new Affine3D($2);"},
		{"trigger": "I-AffineBase\tinit", "contents": "AffineBase ${1:base} = new AffineBase($2);"},
		{"trigger": "I-AffineBuilder\tinit", "contents": "AffineBuilder ${1:builder} = new AffineBuilder($2);"},
		{"trigger": "I-AffineTransform\tinit", "contents": "AffineTransform ${1:transform} = new AffineTransform($2);"},
		{"trigger": "I-AffineTransformOp\tinit", "contents": "AffineTransformOp ${1:op} = new AffineTransformOp($2);"},
		{"trigger": "I-AgreementMethod\tinit", "contents": "AgreementMethod ${1:method} = new AgreementMethod($2);"},
		{"trigger": "I-Alert\tinit", "contents": "Alert ${1:alert} = new Alert($2);"},
		{"trigger": "I-Algorithm\tinit", "contents": "Algorithm ${1:algorithm} = new Algorithm($2);"},
		{"trigger": "I-AlgorithmAlreadyRegisteredException\tinit", "contents": "AlgorithmAlreadyRegisteredException ${1:exception} = new AlgorithmAlreadyRegisteredException($2);"},
		{"trigger": "I-AlgorithmConstraints\tinit", "contents": "AlgorithmConstraints ${1:constraints} = new AlgorithmConstraints($2);"},
		{"trigger": "I-AlgorithmMethod\tinit", "contents": "AlgorithmMethod ${1:method} = new AlgorithmMethod($2);"},
		{"trigger": "I-AlgorithmParameterGenerator\tinit", "contents": "AlgorithmParameterGenerator ${1:generator} = new AlgorithmParameterGenerator($2);"},
		{"trigger": "I-AlgorithmParameterGeneratorSpi\tinit", "contents": "AlgorithmParameterGeneratorSpi ${1:spi} = new AlgorithmParameterGeneratorSpi($2);"},
		{"trigger": "I-AlgorithmParameterSpec\tinit", "contents": "AlgorithmParameterSpec ${1:spec} = new AlgorithmParameterSpec($2);"},
		{"trigger": "I-AlgorithmParameters\tinit", "contents": "AlgorithmParameters ${1:parameters} = new AlgorithmParameters($2);"},
		{"trigger": "I-AlgorithmParametersSpi\tinit", "contents": "AlgorithmParametersSpi ${1:spi} = new AlgorithmParametersSpi($2);"},
		{"trigger": "I-AllPermission\tinit", "contents": "AllPermission ${1:permission} = new AllPermission($2);"},
		{"trigger": "I-AllocationInstruction\tinit", "contents": "AllocationInstruction ${1:instruction} = new AllocationInstruction($2);"},
		{"trigger": "I-AlphaComposite\tinit", "contents": "AlphaComposite ${1:composite} = new AlphaComposite($2);"},
		{"trigger": "I-AlphaConsumer\tinit", "contents": "AlphaConsumer ${1:consumer} = new AlphaConsumer($2);"},
		{"trigger": "I-AlphaType\tinit", "contents": "AlphaType ${1:type} = new AlphaType($2);"},
		{"trigger": "I-AlreadyBound\tinit", "contents": "AlreadyBound ${1:bound} = new AlreadyBound($2);"},
		{"trigger": "I-AlreadyBoundException\tinit", "contents": "AlreadyBoundException ${1:exception} = new AlreadyBoundException($2);"},
		{"trigger": "I-AlreadyBoundHelper\tinit", "contents": "AlreadyBoundHelper ${1:helper} = new AlreadyBoundHelper($2);"},
		{"trigger": "I-AlreadyBoundHolder\tinit", "contents": "AlreadyBoundHolder ${1:holder} = new AlreadyBoundHolder($2);"},
		{"trigger": "I-AlreadyConnectedException\tinit", "contents": "AlreadyConnectedException ${1:exception} = new AlreadyConnectedException($2);"},
		{"trigger": "I-AlternateIIOPAddressComponent\tinit", "contents": "AlternateIIOPAddressComponent ${1:component} = new AlternateIIOPAddressComponent($2);"},
		{"trigger": "I-AlternativePattern\tinit", "contents": "AlternativePattern ${1:pattern} = new AlternativePattern($2);"},
		{"trigger": "I-AmbientLight\tinit", "contents": "AmbientLight ${1:light} = new AmbientLight($2);"},
		{"trigger": "I-AncestorEvent\tinit", "contents": "AncestorEvent ${1:event} = new AncestorEvent($2);"},
		{"trigger": "I-AncestorListener\tinit", "contents": "AncestorListener ${1:listener} = new AncestorListener($2);"},
		{"trigger": "I-AncestorNotifier\tinit", "contents": "AncestorNotifier ${1:notifier} = new AncestorNotifier($2);"},
		{"trigger": "I-AncestorPattern\tinit", "contents": "AncestorPattern ${1:pattern} = new AncestorPattern($2);"},
		{"trigger": "I-AnchorPane\tinit", "contents": "AnchorPane ${1:pane} = new AnchorPane($2);"},
		{"trigger": "I-AnchorPaneBuilder\tinit", "contents": "AnchorPaneBuilder ${1:builder} = new AnchorPaneBuilder($2);"},
		{"trigger": "I-And\tinit", "contents": "And ${1:and} = new And($2);"},
		{"trigger": "I-AndQueryExp\tinit", "contents": "AndQueryExp ${1:exp} = new AndQueryExp($2);"},
		{"trigger": "I-AndroidFontFinder\tinit", "contents": "AndroidFontFinder ${1:finder} = new AndroidFontFinder($2);"},
		{"trigger": "I-AndroidPlatform\tinit", "contents": "AndroidPlatform ${1:platform} = new AndroidPlatform($2);"},
		{"trigger": "I-AndroidPlatformFactory\tinit", "contents": "AndroidPlatformFactory ${1:factory} = new AndroidPlatformFactory($2);"},
		{"trigger": "I-Animation\tinit", "contents": "Animation ${1:animation} = new Animation($2);"},
		{"trigger": "I-AnimationAccessor\tinit", "contents": "AnimationAccessor ${1:accessor} = new AnimationAccessor($2);"},
		{"trigger": "I-AnimationAccessorImpl\tinit", "contents": "AnimationAccessorImpl ${1:impl} = new AnimationAccessorImpl($2);"},
		{"trigger": "I-AnimationBuilder\tinit", "contents": "AnimationBuilder ${1:builder} = new AnimationBuilder($2);"},
		{"trigger": "I-AnimationController\tinit", "contents": "AnimationController ${1:controller} = new AnimationController($2);"},
		{"trigger": "I-AnimationPulse\tinit", "contents": "AnimationPulse ${1:pulse} = new AnimationPulse($2);"},
		{"trigger": "I-AnimationPulseMBean\tinit", "contents": "AnimationPulseMBean ${1:bean} = new AnimationPulseMBean($2);"},
		{"trigger": "I-AnimationTimer\tinit", "contents": "AnimationTimer ${1:timer} = new AnimationTimer($2);"},
		{"trigger": "I-AnnotatedArrayType\tinit", "contents": "AnnotatedArrayType ${1:type} = new AnnotatedArrayType($2);"},
		{"trigger": "I-AnnotatedConstruct\tinit", "contents": "AnnotatedConstruct ${1:construct} = new AnnotatedConstruct($2);"},
		{"trigger": "I-AnnotatedElement\tinit", "contents": "AnnotatedElement ${1:element} = new AnnotatedElement($2);"},
		{"trigger": "I-AnnotatedParameterizedType\tinit", "contents": "AnnotatedParameterizedType ${1:type} = new AnnotatedParameterizedType($2);"},
		{"trigger": "I-AnnotatedType\tinit", "contents": "AnnotatedType ${1:type} = new AnnotatedType($2);"},
		{"trigger": "I-AnnotatedTypeTree\tinit", "contents": "AnnotatedTypeTree ${1:tree} = new AnnotatedTypeTree($2);"},
		{"trigger": "I-AnnotatedTypeVariable\tinit", "contents": "AnnotatedTypeVariable ${1:variable} = new AnnotatedTypeVariable($2);"},
		{"trigger": "I-AnnotatedWildcardType\tinit", "contents": "AnnotatedWildcardType ${1:type} = new AnnotatedWildcardType($2);"},
		{"trigger": "I-Annotation\tinit", "contents": "Annotation ${1:annotation} = new Annotation($2);"},
		{"trigger": "I-AnnotationDesc\tinit", "contents": "AnnotationDesc ${1:desc} = new AnnotationDesc($2);"},
		{"trigger": "I-AnnotationFormatError\tinit", "contents": "AnnotationFormatError ${1:error} = new AnnotationFormatError($2);"},
		{"trigger": "I-AnnotationMirror\tinit", "contents": "AnnotationMirror ${1:mirror} = new AnnotationMirror($2);"},
		{"trigger": "I-AnnotationTree\tinit", "contents": "AnnotationTree ${1:tree} = new AnnotationTree($2);"},
		{"trigger": "I-AnnotationTypeDoc\tinit", "contents": "AnnotationTypeDoc ${1:doc} = new AnnotationTypeDoc($2);"},
		{"trigger": "I-AnnotationTypeElementDoc\tinit", "contents": "AnnotationTypeElementDoc ${1:doc} = new AnnotationTypeElementDoc($2);"},
		{"trigger": "I-AnnotationTypeMismatchException\tinit", "contents": "AnnotationTypeMismatchException ${1:exception} = new AnnotationTypeMismatchException($2);"},
		{"trigger": "I-AnnotationValue\tinit", "contents": "AnnotationValue ${1:value} = new AnnotationValue($2);"},
		{"trigger": "I-AnnotationValueVisitor\tinit", "contents": "AnnotationValueVisitor ${1:visitor} = new AnnotationValueVisitor($2);"},
		{"trigger": "I-Any\tinit", "contents": "Any ${1:any} = new Any($2);"},
		{"trigger": "I-AnyAtomicDV\tinit", "contents": "AnyAtomicDV ${1:anyatomicdv} = new AnyAtomicDV($2);"},
		{"trigger": "I-AnyHolder\tinit", "contents": "AnyHolder ${1:holder} = new AnyHolder($2);"},
		{"trigger": "I-AnyNodeCounter\tinit", "contents": "AnyNodeCounter ${1:counter} = new AnyNodeCounter($2);"},
		{"trigger": "I-AnySeqHelper\tinit", "contents": "AnySeqHelper ${1:helper} = new AnySeqHelper($2);"},
		{"trigger": "I-AnySeqHolder\tinit", "contents": "AnySeqHolder ${1:holder} = new AnySeqHolder($2);"},
		{"trigger": "I-AnySimpleDV\tinit", "contents": "AnySimpleDV ${1:anysimpledv} = new AnySimpleDV($2);"},
		{"trigger": "I-AnyURIDV\tinit", "contents": "AnyURIDV ${1:anyuridv} = new AnyURIDV($2);"},
		{"trigger": "I-AppConfigurationEntry\tinit", "contents": "AppConfigurationEntry ${1:entry} = new AppConfigurationEntry($2);"},
		{"trigger": "I-Appendable\tinit", "contents": "Appendable ${1:appendable} = new Appendable($2);"},
		{"trigger": "I-Applet\tinit", "contents": "Applet ${1:applet} = new Applet($2);"},
		{"trigger": "I-AppletContext\tinit", "contents": "AppletContext ${1:context} = new AppletContext($2);"},
		{"trigger": "I-AppletInitializer\tinit", "contents": "AppletInitializer ${1:initializer} = new AppletInitializer($2);"},
		{"trigger": "I-AppletStub\tinit", "contents": "AppletStub ${1:stub} = new AppletStub($2);"},
		{"trigger": "I-AppletWindow\tinit", "contents": "AppletWindow ${1:window} = new AppletWindow($2);"},
		{"trigger": "I-Application\tinit", "contents": "Application ${1:application} = new Application($2);"},
		{"trigger": "I-ApplicationException\tinit", "contents": "ApplicationException ${1:exception} = new ApplicationException($2);"},
		{"trigger": "I-ApplicationShutdownHooks\tinit", "contents": "ApplicationShutdownHooks ${1:hooks} = new ApplicationShutdownHooks($2);"},
		{"trigger": "I-ApplyImports\tinit", "contents": "ApplyImports ${1:imports} = new ApplyImports($2);"},
		{"trigger": "I-ApplyTemplates\tinit", "contents": "ApplyTemplates ${1:templates} = new ApplyTemplates($2);"},
		{"trigger": "I-Arc\tinit", "contents": "Arc ${1:arc} = new Arc($2);"},
		{"trigger": "I-Arc2D\tinit", "contents": "Arc2D ${1:arc2d} = new Arc2D($2);"},
		{"trigger": "I-ArcBuilder\tinit", "contents": "ArcBuilder ${1:builder} = new ArcBuilder($2);"},
		{"trigger": "I-ArcIterator\tinit", "contents": "ArcIterator ${1:iterator} = new ArcIterator($2);"},
		{"trigger": "I-ArcTo\tinit", "contents": "ArcTo ${1:to} = new ArcTo($2);"},
		{"trigger": "I-ArcToBuilder\tinit", "contents": "ArcToBuilder ${1:builder} = new ArcToBuilder($2);"},
		{"trigger": "I-ArcType\tinit", "contents": "ArcType ${1:type} = new ArcType($2);"},
		{"trigger": "I-Area\tinit", "contents": "Area ${1:area} = new Area($2);"},
		{"trigger": "I-AreaAveragingScaleFilter\tinit", "contents": "AreaAveragingScaleFilter ${1:filter} = new AreaAveragingScaleFilter($2);"},
		{"trigger": "I-AreaChart\tinit", "contents": "AreaChart ${1:chart} = new AreaChart($2);"},
		{"trigger": "I-AreaChartBuilder\tinit", "contents": "AreaChartBuilder ${1:builder} = new AreaChartBuilder($2);"},
		{"trigger": "I-AreaOp\tinit", "contents": "AreaOp ${1:op} = new AreaOp($2);"},
		{"trigger": "I-Arg\tinit", "contents": "Arg ${1:arg} = new Arg($2);"},
		{"trigger": "I-ArgumentList\tinit", "contents": "ArgumentList ${1:list} = new ArgumentList($2);"},
		{"trigger": "I-ArithmeticException\tinit", "contents": "ArithmeticException ${1:exception} = new ArithmeticException($2);"},
		{"trigger": "I-ArithmeticInstruction\tinit", "contents": "ArithmeticInstruction ${1:instruction} = new ArithmeticInstruction($2);"},
		{"trigger": "I-Array\tinit", "contents": "${1:String}[] array = new $1[${2:size}];"},
		{"trigger": "I-ArrayAccessTree\tinit", "contents": "ArrayAccessTree ${1:tree} = new ArrayAccessTree($2);"},
		{"trigger": "I-ArrayBlockingQueue\tinit", "contents": "ArrayBlockingQueue ${1:queue} = new ArrayBlockingQueue($2);"},
		{"trigger": "I-ArrayChangeListener\tinit", "contents": "ArrayChangeListener ${1:listener} = new ArrayChangeListener($2);"},
		{"trigger": "I-ArrayDeque\tinit", "contents": "ArrayDeque ${1:deque} = new ArrayDeque($2);"},
		{"trigger": "I-ArrayIndexOutOfBoundsException\tinit", "contents": "ArrayIndexOutOfBoundsException ${1:exception} = new ArrayIndexOutOfBoundsException($2);"},
		{"trigger": "I-ArrayInstruction\tinit", "contents": "ArrayInstruction ${1:instruction} = new ArrayInstruction($2);"},
		{"trigger": "I-ArrayList\tinit", "contents": "ArrayList<${1:String}> ${2:list} = new ArrayList<>();"},
		{"trigger": "I-ArrayListenerHelper\tinit", "contents": "ArrayListenerHelper ${1:helper} = new ArrayListenerHelper($2);"},
		{"trigger": "I-ArrayNodeListIterator\tinit", "contents": "ArrayNodeListIterator ${1:iterator} = new ArrayNodeListIterator($2);"},
		{"trigger": "I-ArrayNotificationBuffer\tinit", "contents": "ArrayNotificationBuffer ${1:buffer} = new ArrayNotificationBuffer($2);"},
		{"trigger": "I-ArrayPrefixHelpers\tinit", "contents": "ArrayPrefixHelpers ${1:helpers} = new ArrayPrefixHelpers($2);"},
		{"trigger": "I-ArrayQueue\tinit", "contents": "ArrayQueue ${1:queue} = new ArrayQueue($2);"},
		{"trigger": "I-ArrayStoreException\tinit", "contents": "ArrayStoreException ${1:exception} = new ArrayStoreException($2);"},
		{"trigger": "I-ArrayTable\tinit", "contents": "ArrayTable ${1:table} = new ArrayTable($2);"},
		{"trigger": "I-ArrayType\tinit", "contents": "ArrayType ${1:type} = new ArrayType($2);"},
		{"trigger": "I-ArrayTypeTree\tinit", "contents": "ArrayTypeTree ${1:tree} = new ArrayTypeTree($2);"},
		{"trigger": "I-Arrays\tinit", "contents": "Arrays ${1:arrays} = new Arrays($2);"},
		{"trigger": "I-ArraysParallelSortHelpers\tinit", "contents": "ArraysParallelSortHelpers ${1:helpers} = new ArraysParallelSortHelpers($2);"},
		{"trigger": "I-ArrowButtonPainter\tinit", "contents": "ArrowButtonPainter ${1:painter} = new ArrowButtonPainter($2);"},
		{"trigger": "I-AssertTree\tinit", "contents": "AssertTree ${1:tree} = new AssertTree($2);"},
		{"trigger": "I-AssertionError\tinit", "contents": "AssertionError ${1:error} = new AssertionError($2);"},
		{"trigger": "I-AssertionStatusDirectives\tinit", "contents": "AssertionStatusDirectives ${1:directives} = new AssertionStatusDirectives($2);"},
		{"trigger": "I-AssignPointIDTouchFilter\tinit", "contents": "AssignPointIDTouchFilter ${1:filter} = new AssignPointIDTouchFilter($2);"},
		{"trigger": "I-AssignmentTree\tinit", "contents": "AssignmentTree ${1:tree} = new AssignmentTree($2);"},
		{"trigger": "I-AsyncBoxView\tinit", "contents": "AsyncBoxView ${1:view} = new AsyncBoxView($2);"},
		{"trigger": "I-AsyncHandler\tinit", "contents": "AsyncHandler ${1:handler} = new AsyncHandler($2);"},
		{"trigger": "I-AsyncOperation\tinit", "contents": "AsyncOperation ${1:operation} = new AsyncOperation($2);"},
		{"trigger": "I-AsyncOperationListener\tinit", "contents": "AsyncOperationListener ${1:listener} = new AsyncOperationListener($2);"},
		{"trigger": "I-AsynchronousByteChannel\tinit", "contents": "AsynchronousByteChannel ${1:channel} = new AsynchronousByteChannel($2);"},
		{"trigger": "I-AsynchronousChannel\tinit", "contents": "AsynchronousChannel ${1:channel} = new AsynchronousChannel($2);"},
		{"trigger": "I-AsynchronousChannelGroup\tinit", "contents": "AsynchronousChannelGroup ${1:group} = new AsynchronousChannelGroup($2);"},
		{"trigger": "I-AsynchronousChannelProvider\tinit", "contents": "AsynchronousChannelProvider ${1:provider} = new AsynchronousChannelProvider($2);"},
		{"trigger": "I-AsynchronousCloseException\tinit", "contents": "AsynchronousCloseException ${1:exception} = new AsynchronousCloseException($2);"},
		{"trigger": "I-AsynchronousFileChannel\tinit", "contents": "AsynchronousFileChannel ${1:channel} = new AsynchronousFileChannel($2);"},
		{"trigger": "I-AsynchronousServerSocketChannel\tinit", "contents": "AsynchronousServerSocketChannel ${1:channel} = new AsynchronousServerSocketChannel($2);"},
		{"trigger": "I-AsynchronousSocketChannel\tinit", "contents": "AsynchronousSocketChannel ${1:channel} = new AsynchronousSocketChannel($2);"},
		{"trigger": "I-AtomicBoolean\tinit", "contents": "AtomicBoolean ${1:boolean} = new AtomicBoolean($2);"},
		{"trigger": "I-AtomicInteger\tinit", "contents": "AtomicInteger ${1:integer} = new AtomicInteger($2);"},
		{"trigger": "I-AtomicIntegerArray\tinit", "contents": "AtomicIntegerArray ${1:array} = new AtomicIntegerArray($2);"},
		{"trigger": "I-AtomicIntegerFieldUpdater\tinit", "contents": "AtomicIntegerFieldUpdater ${1:updater} = new AtomicIntegerFieldUpdater($2);"},
		{"trigger": "I-AtomicLong\tinit", "contents": "AtomicLong ${1:long} = new AtomicLong($2);"},
		{"trigger": "I-AtomicLongArray\tinit", "contents": "AtomicLongArray ${1:array} = new AtomicLongArray($2);"},
		{"trigger": "I-AtomicLongFieldUpdater\tinit", "contents": "AtomicLongFieldUpdater ${1:updater} = new AtomicLongFieldUpdater($2);"},
		{"trigger": "I-AtomicMarkableReference\tinit", "contents": "AtomicMarkableReference ${1:reference} = new AtomicMarkableReference($2);"},
		{"trigger": "I-AtomicMoveNotSupportedException\tinit", "contents": "AtomicMoveNotSupportedException ${1:exception} = new AtomicMoveNotSupportedException($2);"},
		{"trigger": "I-AtomicReference\tinit", "contents": "AtomicReference ${1:reference} = new AtomicReference($2);"},
		{"trigger": "I-AtomicReferenceArray\tinit", "contents": "AtomicReferenceArray ${1:array} = new AtomicReferenceArray($2);"},
		{"trigger": "I-AtomicReferenceFieldUpdater\tinit", "contents": "AtomicReferenceFieldUpdater ${1:updater} = new AtomicReferenceFieldUpdater($2);"},
		{"trigger": "I-AtomicStampedReference\tinit", "contents": "AtomicStampedReference ${1:reference} = new AtomicStampedReference($2);"},
		{"trigger": "I-AttList\tinit", "contents": "AttList ${1:list} = new AttList($2);"},
		{"trigger": "I-AttachmentMarshaller\tinit", "contents": "AttachmentMarshaller ${1:marshaller} = new AttachmentMarshaller($2);"},
		{"trigger": "I-AttachmentPart\tinit", "contents": "AttachmentPart ${1:part} = new AttachmentPart($2);"},
		{"trigger": "I-AttachmentUnmarshaller\tinit", "contents": "AttachmentUnmarshaller ${1:unmarshaller} = new AttachmentUnmarshaller($2);"},
		{"trigger": "I-Attr\tinit", "contents": "Attr ${1:attr} = new Attr($2);"},
		{"trigger": "I-AttrCompare\tinit", "contents": "AttrCompare ${1:compare} = new AttrCompare($2);"},
		{"trigger": "I-AttrImpl\tinit", "contents": "AttrImpl ${1:impl} = new AttrImpl($2);"},
		{"trigger": "I-AttrNSImpl\tinit", "contents": "AttrNSImpl ${1:impl} = new AttrNSImpl($2);"},
		{"trigger": "I-Attribute\tinit", "contents": "Attribute ${1:attribute} = new Attribute($2);"},
		{"trigger": "I-AttributeChangeNotification\tinit", "contents": "AttributeChangeNotification ${1:notification} = new AttributeChangeNotification($2);"},
		{"trigger": "I-AttributeChangeNotificationFilter\tinit", "contents": "AttributeChangeNotificationFilter ${1:filter} = new AttributeChangeNotificationFilter($2);"},
		{"trigger": "I-AttributeException\tinit", "contents": "AttributeException ${1:exception} = new AttributeException($2);"},
		{"trigger": "I-AttributeHTML\tinit", "contents": "AttributeHTML ${1:attributehtml} = new AttributeHTML($2);"},
		{"trigger": "I-AttributeInUseException\tinit", "contents": "AttributeInUseException ${1:exception} = new AttributeInUseException($2);"},
		{"trigger": "I-AttributeIterator\tinit", "contents": "AttributeIterator ${1:iterator} = new AttributeIterator($2);"},
		{"trigger": "I-AttributeList\tinit", "contents": "AttributeList ${1:list} = new AttributeList($2);"},
		{"trigger": "I-AttributeListImpl\tinit", "contents": "AttributeListImpl ${1:impl} = new AttributeListImpl($2);"},
		{"trigger": "I-AttributeMap\tinit", "contents": "AttributeMap ${1:map} = new AttributeMap($2);"},
		{"trigger": "I-AttributeModificationException\tinit", "contents": "AttributeModificationException ${1:exception} = new AttributeModificationException($2);"},
		{"trigger": "I-AttributeNotFoundException\tinit", "contents": "AttributeNotFoundException ${1:exception} = new AttributeNotFoundException($2);"},
		{"trigger": "I-AttributePSVI\tinit", "contents": "AttributePSVI ${1:attributepsvi} = new AttributePSVI($2);"},
		{"trigger": "I-AttributePSVImpl\tinit", "contents": "AttributePSVImpl ${1:impl} = new AttributePSVImpl($2);"},
		{"trigger": "I-AttributeReader\tinit", "contents": "AttributeReader ${1:reader} = new AttributeReader($2);"},
		{"trigger": "I-AttributeSet\tinit", "contents": "AttributeSet ${1:set} = new AttributeSet($2);"},
		{"trigger": "I-AttributeSetMethodGenerator\tinit", "contents": "AttributeSetMethodGenerator ${1:generator} = new AttributeSetMethodGenerator($2);"},
		{"trigger": "I-AttributeSetUtilities\tinit", "contents": "AttributeSetUtilities ${1:utilities} = new AttributeSetUtilities($2);"},
		{"trigger": "I-AttributeTree\tinit", "contents": "AttributeTree ${1:tree} = new AttributeTree($2);"},
		{"trigger": "I-AttributeValue\tinit", "contents": "AttributeValue ${1:value} = new AttributeValue($2);"},
		{"trigger": "I-AttributeValueExp\tinit", "contents": "AttributeValueExp ${1:exp} = new AttributeValueExp($2);"},
		{"trigger": "I-AttributeValueTemplate\tinit", "contents": "AttributeValueTemplate ${1:template} = new AttributeValueTemplate($2);"},
		{"trigger": "I-AttributeView\tinit", "contents": "AttributeView ${1:view} = new AttributeView($2);"},
		{"trigger": "I-AttributedCharacterIterator\tinit", "contents": "AttributedCharacterIterator ${1:iterator} = new AttributedCharacterIterator($2);"},
		{"trigger": "I-AttributedString\tinit", "contents": "AttributedString ${1:string} = new AttributedString($2);"},
		{"trigger": "I-Attributes\tinit", "contents": "Attributes ${1:attributes} = new Attributes($2);"},
		{"trigger": "I-Attributes2Impl\tinit", "contents": "Attributes2Impl ${1:impl} = new Attributes2Impl($2);"},
		{"trigger": "I-AttributesImpl\tinit", "contents": "AttributesImpl ${1:impl} = new AttributesImpl($2);"},
		{"trigger": "I-AttributesImplSerializer\tinit", "contents": "AttributesImplSerializer ${1:serializer} = new AttributesImplSerializer($2);"},
		{"trigger": "I-AttributesProxy\tinit", "contents": "AttributesProxy ${1:proxy} = new AttributesProxy($2);"},
		{"trigger": "I-AudioClip\tinit", "contents": "AudioClip ${1:clip} = new AudioClip($2);"},
		{"trigger": "I-AudioClipBuilder\tinit", "contents": "AudioClipBuilder ${1:builder} = new AudioClipBuilder($2);"},
		{"trigger": "I-AudioClipProvider\tinit", "contents": "AudioClipProvider ${1:provider} = new AudioClipProvider($2);"},
		{"trigger": "I-AudioEqualizer\tinit", "contents": "AudioEqualizer ${1:equalizer} = new AudioEqualizer($2);"},
		{"trigger": "I-AudioFileFormat\tinit", "contents": "AudioFileFormat ${1:format} = new AudioFileFormat($2);"},
		{"trigger": "I-AudioFileReader\tinit", "contents": "AudioFileReader ${1:reader} = new AudioFileReader($2);"},
		{"trigger": "I-AudioFileWriter\tinit", "contents": "AudioFileWriter ${1:writer} = new AudioFileWriter($2);"},
		{"trigger": "I-AudioFormat\tinit", "contents": "AudioFormat ${1:format} = new AudioFormat($2);"},
		{"trigger": "I-AudioInputStream\tinit", "contents": "AudioInputStream ${1:stream} = new AudioInputStream($2);"},
		{"trigger": "I-AudioPermission\tinit", "contents": "AudioPermission ${1:permission} = new AudioPermission($2);"},
		{"trigger": "I-AudioSpectrum\tinit", "contents": "AudioSpectrum ${1:spectrum} = new AudioSpectrum($2);"},
		{"trigger": "I-AudioSpectrumEvent\tinit", "contents": "AudioSpectrumEvent ${1:event} = new AudioSpectrumEvent($2);"},
		{"trigger": "I-AudioSpectrumListener\tinit", "contents": "AudioSpectrumListener ${1:listener} = new AudioSpectrumListener($2);"},
		{"trigger": "I-AudioSystem\tinit", "contents": "AudioSystem ${1:system} = new AudioSystem($2);"},
		{"trigger": "I-AudioTrack\tinit", "contents": "AudioTrack ${1:track} = new AudioTrack($2);"},
		{"trigger": "I-Augmentations\tinit", "contents": "Augmentations ${1:augmentations} = new Augmentations($2);"},
		{"trigger": "I-AugmentationsImpl\tinit", "contents": "AugmentationsImpl ${1:impl} = new AugmentationsImpl($2);"},
		{"trigger": "I-AuthPermission\tinit", "contents": "AuthPermission ${1:permission} = new AuthPermission($2);"},
		{"trigger": "I-AuthProvider\tinit", "contents": "AuthProvider ${1:provider} = new AuthProvider($2);"},
		{"trigger": "I-AuthenticationException\tinit", "contents": "AuthenticationException ${1:exception} = new AuthenticationException($2);"},
		{"trigger": "I-AuthenticationNotSupportedException\tinit", "contents": "AuthenticationNotSupportedException ${1:exception} = new AuthenticationNotSupportedException($2);"},
		{"trigger": "I-Authenticator\tinit", "contents": "Authenticator ${1:authenticator} = new Authenticator($2);"},
		{"trigger": "I-AuthorTree\tinit", "contents": "AuthorTree ${1:tree} = new AuthorTree($2);"},
		{"trigger": "I-AuthorizationDataEntry\tinit", "contents": "AuthorizationDataEntry ${1:entry} = new AuthorizationDataEntry($2);"},
		{"trigger": "I-AuthorizeCallback\tinit", "contents": "AuthorizeCallback ${1:callback} = new AuthorizeCallback($2);"},
		{"trigger": "I-AutoCloseable\tinit", "contents": "AutoCloseable ${1:closeable} = new AutoCloseable($2);"},
		{"trigger": "I-Autoscroll\tinit", "contents": "Autoscroll ${1:autoscroll} = new Autoscroll($2);"},
		{"trigger": "I-Autoscroller\tinit", "contents": "Autoscroller ${1:autoscroller} = new Autoscroller($2);"},
		{"trigger": "I-AxesWalker\tinit", "contents": "AxesWalker ${1:walker} = new AxesWalker($2);"},
		{"trigger": "I-Axis\tinit", "contents": "Axis ${1:axis} = new Axis($2);"},
		{"trigger": "I-AxisBuilder\tinit", "contents": "AxisBuilder ${1:builder} = new AxisBuilder($2);"},
		{"trigger": "I-BAD_CONTEXT\tinit", "contents": "BAD_CONTEXT ${1:bad} = new BAD_CONTEXT($2);"},
		{"trigger": "I-BAD_INV_ORDER\tinit", "contents": "BAD_INV_ORDER ${1:bad} = new BAD_INV_ORDER($2);"},
		{"trigger": "I-BAD_OPERATION\tinit", "contents": "BAD_OPERATION ${1:bad} = new BAD_OPERATION($2);"},
		{"trigger": "I-BAD_PARAM\tinit", "contents": "BAD_PARAM ${1:bad} = new BAD_PARAM($2);"},
		{"trigger": "I-BAD_POLICY\tinit", "contents": "BAD_POLICY ${1:bad} = new BAD_POLICY($2);"},
		{"trigger": "I-BAD_POLICY_TYPE\tinit", "contents": "BAD_POLICY_TYPE ${1:bad} = new BAD_POLICY_TYPE($2);"},
		{"trigger": "I-BAD_POLICY_VALUE\tinit", "contents": "BAD_POLICY_VALUE ${1:bad} = new BAD_POLICY_VALUE($2);"},
		{"trigger": "I-BAD_QOS\tinit", "contents": "BAD_QOS ${1:bad} = new BAD_QOS($2);"},
		{"trigger": "I-BAD_TYPECODE\tinit", "contents": "BAD_TYPECODE ${1:bad} = new BAD_TYPECODE($2);"},
		{"trigger": "I-BALOAD\tinit", "contents": "BALOAD ${1:baload} = new BALOAD($2);"},
		{"trigger": "I-BASTORE\tinit", "contents": "BASTORE ${1:bastore} = new BASTORE($2);"},
		{"trigger": "I-BCELFactory\tinit", "contents": "BCELFactory ${1:factory} = new BCELFactory($2);"},
		{"trigger": "I-BCELifier\tinit", "contents": "BCELifier ${1:lifier} = new BCELifier($2);"},
		{"trigger": "I-BIPUSH\tinit", "contents": "BIPUSH ${1:bipush} = new BIPUSH($2);"},
		{"trigger": "I-BMPCompressionTypes\tinit", "contents": "BMPCompressionTypes ${1:types} = new BMPCompressionTypes($2);"},
		{"trigger": "I-BMPConstants\tinit", "contents": "BMPConstants ${1:constants} = new BMPConstants($2);"},
		{"trigger": "I-BMPImageLoaderFactory\tinit", "contents": "BMPImageLoaderFactory ${1:factory} = new BMPImageLoaderFactory($2);"},
		{"trigger": "I-BMPImageReader\tinit", "contents": "BMPImageReader ${1:reader} = new BMPImageReader($2);"},
		{"trigger": "I-BMPImageReaderSpi\tinit", "contents": "BMPImageReaderSpi ${1:spi} = new BMPImageReaderSpi($2);"},
		{"trigger": "I-BMPImageWriteParam\tinit", "contents": "BMPImageWriteParam ${1:param} = new BMPImageWriteParam($2);"},
		{"trigger": "I-BMPImageWriter\tinit", "contents": "BMPImageWriter ${1:writer} = new BMPImageWriter($2);"},
		{"trigger": "I-BMPImageWriterSpi\tinit", "contents": "BMPImageWriterSpi ${1:spi} = new BMPImageWriterSpi($2);"},
		{"trigger": "I-BMPMetadata\tinit", "contents": "BMPMetadata ${1:metadata} = new BMPMetadata($2);"},
		{"trigger": "I-BMPMetadataFormat\tinit", "contents": "BMPMetadataFormat ${1:format} = new BMPMetadataFormat($2);"},
		{"trigger": "I-BMPMetadataFormatResources\tinit", "contents": "BMPMetadataFormatResources ${1:resources} = new BMPMetadataFormatResources($2);"},
		{"trigger": "I-BMPattern\tinit", "contents": "BMPattern ${1:pattern} = new BMPattern($2);"},
		{"trigger": "I-BREAKPOINT\tinit", "contents": "BREAKPOINT ${1:breakpoint} = new BREAKPOINT($2);"},
		{"trigger": "I-BRView\tinit", "contents": "BRView ${1:view} = new BRView($2);"},
		{"trigger": "I-BackForwardList\tinit", "contents": "BackForwardList ${1:list} = new BackForwardList($2);"},
		{"trigger": "I-Background\tinit", "contents": "Background ${1:background} = new Background($2);"},
		{"trigger": "I-BackgroundConverter\tinit", "contents": "BackgroundConverter ${1:converter} = new BackgroundConverter($2);"},
		{"trigger": "I-BackgroundExecutor\tinit", "contents": "BackgroundExecutor ${1:executor} = new BackgroundExecutor($2);"},
		{"trigger": "I-BackgroundFill\tinit", "contents": "BackgroundFill ${1:fill} = new BackgroundFill($2);"},
		{"trigger": "I-BackgroundImage\tinit", "contents": "BackgroundImage ${1:image} = new BackgroundImage($2);"},
		{"trigger": "I-BackgroundPosition\tinit", "contents": "BackgroundPosition ${1:position} = new BackgroundPosition($2);"},
		{"trigger": "I-BackgroundPositionConverter\tinit", "contents": "BackgroundPositionConverter ${1:converter} = new BackgroundPositionConverter($2);"},
		{"trigger": "I-BackgroundRepeat\tinit", "contents": "BackgroundRepeat ${1:repeat} = new BackgroundRepeat($2);"},
		{"trigger": "I-BackgroundSize\tinit", "contents": "BackgroundSize ${1:size} = new BackgroundSize($2);"},
		{"trigger": "I-BackgroundSizeConverter\tinit", "contents": "BackgroundSizeConverter ${1:converter} = new BackgroundSizeConverter($2);"},
		{"trigger": "I-BackingStoreException\tinit", "contents": "BackingStoreException ${1:exception} = new BackingStoreException($2);"},
		{"trigger": "I-BadAttributeValueExpException\tinit", "contents": "BadAttributeValueExpException ${1:exception} = new BadAttributeValueExpException($2);"},
		{"trigger": "I-BadBinaryOpValueExpException\tinit", "contents": "BadBinaryOpValueExpException ${1:exception} = new BadBinaryOpValueExpException($2);"},
		{"trigger": "I-BadKind\tinit", "contents": "BadKind ${1:kind} = new BadKind($2);"},
		{"trigger": "I-BadLocationException\tinit", "contents": "BadLocationException ${1:exception} = new BadLocationException($2);"},
		{"trigger": "I-BadServerDefinition\tinit", "contents": "BadServerDefinition ${1:definition} = new BadServerDefinition($2);"},
		{"trigger": "I-BadServerDefinitionHelper\tinit", "contents": "BadServerDefinitionHelper ${1:helper} = new BadServerDefinitionHelper($2);"},
		{"trigger": "I-BadServerDefinitionHolder\tinit", "contents": "BadServerDefinitionHolder ${1:holder} = new BadServerDefinitionHolder($2);"},
		{"trigger": "I-BadStringOperationException\tinit", "contents": "BadStringOperationException ${1:exception} = new BadStringOperationException($2);"},
		{"trigger": "I-BalancedDTDGrammar\tinit", "contents": "BalancedDTDGrammar ${1:grammar} = new BalancedDTDGrammar($2);"},
		{"trigger": "I-BandCombineOp\tinit", "contents": "BandCombineOp ${1:op} = new BandCombineOp($2);"},
		{"trigger": "I-BandedSampleModel\tinit", "contents": "BandedSampleModel ${1:model} = new BandedSampleModel($2);"},
		{"trigger": "I-BarChart\tinit", "contents": "BarChart ${1:chart} = new BarChart($2);"},
		{"trigger": "I-BarChartBuilder\tinit", "contents": "BarChartBuilder ${1:builder} = new BarChartBuilder($2);"},
		{"trigger": "I-Base64BinaryDV\tinit", "contents": "Base64BinaryDV ${1:base64binarydv} = new Base64BinaryDV($2);"},
		{"trigger": "I-Base64DecodingException\tinit", "contents": "Base64DecodingException ${1:exception} = new Base64DecodingException($2);"},
		{"trigger": "I-BaseBounds\tinit", "contents": "BaseBounds ${1:bounds} = new BaseBounds($2);"},
		{"trigger": "I-BaseByteToByteConverter\tinit", "contents": "BaseByteToByteConverter ${1:converter} = new BaseByteToByteConverter($2);"},
		{"trigger": "I-BaseByteToIntConverter\tinit", "contents": "BaseByteToIntConverter ${1:converter} = new BaseByteToIntConverter($2);"},
		{"trigger": "I-BaseContext\tinit", "contents": "BaseContext ${1:context} = new BaseContext($2);"},
		{"trigger": "I-BaseDVFactory\tinit", "contents": "BaseDVFactory ${1:factory} = new BaseDVFactory($2);"},
		{"trigger": "I-BaseFXRobot\tinit", "contents": "BaseFXRobot ${1:robot} = new BaseFXRobot($2);"},
		{"trigger": "I-BaseGraphics\tinit", "contents": "BaseGraphics ${1:graphics} = new BaseGraphics($2);"},
		{"trigger": "I-BaseGraphicsResource\tinit", "contents": "BaseGraphicsResource ${1:resource} = new BaseGraphicsResource($2);"},
		{"trigger": "I-BaseIntToByteConverter\tinit", "contents": "BaseIntToByteConverter ${1:converter} = new BaseIntToByteConverter($2);"},
		{"trigger": "I-BaseIntToIntConverter\tinit", "contents": "BaseIntToIntConverter ${1:converter} = new BaseIntToIntConverter($2);"},
		{"trigger": "I-BaseMarkupSerializer\tinit", "contents": "BaseMarkupSerializer ${1:serializer} = new BaseMarkupSerializer($2);"},
		{"trigger": "I-BaseMesh\tinit", "contents": "BaseMesh ${1:mesh} = new BaseMesh($2);"},
		{"trigger": "I-BaseMeshView\tinit", "contents": "BaseMeshView ${1:view} = new BaseMeshView($2);"},
		{"trigger": "I-BaseResourceFactory\tinit", "contents": "BaseResourceFactory ${1:factory} = new BaseResourceFactory($2);"},
		{"trigger": "I-BaseResourcePool\tinit", "contents": "BaseResourcePool ${1:pool} = new BaseResourcePool($2);"},
		{"trigger": "I-BaseRowSet\tinit", "contents": "BaseRowSet ${1:set} = new BaseRowSet($2);"},
		{"trigger": "I-BaseSchemaDVFactory\tinit", "contents": "BaseSchemaDVFactory ${1:factory} = new BaseSchemaDVFactory($2);"},
		{"trigger": "I-BaseShaderContext\tinit", "contents": "BaseShaderContext ${1:context} = new BaseShaderContext($2);"},
		{"trigger": "I-BaseShaderFactory\tinit", "contents": "BaseShaderFactory ${1:factory} = new BaseShaderFactory($2);"},
		{"trigger": "I-BaseShaderGraphics\tinit", "contents": "BaseShaderGraphics ${1:graphics} = new BaseShaderGraphics($2);"},
		{"trigger": "I-BaseStream\tinit", "contents": "BaseStream ${1:stream} = new BaseStream($2);"},
		{"trigger": "I-BaseTexture\tinit", "contents": "BaseTexture ${1:texture} = new BaseTexture($2);"},
		{"trigger": "I-BaseTransform\tinit", "contents": "BaseTransform ${1:transform} = new BaseTransform($2);"},
		{"trigger": "I-BasicArrowButton\tinit", "contents": "BasicArrowButton ${1:button} = new BasicArrowButton($2);"},
		{"trigger": "I-BasicAttribute\tinit", "contents": "BasicAttribute ${1:attribute} = new BasicAttribute($2);"},
		{"trigger": "I-BasicAttributes\tinit", "contents": "BasicAttributes ${1:attributes} = new BasicAttributes($2);"},
		{"trigger": "I-BasicBorders\tinit", "contents": "BasicBorders ${1:borders} = new BasicBorders($2);"},
		{"trigger": "I-BasicButtonListener\tinit", "contents": "BasicButtonListener ${1:listener} = new BasicButtonListener($2);"},
		{"trigger": "I-BasicButtonUI\tinit", "contents": "BasicButtonUI ${1:basicbuttonui} = new BasicButtonUI($2);"},
		{"trigger": "I-BasicCheckBoxMenuItemUI\tinit", "contents": "BasicCheckBoxMenuItemUI ${1:basiccheckboxmenuitemui} = new BasicCheckBoxMenuItemUI($2);"},
		{"trigger": "I-BasicCheckBoxUI\tinit", "contents": "BasicCheckBoxUI ${1:basiccheckboxui} = new BasicCheckBoxUI($2);"},
		{"trigger": "I-BasicColorChooserUI\tinit", "contents": "BasicColorChooserUI ${1:basiccolorchooserui} = new BasicColorChooserUI($2);"},
		{"trigger": "I-BasicComboBoxEditor\tinit", "contents": "BasicComboBoxEditor ${1:editor} = new BasicComboBoxEditor($2);"},
		{"trigger": "I-BasicComboBoxRenderer\tinit", "contents": "BasicComboBoxRenderer ${1:renderer} = new BasicComboBoxRenderer($2);"},
		{"trigger": "I-BasicComboBoxUI\tinit", "contents": "BasicComboBoxUI ${1:basiccomboboxui} = new BasicComboBoxUI($2);"},
		{"trigger": "I-BasicComboPopup\tinit", "contents": "BasicComboPopup ${1:popup} = new BasicComboPopup($2);"},
		{"trigger": "I-BasicControl\tinit", "contents": "BasicControl ${1:control} = new BasicControl($2);"},
		{"trigger": "I-BasicDesktopIconUI\tinit", "contents": "BasicDesktopIconUI ${1:basicdesktopiconui} = new BasicDesktopIconUI($2);"},
		{"trigger": "I-BasicDesktopPaneUI\tinit", "contents": "BasicDesktopPaneUI ${1:basicdesktoppaneui} = new BasicDesktopPaneUI($2);"},
		{"trigger": "I-BasicDirectoryModel\tinit", "contents": "BasicDirectoryModel ${1:model} = new BasicDirectoryModel($2);"},
		{"trigger": "I-BasicEditorPaneUI\tinit", "contents": "BasicEditorPaneUI ${1:basiceditorpaneui} = new BasicEditorPaneUI($2);"},
		{"trigger": "I-BasicEllipseRep\tinit", "contents": "BasicEllipseRep ${1:rep} = new BasicEllipseRep($2);"},
		{"trigger": "I-BasicEventDispatcher\tinit", "contents": "BasicEventDispatcher ${1:dispatcher} = new BasicEventDispatcher($2);"},
		{"trigger": "I-BasicFileAttributeView\tinit", "contents": "BasicFileAttributeView ${1:view} = new BasicFileAttributeView($2);"},
		{"trigger": "I-BasicFileAttributes\tinit", "contents": "BasicFileAttributes ${1:attributes} = new BasicFileAttributes($2);"},
		{"trigger": "I-BasicFileChooserUI\tinit", "contents": "BasicFileChooserUI ${1:basicfilechooserui} = new BasicFileChooserUI($2);"},
		{"trigger": "I-BasicFormattedTextFieldUI\tinit", "contents": "BasicFormattedTextFieldUI ${1:basicformattedtextfieldui} = new BasicFormattedTextFieldUI($2);"},
		{"trigger": "I-BasicGraphicsUtils\tinit", "contents": "BasicGraphicsUtils ${1:utils} = new BasicGraphicsUtils($2);"},
		{"trigger": "I-BasicHTML\tinit", "contents": "BasicHTML ${1:basichtml} = new BasicHTML($2);"},
		{"trigger": "I-BasicIconFactory\tinit", "contents": "BasicIconFactory ${1:factory} = new BasicIconFactory($2);"},
		{"trigger": "I-BasicInternalFrameTitlePane\tinit", "contents": "BasicInternalFrameTitlePane ${1:pane} = new BasicInternalFrameTitlePane($2);"},
		{"trigger": "I-BasicInternalFrameUI\tinit", "contents": "BasicInternalFrameUI ${1:basicinternalframeui} = new BasicInternalFrameUI($2);"},
		{"trigger": "I-BasicLabelUI\tinit", "contents": "BasicLabelUI ${1:basiclabelui} = new BasicLabelUI($2);"},
		{"trigger": "I-BasicListUI\tinit", "contents": "BasicListUI ${1:basiclistui} = new BasicListUI($2);"},
		{"trigger": "I-BasicLookAndFeel\tinit", "contents": "BasicLookAndFeel ${1:feel} = new BasicLookAndFeel($2);"},
		{"trigger": "I-BasicMenuBarUI\tinit", "contents": "BasicMenuBarUI ${1:basicmenubarui} = new BasicMenuBarUI($2);"},
		{"trigger": "I-BasicMenuItemUI\tinit", "contents": "BasicMenuItemUI ${1:basicmenuitemui} = new BasicMenuItemUI($2);"},
		{"trigger": "I-BasicMenuUI\tinit", "contents": "BasicMenuUI ${1:basicmenuui} = new BasicMenuUI($2);"},
		{"trigger": "I-BasicOptionPaneUI\tinit", "contents": "BasicOptionPaneUI ${1:basicoptionpaneui} = new BasicOptionPaneUI($2);"},
		{"trigger": "I-BasicPanelUI\tinit", "contents": "BasicPanelUI ${1:basicpanelui} = new BasicPanelUI($2);"},
		{"trigger": "I-BasicParserConfiguration\tinit", "contents": "BasicParserConfiguration ${1:configuration} = new BasicParserConfiguration($2);"},
		{"trigger": "I-BasicPasswordFieldUI\tinit", "contents": "BasicPasswordFieldUI ${1:basicpasswordfieldui} = new BasicPasswordFieldUI($2);"},
		{"trigger": "I-BasicPermission\tinit", "contents": "BasicPermission ${1:permission} = new BasicPermission($2);"},
		{"trigger": "I-BasicPopupMenuSeparatorUI\tinit", "contents": "BasicPopupMenuSeparatorUI ${1:basicpopupmenuseparatorui} = new BasicPopupMenuSeparatorUI($2);"},
		{"trigger": "I-BasicPopupMenuUI\tinit", "contents": "BasicPopupMenuUI ${1:basicpopupmenuui} = new BasicPopupMenuUI($2);"},
		{"trigger": "I-BasicProgressBarUI\tinit", "contents": "BasicProgressBarUI ${1:basicprogressbarui} = new BasicProgressBarUI($2);"},
		{"trigger": "I-BasicRadioButtonMenuItemUI\tinit", "contents": "BasicRadioButtonMenuItemUI ${1:basicradiobuttonmenuitemui} = new BasicRadioButtonMenuItemUI($2);"},
		{"trigger": "I-BasicRadioButtonUI\tinit", "contents": "BasicRadioButtonUI ${1:basicradiobuttonui} = new BasicRadioButtonUI($2);"},
		{"trigger": "I-BasicRootPaneUI\tinit", "contents": "BasicRootPaneUI ${1:basicrootpaneui} = new BasicRootPaneUI($2);"},
		{"trigger": "I-BasicRoundRectRep\tinit", "contents": "BasicRoundRectRep ${1:rep} = new BasicRoundRectRep($2);"},
		{"trigger": "I-BasicScrollBarUI\tinit", "contents": "BasicScrollBarUI ${1:basicscrollbarui} = new BasicScrollBarUI($2);"},
		{"trigger": "I-BasicScrollPaneUI\tinit", "contents": "BasicScrollPaneUI ${1:basicscrollpaneui} = new BasicScrollPaneUI($2);"},
		{"trigger": "I-BasicSeparatorUI\tinit", "contents": "BasicSeparatorUI ${1:basicseparatorui} = new BasicSeparatorUI($2);"},
		{"trigger": "I-BasicShapeRep\tinit", "contents": "BasicShapeRep ${1:rep} = new BasicShapeRep($2);"},
		{"trigger": "I-BasicSliderUI\tinit", "contents": "BasicSliderUI ${1:basicsliderui} = new BasicSliderUI($2);"},
		{"trigger": "I-BasicSpinnerUI\tinit", "contents": "BasicSpinnerUI ${1:basicspinnerui} = new BasicSpinnerUI($2);"},
		{"trigger": "I-BasicSplitPaneDivider\tinit", "contents": "BasicSplitPaneDivider ${1:divider} = new BasicSplitPaneDivider($2);"},
		{"trigger": "I-BasicSplitPaneUI\tinit", "contents": "BasicSplitPaneUI ${1:basicsplitpaneui} = new BasicSplitPaneUI($2);"},
		{"trigger": "I-BasicStroke\tinit", "contents": "BasicStroke ${1:stroke} = new BasicStroke($2);"},
		{"trigger": "I-BasicTabbedPaneUI\tinit", "contents": "BasicTabbedPaneUI ${1:basictabbedpaneui} = new BasicTabbedPaneUI($2);"},
		{"trigger": "I-BasicTableHeaderUI\tinit", "contents": "BasicTableHeaderUI ${1:basictableheaderui} = new BasicTableHeaderUI($2);"},
		{"trigger": "I-BasicTableUI\tinit", "contents": "BasicTableUI ${1:basictableui} = new BasicTableUI($2);"},
		{"trigger": "I-BasicTestIterator\tinit", "contents": "BasicTestIterator ${1:iterator} = new BasicTestIterator($2);"},
		{"trigger": "I-BasicTextAreaUI\tinit", "contents": "BasicTextAreaUI ${1:basictextareaui} = new BasicTextAreaUI($2);"},
		{"trigger": "I-BasicTextFieldUI\tinit", "contents": "BasicTextFieldUI ${1:basictextfieldui} = new BasicTextFieldUI($2);"},
		{"trigger": "I-BasicTextPaneUI\tinit", "contents": "BasicTextPaneUI ${1:basictextpaneui} = new BasicTextPaneUI($2);"},
		{"trigger": "I-BasicTextUI\tinit", "contents": "BasicTextUI ${1:basictextui} = new BasicTextUI($2);"},
		{"trigger": "I-BasicToggleButtonUI\tinit", "contents": "BasicToggleButtonUI ${1:basictogglebuttonui} = new BasicToggleButtonUI($2);"},
		{"trigger": "I-BasicToolBarSeparatorUI\tinit", "contents": "BasicToolBarSeparatorUI ${1:basictoolbarseparatorui} = new BasicToolBarSeparatorUI($2);"},
		{"trigger": "I-BasicToolBarUI\tinit", "contents": "BasicToolBarUI ${1:basictoolbarui} = new BasicToolBarUI($2);"},
		{"trigger": "I-BasicToolTipUI\tinit", "contents": "BasicToolTipUI ${1:basictooltipui} = new BasicToolTipUI($2);"},
		{"trigger": "I-BasicTransferable\tinit", "contents": "BasicTransferable ${1:transferable} = new BasicTransferable($2);"},
		{"trigger": "I-BasicTreeUI\tinit", "contents": "BasicTreeUI ${1:basictreeui} = new BasicTreeUI($2);"},
		{"trigger": "I-BasicType\tinit", "contents": "BasicType ${1:type} = new BasicType($2);"},
		{"trigger": "I-BasicViewportUI\tinit", "contents": "BasicViewportUI ${1:basicviewportui} = new BasicViewportUI($2);"},
		{"trigger": "I-BasisLibrary\tinit", "contents": "BasisLibrary ${1:library} = new BasisLibrary($2);"},
		{"trigger": "I-BatchUpdateException\tinit", "contents": "BatchUpdateException ${1:exception} = new BatchUpdateException($2);"},
		{"trigger": "I-BeanAdapter\tinit", "contents": "BeanAdapter ${1:adapter} = new BeanAdapter($2);"},
		{"trigger": "I-BeanContext\tinit", "contents": "BeanContext ${1:context} = new BeanContext($2);"},
		{"trigger": "I-BeanContextChild\tinit", "contents": "BeanContextChild ${1:child} = new BeanContextChild($2);"},
		{"trigger": "I-BeanContextChildComponentProxy\tinit", "contents": "BeanContextChildComponentProxy ${1:proxy} = new BeanContextChildComponentProxy($2);"},
		{"trigger": "I-BeanContextChildSupport\tinit", "contents": "BeanContextChildSupport ${1:support} = new BeanContextChildSupport($2);"},
		{"trigger": "I-BeanContextContainerProxy\tinit", "contents": "BeanContextContainerProxy ${1:proxy} = new BeanContextContainerProxy($2);"},
		{"trigger": "I-BeanContextEvent\tinit", "contents": "BeanContextEvent ${1:event} = new BeanContextEvent($2);"},
		{"trigger": "I-BeanContextMembershipEvent\tinit", "contents": "BeanContextMembershipEvent ${1:event} = new BeanContextMembershipEvent($2);"},
		{"trigger": "I-BeanContextMembershipListener\tinit", "contents": "BeanContextMembershipListener ${1:listener} = new BeanContextMembershipListener($2);"},
		{"trigger": "I-BeanContextProxy\tinit", "contents": "BeanContextProxy ${1:proxy} = new BeanContextProxy($2);"},
		{"trigger": "I-BeanContextServiceAvailableEvent\tinit", "contents": "BeanContextServiceAvailableEvent ${1:event} = new BeanContextServiceAvailableEvent($2);"},
		{"trigger": "I-BeanContextServiceProvider\tinit", "contents": "BeanContextServiceProvider ${1:provider} = new BeanContextServiceProvider($2);"},
		{"trigger": "I-BeanContextServiceProviderBeanInfo\tinit", "contents": "BeanContextServiceProviderBeanInfo ${1:info} = new BeanContextServiceProviderBeanInfo($2);"},
		{"trigger": "I-BeanContextServiceRevokedEvent\tinit", "contents": "BeanContextServiceRevokedEvent ${1:event} = new BeanContextServiceRevokedEvent($2);"},
		{"trigger": "I-BeanContextServiceRevokedListener\tinit", "contents": "BeanContextServiceRevokedListener ${1:listener} = new BeanContextServiceRevokedListener($2);"},
		{"trigger": "I-BeanContextServices\tinit", "contents": "BeanContextServices ${1:services} = new BeanContextServices($2);"},
		{"trigger": "I-BeanContextServicesListener\tinit", "contents": "BeanContextServicesListener ${1:listener} = new BeanContextServicesListener($2);"},
		{"trigger": "I-BeanContextServicesSupport\tinit", "contents": "BeanContextServicesSupport ${1:support} = new BeanContextServicesSupport($2);"},
		{"trigger": "I-BeanContextSupport\tinit", "contents": "BeanContextSupport ${1:support} = new BeanContextSupport($2);"},
		{"trigger": "I-BeanDescriptor\tinit", "contents": "BeanDescriptor ${1:descriptor} = new BeanDescriptor($2);"},
		{"trigger": "I-BeanInfo\tinit", "contents": "BeanInfo ${1:info} = new BeanInfo($2);"},
		{"trigger": "I-Beans\tinit", "contents": "Beans ${1:beans} = new Beans($2);"},
		{"trigger": "I-BehaviorBase\tinit", "contents": "BehaviorBase ${1:base} = new BehaviorBase($2);"},
		{"trigger": "I-BehaviorSkinBase\tinit", "contents": "BehaviorSkinBase ${1:base} = new BehaviorSkinBase($2);"},
		{"trigger": "I-BerDecoder\tinit", "contents": "BerDecoder ${1:decoder} = new BerDecoder($2);"},
		{"trigger": "I-BerEncoder\tinit", "contents": "BerEncoder ${1:encoder} = new BerEncoder($2);"},
		{"trigger": "I-BerException\tinit", "contents": "BerException ${1:exception} = new BerException($2);"},
		{"trigger": "I-BetweenQueryExp\tinit", "contents": "BetweenQueryExp ${1:exp} = new BetweenQueryExp($2);"},
		{"trigger": "I-BevelBorder\tinit", "contents": "BevelBorder ${1:border} = new BevelBorder($2);"},
		{"trigger": "I-BiConsumer\tinit", "contents": "BiConsumer ${1:consumer} = new BiConsumer($2);"},
		{"trigger": "I-BiFunction\tinit", "contents": "BiFunction ${1:function} = new BiFunction($2);"},
		{"trigger": "I-BiPredicate\tinit", "contents": "BiPredicate ${1:predicate} = new BiPredicate($2);"},
		{"trigger": "I-Bidi\tinit", "contents": "Bidi ${1:bidi} = new Bidi($2);"},
		{"trigger": "I-BidirectionalBinding\tinit", "contents": "BidirectionalBinding ${1:binding} = new BidirectionalBinding($2);"},
		{"trigger": "I-BidirectionalContentBinding\tinit", "contents": "BidirectionalContentBinding ${1:binding} = new BidirectionalContentBinding($2);"},
		{"trigger": "I-BigDecimal\tinit", "contents": "BigDecimal ${1:decimal} = new BigDecimal($2);"},
		{"trigger": "I-BigDecimalStringConverter\tinit", "contents": "BigDecimalStringConverter ${1:converter} = new BigDecimalStringConverter($2);"},
		{"trigger": "I-BigInteger\tinit", "contents": "BigInteger ${1:integer} = new BigInteger($2);"},
		{"trigger": "I-BigIntegerStringConverter\tinit", "contents": "BigIntegerStringConverter ${1:converter} = new BigIntegerStringConverter($2);"},
		{"trigger": "I-BinOpExpr\tinit", "contents": "BinOpExpr ${1:expr} = new BinOpExpr($2);"},
		{"trigger": "I-BinaryExpression\tinit", "contents": "BinaryExpression ${1:expression} = new BinaryExpression($2);"},
		{"trigger": "I-BinaryOpValueExp\tinit", "contents": "BinaryOpValueExp ${1:exp} = new BinaryOpValueExp($2);"},
		{"trigger": "I-BinaryOperator\tinit", "contents": "BinaryOperator ${1:operator} = new BinaryOperator($2);"},
		{"trigger": "I-BinaryRefAddr\tinit", "contents": "BinaryRefAddr ${1:addr} = new BinaryRefAddr($2);"},
		{"trigger": "I-BinaryRelQueryExp\tinit", "contents": "BinaryRelQueryExp ${1:exp} = new BinaryRelQueryExp($2);"},
		{"trigger": "I-BinaryTree\tinit", "contents": "BinaryTree ${1:tree} = new BinaryTree($2);"},
		{"trigger": "I-BindException\tinit", "contents": "BindException ${1:exception} = new BindException($2);"},
		{"trigger": "I-Binder\tinit", "contents": "Binder ${1:binder} = new Binder($2);"},
		{"trigger": "I-Binding\tinit", "contents": "Binding ${1:binding} = new Binding($2);"},
		{"trigger": "I-BindingHelper\tinit", "contents": "BindingHelper ${1:helper} = new BindingHelper($2);"},
		{"trigger": "I-BindingHelperObserver\tinit", "contents": "BindingHelperObserver ${1:observer} = new BindingHelperObserver($2);"},
		{"trigger": "I-BindingHolder\tinit", "contents": "BindingHolder ${1:holder} = new BindingHolder($2);"},
		{"trigger": "I-BindingIterator\tinit", "contents": "BindingIterator ${1:iterator} = new BindingIterator($2);"},
		{"trigger": "I-BindingIteratorHelper\tinit", "contents": "BindingIteratorHelper ${1:helper} = new BindingIteratorHelper($2);"},
		{"trigger": "I-BindingIteratorHolder\tinit", "contents": "BindingIteratorHolder ${1:holder} = new BindingIteratorHolder($2);"},
		{"trigger": "I-BindingIteratorOperations\tinit", "contents": "BindingIteratorOperations ${1:operations} = new BindingIteratorOperations($2);"},
		{"trigger": "I-BindingIteratorPOA\tinit", "contents": "BindingIteratorPOA ${1:bindingiteratorpoa} = new BindingIteratorPOA($2);"},
		{"trigger": "I-BindingListHelper\tinit", "contents": "BindingListHelper ${1:helper} = new BindingListHelper($2);"},
		{"trigger": "I-BindingListHolder\tinit", "contents": "BindingListHolder ${1:holder} = new BindingListHolder($2);"},
		{"trigger": "I-BindingProvider\tinit", "contents": "BindingProvider ${1:provider} = new BindingProvider($2);"},
		{"trigger": "I-BindingType\tinit", "contents": "BindingType ${1:type} = new BindingType($2);"},
		{"trigger": "I-BindingTypeHelper\tinit", "contents": "BindingTypeHelper ${1:helper} = new BindingTypeHelper($2);"},
		{"trigger": "I-BindingTypeHolder\tinit", "contents": "BindingTypeHolder ${1:holder} = new BindingTypeHolder($2);"},
		{"trigger": "I-Bindings\tinit", "contents": "Bindings ${1:bindings} = new Bindings($2);"},
		{"trigger": "I-BitArray\tinit", "contents": "BitArray ${1:array} = new BitArray($2);"},
		{"trigger": "I-BitFile\tinit", "contents": "BitFile ${1:file} = new BitFile($2);"},
		{"trigger": "I-BitSet\tinit", "contents": "BitSet ${1:set} = new BitSet($2);"},
		{"trigger": "I-BitSieve\tinit", "contents": "BitSieve ${1:sieve} = new BitSieve($2);"},
		{"trigger": "I-Bits\tinit", "contents": "Bits ${1:bits} = new Bits($2);"},
		{"trigger": "I-Blend\tinit", "contents": "Blend ${1:blend} = new Blend($2);"},
		{"trigger": "I-BlendBuilder\tinit", "contents": "BlendBuilder ${1:builder} = new BlendBuilder($2);"},
		{"trigger": "I-BlendMode\tinit", "contents": "BlendMode ${1:mode} = new BlendMode($2);"},
		{"trigger": "I-Blob\tinit", "contents": "Blob ${1:blob} = new Blob($2);"},
		{"trigger": "I-BlockTagTree\tinit", "contents": "BlockTagTree ${1:tree} = new BlockTagTree($2);"},
		{"trigger": "I-BlockTree\tinit", "contents": "BlockTree ${1:tree} = new BlockTree($2);"},
		{"trigger": "I-BlockView\tinit", "contents": "BlockView ${1:view} = new BlockView($2);"},
		{"trigger": "I-BlockingDeque\tinit", "contents": "BlockingDeque ${1:deque} = new BlockingDeque($2);"},
		{"trigger": "I-BlockingQueue\tinit", "contents": "BlockingQueue ${1:queue} = new BlockingQueue($2);"},
		{"trigger": "I-Bloom\tinit", "contents": "Bloom ${1:bloom} = new Bloom($2);"},
		{"trigger": "I-BloomBuilder\tinit", "contents": "BloomBuilder ${1:builder} = new BloomBuilder($2);"},
		{"trigger": "I-BlurType\tinit", "contents": "BlurType ${1:type} = new BlurType($2);"},
		{"trigger": "I-BogusColorSpace\tinit", "contents": "BogusColorSpace ${1:space} = new BogusColorSpace($2);"},
		{"trigger": "I-Book\tinit", "contents": "Book ${1:book} = new Book($2);"},
		{"trigger": "I-Bool\tinit", "contents": "Bool ${1:bool} = new Bool($2);"},
		{"trigger": "I-BoolStack\tinit", "contents": "BoolStack ${1:stack} = new BoolStack($2);"},
		{"trigger": "I-Boolean\tinit", "contents": "Boolean ${1:boolean} = new Boolean($2);"},
		{"trigger": "I-BooleanBinding\tinit", "contents": "BooleanBinding ${1:binding} = new BooleanBinding($2);"},
		{"trigger": "I-BooleanCall\tinit", "contents": "BooleanCall ${1:call} = new BooleanCall($2);"},
		{"trigger": "I-BooleanControl\tinit", "contents": "BooleanControl ${1:control} = new BooleanControl($2);"},
		{"trigger": "I-BooleanConverter\tinit", "contents": "BooleanConverter ${1:converter} = new BooleanConverter($2);"},
		{"trigger": "I-BooleanDV\tinit", "contents": "BooleanDV ${1:booleandv} = new BooleanDV($2);"},
		{"trigger": "I-BooleanExpr\tinit", "contents": "BooleanExpr ${1:expr} = new BooleanExpr($2);"},
		{"trigger": "I-BooleanExpression\tinit", "contents": "BooleanExpression ${1:expression} = new BooleanExpression($2);"},
		{"trigger": "I-BooleanHolder\tinit", "contents": "BooleanHolder ${1:holder} = new BooleanHolder($2);"},
		{"trigger": "I-BooleanProperty\tinit", "contents": "BooleanProperty ${1:property} = new BooleanProperty($2);"},
		{"trigger": "I-BooleanPropertyBase\tinit", "contents": "BooleanPropertyBase ${1:base} = new BooleanPropertyBase($2);"},
		{"trigger": "I-BooleanSeqHelper\tinit", "contents": "BooleanSeqHelper ${1:helper} = new BooleanSeqHelper($2);"},
		{"trigger": "I-BooleanSeqHolder\tinit", "contents": "BooleanSeqHolder ${1:holder} = new BooleanSeqHolder($2);"},
		{"trigger": "I-BooleanStringConverter\tinit", "contents": "BooleanStringConverter ${1:converter} = new BooleanStringConverter($2);"},
		{"trigger": "I-BooleanSupplier\tinit", "contents": "BooleanSupplier ${1:supplier} = new BooleanSupplier($2);"},
		{"trigger": "I-BooleanType\tinit", "contents": "BooleanType ${1:type} = new BooleanType($2);"},
		{"trigger": "I-BooleanValueExp\tinit", "contents": "BooleanValueExp ${1:exp} = new BooleanValueExp($2);"},
		{"trigger": "I-BootstrapMethodError\tinit", "contents": "BootstrapMethodError ${1:error} = new BootstrapMethodError($2);"},
		{"trigger": "I-BootstrapResolver\tinit", "contents": "BootstrapResolver ${1:resolver} = new BootstrapResolver($2);"},
		{"trigger": "I-Border\tinit", "contents": "Border ${1:border} = new Border($2);"},
		{"trigger": "I-BorderConverter\tinit", "contents": "BorderConverter ${1:converter} = new BorderConverter($2);"},
		{"trigger": "I-BorderFactory\tinit", "contents": "BorderFactory ${1:factory} = new BorderFactory($2);"},
		{"trigger": "I-BorderImage\tinit", "contents": "BorderImage ${1:image} = new BorderImage($2);"},
		{"trigger": "I-BorderImageSliceConverter\tinit", "contents": "BorderImageSliceConverter ${1:converter} = new BorderImageSliceConverter($2);"},
		{"trigger": "I-BorderImageSlices\tinit", "contents": "BorderImageSlices ${1:slices} = new BorderImageSlices($2);"},
		{"trigger": "I-BorderImageWidthConverter\tinit", "contents": "BorderImageWidthConverter ${1:converter} = new BorderImageWidthConverter($2);"},
		{"trigger": "I-BorderImageWidthsSequenceConverter\tinit", "contents": "BorderImageWidthsSequenceConverter ${1:converter} = new BorderImageWidthsSequenceConverter($2);"},
		{"trigger": "I-BorderLayout\tinit", "contents": "BorderLayout ${1:layout} = new BorderLayout($2);"},
		{"trigger": "I-BorderPane\tinit", "contents": "BorderPane ${1:pane} = new BorderPane($2);"},
		{"trigger": "I-BorderPaneBuilder\tinit", "contents": "BorderPaneBuilder ${1:builder} = new BorderPaneBuilder($2);"},
		{"trigger": "I-BorderRepeat\tinit", "contents": "BorderRepeat ${1:repeat} = new BorderRepeat($2);"},
		{"trigger": "I-BorderStroke\tinit", "contents": "BorderStroke ${1:stroke} = new BorderStroke($2);"},
		{"trigger": "I-BorderStrokeStyle\tinit", "contents": "BorderStrokeStyle ${1:style} = new BorderStrokeStyle($2);"},
		{"trigger": "I-BorderStrokeStyleSequenceConverter\tinit", "contents": "BorderStrokeStyleSequenceConverter ${1:converter} = new BorderStrokeStyleSequenceConverter($2);"},
		{"trigger": "I-BorderStyleConverter\tinit", "contents": "BorderStyleConverter ${1:converter} = new BorderStyleConverter($2);"},
		{"trigger": "I-BorderUIResource\tinit", "contents": "BorderUIResource ${1:resource} = new BorderUIResource($2);"},
		{"trigger": "I-BorderWidths\tinit", "contents": "BorderWidths ${1:widths} = new BorderWidths($2);"},
		{"trigger": "I-BoundMethodHandle\tinit", "contents": "BoundMethodHandle ${1:handle} = new BoundMethodHandle($2);"},
		{"trigger": "I-BoundedRangeModel\tinit", "contents": "BoundedRangeModel ${1:model} = new BoundedRangeModel($2);"},
		{"trigger": "I-BoundingBox\tinit", "contents": "BoundingBox ${1:box} = new BoundingBox($2);"},
		{"trigger": "I-BoundingBoxBuilder\tinit", "contents": "BoundingBoxBuilder ${1:builder} = new BoundingBoxBuilder($2);"},
		{"trigger": "I-Bounds\tinit", "contents": "Bounds ${1:bounds} = new Bounds($2);"},
		{"trigger": "I-BoundsAccessor\tinit", "contents": "BoundsAccessor ${1:accessor} = new BoundsAccessor($2);"},
		{"trigger": "I-BoundsUtils\tinit", "contents": "BoundsUtils ${1:utils} = new BoundsUtils($2);"},
		{"trigger": "I-Box\tinit", "contents": "Box ${1:box} = new Box($2);"},
		{"trigger": "I-BoxBlur\tinit", "contents": "BoxBlur ${1:blur} = new BoxBlur($2);"},
		{"trigger": "I-BoxBlurBuilder\tinit", "contents": "BoxBlurBuilder ${1:builder} = new BoxBlurBuilder($2);"},
		{"trigger": "I-BoxBlurState\tinit", "contents": "BoxBlurState ${1:state} = new BoxBlurState($2);"},
		{"trigger": "I-BoxBounds\tinit", "contents": "BoxBounds ${1:bounds} = new BoxBounds($2);"},
		{"trigger": "I-BoxLayout\tinit", "contents": "BoxLayout ${1:layout} = new BoxLayout($2);"},
		{"trigger": "I-BoxRenderState\tinit", "contents": "BoxRenderState ${1:state} = new BoxRenderState($2);"},
		{"trigger": "I-BoxShadow\tinit", "contents": "BoxShadow ${1:shadow} = new BoxShadow($2);"},
		{"trigger": "I-BoxShadowState\tinit", "contents": "BoxShadowState ${1:state} = new BoxShadowState($2);"},
		{"trigger": "I-BoxView\tinit", "contents": "BoxView ${1:view} = new BoxView($2);"},
		{"trigger": "I-BoxedValueHelper\tinit", "contents": "BoxedValueHelper ${1:helper} = new BoxedValueHelper($2);"},
		{"trigger": "I-BranchHandle\tinit", "contents": "BranchHandle ${1:handle} = new BranchHandle($2);"},
		{"trigger": "I-BranchInstruction\tinit", "contents": "BranchInstruction ${1:instruction} = new BranchInstruction($2);"},
		{"trigger": "I-BreakIterator\tinit", "contents": "BreakIterator ${1:iterator} = new BreakIterator($2);"},
		{"trigger": "I-BreakIteratorProvider\tinit", "contents": "BreakIteratorProvider ${1:provider} = new BreakIteratorProvider($2);"},
		{"trigger": "I-BreakTree\tinit", "contents": "BreakTree ${1:tree} = new BreakTree($2);"},
		{"trigger": "I-Brightpass\tinit", "contents": "Brightpass ${1:brightpass} = new Brightpass($2);"},
		{"trigger": "I-BrokenBarrierException\tinit", "contents": "BrokenBarrierException ${1:exception} = new BrokenBarrierException($2);"},
		{"trigger": "I-BubbleChart\tinit", "contents": "BubbleChart ${1:chart} = new BubbleChart($2);"},
		{"trigger": "I-BubbleChartBuilder\tinit", "contents": "BubbleChartBuilder ${1:builder} = new BubbleChartBuilder($2);"},
		{"trigger": "I-Buffer\tinit", "contents": "Buffer ${1:buffer} = new Buffer($2);"},
		{"trigger": "I-BufferCapabilities\tinit", "contents": "BufferCapabilities ${1:capabilities} = new BufferCapabilities($2);"},
		{"trigger": "I-BufferFactory\tinit", "contents": "BufferFactory ${1:factory} = new BufferFactory($2);"},
		{"trigger": "I-BufferListener\tinit", "contents": "BufferListener ${1:listener} = new BufferListener($2);"},
		{"trigger": "I-BufferOverflowException\tinit", "contents": "BufferOverflowException ${1:exception} = new BufferOverflowException($2);"},
		{"trigger": "I-BufferPoolMXBean\tinit", "contents": "BufferPoolMXBean ${1:bean} = new BufferPoolMXBean($2);"},
		{"trigger": "I-BufferProgressEvent\tinit", "contents": "BufferProgressEvent ${1:event} = new BufferProgressEvent($2);"},
		{"trigger": "I-BufferStrategy\tinit", "contents": "BufferStrategy ${1:strategy} = new BufferStrategy($2);"},
		{"trigger": "I-BufferStrategyPaintManager\tinit", "contents": "BufferStrategyPaintManager ${1:manager} = new BufferStrategyPaintManager($2);"},
		{"trigger": "I-BufferUnderflowException\tinit", "contents": "BufferUnderflowException ${1:exception} = new BufferUnderflowException($2);"},
		{"trigger": "I-BufferUtil\tinit", "contents": "BufferUtil ${1:util} = new BufferUtil($2);"},
		{"trigger": "I-BufferedImage\tinit", "contents": "BufferedImage ${1:image} = new BufferedImage($2);"},
		{"trigger": "I-BufferedImageFilter\tinit", "contents": "BufferedImageFilter ${1:filter} = new BufferedImageFilter($2);"},
		{"trigger": "I-BufferedImageOp\tinit", "contents": "BufferedImageOp ${1:op} = new BufferedImageOp($2);"},
		{"trigger": "I-BufferedInputStream\tinit", "contents": "BufferedInputStream ${1:stream} = new BufferedInputStream($2);"},
		{"trigger": "I-BufferedOutputStream\tinit", "contents": "BufferedOutputStream ${1:stream} = new BufferedOutputStream($2);"},
		{"trigger": "I-BufferedReader\tinit", "contents": "BufferedReader ${1:reader} = new BufferedReader($2);"},
		{"trigger": "I-BufferedWriter\tinit", "contents": "BufferedWriter ${1:writer} = new BufferedWriter($2);"},
		{"trigger": "I-Builder\tinit", "contents": "Builder ${1:builder} = new Builder($2);"},
		{"trigger": "I-BuilderFactory\tinit", "contents": "BuilderFactory ${1:factory} = new BuilderFactory($2);"},
		{"trigger": "I-Button\tinit", "contents": "Button ${1:button} = new Button($2);"},
		{"trigger": "I-ButtonBar\tinit", "contents": "ButtonBar ${1:bar} = new ButtonBar($2);"},
		{"trigger": "I-ButtonBarSkin\tinit", "contents": "ButtonBarSkin ${1:skin} = new ButtonBarSkin($2);"},
		{"trigger": "I-ButtonBase\tinit", "contents": "ButtonBase ${1:base} = new ButtonBase($2);"},
		{"trigger": "I-ButtonBaseBuilder\tinit", "contents": "ButtonBaseBuilder ${1:builder} = new ButtonBaseBuilder($2);"},
		{"trigger": "I-ButtonBehavior\tinit", "contents": "ButtonBehavior ${1:behavior} = new ButtonBehavior($2);"},
		{"trigger": "I-ButtonBuilder\tinit", "contents": "ButtonBuilder ${1:builder} = new ButtonBuilder($2);"},
		{"trigger": "I-ButtonGroup\tinit", "contents": "ButtonGroup ${1:group} = new ButtonGroup($2);"},
		{"trigger": "I-ButtonModel\tinit", "contents": "ButtonModel ${1:model} = new ButtonModel($2);"},
		{"trigger": "I-ButtonPainter\tinit", "contents": "ButtonPainter ${1:painter} = new ButtonPainter($2);"},
		{"trigger": "I-ButtonPeer\tinit", "contents": "ButtonPeer ${1:peer} = new ButtonPeer($2);"},
		{"trigger": "I-ButtonSkin\tinit", "contents": "ButtonSkin ${1:skin} = new ButtonSkin($2);"},
		{"trigger": "I-ButtonType\tinit", "contents": "ButtonType ${1:type} = new ButtonType($2);"},
		{"trigger": "I-ButtonUI\tinit", "contents": "ButtonUI ${1:buttonui} = new ButtonUI($2);"},
		{"trigger": "I-Byte\tinit", "contents": "byte[] ${1:buffer} = new byte[${2:2048}];"},
		{"trigger": "I-ByteArgb\tinit", "contents": "ByteArgb ${1:argb} = new ByteArgb($2);"},
		{"trigger": "I-ByteArrayInputStream\tinit", "contents": "ByteArrayInputStream ${1:stream} = new ByteArrayInputStream($2);"},
		{"trigger": "I-ByteArrayOutputStream\tinit", "contents": "ByteArrayOutputStream ${1:stream} = new ByteArrayOutputStream($2);"},
		{"trigger": "I-ByteBgr\tinit", "contents": "ByteBgr ${1:bgr} = new ByteBgr($2);"},
		{"trigger": "I-ByteBgra\tinit", "contents": "ByteBgra ${1:bgra} = new ByteBgra($2);"},
		{"trigger": "I-ByteBgraPre\tinit", "contents": "ByteBgraPre ${1:pre} = new ByteBgraPre($2);"},
		{"trigger": "I-ByteBuffer\tinit", "contents": "ByteBuffer ${1:buffer} = new ByteBuffer($2);"},
		{"trigger": "I-ByteBufferAsCharBufferB\tinit", "contents": "ByteBufferAsCharBufferB ${1:bytebufferascharbufferb} = new ByteBufferAsCharBufferB($2);"},
		{"trigger": "I-ByteBufferAsCharBufferL\tinit", "contents": "ByteBufferAsCharBufferL ${1:bytebufferascharbufferl} = new ByteBufferAsCharBufferL($2);"},
		{"trigger": "I-ByteBufferAsCharBufferRB\tinit", "contents": "ByteBufferAsCharBufferRB ${1:bytebufferascharbufferrb} = new ByteBufferAsCharBufferRB($2);"},
		{"trigger": "I-ByteBufferAsCharBufferRL\tinit", "contents": "ByteBufferAsCharBufferRL ${1:bytebufferascharbufferrl} = new ByteBufferAsCharBufferRL($2);"},
		{"trigger": "I-ByteBufferAsDoubleBufferB\tinit", "contents": "ByteBufferAsDoubleBufferB ${1:bytebufferasdoublebufferb} = new ByteBufferAsDoubleBufferB($2);"},
		{"trigger": "I-ByteBufferAsDoubleBufferL\tinit", "contents": "ByteBufferAsDoubleBufferL ${1:bytebufferasdoublebufferl} = new ByteBufferAsDoubleBufferL($2);"},
		{"trigger": "I-ByteBufferAsDoubleBufferRB\tinit", "contents": "ByteBufferAsDoubleBufferRB ${1:bytebufferasdoublebufferrb} = new ByteBufferAsDoubleBufferRB($2);"},
		{"trigger": "I-ByteBufferAsDoubleBufferRL\tinit", "contents": "ByteBufferAsDoubleBufferRL ${1:bytebufferasdoublebufferrl} = new ByteBufferAsDoubleBufferRL($2);"},
		{"trigger": "I-ByteBufferAsFloatBufferB\tinit", "contents": "ByteBufferAsFloatBufferB ${1:bytebufferasfloatbufferb} = new ByteBufferAsFloatBufferB($2);"},
		{"trigger": "I-ByteBufferAsFloatBufferL\tinit", "contents": "ByteBufferAsFloatBufferL ${1:bytebufferasfloatbufferl} = new ByteBufferAsFloatBufferL($2);"},
		{"trigger": "I-ByteBufferAsFloatBufferRB\tinit", "contents": "ByteBufferAsFloatBufferRB ${1:bytebufferasfloatbufferrb} = new ByteBufferAsFloatBufferRB($2);"},
		{"trigger": "I-ByteBufferAsFloatBufferRL\tinit", "contents": "ByteBufferAsFloatBufferRL ${1:bytebufferasfloatbufferrl} = new ByteBufferAsFloatBufferRL($2);"},
		{"trigger": "I-ByteBufferAsIntBufferB\tinit", "contents": "ByteBufferAsIntBufferB ${1:bytebufferasintbufferb} = new ByteBufferAsIntBufferB($2);"},
		{"trigger": "I-ByteBufferAsIntBufferL\tinit", "contents": "ByteBufferAsIntBufferL ${1:bytebufferasintbufferl} = new ByteBufferAsIntBufferL($2);"},
		{"trigger": "I-ByteBufferAsIntBufferRB\tinit", "contents": "ByteBufferAsIntBufferRB ${1:bytebufferasintbufferrb} = new ByteBufferAsIntBufferRB($2);"},
		{"trigger": "I-ByteBufferAsIntBufferRL\tinit", "contents": "ByteBufferAsIntBufferRL ${1:bytebufferasintbufferrl} = new ByteBufferAsIntBufferRL($2);"},
		{"trigger": "I-ByteBufferAsLongBufferB\tinit", "contents": "ByteBufferAsLongBufferB ${1:bytebufferaslongbufferb} = new ByteBufferAsLongBufferB($2);"},
		{"trigger": "I-ByteBufferAsLongBufferL\tinit", "contents": "ByteBufferAsLongBufferL ${1:bytebufferaslongbufferl} = new ByteBufferAsLongBufferL($2);"},
		{"trigger": "I-ByteBufferAsLongBufferRB\tinit", "contents": "ByteBufferAsLongBufferRB ${1:bytebufferaslongbufferrb} = new ByteBufferAsLongBufferRB($2);"},
		{"trigger": "I-ByteBufferAsLongBufferRL\tinit", "contents": "ByteBufferAsLongBufferRL ${1:bytebufferaslongbufferrl} = new ByteBufferAsLongBufferRL($2);"},
		{"trigger": "I-ByteBufferAsShortBufferB\tinit", "contents": "ByteBufferAsShortBufferB ${1:bytebufferasshortbufferb} = new ByteBufferAsShortBufferB($2);"},
		{"trigger": "I-ByteBufferAsShortBufferL\tinit", "contents": "ByteBufferAsShortBufferL ${1:bytebufferasshortbufferl} = new ByteBufferAsShortBufferL($2);"},
		{"trigger": "I-ByteBufferAsShortBufferRB\tinit", "contents": "ByteBufferAsShortBufferRB ${1:bytebufferasshortbufferrb} = new ByteBufferAsShortBufferRB($2);"},
		{"trigger": "I-ByteBufferAsShortBufferRL\tinit", "contents": "ByteBufferAsShortBufferRL ${1:bytebufferasshortbufferrl} = new ByteBufferAsShortBufferRL($2);"},
		{"trigger": "I-ByteBufferPool\tinit", "contents": "ByteBufferPool ${1:pool} = new ByteBufferPool($2);"},
		{"trigger": "I-ByteChannel\tinit", "contents": "ByteChannel ${1:channel} = new ByteChannel($2);"},
		{"trigger": "I-ByteGray\tinit", "contents": "ByteGray ${1:gray} = new ByteGray($2);"},
		{"trigger": "I-ByteGrayAlpha\tinit", "contents": "ByteGrayAlpha ${1:alpha} = new ByteGrayAlpha($2);"},
		{"trigger": "I-ByteGrayAlphaPre\tinit", "contents": "ByteGrayAlphaPre ${1:pre} = new ByteGrayAlphaPre($2);"},
		{"trigger": "I-ByteHolder\tinit", "contents": "ByteHolder ${1:holder} = new ByteHolder($2);"},
		{"trigger": "I-ByteIndexed\tinit", "contents": "ByteIndexed ${1:indexed} = new ByteIndexed($2);"},
		{"trigger": "I-ByteList\tinit", "contents": "ByteList ${1:list} = new ByteList($2);"},
		{"trigger": "I-ByteListImpl\tinit", "contents": "ByteListImpl ${1:impl} = new ByteListImpl($2);"},
		{"trigger": "I-ByteLookupTable\tinit", "contents": "ByteLookupTable ${1:table} = new ByteLookupTable($2);"},
		{"trigger": "I-ByteOrder\tinit", "contents": "ByteOrder ${1:order} = new ByteOrder($2);"},
		{"trigger": "I-BytePixelAccessor\tinit", "contents": "BytePixelAccessor ${1:accessor} = new BytePixelAccessor($2);"},
		{"trigger": "I-BytePixelGetter\tinit", "contents": "BytePixelGetter ${1:getter} = new BytePixelGetter($2);"},
		{"trigger": "I-BytePixelSetter\tinit", "contents": "BytePixelSetter ${1:setter} = new BytePixelSetter($2);"},
		{"trigger": "I-ByteRgb\tinit", "contents": "ByteRgb ${1:rgb} = new ByteRgb($2);"},
		{"trigger": "I-ByteRgba\tinit", "contents": "ByteRgba ${1:rgba} = new ByteRgba($2);"},
		{"trigger": "I-ByteSequence\tinit", "contents": "ByteSequence ${1:sequence} = new ByteSequence($2);"},
		{"trigger": "I-ByteStringConverter\tinit", "contents": "ByteStringConverter ${1:converter} = new ByteStringConverter($2);"},
		{"trigger": "I-ByteToBytePixelConverter\tinit", "contents": "ByteToBytePixelConverter ${1:converter} = new ByteToBytePixelConverter($2);"},
		{"trigger": "I-ByteToIntPixelConverter\tinit", "contents": "ByteToIntPixelConverter ${1:converter} = new ByteToIntPixelConverter($2);"},
		{"trigger": "I-C\tinit", "contents": "C ${1:c} = new C($2);"},
		{"trigger": "I-C14NMethodParameterSpec\tinit", "contents": "C14NMethodParameterSpec ${1:spec} = new C14NMethodParameterSpec($2);"},
		{"trigger": "I-C14nHelper\tinit", "contents": "C14nHelper ${1:helper} = new C14nHelper($2);"},
		{"trigger": "I-CALOAD\tinit", "contents": "CALOAD ${1:caload} = new CALOAD($2);"},
		{"trigger": "I-CASTORE\tinit", "contents": "CASTORE ${1:castore} = new CASTORE($2);"},
		{"trigger": "I-CDATASection\tinit", "contents": "CDATASection ${1:section} = new CDATASection($2);"},
		{"trigger": "I-CDATASectionImpl\tinit", "contents": "CDATASectionImpl ${1:impl} = new CDATASectionImpl($2);"},
		{"trigger": "I-CGAffineTransform\tinit", "contents": "CGAffineTransform ${1:transform} = new CGAffineTransform($2);"},
		{"trigger": "I-CGPoint\tinit", "contents": "CGPoint ${1:point} = new CGPoint($2);"},
		{"trigger": "I-CGRect\tinit", "contents": "CGRect ${1:rect} = new CGRect($2);"},
		{"trigger": "I-CGSize\tinit", "contents": "CGSize ${1:size} = new CGSize($2);"},
		{"trigger": "I-CHECKCAST\tinit", "contents": "CHECKCAST ${1:checkcast} = new CHECKCAST($2);"},
		{"trigger": "I-CMAny\tinit", "contents": "CMAny ${1:any} = new CMAny($2);"},
		{"trigger": "I-CMBinOp\tinit", "contents": "CMBinOp ${1:op} = new CMBinOp($2);"},
		{"trigger": "I-CMBuilder\tinit", "contents": "CMBuilder ${1:builder} = new CMBuilder($2);"},
		{"trigger": "I-CMLeaf\tinit", "contents": "CMLeaf ${1:leaf} = new CMLeaf($2);"},
		{"trigger": "I-CMMException\tinit", "contents": "CMMException ${1:exception} = new CMMException($2);"},
		{"trigger": "I-CMNode\tinit", "contents": "CMNode ${1:node} = new CMNode($2);"},
		{"trigger": "I-CMNodeFactory\tinit", "contents": "CMNodeFactory ${1:factory} = new CMNodeFactory($2);"},
		{"trigger": "I-CMStateSet\tinit", "contents": "CMStateSet ${1:set} = new CMStateSet($2);"},
		{"trigger": "I-CMUniOp\tinit", "contents": "CMUniOp ${1:op} = new CMUniOp($2);"},
		{"trigger": "I-CMap\tinit", "contents": "CMap ${1:map} = new CMap($2);"},
		{"trigger": "I-CODESET_INCOMPATIBLE\tinit", "contents": "CODESET_INCOMPATIBLE ${1:codeset} = new CODESET_INCOMPATIBLE($2);"},
		{"trigger": "I-COMM_FAILURE\tinit", "contents": "COMM_FAILURE ${1:comm} = new COMM_FAILURE($2);"},
		{"trigger": "I-COMMarkerSegment\tinit", "contents": "COMMarkerSegment ${1:segment} = new COMMarkerSegment($2);"},
		{"trigger": "I-CORBALogDomains\tinit", "contents": "CORBALogDomains ${1:domains} = new CORBALogDomains($2);"},
		{"trigger": "I-CPInstruction\tinit", "contents": "CPInstruction ${1:instruction} = new CPInstruction($2);"},
		{"trigger": "I-CRL\tinit", "contents": "CRL ${1:crl} = new CRL($2);"},
		{"trigger": "I-CRLException\tinit", "contents": "CRLException ${1:exception} = new CRLException($2);"},
		{"trigger": "I-CRLReason\tinit", "contents": "CRLReason ${1:reason} = new CRLReason($2);"},
		{"trigger": "I-CRLSelector\tinit", "contents": "CRLSelector ${1:selector} = new CRLSelector($2);"},
		{"trigger": "I-CSS\tinit", "contents": "CSS ${1:css} = new CSS($2);"},
		{"trigger": "I-CSS2Properties\tinit", "contents": "CSS2Properties ${1:properties} = new CSS2Properties($2);"},
		{"trigger": "I-CSSBorder\tinit", "contents": "CSSBorder ${1:border} = new CSSBorder($2);"},
		{"trigger": "I-CSSCharsetRule\tinit", "contents": "CSSCharsetRule ${1:rule} = new CSSCharsetRule($2);"},
		{"trigger": "I-CSSCharsetRuleImpl\tinit", "contents": "CSSCharsetRuleImpl ${1:impl} = new CSSCharsetRuleImpl($2);"},
		{"trigger": "I-CSSFontFaceRule\tinit", "contents": "CSSFontFaceRule ${1:rule} = new CSSFontFaceRule($2);"},
		{"trigger": "I-CSSFontFaceRuleImpl\tinit", "contents": "CSSFontFaceRuleImpl ${1:impl} = new CSSFontFaceRuleImpl($2);"},
		{"trigger": "I-CSSImportRule\tinit", "contents": "CSSImportRule ${1:rule} = new CSSImportRule($2);"},
		{"trigger": "I-CSSImportRuleImpl\tinit", "contents": "CSSImportRuleImpl ${1:impl} = new CSSImportRuleImpl($2);"},
		{"trigger": "I-CSSLexer\tinit", "contents": "CSSLexer ${1:lexer} = new CSSLexer($2);"},
		{"trigger": "I-CSSMediaRule\tinit", "contents": "CSSMediaRule ${1:rule} = new CSSMediaRule($2);"},
		{"trigger": "I-CSSMediaRuleImpl\tinit", "contents": "CSSMediaRuleImpl ${1:impl} = new CSSMediaRuleImpl($2);"},
		{"trigger": "I-CSSPageRule\tinit", "contents": "CSSPageRule ${1:rule} = new CSSPageRule($2);"},
		{"trigger": "I-CSSPageRuleImpl\tinit", "contents": "CSSPageRuleImpl ${1:impl} = new CSSPageRuleImpl($2);"},
		{"trigger": "I-CSSParser\tinit", "contents": "CSSParser ${1:parser} = new CSSParser($2);"},
		{"trigger": "I-CSSPrimitiveValue\tinit", "contents": "CSSPrimitiveValue ${1:value} = new CSSPrimitiveValue($2);"},
		{"trigger": "I-CSSPrimitiveValueImpl\tinit", "contents": "CSSPrimitiveValueImpl ${1:impl} = new CSSPrimitiveValueImpl($2);"},
		{"trigger": "I-CSSRule\tinit", "contents": "CSSRule ${1:rule} = new CSSRule($2);"},
		{"trigger": "I-CSSRuleImpl\tinit", "contents": "CSSRuleImpl ${1:impl} = new CSSRuleImpl($2);"},
		{"trigger": "I-CSSRuleList\tinit", "contents": "CSSRuleList ${1:list} = new CSSRuleList($2);"},
		{"trigger": "I-CSSRuleListImpl\tinit", "contents": "CSSRuleListImpl ${1:impl} = new CSSRuleListImpl($2);"},
		{"trigger": "I-CSSStyleDeclaration\tinit", "contents": "CSSStyleDeclaration ${1:declaration} = new CSSStyleDeclaration($2);"},
		{"trigger": "I-CSSStyleDeclarationImpl\tinit", "contents": "CSSStyleDeclarationImpl ${1:impl} = new CSSStyleDeclarationImpl($2);"},
		{"trigger": "I-CSSStyleRule\tinit", "contents": "CSSStyleRule ${1:rule} = new CSSStyleRule($2);"},
		{"trigger": "I-CSSStyleRuleImpl\tinit", "contents": "CSSStyleRuleImpl ${1:impl} = new CSSStyleRuleImpl($2);"},
		{"trigger": "I-CSSStyleSheet\tinit", "contents": "CSSStyleSheet ${1:sheet} = new CSSStyleSheet($2);"},
		{"trigger": "I-CSSStyleSheetImpl\tinit", "contents": "CSSStyleSheetImpl ${1:impl} = new CSSStyleSheetImpl($2);"},
		{"trigger": "I-CSSUnknownRule\tinit", "contents": "CSSUnknownRule ${1:rule} = new CSSUnknownRule($2);"},
		{"trigger": "I-CSSValue\tinit", "contents": "CSSValue ${1:value} = new CSSValue($2);"},
		{"trigger": "I-CSSValueImpl\tinit", "contents": "CSSValueImpl ${1:impl} = new CSSValueImpl($2);"},
		{"trigger": "I-CSSValueList\tinit", "contents": "CSSValueList ${1:list} = new CSSValueList($2);"},
		{"trigger": "I-CSSValueListImpl\tinit", "contents": "CSSValueListImpl ${1:impl} = new CSSValueListImpl($2);"},
		{"trigger": "I-CTFactory\tinit", "contents": "CTFactory ${1:factory} = new CTFactory($2);"},
		{"trigger": "I-CTFontFile\tinit", "contents": "CTFontFile ${1:file} = new CTFontFile($2);"},
		{"trigger": "I-CTFontStrike\tinit", "contents": "CTFontStrike ${1:strike} = new CTFontStrike($2);"},
		{"trigger": "I-CTGlyph\tinit", "contents": "CTGlyph ${1:glyph} = new CTGlyph($2);"},
		{"trigger": "I-CTGlyphLayout\tinit", "contents": "CTGlyphLayout ${1:layout} = new CTGlyphLayout($2);"},
		{"trigger": "I-CTStrikeDisposer\tinit", "contents": "CTStrikeDisposer ${1:disposer} = new CTStrikeDisposer($2);"},
		{"trigger": "I-CTX_RESTRICT_SCOPE\tinit", "contents": "CTX_RESTRICT_SCOPE ${1:ctx} = new CTX_RESTRICT_SCOPE($2);"},
		{"trigger": "I-CacheFilter\tinit", "contents": "CacheFilter ${1:filter} = new CacheFilter($2);"},
		{"trigger": "I-CacheHint\tinit", "contents": "CacheHint ${1:hint} = new CacheHint($2);"},
		{"trigger": "I-CacheRequest\tinit", "contents": "CacheRequest ${1:request} = new CacheRequest($2);"},
		{"trigger": "I-CacheResponse\tinit", "contents": "CacheResponse ${1:response} = new CacheResponse($2);"},
		{"trigger": "I-CachedNodeListIterator\tinit", "contents": "CachedNodeListIterator ${1:iterator} = new CachedNodeListIterator($2);"},
		{"trigger": "I-CachedRowSet\tinit", "contents": "CachedRowSet ${1:set} = new CachedRowSet($2);"},
		{"trigger": "I-CachedXPathAPI\tinit", "contents": "CachedXPathAPI ${1:cachedxpathapi} = new CachedXPathAPI($2);"},
		{"trigger": "I-CachingCompoundImage\tinit", "contents": "CachingCompoundImage ${1:image} = new CachingCompoundImage($2);"},
		{"trigger": "I-CachingEllipseRep\tinit", "contents": "CachingEllipseRep ${1:rep} = new CachingEllipseRep($2);"},
		{"trigger": "I-CachingParserPool\tinit", "contents": "CachingParserPool ${1:pool} = new CachingParserPool($2);"},
		{"trigger": "I-CachingRoundRectRep\tinit", "contents": "CachingRoundRectRep ${1:rep} = new CachingRoundRectRep($2);"},
		{"trigger": "I-CachingShapeRep\tinit", "contents": "CachingShapeRep ${1:rep} = new CachingShapeRep($2);"},
		{"trigger": "I-CachingTransferable\tinit", "contents": "CachingTransferable ${1:transferable} = new CachingTransferable($2);"},
		{"trigger": "I-CalculatedValue\tinit", "contents": "CalculatedValue ${1:value} = new CalculatedValue($2);"},
		{"trigger": "I-Calendar\tinit", "contents": "Calendar ${1:calendar} = new Calendar($2);"},
		{"trigger": "I-CalendarBuilder\tinit", "contents": "CalendarBuilder ${1:builder} = new CalendarBuilder($2);"},
		{"trigger": "I-CalendarDataProvider\tinit", "contents": "CalendarDataProvider ${1:provider} = new CalendarDataProvider($2);"},
		{"trigger": "I-CalendarNameProvider\tinit", "contents": "CalendarNameProvider ${1:provider} = new CalendarNameProvider($2);"},
		{"trigger": "I-CallSite\tinit", "contents": "CallSite ${1:site} = new CallSite($2);"},
		{"trigger": "I-CallTemplate\tinit", "contents": "CallTemplate ${1:template} = new CallTemplate($2);"},
		{"trigger": "I-Callable\tinit", "contents": "Callable ${1:callable} = new Callable($2);"},
		{"trigger": "I-CallableStatement\tinit", "contents": "CallableStatement ${1:statement} = new CallableStatement($2);"},
		{"trigger": "I-Callback\tinit", "contents": "Callback ${1:callback} = new Callback($2);"},
		{"trigger": "I-CallbackHandler\tinit", "contents": "CallbackHandler ${1:handler} = new CallbackHandler($2);"},
		{"trigger": "I-Camera\tinit", "contents": "Camera ${1:camera} = new Camera($2);"},
		{"trigger": "I-CameraHelper\tinit", "contents": "CameraHelper ${1:helper} = new CameraHelper($2);"},
		{"trigger": "I-CanTransformVec3d\tinit", "contents": "CanTransformVec3d ${1:vec3d} = new CanTransformVec3d($2);"},
		{"trigger": "I-CancelablePrintJob\tinit", "contents": "CancelablePrintJob ${1:job} = new CancelablePrintJob($2);"},
		{"trigger": "I-CancellationException\tinit", "contents": "CancellationException ${1:exception} = new CancellationException($2);"},
		{"trigger": "I-CancelledKeyException\tinit", "contents": "CancelledKeyException ${1:exception} = new CancelledKeyException($2);"},
		{"trigger": "I-CannotProceed\tinit", "contents": "CannotProceed ${1:proceed} = new CannotProceed($2);"},
		{"trigger": "I-CannotProceedException\tinit", "contents": "CannotProceedException ${1:exception} = new CannotProceedException($2);"},
		{"trigger": "I-CannotProceedHelper\tinit", "contents": "CannotProceedHelper ${1:helper} = new CannotProceedHelper($2);"},
		{"trigger": "I-CannotProceedHolder\tinit", "contents": "CannotProceedHolder ${1:holder} = new CannotProceedHolder($2);"},
		{"trigger": "I-CannotRedoException\tinit", "contents": "CannotRedoException ${1:exception} = new CannotRedoException($2);"},
		{"trigger": "I-CannotUndoException\tinit", "contents": "CannotUndoException ${1:exception} = new CannotUndoException($2);"},
		{"trigger": "I-CanonicalizationException\tinit", "contents": "CanonicalizationException ${1:exception} = new CanonicalizationException($2);"},
		{"trigger": "I-CanonicalizationMethod\tinit", "contents": "CanonicalizationMethod ${1:method} = new CanonicalizationMethod($2);"},
		{"trigger": "I-Canonicalizer\tinit", "contents": "Canonicalizer ${1:canonicalizer} = new Canonicalizer($2);"},
		{"trigger": "I-Canonicalizer11_OmitComments\tinit", "contents": "Canonicalizer11_OmitComments ${1:comments} = new Canonicalizer11_OmitComments($2);"},
		{"trigger": "I-Canonicalizer11_WithComments\tinit", "contents": "Canonicalizer11_WithComments ${1:comments} = new Canonicalizer11_WithComments($2);"},
		{"trigger": "I-Canonicalizer20010315Excl\tinit", "contents": "Canonicalizer20010315Excl ${1:excl} = new Canonicalizer20010315Excl($2);"},
		{"trigger": "I-Canonicalizer20010315ExclOmitComments\tinit", "contents": "Canonicalizer20010315ExclOmitComments ${1:comments} = new Canonicalizer20010315ExclOmitComments($2);"},
		{"trigger": "I-Canonicalizer20010315ExclWithComments\tinit", "contents": "Canonicalizer20010315ExclWithComments ${1:comments} = new Canonicalizer20010315ExclWithComments($2);"},
		{"trigger": "I-Canonicalizer20010315OmitComments\tinit", "contents": "Canonicalizer20010315OmitComments ${1:comments} = new Canonicalizer20010315OmitComments($2);"},
		{"trigger": "I-Canonicalizer20010315WithComments\tinit", "contents": "Canonicalizer20010315WithComments ${1:comments} = new Canonicalizer20010315WithComments($2);"},
		{"trigger": "I-CanonicalizerBase\tinit", "contents": "CanonicalizerBase ${1:base} = new CanonicalizerBase($2);"},
		{"trigger": "I-CanonicalizerPhysical\tinit", "contents": "CanonicalizerPhysical ${1:physical} = new CanonicalizerPhysical($2);"},
		{"trigger": "I-CanonicalizerSpi\tinit", "contents": "CanonicalizerSpi ${1:spi} = new CanonicalizerSpi($2);"},
		{"trigger": "I-Canvas\tinit", "contents": "Canvas ${1:canvas} = new Canvas($2);"},
		{"trigger": "I-CanvasBuilder\tinit", "contents": "CanvasBuilder ${1:builder} = new CanvasBuilder($2);"},
		{"trigger": "I-CanvasPeer\tinit", "contents": "CanvasPeer ${1:peer} = new CanvasPeer($2);"},
		{"trigger": "I-CardLayout\tinit", "contents": "CardLayout ${1:layout} = new CardLayout($2);"},
		{"trigger": "I-Caret\tinit", "contents": "Caret ${1:caret} = new Caret($2);"},
		{"trigger": "I-CaretEvent\tinit", "contents": "CaretEvent ${1:event} = new CaretEvent($2);"},
		{"trigger": "I-CaretListener\tinit", "contents": "CaretListener ${1:listener} = new CaretListener($2);"},
		{"trigger": "I-CascadingStyle\tinit", "contents": "CascadingStyle ${1:style} = new CascadingStyle($2);"},
		{"trigger": "I-CaseInsensitiveMap\tinit", "contents": "CaseInsensitiveMap ${1:map} = new CaseInsensitiveMap($2);"},
		{"trigger": "I-CaseTree\tinit", "contents": "CaseTree ${1:tree} = new CaseTree($2);"},
		{"trigger": "I-CastCall\tinit", "contents": "CastCall ${1:call} = new CastCall($2);"},
		{"trigger": "I-CastExpr\tinit", "contents": "CastExpr ${1:expr} = new CastExpr($2);"},
		{"trigger": "I-Catalog\tinit", "contents": "Catalog ${1:catalog} = new Catalog($2);"},
		{"trigger": "I-CatalogEntry\tinit", "contents": "CatalogEntry ${1:entry} = new CatalogEntry($2);"},
		{"trigger": "I-CatalogException\tinit", "contents": "CatalogException ${1:exception} = new CatalogException($2);"},
		{"trigger": "I-CatalogManager\tinit", "contents": "CatalogManager ${1:manager} = new CatalogManager($2);"},
		{"trigger": "I-CatalogReader\tinit", "contents": "CatalogReader ${1:reader} = new CatalogReader($2);"},
		{"trigger": "I-CatalogResolver\tinit", "contents": "CatalogResolver ${1:resolver} = new CatalogResolver($2);"},
		{"trigger": "I-CatchTree\tinit", "contents": "CatchTree ${1:tree} = new CatchTree($2);"},
		{"trigger": "I-CategoryAxis\tinit", "contents": "CategoryAxis ${1:axis} = new CategoryAxis($2);"},
		{"trigger": "I-CategoryAxisBuilder\tinit", "contents": "CategoryAxisBuilder ${1:builder} = new CategoryAxisBuilder($2);"},
		{"trigger": "I-CeilingCall\tinit", "contents": "CeilingCall ${1:call} = new CeilingCall($2);"},
		{"trigger": "I-Cell\tinit", "contents": "Cell ${1:cell} = new Cell($2);"},
		{"trigger": "I-CellBehaviorBase\tinit", "contents": "CellBehaviorBase ${1:base} = new CellBehaviorBase($2);"},
		{"trigger": "I-CellBuilder\tinit", "contents": "CellBuilder ${1:builder} = new CellBuilder($2);"},
		{"trigger": "I-CellEditor\tinit", "contents": "CellEditor ${1:editor} = new CellEditor($2);"},
		{"trigger": "I-CellEditorListener\tinit", "contents": "CellEditorListener ${1:listener} = new CellEditorListener($2);"},
		{"trigger": "I-CellRendererPane\tinit", "contents": "CellRendererPane ${1:pane} = new CellRendererPane($2);"},
		{"trigger": "I-CellSkinBase\tinit", "contents": "CellSkinBase ${1:base} = new CellSkinBase($2);"},
		{"trigger": "I-CellUtils\tinit", "contents": "CellUtils ${1:utils} = new CellUtils($2);"},
		{"trigger": "I-CenterLayout\tinit", "contents": "CenterLayout ${1:layout} = new CenterLayout($2);"},
		{"trigger": "I-CertPath\tinit", "contents": "CertPath ${1:path} = new CertPath($2);"},
		{"trigger": "I-CertPathBuilder\tinit", "contents": "CertPathBuilder ${1:builder} = new CertPathBuilder($2);"},
		{"trigger": "I-CertPathBuilderException\tinit", "contents": "CertPathBuilderException ${1:exception} = new CertPathBuilderException($2);"},
		{"trigger": "I-CertPathBuilderResult\tinit", "contents": "CertPathBuilderResult ${1:result} = new CertPathBuilderResult($2);"},
		{"trigger": "I-CertPathBuilderSpi\tinit", "contents": "CertPathBuilderSpi ${1:spi} = new CertPathBuilderSpi($2);"},
		{"trigger": "I-CertPathChecker\tinit", "contents": "CertPathChecker ${1:checker} = new CertPathChecker($2);"},
		{"trigger": "I-CertPathHelperImpl\tinit", "contents": "CertPathHelperImpl ${1:impl} = new CertPathHelperImpl($2);"},
		{"trigger": "I-CertPathParameters\tinit", "contents": "CertPathParameters ${1:parameters} = new CertPathParameters($2);"},
		{"trigger": "I-CertPathValidator\tinit", "contents": "CertPathValidator ${1:validator} = new CertPathValidator($2);"},
		{"trigger": "I-CertPathValidatorException\tinit", "contents": "CertPathValidatorException ${1:exception} = new CertPathValidatorException($2);"},
		{"trigger": "I-CertPathValidatorResult\tinit", "contents": "CertPathValidatorResult ${1:result} = new CertPathValidatorResult($2);"},
		{"trigger": "I-CertPathValidatorSpi\tinit", "contents": "CertPathValidatorSpi ${1:spi} = new CertPathValidatorSpi($2);"},
		{"trigger": "I-CertSelector\tinit", "contents": "CertSelector ${1:selector} = new CertSelector($2);"},
		{"trigger": "I-CertStore\tinit", "contents": "CertStore ${1:store} = new CertStore($2);"},
		{"trigger": "I-CertStoreException\tinit", "contents": "CertStoreException ${1:exception} = new CertStoreException($2);"},
		{"trigger": "I-CertStoreParameters\tinit", "contents": "CertStoreParameters ${1:parameters} = new CertStoreParameters($2);"},
		{"trigger": "I-CertStoreSpi\tinit", "contents": "CertStoreSpi ${1:spi} = new CertStoreSpi($2);"},
		{"trigger": "I-Certificate\tinit", "contents": "Certificate ${1:certificate} = new Certificate($2);"},
		{"trigger": "I-CertificateEncodingException\tinit", "contents": "CertificateEncodingException ${1:exception} = new CertificateEncodingException($2);"},
		{"trigger": "I-CertificateException\tinit", "contents": "CertificateException ${1:exception} = new CertificateException($2);"},
		{"trigger": "I-CertificateExpiredException\tinit", "contents": "CertificateExpiredException ${1:exception} = new CertificateExpiredException($2);"},
		{"trigger": "I-CertificateFactory\tinit", "contents": "CertificateFactory ${1:factory} = new CertificateFactory($2);"},
		{"trigger": "I-CertificateFactorySpi\tinit", "contents": "CertificateFactorySpi ${1:spi} = new CertificateFactorySpi($2);"},
		{"trigger": "I-CertificateNotYetValidException\tinit", "contents": "CertificateNotYetValidException ${1:exception} = new CertificateNotYetValidException($2);"},
		{"trigger": "I-CertificateParsingException\tinit", "contents": "CertificateParsingException ${1:exception} = new CertificateParsingException($2);"},
		{"trigger": "I-CertificateRevokedException\tinit", "contents": "CertificateRevokedException ${1:exception} = new CertificateRevokedException($2);"},
		{"trigger": "I-CertsInFilesystemDirectoryResolver\tinit", "contents": "CertsInFilesystemDirectoryResolver ${1:resolver} = new CertsInFilesystemDirectoryResolver($2);"},
		{"trigger": "I-ChainEnd\tinit", "contents": "ChainEnd ${1:end} = new ChainEnd($2);"},
		{"trigger": "I-ChangeEvent\tinit", "contents": "ChangeEvent ${1:event} = new ChangeEvent($2);"},
		{"trigger": "I-ChangeHelper\tinit", "contents": "ChangeHelper ${1:helper} = new ChangeHelper($2);"},
		{"trigger": "I-ChangeListener\tinit", "contents": "ChangeListener ${1:listener} = new ChangeListener($2);"},
		{"trigger": "I-ChangeListenerMap\tinit", "contents": "ChangeListenerMap ${1:map} = new ChangeListenerMap($2);"},
		{"trigger": "I-ChangedCharSetException\tinit", "contents": "ChangedCharSetException ${1:exception} = new ChangedCharSetException($2);"},
		{"trigger": "I-Channel\tinit", "contents": "Channel ${1:channel} = new Channel($2);"},
		{"trigger": "I-ChannelBinding\tinit", "contents": "ChannelBinding ${1:binding} = new ChannelBinding($2);"},
		{"trigger": "I-Channels\tinit", "contents": "Channels ${1:channels} = new Channels($2);"},
		{"trigger": "I-CharArrayIterator\tinit", "contents": "CharArrayIterator ${1:iterator} = new CharArrayIterator($2);"},
		{"trigger": "I-CharArrayReader\tinit", "contents": "CharArrayReader ${1:reader} = new CharArrayReader($2);"},
		{"trigger": "I-CharArrayWrapper\tinit", "contents": "CharArrayWrapper ${1:wrapper} = new CharArrayWrapper($2);"},
		{"trigger": "I-CharArrayWriter\tinit", "contents": "CharArrayWriter ${1:writer} = new CharArrayWriter($2);"},
		{"trigger": "I-CharBuffer\tinit", "contents": "CharBuffer ${1:buffer} = new CharBuffer($2);"},
		{"trigger": "I-CharBufferSpliterator\tinit", "contents": "CharBufferSpliterator ${1:spliterator} = new CharBufferSpliterator($2);"},
		{"trigger": "I-CharConversionException\tinit", "contents": "CharConversionException ${1:exception} = new CharConversionException($2);"},
		{"trigger": "I-CharHolder\tinit", "contents": "CharHolder ${1:holder} = new CharHolder($2);"},
		{"trigger": "I-CharInfo\tinit", "contents": "CharInfo ${1:info} = new CharInfo($2);"},
		{"trigger": "I-CharKey\tinit", "contents": "CharKey ${1:key} = new CharKey($2);"},
		{"trigger": "I-CharSeqHelper\tinit", "contents": "CharSeqHelper ${1:helper} = new CharSeqHelper($2);"},
		{"trigger": "I-CharSeqHolder\tinit", "contents": "CharSeqHolder ${1:holder} = new CharSeqHolder($2);"},
		{"trigger": "I-CharSequence\tinit", "contents": "CharSequence ${1:sequence} = new CharSequence($2);"},
		{"trigger": "I-CharToGlyphMapper\tinit", "contents": "CharToGlyphMapper ${1:mapper} = new CharToGlyphMapper($2);"},
		{"trigger": "I-Character\tinit", "contents": "Character ${1:character} = new Character($2);"},
		{"trigger": "I-CharacterArrayCharacterIterator\tinit", "contents": "CharacterArrayCharacterIterator ${1:iterator} = new CharacterArrayCharacterIterator($2);"},
		{"trigger": "I-CharacterCodingException\tinit", "contents": "CharacterCodingException ${1:exception} = new CharacterCodingException($2);"},
		{"trigger": "I-CharacterData\tinit", "contents": "CharacterData ${1:data} = new CharacterData($2);"},
		{"trigger": "I-CharacterData0E\tinit", "contents": "CharacterData0E ${1:characterdata0e} = new CharacterData0E($2);"},
		{"trigger": "I-CharacterDataImpl\tinit", "contents": "CharacterDataImpl ${1:impl} = new CharacterDataImpl($2);"},
		{"trigger": "I-CharacterDataPrivateUse\tinit", "contents": "CharacterDataPrivateUse ${1:use} = new CharacterDataPrivateUse($2);"},
		{"trigger": "I-CharacterDataUndefined\tinit", "contents": "CharacterDataUndefined ${1:undefined} = new CharacterDataUndefined($2);"},
		{"trigger": "I-CharacterIterator\tinit", "contents": "CharacterIterator ${1:iterator} = new CharacterIterator($2);"},
		{"trigger": "I-CharacterIteratorFieldDelegate\tinit", "contents": "CharacterIteratorFieldDelegate ${1:delegate} = new CharacterIteratorFieldDelegate($2);"},
		{"trigger": "I-CharacterName\tinit", "contents": "CharacterName ${1:name} = new CharacterName($2);"},
		{"trigger": "I-CharacterStringConverter\tinit", "contents": "CharacterStringConverter ${1:converter} = new CharacterStringConverter($2);"},
		{"trigger": "I-Characters\tinit", "contents": "Characters ${1:characters} = new Characters($2);"},
		{"trigger": "I-Charset\tinit", "contents": "Charset ${1:charset} = new Charset($2);"},
		{"trigger": "I-CharsetDecoder\tinit", "contents": "CharsetDecoder ${1:decoder} = new CharsetDecoder($2);"},
		{"trigger": "I-CharsetEncoder\tinit", "contents": "CharsetEncoder ${1:encoder} = new CharsetEncoder($2);"},
		{"trigger": "I-CharsetProvider\tinit", "contents": "CharsetProvider ${1:provider} = new CharsetProvider($2);"},
		{"trigger": "I-ChartLayoutAnimator\tinit", "contents": "ChartLayoutAnimator ${1:animator} = new ChartLayoutAnimator($2);"},
		{"trigger": "I-CheckBox\tinit", "contents": "CheckBox ${1:box} = new CheckBox($2);"},
		{"trigger": "I-CheckBoxBuilder\tinit", "contents": "CheckBoxBuilder ${1:builder} = new CheckBoxBuilder($2);"},
		{"trigger": "I-CheckBoxListCell\tinit", "contents": "CheckBoxListCell ${1:cell} = new CheckBoxListCell($2);"},
		{"trigger": "I-CheckBoxListCellBuilder\tinit", "contents": "CheckBoxListCellBuilder ${1:builder} = new CheckBoxListCellBuilder($2);"},
		{"trigger": "I-CheckBoxMenuItemPainter\tinit", "contents": "CheckBoxMenuItemPainter ${1:painter} = new CheckBoxMenuItemPainter($2);"},
		{"trigger": "I-CheckBoxPainter\tinit", "contents": "CheckBoxPainter ${1:painter} = new CheckBoxPainter($2);"},
		{"trigger": "I-CheckBoxSkin\tinit", "contents": "CheckBoxSkin ${1:skin} = new CheckBoxSkin($2);"},
		{"trigger": "I-CheckBoxTableCell\tinit", "contents": "CheckBoxTableCell ${1:cell} = new CheckBoxTableCell($2);"},
		{"trigger": "I-CheckBoxTableCellBuilder\tinit", "contents": "CheckBoxTableCellBuilder ${1:builder} = new CheckBoxTableCellBuilder($2);"},
		{"trigger": "I-CheckBoxTreeCell\tinit", "contents": "CheckBoxTreeCell ${1:cell} = new CheckBoxTreeCell($2);"},
		{"trigger": "I-CheckBoxTreeCellBuilder\tinit", "contents": "CheckBoxTreeCellBuilder ${1:builder} = new CheckBoxTreeCellBuilder($2);"},
		{"trigger": "I-CheckBoxTreeItem\tinit", "contents": "CheckBoxTreeItem ${1:item} = new CheckBoxTreeItem($2);"},
		{"trigger": "I-CheckBoxTreeItemBuilder\tinit", "contents": "CheckBoxTreeItemBuilder ${1:builder} = new CheckBoxTreeItemBuilder($2);"},
		{"trigger": "I-CheckBoxTreeTableCell\tinit", "contents": "CheckBoxTreeTableCell ${1:cell} = new CheckBoxTreeTableCell($2);"},
		{"trigger": "I-CheckMenuItem\tinit", "contents": "CheckMenuItem ${1:item} = new CheckMenuItem($2);"},
		{"trigger": "I-CheckMenuItemBase\tinit", "contents": "CheckMenuItemBase ${1:base} = new CheckMenuItemBase($2);"},
		{"trigger": "I-CheckMenuItemBuilder\tinit", "contents": "CheckMenuItemBuilder ${1:builder} = new CheckMenuItemBuilder($2);"},
		{"trigger": "I-Checkbox\tinit", "contents": "Checkbox ${1:checkbox} = new Checkbox($2);"},
		{"trigger": "I-CheckboxGroup\tinit", "contents": "CheckboxGroup ${1:group} = new CheckboxGroup($2);"},
		{"trigger": "I-CheckboxMenuItem\tinit", "contents": "CheckboxMenuItem ${1:item} = new CheckboxMenuItem($2);"},
		{"trigger": "I-CheckboxMenuItemPeer\tinit", "contents": "CheckboxMenuItemPeer ${1:peer} = new CheckboxMenuItemPeer($2);"},
		{"trigger": "I-CheckboxPeer\tinit", "contents": "CheckboxPeer ${1:peer} = new CheckboxPeer($2);"},
		{"trigger": "I-CheckedInputStream\tinit", "contents": "CheckedInputStream ${1:stream} = new CheckedInputStream($2);"},
		{"trigger": "I-CheckedOutputStream\tinit", "contents": "CheckedOutputStream ${1:stream} = new CheckedOutputStream($2);"},
		{"trigger": "I-Checksum\tinit", "contents": "Checksum ${1:checksum} = new Checksum($2);"},
		{"trigger": "I-ChildIterator\tinit", "contents": "ChildIterator ${1:iterator} = new ChildIterator($2);"},
		{"trigger": "I-ChildNode\tinit", "contents": "ChildNode ${1:node} = new ChildNode($2);"},
		{"trigger": "I-ChildTestIterator\tinit", "contents": "ChildTestIterator ${1:iterator} = new ChildTestIterator($2);"},
		{"trigger": "I-Choice\tinit", "contents": "Choice ${1:choice} = new Choice($2);"},
		{"trigger": "I-ChoiceBox\tinit", "contents": "ChoiceBox ${1:box} = new ChoiceBox($2);"},
		{"trigger": "I-ChoiceBoxBehavior\tinit", "contents": "ChoiceBoxBehavior ${1:behavior} = new ChoiceBoxBehavior($2);"},
		{"trigger": "I-ChoiceBoxBuilder\tinit", "contents": "ChoiceBoxBuilder ${1:builder} = new ChoiceBoxBuilder($2);"},
		{"trigger": "I-ChoiceBoxListCell\tinit", "contents": "ChoiceBoxListCell ${1:cell} = new ChoiceBoxListCell($2);"},
		{"trigger": "I-ChoiceBoxListCellBuilder\tinit", "contents": "ChoiceBoxListCellBuilder ${1:builder} = new ChoiceBoxListCellBuilder($2);"},
		{"trigger": "I-ChoiceBoxSkin\tinit", "contents": "ChoiceBoxSkin ${1:skin} = new ChoiceBoxSkin($2);"},
		{"trigger": "I-ChoiceBoxTableCell\tinit", "contents": "ChoiceBoxTableCell ${1:cell} = new ChoiceBoxTableCell($2);"},
		{"trigger": "I-ChoiceBoxTableCellBuilder\tinit", "contents": "ChoiceBoxTableCellBuilder ${1:builder} = new ChoiceBoxTableCellBuilder($2);"},
		{"trigger": "I-ChoiceBoxTreeCell\tinit", "contents": "ChoiceBoxTreeCell ${1:cell} = new ChoiceBoxTreeCell($2);"},
		{"trigger": "I-ChoiceBoxTreeCellBuilder\tinit", "contents": "ChoiceBoxTreeCellBuilder ${1:builder} = new ChoiceBoxTreeCellBuilder($2);"},
		{"trigger": "I-ChoiceBoxTreeTableCell\tinit", "contents": "ChoiceBoxTreeTableCell ${1:cell} = new ChoiceBoxTreeTableCell($2);"},
		{"trigger": "I-ChoiceCallback\tinit", "contents": "ChoiceCallback ${1:callback} = new ChoiceCallback($2);"},
		{"trigger": "I-ChoiceDialog\tinit", "contents": "ChoiceDialog ${1:dialog} = new ChoiceDialog($2);"},
		{"trigger": "I-ChoiceFormat\tinit", "contents": "ChoiceFormat ${1:format} = new ChoiceFormat($2);"},
		{"trigger": "I-ChoicePeer\tinit", "contents": "ChoicePeer ${1:peer} = new ChoicePeer($2);"},
		{"trigger": "I-Choose\tinit", "contents": "Choose ${1:choose} = new Choose($2);"},
		{"trigger": "I-Chromaticity\tinit", "contents": "Chromaticity ${1:chromaticity} = new Chromaticity($2);"},
		{"trigger": "I-ChronoField\tinit", "contents": "ChronoField ${1:field} = new ChronoField($2);"},
		{"trigger": "I-ChronoLocalDate\tinit", "contents": "ChronoLocalDate ${1:date} = new ChronoLocalDate($2);"},
		{"trigger": "I-ChronoLocalDateImpl\tinit", "contents": "ChronoLocalDateImpl ${1:impl} = new ChronoLocalDateImpl($2);"},
		{"trigger": "I-ChronoLocalDateTime\tinit", "contents": "ChronoLocalDateTime ${1:time} = new ChronoLocalDateTime($2);"},
		{"trigger": "I-ChronoLocalDateTimeImpl\tinit", "contents": "ChronoLocalDateTimeImpl ${1:impl} = new ChronoLocalDateTimeImpl($2);"},
		{"trigger": "I-ChronoPeriod\tinit", "contents": "ChronoPeriod ${1:period} = new ChronoPeriod($2);"},
		{"trigger": "I-ChronoPeriodImpl\tinit", "contents": "ChronoPeriodImpl ${1:impl} = new ChronoPeriodImpl($2);"},
		{"trigger": "I-ChronoUnit\tinit", "contents": "ChronoUnit ${1:unit} = new ChronoUnit($2);"},
		{"trigger": "I-ChronoZonedDateTime\tinit", "contents": "ChronoZonedDateTime ${1:time} = new ChronoZonedDateTime($2);"},
		{"trigger": "I-ChronoZonedDateTimeImpl\tinit", "contents": "ChronoZonedDateTimeImpl ${1:impl} = new ChronoZonedDateTimeImpl($2);"},
		{"trigger": "I-Chronology\tinit", "contents": "Chronology ${1:chronology} = new Chronology($2);"},
		{"trigger": "I-ChunkedIntArray\tinit", "contents": "ChunkedIntArray ${1:array} = new ChunkedIntArray($2);"},
		{"trigger": "I-CipherData\tinit", "contents": "CipherData ${1:data} = new CipherData($2);"},
		{"trigger": "I-CipherReference\tinit", "contents": "CipherReference ${1:reference} = new CipherReference($2);"},
		{"trigger": "I-CipherValue\tinit", "contents": "CipherValue ${1:value} = new CipherValue($2);"},
		{"trigger": "I-Circle\tinit", "contents": "Circle ${1:circle} = new Circle($2);"},
		{"trigger": "I-CircleBuilder\tinit", "contents": "CircleBuilder ${1:builder} = new CircleBuilder($2);"},
		{"trigger": "I-Class\tinit", "contents": "Class ${1:class} = new Class($2);"},
		{"trigger": "I-Class2HTML\tinit", "contents": "Class2HTML ${1:class2html} = new Class2HTML($2);"},
		{"trigger": "I-ClassAttributeValueExp\tinit", "contents": "ClassAttributeValueExp ${1:exp} = new ClassAttributeValueExp($2);"},
		{"trigger": "I-ClassCastException\tinit", "contents": "ClassCastException ${1:exception} = new ClassCastException($2);"},
		{"trigger": "I-ClassCircularityError\tinit", "contents": "ClassCircularityError ${1:error} = new ClassCircularityError($2);"},
		{"trigger": "I-ClassDefinition\tinit", "contents": "ClassDefinition ${1:definition} = new ClassDefinition($2);"},
		{"trigger": "I-ClassDesc\tinit", "contents": "ClassDesc ${1:desc} = new ClassDesc($2);"},
		{"trigger": "I-ClassDoc\tinit", "contents": "ClassDoc ${1:doc} = new ClassDoc($2);"},
		{"trigger": "I-ClassFileTransformer\tinit", "contents": "ClassFileTransformer ${1:transformer} = new ClassFileTransformer($2);"},
		{"trigger": "I-ClassFormatError\tinit", "contents": "ClassFormatError ${1:error} = new ClassFormatError($2);"},
		{"trigger": "I-ClassFormatException\tinit", "contents": "ClassFormatException ${1:exception} = new ClassFormatException($2);"},
		{"trigger": "I-ClassGen\tinit", "contents": "ClassGen ${1:gen} = new ClassGen($2);"},
		{"trigger": "I-ClassGenException\tinit", "contents": "ClassGenException ${1:exception} = new ClassGenException($2);"},
		{"trigger": "I-ClassGenerator\tinit", "contents": "ClassGenerator ${1:generator} = new ClassGenerator($2);"},
		{"trigger": "I-ClassLoader\tinit", "contents": "ClassLoader ${1:loader} = new ClassLoader($2);"},
		{"trigger": "I-ClassLoaderHelper\tinit", "contents": "ClassLoaderHelper ${1:helper} = new ClassLoaderHelper($2);"},
		{"trigger": "I-ClassLoaderRepository\tinit", "contents": "ClassLoaderRepository ${1:repository} = new ClassLoaderRepository($2);"},
		{"trigger": "I-ClassLoaderRepositorySupport\tinit", "contents": "ClassLoaderRepositorySupport ${1:support} = new ClassLoaderRepositorySupport($2);"},
		{"trigger": "I-ClassLoaderUtils\tinit", "contents": "ClassLoaderUtils ${1:utils} = new ClassLoaderUtils($2);"},
		{"trigger": "I-ClassLoaderWithRepository\tinit", "contents": "ClassLoaderWithRepository ${1:repository} = new ClassLoaderWithRepository($2);"},
		{"trigger": "I-ClassLoadingMXBean\tinit", "contents": "ClassLoadingMXBean ${1:bean} = new ClassLoadingMXBean($2);"},
		{"trigger": "I-ClassLogger\tinit", "contents": "ClassLogger ${1:logger} = new ClassLogger($2);"},
		{"trigger": "I-ClassNotFoundException\tinit", "contents": "ClassNotFoundException ${1:exception} = new ClassNotFoundException($2);"},
		{"trigger": "I-ClassObserver\tinit", "contents": "ClassObserver ${1:observer} = new ClassObserver($2);"},
		{"trigger": "I-ClassParser\tinit", "contents": "ClassParser ${1:parser} = new ClassParser($2);"},
		{"trigger": "I-ClassPath\tinit", "contents": "ClassPath ${1:path} = new ClassPath($2);"},
		{"trigger": "I-ClassQueue\tinit", "contents": "ClassQueue ${1:queue} = new ClassQueue($2);"},
		{"trigger": "I-ClassSet\tinit", "contents": "ClassSet ${1:set} = new ClassSet($2);"},
		{"trigger": "I-ClassStack\tinit", "contents": "ClassStack ${1:stack} = new ClassStack($2);"},
		{"trigger": "I-ClassTree\tinit", "contents": "ClassTree ${1:tree} = new ClassTree($2);"},
		{"trigger": "I-ClassValue\tinit", "contents": "ClassValue ${1:value} = new ClassValue($2);"},
		{"trigger": "I-ClassVector\tinit", "contents": "ClassVector ${1:vector} = new ClassVector($2);"},
		{"trigger": "I-ClientCommunicatorAdmin\tinit", "contents": "ClientCommunicatorAdmin ${1:admin} = new ClientCommunicatorAdmin($2);"},
		{"trigger": "I-ClientDelegateFactory\tinit", "contents": "ClientDelegateFactory ${1:factory} = new ClientDelegateFactory($2);"},
		{"trigger": "I-ClientHandler\tinit", "contents": "ClientHandler ${1:handler} = new ClientHandler($2);"},
		{"trigger": "I-ClientInfoStatus\tinit", "contents": "ClientInfoStatus ${1:status} = new ClientInfoStatus($2);"},
		{"trigger": "I-ClientListenerInfo\tinit", "contents": "ClientListenerInfo ${1:info} = new ClientListenerInfo($2);"},
		{"trigger": "I-ClientNotifForwarder\tinit", "contents": "ClientNotifForwarder ${1:forwarder} = new ClientNotifForwarder($2);"},
		{"trigger": "I-ClientPropertyKey\tinit", "contents": "ClientPropertyKey ${1:key} = new ClientPropertyKey($2);"},
		{"trigger": "I-ClientProvider\tinit", "contents": "ClientProvider ${1:provider} = new ClientProvider($2);"},
		{"trigger": "I-ClientRequestInfo\tinit", "contents": "ClientRequestInfo ${1:info} = new ClientRequestInfo($2);"},
		{"trigger": "I-ClientRequestInfoOperations\tinit", "contents": "ClientRequestInfoOperations ${1:operations} = new ClientRequestInfoOperations($2);"},
		{"trigger": "I-ClientRequestInterceptor\tinit", "contents": "ClientRequestInterceptor ${1:interceptor} = new ClientRequestInterceptor($2);"},
		{"trigger": "I-ClientRequestInterceptorOperations\tinit", "contents": "ClientRequestInterceptorOperations ${1:operations} = new ClientRequestInterceptorOperations($2);"},
		{"trigger": "I-Clip\tinit", "contents": "Clip ${1:clip} = new Clip($2);"},
		{"trigger": "I-ClipEnvelope\tinit", "contents": "ClipEnvelope ${1:envelope} = new ClipEnvelope($2);"},
		{"trigger": "I-ClipInterpolator\tinit", "contents": "ClipInterpolator ${1:interpolator} = new ClipInterpolator($2);"},
		{"trigger": "I-Clipboard\tinit", "contents": "Clipboard ${1:clipboard} = new Clipboard($2);"},
		{"trigger": "I-ClipboardAssistance\tinit", "contents": "ClipboardAssistance ${1:assistance} = new ClipboardAssistance($2);"},
		{"trigger": "I-ClipboardContent\tinit", "contents": "ClipboardContent ${1:content} = new ClipboardContent($2);"},
		{"trigger": "I-ClipboardContentBuilder\tinit", "contents": "ClipboardContentBuilder ${1:builder} = new ClipboardContentBuilder($2);"},
		{"trigger": "I-ClipboardDelegate\tinit", "contents": "ClipboardDelegate ${1:delegate} = new ClipboardDelegate($2);"},
		{"trigger": "I-ClipboardOwner\tinit", "contents": "ClipboardOwner ${1:owner} = new ClipboardOwner($2);"},
		{"trigger": "I-Clob\tinit", "contents": "Clob ${1:clob} = new Clob($2);"},
		{"trigger": "I-Clock\tinit", "contents": "Clock ${1:clock} = new Clock($2);"},
		{"trigger": "I-CloneNotSupportedException\tinit", "contents": "CloneNotSupportedException ${1:exception} = new CloneNotSupportedException($2);"},
		{"trigger": "I-Cloneable\tinit", "contents": "Cloneable ${1:cloneable} = new Cloneable($2);"},
		{"trigger": "I-ClonedNodeListIterator\tinit", "contents": "ClonedNodeListIterator ${1:iterator} = new ClonedNodeListIterator($2);"},
		{"trigger": "I-ClosePath\tinit", "contents": "ClosePath ${1:path} = new ClosePath($2);"},
		{"trigger": "I-ClosePathBuilder\tinit", "contents": "ClosePathBuilder ${1:builder} = new ClosePathBuilder($2);"},
		{"trigger": "I-Closeable\tinit", "contents": "Closeable ${1:closeable} = new Closeable($2);"},
		{"trigger": "I-CloseableDisposerRecord\tinit", "contents": "CloseableDisposerRecord ${1:record} = new CloseableDisposerRecord($2);"},
		{"trigger": "I-ClosedByInterruptException\tinit", "contents": "ClosedByInterruptException ${1:exception} = new ClosedByInterruptException($2);"},
		{"trigger": "I-ClosedChannelException\tinit", "contents": "ClosedChannelException ${1:exception} = new ClosedChannelException($2);"},
		{"trigger": "I-ClosedDirectoryStreamException\tinit", "contents": "ClosedDirectoryStreamException ${1:exception} = new ClosedDirectoryStreamException($2);"},
		{"trigger": "I-ClosedFileSystemException\tinit", "contents": "ClosedFileSystemException ${1:exception} = new ClosedFileSystemException($2);"},
		{"trigger": "I-ClosedSelectorException\tinit", "contents": "ClosedSelectorException ${1:exception} = new ClosedSelectorException($2);"},
		{"trigger": "I-ClosedWatchServiceException\tinit", "contents": "ClosedWatchServiceException ${1:exception} = new ClosedWatchServiceException($2);"},
		{"trigger": "I-Closure\tinit", "contents": "Closure ${1:closure} = new Closure($2);"},
		{"trigger": "I-ClosureFactory\tinit", "contents": "ClosureFactory ${1:factory} = new ClosureFactory($2);"},
		{"trigger": "I-Code\tinit", "contents": "Code ${1:code} = new Code($2);"},
		{"trigger": "I-CodeException\tinit", "contents": "CodeException ${1:exception} = new CodeException($2);"},
		{"trigger": "I-CodeExceptionGen\tinit", "contents": "CodeExceptionGen ${1:gen} = new CodeExceptionGen($2);"},
		{"trigger": "I-CodeHTML\tinit", "contents": "CodeHTML ${1:codehtml} = new CodeHTML($2);"},
		{"trigger": "I-CodeSetServiceContext\tinit", "contents": "CodeSetServiceContext ${1:context} = new CodeSetServiceContext($2);"},
		{"trigger": "I-CodeSets\tinit", "contents": "CodeSets ${1:sets} = new CodeSets($2);"},
		{"trigger": "I-CodeSetsComponent\tinit", "contents": "CodeSetsComponent ${1:component} = new CodeSetsComponent($2);"},
		{"trigger": "I-CodeSigner\tinit", "contents": "CodeSigner ${1:signer} = new CodeSigner($2);"},
		{"trigger": "I-CodeSource\tinit", "contents": "CodeSource ${1:source} = new CodeSource($2);"},
		{"trigger": "I-Codec\tinit", "contents": "Codec ${1:codec} = new Codec($2);"},
		{"trigger": "I-CodecFactory\tinit", "contents": "CodecFactory ${1:factory} = new CodecFactory($2);"},
		{"trigger": "I-CodecFactoryHelper\tinit", "contents": "CodecFactoryHelper ${1:helper} = new CodecFactoryHelper($2);"},
		{"trigger": "I-CodecFactoryOperations\tinit", "contents": "CodecFactoryOperations ${1:operations} = new CodecFactoryOperations($2);"},
		{"trigger": "I-CodecOperations\tinit", "contents": "CodecOperations ${1:operations} = new CodecOperations($2);"},
		{"trigger": "I-CoderMalfunctionError\tinit", "contents": "CoderMalfunctionError ${1:error} = new CoderMalfunctionError($2);"},
		{"trigger": "I-CoderResult\tinit", "contents": "CoderResult ${1:result} = new CoderResult($2);"},
		{"trigger": "I-CodingErrorAction\tinit", "contents": "CodingErrorAction ${1:action} = new CodingErrorAction($2);"},
		{"trigger": "I-CollapsedStringAdapter\tinit", "contents": "CollapsedStringAdapter ${1:adapter} = new CollapsedStringAdapter($2);"},
		{"trigger": "I-Collation\tinit", "contents": "Collation ${1:collation} = new Collation($2);"},
		{"trigger": "I-CollationElementIterator\tinit", "contents": "CollationElementIterator ${1:iterator} = new CollationElementIterator($2);"},
		{"trigger": "I-CollationKey\tinit", "contents": "CollationKey ${1:key} = new CollationKey($2);"},
		{"trigger": "I-Collator\tinit", "contents": "Collator ${1:collator} = new Collator($2);"},
		{"trigger": "I-CollatorFactory\tinit", "contents": "CollatorFactory ${1:factory} = new CollatorFactory($2);"},
		{"trigger": "I-CollatorFactoryBase\tinit", "contents": "CollatorFactoryBase ${1:base} = new CollatorFactoryBase($2);"},
		{"trigger": "I-CollatorProvider\tinit", "contents": "CollatorProvider ${1:provider} = new CollatorProvider($2);"},
		{"trigger": "I-Collection\tinit", "contents": "Collection ${1:collection} = new Collection($2);"},
		{"trigger": "I-CollectionCertStoreParameters\tinit", "contents": "CollectionCertStoreParameters ${1:parameters} = new CollectionCertStoreParameters($2);"},
		{"trigger": "I-Collections\tinit", "contents": "Collections ${1:collections} = new Collections($2);"},
		{"trigger": "I-Collector\tinit", "contents": "Collector ${1:collector} = new Collector($2);"},
		{"trigger": "I-Collectors\tinit", "contents": "Collectors ${1:collectors} = new Collectors($2);"},
		{"trigger": "I-Color\tinit", "contents": "Color ${1:color} = new Color($2);"},
		{"trigger": "I-Color4f\tinit", "contents": "Color4f ${1:color4f} = new Color4f($2);"},
		{"trigger": "I-ColorAdjust\tinit", "contents": "ColorAdjust ${1:adjust} = new ColorAdjust($2);"},
		{"trigger": "I-ColorAdjustBuilder\tinit", "contents": "ColorAdjustBuilder ${1:builder} = new ColorAdjustBuilder($2);"},
		{"trigger": "I-ColorBuilder\tinit", "contents": "ColorBuilder ${1:builder} = new ColorBuilder($2);"},
		{"trigger": "I-ColorChooserComponentFactory\tinit", "contents": "ColorChooserComponentFactory ${1:factory} = new ColorChooserComponentFactory($2);"},
		{"trigger": "I-ColorChooserPanel\tinit", "contents": "ColorChooserPanel ${1:panel} = new ColorChooserPanel($2);"},
		{"trigger": "I-ColorChooserUI\tinit", "contents": "ColorChooserUI ${1:colorchooserui} = new ColorChooserUI($2);"},
		{"trigger": "I-ColorConvertOp\tinit", "contents": "ColorConvertOp ${1:op} = new ColorConvertOp($2);"},
		{"trigger": "I-ColorConverter\tinit", "contents": "ColorConverter ${1:converter} = new ColorConverter($2);"},
		{"trigger": "I-ColorInput\tinit", "contents": "ColorInput ${1:input} = new ColorInput($2);"},
		{"trigger": "I-ColorInputBuilder\tinit", "contents": "ColorInputBuilder ${1:builder} = new ColorInputBuilder($2);"},
		{"trigger": "I-ColorModel\tinit", "contents": "ColorModel ${1:model} = new ColorModel($2);"},
		{"trigger": "I-ColorModelCMYK\tinit", "contents": "ColorModelCMYK ${1:colormodelcmyk} = new ColorModelCMYK($2);"},
		{"trigger": "I-ColorModelHSL\tinit", "contents": "ColorModelHSL ${1:colormodelhsl} = new ColorModelHSL($2);"},
		{"trigger": "I-ColorModelHSV\tinit", "contents": "ColorModelHSV ${1:colormodelhsv} = new ColorModelHSV($2);"},
		{"trigger": "I-ColorPaintContext\tinit", "contents": "ColorPaintContext ${1:context} = new ColorPaintContext($2);"},
		{"trigger": "I-ColorPalette\tinit", "contents": "ColorPalette ${1:palette} = new ColorPalette($2);"},
		{"trigger": "I-ColorPanel\tinit", "contents": "ColorPanel ${1:panel} = new ColorPanel($2);"},
		{"trigger": "I-ColorPicker\tinit", "contents": "ColorPicker ${1:picker} = new ColorPicker($2);"},
		{"trigger": "I-ColorPickerBehavior\tinit", "contents": "ColorPickerBehavior ${1:behavior} = new ColorPickerBehavior($2);"},
		{"trigger": "I-ColorPickerBuilder\tinit", "contents": "ColorPickerBuilder ${1:builder} = new ColorPickerBuilder($2);"},
		{"trigger": "I-ColorPickerSkin\tinit", "contents": "ColorPickerSkin ${1:skin} = new ColorPickerSkin($2);"},
		{"trigger": "I-ColorSelectionModel\tinit", "contents": "ColorSelectionModel ${1:model} = new ColorSelectionModel($2);"},
		{"trigger": "I-ColorSpace\tinit", "contents": "ColorSpace ${1:space} = new ColorSpace($2);"},
		{"trigger": "I-ColorSupported\tinit", "contents": "ColorSupported ${1:supported} = new ColorSupported($2);"},
		{"trigger": "I-ColorType\tinit", "contents": "ColorType ${1:type} = new ColorType($2);"},
		{"trigger": "I-ColorUIResource\tinit", "contents": "ColorUIResource ${1:resource} = new ColorUIResource($2);"},
		{"trigger": "I-ColumnConstraints\tinit", "contents": "ColumnConstraints ${1:constraints} = new ColumnConstraints($2);"},
		{"trigger": "I-ColumnConstraintsBuilder\tinit", "contents": "ColumnConstraintsBuilder ${1:builder} = new ColumnConstraintsBuilder($2);"},
		{"trigger": "I-Combinator\tinit", "contents": "Combinator ${1:combinator} = new Combinator($2);"},
		{"trigger": "I-ComboBox\tinit", "contents": "ComboBox ${1:box} = new ComboBox($2);"},
		{"trigger": "I-ComboBoxArrowButtonEditableState\tinit", "contents": "ComboBoxArrowButtonEditableState ${1:state} = new ComboBoxArrowButtonEditableState($2);"},
		{"trigger": "I-ComboBoxArrowButtonPainter\tinit", "contents": "ComboBoxArrowButtonPainter ${1:painter} = new ComboBoxArrowButtonPainter($2);"},
		{"trigger": "I-ComboBoxBase\tinit", "contents": "ComboBoxBase ${1:base} = new ComboBoxBase($2);"},
		{"trigger": "I-ComboBoxBaseBehavior\tinit", "contents": "ComboBoxBaseBehavior ${1:behavior} = new ComboBoxBaseBehavior($2);"},
		{"trigger": "I-ComboBoxBaseBuilder\tinit", "contents": "ComboBoxBaseBuilder ${1:builder} = new ComboBoxBaseBuilder($2);"},
		{"trigger": "I-ComboBoxBaseSkin\tinit", "contents": "ComboBoxBaseSkin ${1:skin} = new ComboBoxBaseSkin($2);"},
		{"trigger": "I-ComboBoxBuilder\tinit", "contents": "ComboBoxBuilder ${1:builder} = new ComboBoxBuilder($2);"},
		{"trigger": "I-ComboBoxEditableState\tinit", "contents": "ComboBoxEditableState ${1:state} = new ComboBoxEditableState($2);"},
		{"trigger": "I-ComboBoxEditor\tinit", "contents": "ComboBoxEditor ${1:editor} = new ComboBoxEditor($2);"},
		{"trigger": "I-ComboBoxListCell\tinit", "contents": "ComboBoxListCell ${1:cell} = new ComboBoxListCell($2);"},
		{"trigger": "I-ComboBoxListCellBuilder\tinit", "contents": "ComboBoxListCellBuilder ${1:builder} = new ComboBoxListCellBuilder($2);"},
		{"trigger": "I-ComboBoxListViewBehavior\tinit", "contents": "ComboBoxListViewBehavior ${1:behavior} = new ComboBoxListViewBehavior($2);"},
		{"trigger": "I-ComboBoxListViewSkin\tinit", "contents": "ComboBoxListViewSkin ${1:skin} = new ComboBoxListViewSkin($2);"},
		{"trigger": "I-ComboBoxMode\tinit", "contents": "ComboBoxMode ${1:mode} = new ComboBoxMode($2);"},
		{"trigger": "I-ComboBoxModel\tinit", "contents": "ComboBoxModel ${1:model} = new ComboBoxModel($2);"},
		{"trigger": "I-ComboBoxPainter\tinit", "contents": "ComboBoxPainter ${1:painter} = new ComboBoxPainter($2);"},
		{"trigger": "I-ComboBoxPopupControl\tinit", "contents": "ComboBoxPopupControl ${1:control} = new ComboBoxPopupControl($2);"},
		{"trigger": "I-ComboBoxTableCell\tinit", "contents": "ComboBoxTableCell ${1:cell} = new ComboBoxTableCell($2);"},
		{"trigger": "I-ComboBoxTableCellBuilder\tinit", "contents": "ComboBoxTableCellBuilder ${1:builder} = new ComboBoxTableCellBuilder($2);"},
		{"trigger": "I-ComboBoxTextFieldPainter\tinit", "contents": "ComboBoxTextFieldPainter ${1:painter} = new ComboBoxTextFieldPainter($2);"},
		{"trigger": "I-ComboBoxTreeCell\tinit", "contents": "ComboBoxTreeCell ${1:cell} = new ComboBoxTreeCell($2);"},
		{"trigger": "I-ComboBoxTreeCellBuilder\tinit", "contents": "ComboBoxTreeCellBuilder ${1:builder} = new ComboBoxTreeCellBuilder($2);"},
		{"trigger": "I-ComboBoxTreeTableCell\tinit", "contents": "ComboBoxTreeTableCell ${1:cell} = new ComboBoxTreeTableCell($2);"},
		{"trigger": "I-ComboBoxUI\tinit", "contents": "ComboBoxUI ${1:comboboxui} = new ComboBoxUI($2);"},
		{"trigger": "I-ComboPopup\tinit", "contents": "ComboPopup ${1:popup} = new ComboPopup($2);"},
		{"trigger": "I-Comment\tinit", "contents": "Comment ${1:comment} = new Comment($2);"},
		{"trigger": "I-CommentImpl\tinit", "contents": "CommentImpl ${1:impl} = new CommentImpl($2);"},
		{"trigger": "I-CommentTree\tinit", "contents": "CommentTree ${1:tree} = new CommentTree($2);"},
		{"trigger": "I-CommentView\tinit", "contents": "CommentView ${1:view} = new CommentView($2);"},
		{"trigger": "I-CommonDataSource\tinit", "contents": "CommonDataSource ${1:source} = new CommonDataSource($2);"},
		{"trigger": "I-CommonDialogs\tinit", "contents": "CommonDialogs ${1:dialogs} = new CommonDialogs($2);"},
		{"trigger": "I-CommunicationException\tinit", "contents": "CommunicationException ${1:exception} = new CommunicationException($2);"},
		{"trigger": "I-CommunicatorServer\tinit", "contents": "CommunicatorServer ${1:server} = new CommunicatorServer($2);"},
		{"trigger": "I-CommunicatorServerMBean\tinit", "contents": "CommunicatorServerMBean ${1:bean} = new CommunicatorServerMBean($2);"},
		{"trigger": "I-Comparable\tinit", "contents": "Comparable ${1:comparable} = new Comparable($2);"},
		{"trigger": "I-ComparableTimSort\tinit", "contents": "ComparableTimSort ${1:sort} = new ComparableTimSort($2);"},
		{"trigger": "I-Comparator\tinit", "contents": "Comparator ${1:comparator} = new Comparator($2);"},
		{"trigger": "I-Comparators\tinit", "contents": "Comparators ${1:comparators} = new Comparators($2);"},
		{"trigger": "I-CompareGenerator\tinit", "contents": "CompareGenerator ${1:generator} = new CompareGenerator($2);"},
		{"trigger": "I-Compilable\tinit", "contents": "Compilable ${1:compilable} = new Compilable($2);"},
		{"trigger": "I-CompilationMXBean\tinit", "contents": "CompilationMXBean ${1:bean} = new CompilationMXBean($2);"},
		{"trigger": "I-CompilationUnitTree\tinit", "contents": "CompilationUnitTree ${1:tree} = new CompilationUnitTree($2);"},
		{"trigger": "I-Compile\tinit", "contents": "Compile ${1:compile} = new Compile($2);"},
		{"trigger": "I-CompiledScript\tinit", "contents": "CompiledScript ${1:script} = new CompiledScript($2);"},
		{"trigger": "I-Compiler\tinit", "contents": "Compiler ${1:compiler} = new Compiler($2);"},
		{"trigger": "I-CompilerException\tinit", "contents": "CompilerException ${1:exception} = new CompilerException($2);"},
		{"trigger": "I-CompletableFuture\tinit", "contents": "CompletableFuture ${1:future} = new CompletableFuture($2);"},
		{"trigger": "I-Completion\tinit", "contents": "Completion ${1:completion} = new Completion($2);"},
		{"trigger": "I-CompletionException\tinit", "contents": "CompletionException ${1:exception} = new CompletionException($2);"},
		{"trigger": "I-CompletionHandler\tinit", "contents": "CompletionHandler ${1:handler} = new CompletionHandler($2);"},
		{"trigger": "I-CompletionListener\tinit", "contents": "CompletionListener ${1:listener} = new CompletionListener($2);"},
		{"trigger": "I-CompletionService\tinit", "contents": "CompletionService ${1:service} = new CompletionService($2);"},
		{"trigger": "I-CompletionStage\tinit", "contents": "CompletionStage ${1:stage} = new CompletionStage($2);"},
		{"trigger": "I-CompletionStatus\tinit", "contents": "CompletionStatus ${1:status} = new CompletionStatus($2);"},
		{"trigger": "I-CompletionStatusHelper\tinit", "contents": "CompletionStatusHelper ${1:helper} = new CompletionStatusHelper($2);"},
		{"trigger": "I-Completions\tinit", "contents": "Completions ${1:completions} = new Completions($2);"},
		{"trigger": "I-Component\tinit", "contents": "Component ${1:component} = new Component($2);"},
		{"trigger": "I-ComponentAdapter\tinit", "contents": "ComponentAdapter ${1:adapter} = new ComponentAdapter($2);"},
		{"trigger": "I-ComponentColorModel\tinit", "contents": "ComponentColorModel ${1:model} = new ComponentColorModel($2);"},
		{"trigger": "I-ComponentEvent\tinit", "contents": "ComponentEvent ${1:event} = new ComponentEvent($2);"},
		{"trigger": "I-ComponentIdHelper\tinit", "contents": "ComponentIdHelper ${1:helper} = new ComponentIdHelper($2);"},
		{"trigger": "I-ComponentInputMap\tinit", "contents": "ComponentInputMap ${1:map} = new ComponentInputMap($2);"},
		{"trigger": "I-ComponentInputMapUIResource\tinit", "contents": "ComponentInputMapUIResource ${1:resource} = new ComponentInputMapUIResource($2);"},
		{"trigger": "I-ComponentListener\tinit", "contents": "ComponentListener ${1:listener} = new ComponentListener($2);"},
		{"trigger": "I-ComponentOrientation\tinit", "contents": "ComponentOrientation ${1:orientation} = new ComponentOrientation($2);"},
		{"trigger": "I-ComponentPeer\tinit", "contents": "ComponentPeer ${1:peer} = new ComponentPeer($2);"},
		{"trigger": "I-ComponentSampleModel\tinit", "contents": "ComponentSampleModel ${1:model} = new ComponentSampleModel($2);"},
		{"trigger": "I-ComponentUI\tinit", "contents": "ComponentUI ${1:componentui} = new ComponentUI($2);"},
		{"trigger": "I-ComponentView\tinit", "contents": "ComponentView ${1:view} = new ComponentView($2);"},
		{"trigger": "I-Composite\tinit", "contents": "Composite ${1:composite} = new Composite($2);"},
		{"trigger": "I-CompositeContext\tinit", "contents": "CompositeContext ${1:context} = new CompositeContext($2);"},
		{"trigger": "I-CompositeData\tinit", "contents": "CompositeData ${1:data} = new CompositeData($2);"},
		{"trigger": "I-CompositeDataInvocationHandler\tinit", "contents": "CompositeDataInvocationHandler ${1:handler} = new CompositeDataInvocationHandler($2);"},
		{"trigger": "I-CompositeDataSupport\tinit", "contents": "CompositeDataSupport ${1:support} = new CompositeDataSupport($2);"},
		{"trigger": "I-CompositeDataView\tinit", "contents": "CompositeDataView ${1:view} = new CompositeDataView($2);"},
		{"trigger": "I-CompositeEventDispatcher\tinit", "contents": "CompositeEventDispatcher ${1:dispatcher} = new CompositeEventDispatcher($2);"},
		{"trigger": "I-CompositeEventHandler\tinit", "contents": "CompositeEventHandler ${1:handler} = new CompositeEventHandler($2);"},
		{"trigger": "I-CompositeEventTarget\tinit", "contents": "CompositeEventTarget ${1:target} = new CompositeEventTarget($2);"},
		{"trigger": "I-CompositeEventTargetImpl\tinit", "contents": "CompositeEventTargetImpl ${1:impl} = new CompositeEventTargetImpl($2);"},
		{"trigger": "I-CompositeFontResource\tinit", "contents": "CompositeFontResource ${1:resource} = new CompositeFontResource($2);"},
		{"trigger": "I-CompositeGlyphMapper\tinit", "contents": "CompositeGlyphMapper ${1:mapper} = new CompositeGlyphMapper($2);"},
		{"trigger": "I-CompositeInvocationHandler\tinit", "contents": "CompositeInvocationHandler ${1:handler} = new CompositeInvocationHandler($2);"},
		{"trigger": "I-CompositeInvocationHandlerImpl\tinit", "contents": "CompositeInvocationHandlerImpl ${1:impl} = new CompositeInvocationHandlerImpl($2);"},
		{"trigger": "I-CompositeMode\tinit", "contents": "CompositeMode ${1:mode} = new CompositeMode($2);"},
		{"trigger": "I-CompositeName\tinit", "contents": "CompositeName ${1:name} = new CompositeName($2);"},
		{"trigger": "I-CompositeStrike\tinit", "contents": "CompositeStrike ${1:strike} = new CompositeStrike($2);"},
		{"trigger": "I-CompositeStrikeDisposer\tinit", "contents": "CompositeStrikeDisposer ${1:disposer} = new CompositeStrikeDisposer($2);"},
		{"trigger": "I-CompositeType\tinit", "contents": "CompositeType ${1:type} = new CompositeType($2);"},
		{"trigger": "I-CompositeView\tinit", "contents": "CompositeView ${1:view} = new CompositeView($2);"},
		{"trigger": "I-CompoundAssignmentTree\tinit", "contents": "CompoundAssignmentTree ${1:tree} = new CompoundAssignmentTree($2);"},
		{"trigger": "I-CompoundBorder\tinit", "contents": "CompoundBorder ${1:border} = new CompoundBorder($2);"},
		{"trigger": "I-CompoundControl\tinit", "contents": "CompoundControl ${1:control} = new CompoundControl($2);"},
		{"trigger": "I-CompoundCoords\tinit", "contents": "CompoundCoords ${1:coords} = new CompoundCoords($2);"},
		{"trigger": "I-CompoundEdit\tinit", "contents": "CompoundEdit ${1:edit} = new CompoundEdit($2);"},
		{"trigger": "I-CompoundImage\tinit", "contents": "CompoundImage ${1:image} = new CompoundImage($2);"},
		{"trigger": "I-CompoundInstruction\tinit", "contents": "CompoundInstruction ${1:instruction} = new CompoundInstruction($2);"},
		{"trigger": "I-CompoundName\tinit", "contents": "CompoundName ${1:name} = new CompoundName($2);"},
		{"trigger": "I-CompoundSelector\tinit", "contents": "CompoundSelector ${1:selector} = new CompoundSelector($2);"},
		{"trigger": "I-CompoundTexture\tinit", "contents": "CompoundTexture ${1:texture} = new CompoundTexture($2);"},
		{"trigger": "I-Compression\tinit", "contents": "Compression ${1:compression} = new Compression($2);"},
		{"trigger": "I-ConcatCall\tinit", "contents": "ConcatCall ${1:call} = new ConcatCall($2);"},
		{"trigger": "I-ConcentricShapePair\tinit", "contents": "ConcentricShapePair ${1:pair} = new ConcentricShapePair($2);"},
		{"trigger": "I-ConcurrentHashMap\tinit", "contents": "ConcurrentHashMap ${1:map} = new ConcurrentHashMap($2);"},
		{"trigger": "I-ConcurrentLinkedDeque\tinit", "contents": "ConcurrentLinkedDeque ${1:deque} = new ConcurrentLinkedDeque($2);"},
		{"trigger": "I-ConcurrentLinkedQueue\tinit", "contents": "ConcurrentLinkedQueue ${1:queue} = new ConcurrentLinkedQueue($2);"},
		{"trigger": "I-ConcurrentMap\tinit", "contents": "ConcurrentMap ${1:map} = new ConcurrentMap($2);"},
		{"trigger": "I-ConcurrentModificationException\tinit", "contents": "ConcurrentModificationException ${1:exception} = new ConcurrentModificationException($2);"},
		{"trigger": "I-ConcurrentNavigableMap\tinit", "contents": "ConcurrentNavigableMap ${1:map} = new ConcurrentNavigableMap($2);"},
		{"trigger": "I-ConcurrentSkipListMap\tinit", "contents": "ConcurrentSkipListMap ${1:map} = new ConcurrentSkipListMap($2);"},
		{"trigger": "I-ConcurrentSkipListSet\tinit", "contents": "ConcurrentSkipListSet ${1:set} = new ConcurrentSkipListSet($2);"},
		{"trigger": "I-Condition\tinit", "contents": "Condition ${1:condition} = new Condition($2);"},
		{"trigger": "I-Conditional\tinit", "contents": "Conditional ${1:conditional} = new Conditional($2);"},
		{"trigger": "I-ConditionalExpressionTree\tinit", "contents": "ConditionalExpressionTree ${1:tree} = new ConditionalExpressionTree($2);"},
		{"trigger": "I-ConditionalFeature\tinit", "contents": "ConditionalFeature ${1:feature} = new ConditionalFeature($2);"},
		{"trigger": "I-ConditionalSpecialCasing\tinit", "contents": "ConditionalSpecialCasing ${1:casing} = new ConditionalSpecialCasing($2);"},
		{"trigger": "I-ConfigFile\tinit", "contents": "ConfigFile ${1:file} = new ConfigFile($2);"},
		{"trigger": "I-Configuration\tinit", "contents": "Configuration ${1:configuration} = new Configuration($2);"},
		{"trigger": "I-ConfigurationError\tinit", "contents": "ConfigurationError ${1:error} = new ConfigurationError($2);"},
		{"trigger": "I-ConfigurationException\tinit", "contents": "ConfigurationException ${1:exception} = new ConfigurationException($2);"},
		{"trigger": "I-ConfigurationSpi\tinit", "contents": "ConfigurationSpi ${1:spi} = new ConfigurationSpi($2);"},
		{"trigger": "I-ConfirmationCallback\tinit", "contents": "ConfirmationCallback ${1:callback} = new ConfirmationCallback($2);"},
		{"trigger": "I-ConnectException\tinit", "contents": "ConnectException ${1:exception} = new ConnectException($2);"},
		{"trigger": "I-ConnectIOException\tinit", "contents": "ConnectIOException ${1:exception} = new ConnectIOException($2);"},
		{"trigger": "I-Connection\tinit", "contents": "Connection ${1:connection} = new Connection($2);"},
		{"trigger": "I-ConnectionEvent\tinit", "contents": "ConnectionEvent ${1:event} = new ConnectionEvent($2);"},
		{"trigger": "I-ConnectionEventListener\tinit", "contents": "ConnectionEventListener ${1:listener} = new ConnectionEventListener($2);"},
		{"trigger": "I-ConnectionHolder\tinit", "contents": "ConnectionHolder ${1:holder} = new ConnectionHolder($2);"},
		{"trigger": "I-ConnectionPendingException\tinit", "contents": "ConnectionPendingException ${1:exception} = new ConnectionPendingException($2);"},
		{"trigger": "I-ConnectionPoolDataSource\tinit", "contents": "ConnectionPoolDataSource ${1:source} = new ConnectionPoolDataSource($2);"},
		{"trigger": "I-Console\tinit", "contents": "Console ${1:console} = new Console($2);"},
		{"trigger": "I-ConsoleHandler\tinit", "contents": "ConsoleHandler ${1:handler} = new ConsoleHandler($2);"},
		{"trigger": "I-Constant\tinit", "contents": "Constant ${1:constant} = new Constant($2);"},
		{"trigger": "I-ConstantCP\tinit", "contents": "ConstantCP ${1:constantcp} = new ConstantCP($2);"},
		{"trigger": "I-ConstantCallSite\tinit", "contents": "ConstantCallSite ${1:site} = new ConstantCallSite($2);"},
		{"trigger": "I-ConstantClass\tinit", "contents": "ConstantClass ${1:class} = new ConstantClass($2);"},
		{"trigger": "I-ConstantDouble\tinit", "contents": "ConstantDouble ${1:double} = new ConstantDouble($2);"},
		{"trigger": "I-ConstantFieldref\tinit", "contents": "ConstantFieldref ${1:fieldref} = new ConstantFieldref($2);"},
		{"trigger": "I-ConstantFloat\tinit", "contents": "ConstantFloat ${1:float} = new ConstantFloat($2);"},
		{"trigger": "I-ConstantHTML\tinit", "contents": "ConstantHTML ${1:constanthtml} = new ConstantHTML($2);"},
		{"trigger": "I-ConstantInteger\tinit", "contents": "ConstantInteger ${1:integer} = new ConstantInteger($2);"},
		{"trigger": "I-ConstantInterfaceMethodref\tinit", "contents": "ConstantInterfaceMethodref ${1:methodref} = new ConstantInterfaceMethodref($2);"},
		{"trigger": "I-ConstantLong\tinit", "contents": "ConstantLong ${1:long} = new ConstantLong($2);"},
		{"trigger": "I-ConstantMethodref\tinit", "contents": "ConstantMethodref ${1:methodref} = new ConstantMethodref($2);"},
		{"trigger": "I-ConstantNameAndType\tinit", "contents": "ConstantNameAndType ${1:type} = new ConstantNameAndType($2);"},
		{"trigger": "I-ConstantObject\tinit", "contents": "ConstantObject ${1:object} = new ConstantObject($2);"},
		{"trigger": "I-ConstantPool\tinit", "contents": "ConstantPool ${1:pool} = new ConstantPool($2);"},
		{"trigger": "I-ConstantPoolGen\tinit", "contents": "ConstantPoolGen ${1:gen} = new ConstantPoolGen($2);"},
		{"trigger": "I-ConstantPushInstruction\tinit", "contents": "ConstantPushInstruction ${1:instruction} = new ConstantPushInstruction($2);"},
		{"trigger": "I-ConstantString\tinit", "contents": "ConstantString ${1:string} = new ConstantString($2);"},
		{"trigger": "I-ConstantValue\tinit", "contents": "ConstantValue ${1:value} = new ConstantValue($2);"},
		{"trigger": "I-Constants\tinit", "contents": "Constants ${1:constants} = new Constants($2);"},
		{"trigger": "I-ConstraintsBase\tinit", "contents": "ConstraintsBase ${1:base} = new ConstraintsBase($2);"},
		{"trigger": "I-Constructor\tinit", "contents": "Constructor ${1:constructor} = new Constructor($2);"},
		{"trigger": "I-ConstructorDoc\tinit", "contents": "ConstructorDoc ${1:doc} = new ConstructorDoc($2);"},
		{"trigger": "I-ConstructorProperties\tinit", "contents": "ConstructorProperties ${1:properties} = new ConstructorProperties($2);"},
		{"trigger": "I-Consumer\tinit", "contents": "Consumer ${1:consumer} = new Consumer($2);"},
		{"trigger": "I-Container\tinit", "contents": "Container ${1:container} = new Container($2);"},
		{"trigger": "I-ContainerAdapter\tinit", "contents": "ContainerAdapter ${1:adapter} = new ContainerAdapter($2);"},
		{"trigger": "I-ContainerEvent\tinit", "contents": "ContainerEvent ${1:event} = new ContainerEvent($2);"},
		{"trigger": "I-ContainerListener\tinit", "contents": "ContainerListener ${1:listener} = new ContainerListener($2);"},
		{"trigger": "I-ContainerOrderFocusTraversalPolicy\tinit", "contents": "ContainerOrderFocusTraversalPolicy ${1:policy} = new ContainerOrderFocusTraversalPolicy($2);"},
		{"trigger": "I-ContainerPeer\tinit", "contents": "ContainerPeer ${1:peer} = new ContainerPeer($2);"},
		{"trigger": "I-ContainerTabOrder\tinit", "contents": "ContainerTabOrder ${1:order} = new ContainerTabOrder($2);"},
		{"trigger": "I-ContainsCall\tinit", "contents": "ContainsCall ${1:call} = new ContainsCall($2);"},
		{"trigger": "I-ContentBinding\tinit", "contents": "ContentBinding ${1:binding} = new ContentBinding($2);"},
		{"trigger": "I-ContentDisplay\tinit", "contents": "ContentDisplay ${1:display} = new ContentDisplay($2);"},
		{"trigger": "I-ContentHandler\tinit", "contents": "ContentHandler ${1:handler} = new ContentHandler($2);"},
		{"trigger": "I-ContentHandlerAlreadyRegisteredException\tinit", "contents": "ContentHandlerAlreadyRegisteredException ${1:exception} = new ContentHandlerAlreadyRegisteredException($2);"},
		{"trigger": "I-ContentHandlerFactory\tinit", "contents": "ContentHandlerFactory ${1:factory} = new ContentHandlerFactory($2);"},
		{"trigger": "I-ContentModel\tinit", "contents": "ContentModel ${1:model} = new ContentModel($2);"},
		{"trigger": "I-ContentModelState\tinit", "contents": "ContentModelState ${1:state} = new ContentModelState($2);"},
		{"trigger": "I-ContentModelValidator\tinit", "contents": "ContentModelValidator ${1:validator} = new ContentModelValidator($2);"},
		{"trigger": "I-Context\tinit", "contents": "Context ${1:context} = new Context($2);"},
		{"trigger": "I-ContextFinder\tinit", "contents": "ContextFinder ${1:finder} = new ContextFinder($2);"},
		{"trigger": "I-ContextList\tinit", "contents": "ContextList ${1:list} = new ContextList($2);"},
		{"trigger": "I-ContextMatchStepPattern\tinit", "contents": "ContextMatchStepPattern ${1:pattern} = new ContextMatchStepPattern($2);"},
		{"trigger": "I-ContextMenu\tinit", "contents": "ContextMenu ${1:menu} = new ContextMenu($2);"},
		{"trigger": "I-ContextMenuBuilder\tinit", "contents": "ContextMenuBuilder ${1:builder} = new ContextMenuBuilder($2);"},
		{"trigger": "I-ContextMenuContent\tinit", "contents": "ContextMenuContent ${1:content} = new ContextMenuContent($2);"},
		{"trigger": "I-ContextMenuEvent\tinit", "contents": "ContextMenuEvent ${1:event} = new ContextMenuEvent($2);"},
		{"trigger": "I-ContextMenuImpl\tinit", "contents": "ContextMenuImpl ${1:impl} = new ContextMenuImpl($2);"},
		{"trigger": "I-ContextMenuItem\tinit", "contents": "ContextMenuItem ${1:item} = new ContextMenuItem($2);"},
		{"trigger": "I-ContextMenuSkin\tinit", "contents": "ContextMenuSkin ${1:skin} = new ContextMenuSkin($2);"},
		{"trigger": "I-ContextNodeList\tinit", "contents": "ContextNodeList ${1:list} = new ContextNodeList($2);"},
		{"trigger": "I-ContextNotEmptyException\tinit", "contents": "ContextNotEmptyException ${1:exception} = new ContextNotEmptyException($2);"},
		{"trigger": "I-ContextualRenderedImageFactory\tinit", "contents": "ContextualRenderedImageFactory ${1:factory} = new ContextualRenderedImageFactory($2);"},
		{"trigger": "I-ContinuationContext\tinit", "contents": "ContinuationContext ${1:context} = new ContinuationContext($2);"},
		{"trigger": "I-ContinuationDirContext\tinit", "contents": "ContinuationDirContext ${1:context} = new ContinuationDirContext($2);"},
		{"trigger": "I-ContinueTree\tinit", "contents": "ContinueTree ${1:tree} = new ContinueTree($2);"},
		{"trigger": "I-Control\tinit", "contents": "Control ${1:control} = new Control($2);"},
		{"trigger": "I-ControlAcceleratorSupport\tinit", "contents": "ControlAcceleratorSupport ${1:support} = new ControlAcceleratorSupport($2);"},
		{"trigger": "I-ControlBuilder\tinit", "contents": "ControlBuilder ${1:builder} = new ControlBuilder($2);"},
		{"trigger": "I-ControlFactory\tinit", "contents": "ControlFactory ${1:factory} = new ControlFactory($2);"},
		{"trigger": "I-ControlResources\tinit", "contents": "ControlResources ${1:resources} = new ControlResources($2);"},
		{"trigger": "I-ControlUtils\tinit", "contents": "ControlUtils ${1:utils} = new ControlUtils($2);"},
		{"trigger": "I-ControllerEventListener\tinit", "contents": "ControllerEventListener ${1:listener} = new ControllerEventListener($2);"},
		{"trigger": "I-ConversionInstruction\tinit", "contents": "ConversionInstruction ${1:instruction} = new ConversionInstruction($2);"},
		{"trigger": "I-ConvertingMethod\tinit", "contents": "ConvertingMethod ${1:method} = new ConvertingMethod($2);"},
		{"trigger": "I-ConvolveOp\tinit", "contents": "ConvolveOp ${1:op} = new ConvolveOp($2);"},
		{"trigger": "I-Cookie\tinit", "contents": "Cookie ${1:cookie} = new Cookie($2);"},
		{"trigger": "I-CookieHandler\tinit", "contents": "CookieHandler ${1:handler} = new CookieHandler($2);"},
		{"trigger": "I-CookieHolder\tinit", "contents": "CookieHolder ${1:holder} = new CookieHolder($2);"},
		{"trigger": "I-CookieJar\tinit", "contents": "CookieJar ${1:jar} = new CookieJar($2);"},
		{"trigger": "I-CookieManager\tinit", "contents": "CookieManager ${1:manager} = new CookieManager($2);"},
		{"trigger": "I-CookiePolicy\tinit", "contents": "CookiePolicy ${1:policy} = new CookiePolicy($2);"},
		{"trigger": "I-CookieStore\tinit", "contents": "CookieStore ${1:store} = new CookieStore($2);"},
		{"trigger": "I-Coords\tinit", "contents": "Coords ${1:coords} = new Coords($2);"},
		{"trigger": "I-CopierManager\tinit", "contents": "CopierManager ${1:manager} = new CopierManager($2);"},
		{"trigger": "I-Copies\tinit", "contents": "Copies ${1:copies} = new Copies($2);"},
		{"trigger": "I-CopiesSupported\tinit", "contents": "CopiesSupported ${1:supported} = new CopiesSupported($2);"},
		{"trigger": "I-Copy\tinit", "contents": "Copy ${1:copy} = new Copy($2);"},
		{"trigger": "I-CopyMoveHelper\tinit", "contents": "CopyMoveHelper ${1:helper} = new CopyMoveHelper($2);"},
		{"trigger": "I-CopyObjectPolicy\tinit", "contents": "CopyObjectPolicy ${1:policy} = new CopyObjectPolicy($2);"},
		{"trigger": "I-CopyOf\tinit", "contents": "CopyOf ${1:of} = new CopyOf($2);"},
		{"trigger": "I-CopyOnWriteArrayList\tinit", "contents": "CopyOnWriteArrayList ${1:list} = new CopyOnWriteArrayList($2);"},
		{"trigger": "I-CopyOnWriteArraySet\tinit", "contents": "CopyOnWriteArraySet ${1:set} = new CopyOnWriteArraySet($2);"},
		{"trigger": "I-CopyOption\tinit", "contents": "CopyOption ${1:option} = new CopyOption($2);"},
		{"trigger": "I-CopyobjectDefaults\tinit", "contents": "CopyobjectDefaults ${1:defaults} = new CopyobjectDefaults($2);"},
		{"trigger": "I-CorbaAcceptor\tinit", "contents": "CorbaAcceptor ${1:acceptor} = new CorbaAcceptor($2);"},
		{"trigger": "I-CorbaClientDelegate\tinit", "contents": "CorbaClientDelegate ${1:delegate} = new CorbaClientDelegate($2);"},
		{"trigger": "I-CorbaConnection\tinit", "contents": "CorbaConnection ${1:connection} = new CorbaConnection($2);"},
		{"trigger": "I-CorbaConnectionCache\tinit", "contents": "CorbaConnectionCache ${1:cache} = new CorbaConnectionCache($2);"},
		{"trigger": "I-CorbaContactInfo\tinit", "contents": "CorbaContactInfo ${1:info} = new CorbaContactInfo($2);"},
		{"trigger": "I-CorbaContactInfoList\tinit", "contents": "CorbaContactInfoList ${1:list} = new CorbaContactInfoList($2);"},
		{"trigger": "I-CorbaContactInfoListFactory\tinit", "contents": "CorbaContactInfoListFactory ${1:factory} = new CorbaContactInfoListFactory($2);"},
		{"trigger": "I-CorbaContactInfoListIterator\tinit", "contents": "CorbaContactInfoListIterator ${1:iterator} = new CorbaContactInfoListIterator($2);"},
		{"trigger": "I-CorbaInputObject\tinit", "contents": "CorbaInputObject ${1:object} = new CorbaInputObject($2);"},
		{"trigger": "I-CorbaMessageMediator\tinit", "contents": "CorbaMessageMediator ${1:mediator} = new CorbaMessageMediator($2);"},
		{"trigger": "I-CorbaOutputObject\tinit", "contents": "CorbaOutputObject ${1:object} = new CorbaOutputObject($2);"},
		{"trigger": "I-CorbaProtocolHandler\tinit", "contents": "CorbaProtocolHandler ${1:handler} = new CorbaProtocolHandler($2);"},
		{"trigger": "I-CorbaResponseWaitingRoom\tinit", "contents": "CorbaResponseWaitingRoom ${1:room} = new CorbaResponseWaitingRoom($2);"},
		{"trigger": "I-CorbaServerRequestDispatcher\tinit", "contents": "CorbaServerRequestDispatcher ${1:dispatcher} = new CorbaServerRequestDispatcher($2);"},
		{"trigger": "I-CorbaTransportManager\tinit", "contents": "CorbaTransportManager ${1:manager} = new CorbaTransportManager($2);"},
		{"trigger": "I-CoreDOMImplementationImpl\tinit", "contents": "CoreDOMImplementationImpl ${1:impl} = new CoreDOMImplementationImpl($2);"},
		{"trigger": "I-CoreDocumentImpl\tinit", "contents": "CoreDocumentImpl ${1:impl} = new CoreDocumentImpl($2);"},
		{"trigger": "I-CoreEffect\tinit", "contents": "CoreEffect ${1:effect} = new CoreEffect($2);"},
		{"trigger": "I-CornerRadii\tinit", "contents": "CornerRadii ${1:radii} = new CornerRadii($2);"},
		{"trigger": "I-CornerRadiiConverter\tinit", "contents": "CornerRadiiConverter ${1:converter} = new CornerRadiiConverter($2);"},
		{"trigger": "I-CoroutineManager\tinit", "contents": "CoroutineManager ${1:manager} = new CoroutineManager($2);"},
		{"trigger": "I-CoroutineParser\tinit", "contents": "CoroutineParser ${1:parser} = new CoroutineParser($2);"},
		{"trigger": "I-CountDownLatch\tinit", "contents": "CountDownLatch ${1:latch} = new CountDownLatch($2);"},
		{"trigger": "I-CountedCompleter\tinit", "contents": "CountedCompleter ${1:completer} = new CountedCompleter($2);"},
		{"trigger": "I-Counter\tinit", "contents": "Counter ${1:counter} = new Counter($2);"},
		{"trigger": "I-CounterImpl\tinit", "contents": "CounterImpl ${1:impl} = new CounterImpl($2);"},
		{"trigger": "I-CounterMonitor\tinit", "contents": "CounterMonitor ${1:monitor} = new CounterMonitor($2);"},
		{"trigger": "I-CounterMonitorMBean\tinit", "contents": "CounterMonitorMBean ${1:bean} = new CounterMonitorMBean($2);"},
		{"trigger": "I-CredentialException\tinit", "contents": "CredentialException ${1:exception} = new CredentialException($2);"},
		{"trigger": "I-CredentialExpiredException\tinit", "contents": "CredentialExpiredException ${1:exception} = new CredentialExpiredException($2);"},
		{"trigger": "I-CredentialNotFoundException\tinit", "contents": "CredentialNotFoundException ${1:exception} = new CredentialNotFoundException($2);"},
		{"trigger": "I-Crop\tinit", "contents": "Crop ${1:crop} = new Crop($2);"},
		{"trigger": "I-CropImageFilter\tinit", "contents": "CropImageFilter ${1:filter} = new CropImageFilter($2);"},
		{"trigger": "I-Crossings\tinit", "contents": "Crossings ${1:crossings} = new Crossings($2);"},
		{"trigger": "I-Crypt\tinit", "contents": "Crypt ${1:crypt} = new Crypt($2);"},
		{"trigger": "I-CryptoPrimitive\tinit", "contents": "CryptoPrimitive ${1:primitive} = new CryptoPrimitive($2);"},
		{"trigger": "I-Css2Bin\tinit", "contents": "Css2Bin ${1:bin} = new Css2Bin($2);"},
		{"trigger": "I-CssError\tinit", "contents": "CssError ${1:error} = new CssError($2);"},
		{"trigger": "I-CssFlags\tinit", "contents": "CssFlags ${1:flags} = new CssFlags($2);"},
		{"trigger": "I-CssMetaData\tinit", "contents": "CssMetaData ${1:data} = new CssMetaData($2);"},
		{"trigger": "I-CssStyleHelper\tinit", "contents": "CssStyleHelper ${1:helper} = new CssStyleHelper($2);"},
		{"trigger": "I-CubicApproximator\tinit", "contents": "CubicApproximator ${1:approximator} = new CubicApproximator($2);"},
		{"trigger": "I-CubicCurve\tinit", "contents": "CubicCurve ${1:curve} = new CubicCurve($2);"},
		{"trigger": "I-CubicCurve2D\tinit", "contents": "CubicCurve2D ${1:cubiccurve2d} = new CubicCurve2D($2);"},
		{"trigger": "I-CubicCurveBuilder\tinit", "contents": "CubicCurveBuilder ${1:builder} = new CubicCurveBuilder($2);"},
		{"trigger": "I-CubicCurveTo\tinit", "contents": "CubicCurveTo ${1:to} = new CubicCurveTo($2);"},
		{"trigger": "I-CubicCurveToBuilder\tinit", "contents": "CubicCurveToBuilder ${1:builder} = new CubicCurveToBuilder($2);"},
		{"trigger": "I-CubicIterator\tinit", "contents": "CubicIterator ${1:iterator} = new CubicIterator($2);"},
		{"trigger": "I-CullFace\tinit", "contents": "CullFace ${1:face} = new CullFace($2);"},
		{"trigger": "I-Currency\tinit", "contents": "Currency ${1:currency} = new Currency($2);"},
		{"trigger": "I-CurrencyNameProvider\tinit", "contents": "CurrencyNameProvider ${1:provider} = new CurrencyNameProvider($2);"},
		{"trigger": "I-CurrencyStringConverter\tinit", "contents": "CurrencyStringConverter ${1:converter} = new CurrencyStringConverter($2);"},
		{"trigger": "I-Current\tinit", "contents": "Current ${1:current} = new Current($2);"},
		{"trigger": "I-CurrentCall\tinit", "contents": "CurrentCall ${1:call} = new CurrentCall($2);"},
		{"trigger": "I-CurrentHelper\tinit", "contents": "CurrentHelper ${1:helper} = new CurrentHelper($2);"},
		{"trigger": "I-CurrentHolder\tinit", "contents": "CurrentHolder ${1:holder} = new CurrentHolder($2);"},
		{"trigger": "I-CurrentNodeListFilter\tinit", "contents": "CurrentNodeListFilter ${1:filter} = new CurrentNodeListFilter($2);"},
		{"trigger": "I-CurrentNodeListIterator\tinit", "contents": "CurrentNodeListIterator ${1:iterator} = new CurrentNodeListIterator($2);"},
		{"trigger": "I-CurrentOperations\tinit", "contents": "CurrentOperations ${1:operations} = new CurrentOperations($2);"},
		{"trigger": "I-Cursor\tinit", "contents": "Cursor ${1:cursor} = new Cursor($2);"},
		{"trigger": "I-CursorConverter\tinit", "contents": "CursorConverter ${1:converter} = new CursorConverter($2);"},
		{"trigger": "I-CursorFrame\tinit", "contents": "CursorFrame ${1:frame} = new CursorFrame($2);"},
		{"trigger": "I-CursorManager\tinit", "contents": "CursorManager ${1:manager} = new CursorManager($2);"},
		{"trigger": "I-CursorManagerImpl\tinit", "contents": "CursorManagerImpl ${1:impl} = new CursorManagerImpl($2);"},
		{"trigger": "I-CursorType\tinit", "contents": "CursorType ${1:type} = new CursorType($2);"},
		{"trigger": "I-CursorUtils\tinit", "contents": "CursorUtils ${1:utils} = new CursorUtils($2);"},
		{"trigger": "I-Curve\tinit", "contents": "Curve ${1:curve} = new Curve($2);"},
		{"trigger": "I-CurveLink\tinit", "contents": "CurveLink ${1:link} = new CurveLink($2);"},
		{"trigger": "I-CustomColorDialog\tinit", "contents": "CustomColorDialog ${1:dialog} = new CustomColorDialog($2);"},
		{"trigger": "I-CustomMarshal\tinit", "contents": "CustomMarshal ${1:marshal} = new CustomMarshal($2);"},
		{"trigger": "I-CustomMenuItem\tinit", "contents": "CustomMenuItem ${1:item} = new CustomMenuItem($2);"},
		{"trigger": "I-CustomMenuItemBase\tinit", "contents": "CustomMenuItemBase ${1:base} = new CustomMenuItemBase($2);"},
		{"trigger": "I-CustomMenuItemBuilder\tinit", "contents": "CustomMenuItemBuilder ${1:builder} = new CustomMenuItemBuilder($2);"},
		{"trigger": "I-CustomStringPool\tinit", "contents": "CustomStringPool ${1:pool} = new CustomStringPool($2);"},
		{"trigger": "I-CustomTransfer\tinit", "contents": "CustomTransfer ${1:transfer} = new CustomTransfer($2);"},
		{"trigger": "I-CustomTransferBuilder\tinit", "contents": "CustomTransferBuilder ${1:builder} = new CustomTransferBuilder($2);"},
		{"trigger": "I-CustomValue\tinit", "contents": "CustomValue ${1:value} = new CustomValue($2);"},
		{"trigger": "I-Customizer\tinit", "contents": "Customizer ${1:customizer} = new Customizer($2);"},
		{"trigger": "I-CycleMethod\tinit", "contents": "CycleMethod ${1:method} = new CycleMethod($2);"},
		{"trigger": "I-CyclicBarrier\tinit", "contents": "CyclicBarrier ${1:barrier} = new CyclicBarrier($2);"},
		{"trigger": "I-Cylinder\tinit", "contents": "Cylinder ${1:cylinder} = new Cylinder($2);"},
		{"trigger": "I-D2D1_COLOR_F\tinit", "contents": "D2D1_COLOR_F ${1:d2d1} = new D2D1_COLOR_F($2);"},
		{"trigger": "I-D2D1_MATRIX_3X2_F\tinit", "contents": "D2D1_MATRIX_3X2_F ${1:d2d1} = new D2D1_MATRIX_3X2_F($2);"},
		{"trigger": "I-D2D1_PIXEL_FORMAT\tinit", "contents": "D2D1_PIXEL_FORMAT ${1:d2d1} = new D2D1_PIXEL_FORMAT($2);"},
		{"trigger": "I-D2D1_POINT_2F\tinit", "contents": "D2D1_POINT_2F ${1:d2d1} = new D2D1_POINT_2F($2);"},
		{"trigger": "I-D2D1_RENDER_TARGET_PROPERTIES\tinit", "contents": "D2D1_RENDER_TARGET_PROPERTIES ${1:d2d1} = new D2D1_RENDER_TARGET_PROPERTIES($2);"},
		{"trigger": "I-D2F\tinit", "contents": "D2F ${1:d2f} = new D2F($2);"},
		{"trigger": "I-D2I\tinit", "contents": "D2I ${1:d2i} = new D2I($2);"},
		{"trigger": "I-D2L\tinit", "contents": "D2L ${1:d2l} = new D2L($2);"},
		{"trigger": "I-D3DContext\tinit", "contents": "D3DContext ${1:context} = new D3DContext($2);"},
		{"trigger": "I-D3DContextSource\tinit", "contents": "D3DContextSource ${1:source} = new D3DContextSource($2);"},
		{"trigger": "I-D3DDriverInformation\tinit", "contents": "D3DDriverInformation ${1:information} = new D3DDriverInformation($2);"},
		{"trigger": "I-D3DFrameStats\tinit", "contents": "D3DFrameStats ${1:stats} = new D3DFrameStats($2);"},
		{"trigger": "I-D3DGraphics\tinit", "contents": "D3DGraphics ${1:graphics} = new D3DGraphics($2);"},
		{"trigger": "I-D3DMesh\tinit", "contents": "D3DMesh ${1:mesh} = new D3DMesh($2);"},
		{"trigger": "I-D3DMeshView\tinit", "contents": "D3DMeshView ${1:view} = new D3DMeshView($2);"},
		{"trigger": "I-D3DPhongMaterial\tinit", "contents": "D3DPhongMaterial ${1:material} = new D3DPhongMaterial($2);"},
		{"trigger": "I-D3DPipeline\tinit", "contents": "D3DPipeline ${1:pipeline} = new D3DPipeline($2);"},
		{"trigger": "I-D3DRTTexture\tinit", "contents": "D3DRTTexture ${1:texture} = new D3DRTTexture($2);"},
		{"trigger": "I-D3DRenderTarget\tinit", "contents": "D3DRenderTarget ${1:target} = new D3DRenderTarget($2);"},
		{"trigger": "I-D3DResource\tinit", "contents": "D3DResource ${1:resource} = new D3DResource($2);"},
		{"trigger": "I-D3DResourceFactory\tinit", "contents": "D3DResourceFactory ${1:factory} = new D3DResourceFactory($2);"},
		{"trigger": "I-D3DShader\tinit", "contents": "D3DShader ${1:shader} = new D3DShader($2);"},
		{"trigger": "I-D3DShaderSource\tinit", "contents": "D3DShaderSource ${1:source} = new D3DShaderSource($2);"},
		{"trigger": "I-D3DSwapChain\tinit", "contents": "D3DSwapChain ${1:chain} = new D3DSwapChain($2);"},
		{"trigger": "I-D3DTexture\tinit", "contents": "D3DTexture ${1:texture} = new D3DTexture($2);"},
		{"trigger": "I-D3DTextureData\tinit", "contents": "D3DTextureData ${1:data} = new D3DTextureData($2);"},
		{"trigger": "I-D3DTextureResource\tinit", "contents": "D3DTextureResource ${1:resource} = new D3DTextureResource($2);"},
		{"trigger": "I-D3DVertexBuffer\tinit", "contents": "D3DVertexBuffer ${1:buffer} = new D3DVertexBuffer($2);"},
		{"trigger": "I-D3DVramPool\tinit", "contents": "D3DVramPool ${1:pool} = new D3DVramPool($2);"},
		{"trigger": "I-DADD\tinit", "contents": "DADD ${1:dadd} = new DADD($2);"},
		{"trigger": "I-DALOAD\tinit", "contents": "DALOAD ${1:daload} = new DALOAD($2);"},
		{"trigger": "I-DASTORE\tinit", "contents": "DASTORE ${1:dastore} = new DASTORE($2);"},
		{"trigger": "I-DATA_CONVERSION\tinit", "contents": "DATA_CONVERSION ${1:data} = new DATA_CONVERSION($2);"},
		{"trigger": "I-DCMPG\tinit", "contents": "DCMPG ${1:dcmpg} = new DCMPG($2);"},
		{"trigger": "I-DCMPL\tinit", "contents": "DCMPL ${1:dcmpl} = new DCMPL($2);"},
		{"trigger": "I-DCONST\tinit", "contents": "DCONST ${1:dconst} = new DCONST($2);"},
		{"trigger": "I-DDIV\tinit", "contents": "DDIV ${1:ddiv} = new DDIV($2);"},
		{"trigger": "I-DEREncodedKeyValue\tinit", "contents": "DEREncodedKeyValue ${1:value} = new DEREncodedKeyValue($2);"},
		{"trigger": "I-DEREncodedKeyValueResolver\tinit", "contents": "DEREncodedKeyValueResolver ${1:resolver} = new DEREncodedKeyValueResolver($2);"},
		{"trigger": "I-DFAContentModel\tinit", "contents": "DFAContentModel ${1:model} = new DFAContentModel($2);"},
		{"trigger": "I-DFontDecoder\tinit", "contents": "DFontDecoder ${1:decoder} = new DFontDecoder($2);"},
		{"trigger": "I-DGC\tinit", "contents": "DGC ${1:dgc} = new DGC($2);"},
		{"trigger": "I-DHTMarkerSegment\tinit", "contents": "DHTMarkerSegment ${1:segment} = new DHTMarkerSegment($2);"},
		{"trigger": "I-DISCARDING\tinit", "contents": "DISCARDING ${1:discarding} = new DISCARDING($2);"},
		{"trigger": "I-DLOAD\tinit", "contents": "DLOAD ${1:dload} = new DLOAD($2);"},
		{"trigger": "I-DMUL\tinit", "contents": "DMUL ${1:dmul} = new DMUL($2);"},
		{"trigger": "I-DNEG\tinit", "contents": "DNEG ${1:dneg} = new DNEG($2);"},
		{"trigger": "I-DOM\tinit", "contents": "DOM ${1:dom} = new DOM($2);"},
		{"trigger": "I-DOM2DTM\tinit", "contents": "DOM2DTM ${1:dom2dtm} = new DOM2DTM($2);"},
		{"trigger": "I-DOM2DTMdefaultNamespaceDeclarationNode\tinit", "contents": "DOM2DTMdefaultNamespaceDeclarationNode ${1:node} = new DOM2DTMdefaultNamespaceDeclarationNode($2);"},
		{"trigger": "I-DOM2Helper\tinit", "contents": "DOM2Helper ${1:helper} = new DOM2Helper($2);"},
		{"trigger": "I-DOM2SAX\tinit", "contents": "DOM2SAX ${1:dom2sax} = new DOM2SAX($2);"},
		{"trigger": "I-DOM2TO\tinit", "contents": "DOM2TO ${1:dom2to} = new DOM2TO($2);"},
		{"trigger": "I-DOMAdapter\tinit", "contents": "DOMAdapter ${1:adapter} = new DOMAdapter($2);"},
		{"trigger": "I-DOMBuilder\tinit", "contents": "DOMBuilder ${1:builder} = new DOMBuilder($2);"},
		{"trigger": "I-DOMCache\tinit", "contents": "DOMCache ${1:cache} = new DOMCache($2);"},
		{"trigger": "I-DOMCatalogParser\tinit", "contents": "DOMCatalogParser ${1:parser} = new DOMCatalogParser($2);"},
		{"trigger": "I-DOMCatalogReader\tinit", "contents": "DOMCatalogReader ${1:reader} = new DOMCatalogReader($2);"},
		{"trigger": "I-DOMConfiguration\tinit", "contents": "DOMConfiguration ${1:configuration} = new DOMConfiguration($2);"},
		{"trigger": "I-DOMConfigurationImpl\tinit", "contents": "DOMConfigurationImpl ${1:impl} = new DOMConfigurationImpl($2);"},
		{"trigger": "I-DOMCryptoContext\tinit", "contents": "DOMCryptoContext ${1:context} = new DOMCryptoContext($2);"},
		{"trigger": "I-DOMDocumentHandler\tinit", "contents": "DOMDocumentHandler ${1:handler} = new DOMDocumentHandler($2);"},
		{"trigger": "I-DOMEnhancedForDTM\tinit", "contents": "DOMEnhancedForDTM ${1:domenhancedfordtm} = new DOMEnhancedForDTM($2);"},
		{"trigger": "I-DOMEntityResolverWrapper\tinit", "contents": "DOMEntityResolverWrapper ${1:wrapper} = new DOMEntityResolverWrapper($2);"},
		{"trigger": "I-DOMError\tinit", "contents": "DOMError ${1:error} = new DOMError($2);"},
		{"trigger": "I-DOMErrorHandler\tinit", "contents": "DOMErrorHandler ${1:handler} = new DOMErrorHandler($2);"},
		{"trigger": "I-DOMErrorHandlerWrapper\tinit", "contents": "DOMErrorHandlerWrapper ${1:wrapper} = new DOMErrorHandlerWrapper($2);"},
		{"trigger": "I-DOMErrorImpl\tinit", "contents": "DOMErrorImpl ${1:impl} = new DOMErrorImpl($2);"},
		{"trigger": "I-DOMException\tinit", "contents": "DOMException ${1:exception} = new DOMException($2);"},
		{"trigger": "I-DOMHelper\tinit", "contents": "DOMHelper ${1:helper} = new DOMHelper($2);"},
		{"trigger": "I-DOMImplementation\tinit", "contents": "DOMImplementation ${1:implementation} = new DOMImplementation($2);"},
		{"trigger": "I-DOMImplementationCSS\tinit", "contents": "DOMImplementationCSS ${1:domimplementationcss} = new DOMImplementationCSS($2);"},
		{"trigger": "I-DOMImplementationImpl\tinit", "contents": "DOMImplementationImpl ${1:impl} = new DOMImplementationImpl($2);"},
		{"trigger": "I-DOMImplementationLS\tinit", "contents": "DOMImplementationLS ${1:domimplementationls} = new DOMImplementationLS($2);"},
		{"trigger": "I-DOMImplementationList\tinit", "contents": "DOMImplementationList ${1:list} = new DOMImplementationList($2);"},
		{"trigger": "I-DOMImplementationListImpl\tinit", "contents": "DOMImplementationListImpl ${1:impl} = new DOMImplementationListImpl($2);"},
		{"trigger": "I-DOMImplementationRegistry\tinit", "contents": "DOMImplementationRegistry ${1:registry} = new DOMImplementationRegistry($2);"},
		{"trigger": "I-DOMImplementationSource\tinit", "contents": "DOMImplementationSource ${1:source} = new DOMImplementationSource($2);"},
		{"trigger": "I-DOMImplementationSourceImpl\tinit", "contents": "DOMImplementationSourceImpl ${1:impl} = new DOMImplementationSourceImpl($2);"},
		{"trigger": "I-DOMInputImpl\tinit", "contents": "DOMInputImpl ${1:impl} = new DOMInputImpl($2);"},
		{"trigger": "I-DOMInputSource\tinit", "contents": "DOMInputSource ${1:source} = new DOMInputSource($2);"},
		{"trigger": "I-DOMLocator\tinit", "contents": "DOMLocator ${1:locator} = new DOMLocator($2);"},
		{"trigger": "I-DOMLocatorImpl\tinit", "contents": "DOMLocatorImpl ${1:impl} = new DOMLocatorImpl($2);"},
		{"trigger": "I-DOMMessageFormatter\tinit", "contents": "DOMMessageFormatter ${1:formatter} = new DOMMessageFormatter($2);"},
		{"trigger": "I-DOMNamespaceContext\tinit", "contents": "DOMNamespaceContext ${1:context} = new DOMNamespaceContext($2);"},
		{"trigger": "I-DOMNormalizer\tinit", "contents": "DOMNormalizer ${1:normalizer} = new DOMNormalizer($2);"},
		{"trigger": "I-DOMOrder\tinit", "contents": "DOMOrder ${1:order} = new DOMOrder($2);"},
		{"trigger": "I-DOMOutputImpl\tinit", "contents": "DOMOutputImpl ${1:impl} = new DOMOutputImpl($2);"},
		{"trigger": "I-DOMParser\tinit", "contents": "DOMParser ${1:parser} = new DOMParser($2);"},
		{"trigger": "I-DOMParserImpl\tinit", "contents": "DOMParserImpl ${1:impl} = new DOMParserImpl($2);"},
		{"trigger": "I-DOMResult\tinit", "contents": "DOMResult ${1:result} = new DOMResult($2);"},
		{"trigger": "I-DOMResultAugmentor\tinit", "contents": "DOMResultAugmentor ${1:augmentor} = new DOMResultAugmentor($2);"},
		{"trigger": "I-DOMResultBuilder\tinit", "contents": "DOMResultBuilder ${1:builder} = new DOMResultBuilder($2);"},
		{"trigger": "I-DOMSelectionImpl\tinit", "contents": "DOMSelectionImpl ${1:impl} = new DOMSelectionImpl($2);"},
		{"trigger": "I-DOMSerializer\tinit", "contents": "DOMSerializer ${1:serializer} = new DOMSerializer($2);"},
		{"trigger": "I-DOMSerializerImpl\tinit", "contents": "DOMSerializerImpl ${1:impl} = new DOMSerializerImpl($2);"},
		{"trigger": "I-DOMSignContext\tinit", "contents": "DOMSignContext ${1:context} = new DOMSignContext($2);"},
		{"trigger": "I-DOMSource\tinit", "contents": "DOMSource ${1:source} = new DOMSource($2);"},
		{"trigger": "I-DOMStringList\tinit", "contents": "DOMStringList ${1:list} = new DOMStringList($2);"},
		{"trigger": "I-DOMStringListImpl\tinit", "contents": "DOMStringListImpl ${1:impl} = new DOMStringListImpl($2);"},
		{"trigger": "I-DOMStructure\tinit", "contents": "DOMStructure ${1:structure} = new DOMStructure($2);"},
		{"trigger": "I-DOMURIReference\tinit", "contents": "DOMURIReference ${1:reference} = new DOMURIReference($2);"},
		{"trigger": "I-DOMUtil\tinit", "contents": "DOMUtil ${1:util} = new DOMUtil($2);"},
		{"trigger": "I-DOMValidateContext\tinit", "contents": "DOMValidateContext ${1:context} = new DOMValidateContext($2);"},
		{"trigger": "I-DOMValidatorHelper\tinit", "contents": "DOMValidatorHelper ${1:helper} = new DOMValidatorHelper($2);"},
		{"trigger": "I-DOMWSFilter\tinit", "contents": "DOMWSFilter ${1:filter} = new DOMWSFilter($2);"},
		{"trigger": "I-DOMWindowImpl\tinit", "contents": "DOMWindowImpl ${1:impl} = new DOMWindowImpl($2);"},
		{"trigger": "I-DOMXSImplementationSourceImpl\tinit", "contents": "DOMXSImplementationSourceImpl ${1:impl} = new DOMXSImplementationSourceImpl($2);"},
		{"trigger": "I-DQTMarkerSegment\tinit", "contents": "DQTMarkerSegment ${1:segment} = new DQTMarkerSegment($2);"},
		{"trigger": "I-DREM\tinit", "contents": "DREM ${1:drem} = new DREM($2);"},
		{"trigger": "I-DRETURN\tinit", "contents": "DRETURN ${1:dreturn} = new DRETURN($2);"},
		{"trigger": "I-DRIMarkerSegment\tinit", "contents": "DRIMarkerSegment ${1:segment} = new DRIMarkerSegment($2);"},
		{"trigger": "I-DSAGenParameterSpec\tinit", "contents": "DSAGenParameterSpec ${1:spec} = new DSAGenParameterSpec($2);"},
		{"trigger": "I-DSAKey\tinit", "contents": "DSAKey ${1:key} = new DSAKey($2);"},
		{"trigger": "I-DSAKeyPairGenerator\tinit", "contents": "DSAKeyPairGenerator ${1:generator} = new DSAKeyPairGenerator($2);"},
		{"trigger": "I-DSAKeyValue\tinit", "contents": "DSAKeyValue ${1:value} = new DSAKeyValue($2);"},
		{"trigger": "I-DSAKeyValueResolver\tinit", "contents": "DSAKeyValueResolver ${1:resolver} = new DSAKeyValueResolver($2);"},
		{"trigger": "I-DSAParameterSpec\tinit", "contents": "DSAParameterSpec ${1:spec} = new DSAParameterSpec($2);"},
		{"trigger": "I-DSAParams\tinit", "contents": "DSAParams ${1:params} = new DSAParams($2);"},
		{"trigger": "I-DSAPrivateKey\tinit", "contents": "DSAPrivateKey ${1:key} = new DSAPrivateKey($2);"},
		{"trigger": "I-DSAPrivateKeySpec\tinit", "contents": "DSAPrivateKeySpec ${1:spec} = new DSAPrivateKeySpec($2);"},
		{"trigger": "I-DSAPublicKey\tinit", "contents": "DSAPublicKey ${1:key} = new DSAPublicKey($2);"},
		{"trigger": "I-DSAPublicKeySpec\tinit", "contents": "DSAPublicKeySpec ${1:spec} = new DSAPublicKeySpec($2);"},
		{"trigger": "I-DSTORE\tinit", "contents": "DSTORE ${1:dstore} = new DSTORE($2);"},
		{"trigger": "I-DSUB\tinit", "contents": "DSUB ${1:dsub} = new DSUB($2);"},
		{"trigger": "I-DTD\tinit", "contents": "DTD ${1:dtd} = new DTD($2);"},
		{"trigger": "I-DTDConfiguration\tinit", "contents": "DTDConfiguration ${1:configuration} = new DTDConfiguration($2);"},
		{"trigger": "I-DTDConstants\tinit", "contents": "DTDConstants ${1:constants} = new DTDConstants($2);"},
		{"trigger": "I-DTDDVFactory\tinit", "contents": "DTDDVFactory ${1:factory} = new DTDDVFactory($2);"},
		{"trigger": "I-DTDDVFactoryImpl\tinit", "contents": "DTDDVFactoryImpl ${1:impl} = new DTDDVFactoryImpl($2);"},
		{"trigger": "I-DTDGrammar\tinit", "contents": "DTDGrammar ${1:grammar} = new DTDGrammar($2);"},
		{"trigger": "I-DTDGrammarBucket\tinit", "contents": "DTDGrammarBucket ${1:bucket} = new DTDGrammarBucket($2);"},
		{"trigger": "I-DTDHandler\tinit", "contents": "DTDHandler ${1:handler} = new DTDHandler($2);"},
		{"trigger": "I-DTDParser\tinit", "contents": "DTDParser ${1:parser} = new DTDParser($2);"},
		{"trigger": "I-DTM\tinit", "contents": "DTM ${1:dtm} = new DTM($2);"},
		{"trigger": "I-DTMAxisIterNodeList\tinit", "contents": "DTMAxisIterNodeList ${1:list} = new DTMAxisIterNodeList($2);"},
		{"trigger": "I-DTMAxisIterator\tinit", "contents": "DTMAxisIterator ${1:iterator} = new DTMAxisIterator($2);"},
		{"trigger": "I-DTMAxisIteratorBase\tinit", "contents": "DTMAxisIteratorBase ${1:base} = new DTMAxisIteratorBase($2);"},
		{"trigger": "I-DTMAxisTraverser\tinit", "contents": "DTMAxisTraverser ${1:traverser} = new DTMAxisTraverser($2);"},
		{"trigger": "I-DTMChildIterNodeList\tinit", "contents": "DTMChildIterNodeList ${1:list} = new DTMChildIterNodeList($2);"},
		{"trigger": "I-DTMConfigurationException\tinit", "contents": "DTMConfigurationException ${1:exception} = new DTMConfigurationException($2);"},
		{"trigger": "I-DTMDOMException\tinit", "contents": "DTMDOMException ${1:exception} = new DTMDOMException($2);"},
		{"trigger": "I-DTMDefaultBase\tinit", "contents": "DTMDefaultBase ${1:base} = new DTMDefaultBase($2);"},
		{"trigger": "I-DTMDefaultBaseIterators\tinit", "contents": "DTMDefaultBaseIterators ${1:iterators} = new DTMDefaultBaseIterators($2);"},
		{"trigger": "I-DTMDefaultBaseTraversers\tinit", "contents": "DTMDefaultBaseTraversers ${1:traversers} = new DTMDefaultBaseTraversers($2);"},
		{"trigger": "I-DTMDocumentImpl\tinit", "contents": "DTMDocumentImpl ${1:impl} = new DTMDocumentImpl($2);"},
		{"trigger": "I-DTMException\tinit", "contents": "DTMException ${1:exception} = new DTMException($2);"},
		{"trigger": "I-DTMFilter\tinit", "contents": "DTMFilter ${1:filter} = new DTMFilter($2);"},
		{"trigger": "I-DTMIterator\tinit", "contents": "DTMIterator ${1:iterator} = new DTMIterator($2);"},
		{"trigger": "I-DTMManager\tinit", "contents": "DTMManager ${1:manager} = new DTMManager($2);"},
		{"trigger": "I-DTMManagerDefault\tinit", "contents": "DTMManagerDefault ${1:default} = new DTMManagerDefault($2);"},
		{"trigger": "I-DTMNamedNodeMap\tinit", "contents": "DTMNamedNodeMap ${1:map} = new DTMNamedNodeMap($2);"},
		{"trigger": "I-DTMNodeIterator\tinit", "contents": "DTMNodeIterator ${1:iterator} = new DTMNodeIterator($2);"},
		{"trigger": "I-DTMNodeList\tinit", "contents": "DTMNodeList ${1:list} = new DTMNodeList($2);"},
		{"trigger": "I-DTMNodeListBase\tinit", "contents": "DTMNodeListBase ${1:base} = new DTMNodeListBase($2);"},
		{"trigger": "I-DTMNodeProxy\tinit", "contents": "DTMNodeProxy ${1:proxy} = new DTMNodeProxy($2);"},
		{"trigger": "I-DTMSafeStringPool\tinit", "contents": "DTMSafeStringPool ${1:pool} = new DTMSafeStringPool($2);"},
		{"trigger": "I-DTMStringPool\tinit", "contents": "DTMStringPool ${1:pool} = new DTMStringPool($2);"},
		{"trigger": "I-DTMTreeWalker\tinit", "contents": "DTMTreeWalker ${1:walker} = new DTMTreeWalker($2);"},
		{"trigger": "I-DTMWSFilter\tinit", "contents": "DTMWSFilter ${1:filter} = new DTMWSFilter($2);"},
		{"trigger": "I-DTMXRTreeFrag\tinit", "contents": "DTMXRTreeFrag ${1:frag} = new DTMXRTreeFrag($2);"},
		{"trigger": "I-DUP\tinit", "contents": "DUP ${1:dup} = new DUP($2);"},
		{"trigger": "I-DVFactoryException\tinit", "contents": "DVFactoryException ${1:exception} = new DVFactoryException($2);"},
		{"trigger": "I-DWDisposer\tinit", "contents": "DWDisposer ${1:disposer} = new DWDisposer($2);"},
		{"trigger": "I-DWFactory\tinit", "contents": "DWFactory ${1:factory} = new DWFactory($2);"},
		{"trigger": "I-DWFontFile\tinit", "contents": "DWFontFile ${1:file} = new DWFontFile($2);"},
		{"trigger": "I-DWFontStrike\tinit", "contents": "DWFontStrike ${1:strike} = new DWFontStrike($2);"},
		{"trigger": "I-DWGlyph\tinit", "contents": "DWGlyph ${1:glyph} = new DWGlyph($2);"},
		{"trigger": "I-DWGlyphLayout\tinit", "contents": "DWGlyphLayout ${1:layout} = new DWGlyphLayout($2);"},
		{"trigger": "I-DWRITE_GLYPH_METRICS\tinit", "contents": "DWRITE_GLYPH_METRICS ${1:dwrite} = new DWRITE_GLYPH_METRICS($2);"},
		{"trigger": "I-DWRITE_GLYPH_RUN\tinit", "contents": "DWRITE_GLYPH_RUN ${1:dwrite} = new DWRITE_GLYPH_RUN($2);"},
		{"trigger": "I-DWRITE_MATRIX\tinit", "contents": "DWRITE_MATRIX ${1:dwrite} = new DWRITE_MATRIX($2);"},
		{"trigger": "I-DWRITE_SCRIPT_ANALYSIS\tinit", "contents": "DWRITE_SCRIPT_ANALYSIS ${1:dwrite} = new DWRITE_SCRIPT_ANALYSIS($2);"},
		{"trigger": "I-DalvikInput\tinit", "contents": "DalvikInput ${1:input} = new DalvikInput($2);"},
		{"trigger": "I-Dasher\tinit", "contents": "Dasher ${1:dasher} = new Dasher($2);"},
		{"trigger": "I-Data\tinit", "contents": "Data ${1:data} = new Data($2);"},
		{"trigger": "I-DataBindingException\tinit", "contents": "DataBindingException ${1:exception} = new DataBindingException($2);"},
		{"trigger": "I-DataBuffer\tinit", "contents": "DataBuffer ${1:buffer} = new DataBuffer($2);"},
		{"trigger": "I-DataBufferByte\tinit", "contents": "DataBufferByte ${1:byte} = new DataBufferByte($2);"},
		{"trigger": "I-DataBufferDouble\tinit", "contents": "DataBufferDouble ${1:double} = new DataBufferDouble($2);"},
		{"trigger": "I-DataBufferFloat\tinit", "contents": "DataBufferFloat ${1:float} = new DataBufferFloat($2);"},
		{"trigger": "I-DataBufferInt\tinit", "contents": "DataBufferInt ${1:int} = new DataBufferInt($2);"},
		{"trigger": "I-DataBufferShort\tinit", "contents": "DataBufferShort ${1:short} = new DataBufferShort($2);"},
		{"trigger": "I-DataBufferUShort\tinit", "contents": "DataBufferUShort ${1:short} = new DataBufferUShort($2);"},
		{"trigger": "I-DataCollector\tinit", "contents": "DataCollector ${1:collector} = new DataCollector($2);"},
		{"trigger": "I-DataFlavor\tinit", "contents": "DataFlavor ${1:flavor} = new DataFlavor($2);"},
		{"trigger": "I-DataFlavorUtils\tinit", "contents": "DataFlavorUtils ${1:utils} = new DataFlavorUtils($2);"},
		{"trigger": "I-DataFormat\tinit", "contents": "DataFormat ${1:format} = new DataFormat($2);"},
		{"trigger": "I-DataFormatException\tinit", "contents": "DataFormatException ${1:exception} = new DataFormatException($2);"},
		{"trigger": "I-DataInput\tinit", "contents": "DataInput ${1:input} = new DataInput($2);"},
		{"trigger": "I-DataInputStream\tinit", "contents": "DataInputStream ${1:stream} = new DataInputStream($2);"},
		{"trigger": "I-DataLine\tinit", "contents": "DataLine ${1:line} = new DataLine($2);"},
		{"trigger": "I-DataOutput\tinit", "contents": "DataOutput ${1:output} = new DataOutput($2);"},
		{"trigger": "I-DataOutputStream\tinit", "contents": "DataOutputStream ${1:stream} = new DataOutputStream($2);"},
		{"trigger": "I-DataSource\tinit", "contents": "DataSource ${1:source} = new DataSource($2);"},
		{"trigger": "I-DataTruncation\tinit", "contents": "DataTruncation ${1:truncation} = new DataTruncation($2);"},
		{"trigger": "I-DataURLConnection\tinit", "contents": "DataURLConnection ${1:connection} = new DataURLConnection($2);"},
		{"trigger": "I-DatabaseMetaData\tinit", "contents": "DatabaseMetaData ${1:data} = new DatabaseMetaData($2);"},
		{"trigger": "I-DatagramChannel\tinit", "contents": "DatagramChannel ${1:channel} = new DatagramChannel($2);"},
		{"trigger": "I-DatagramPacket\tinit", "contents": "DatagramPacket ${1:packet} = new DatagramPacket($2);"},
		{"trigger": "I-DatagramSocket\tinit", "contents": "DatagramSocket ${1:socket} = new DatagramSocket($2);"},
		{"trigger": "I-DatagramSocketImpl\tinit", "contents": "DatagramSocketImpl ${1:impl} = new DatagramSocketImpl($2);"},
		{"trigger": "I-DatagramSocketImplFactory\tinit", "contents": "DatagramSocketImplFactory ${1:factory} = new DatagramSocketImplFactory($2);"},
		{"trigger": "I-DatatypeConfigurationException\tinit", "contents": "DatatypeConfigurationException ${1:exception} = new DatatypeConfigurationException($2);"},
		{"trigger": "I-DatatypeConstants\tinit", "contents": "DatatypeConstants ${1:constants} = new DatatypeConstants($2);"},
		{"trigger": "I-DatatypeConverter\tinit", "contents": "DatatypeConverter ${1:converter} = new DatatypeConverter($2);"},
		{"trigger": "I-DatatypeConverterImpl\tinit", "contents": "DatatypeConverterImpl ${1:impl} = new DatatypeConverterImpl($2);"},
		{"trigger": "I-DatatypeConverterInterface\tinit", "contents": "DatatypeConverterInterface ${1:interface} = new DatatypeConverterInterface($2);"},
		{"trigger": "I-DatatypeException\tinit", "contents": "DatatypeException ${1:exception} = new DatatypeException($2);"},
		{"trigger": "I-DatatypeFactory\tinit", "contents": "DatatypeFactory ${1:factory} = new DatatypeFactory($2);"},
		{"trigger": "I-DatatypeFactoryImpl\tinit", "contents": "DatatypeFactoryImpl ${1:impl} = new DatatypeFactoryImpl($2);"},
		{"trigger": "I-DatatypeMessageFormatter\tinit", "contents": "DatatypeMessageFormatter ${1:formatter} = new DatatypeMessageFormatter($2);"},
		{"trigger": "I-DatatypeValidator\tinit", "contents": "DatatypeValidator ${1:validator} = new DatatypeValidator($2);"},
		{"trigger": "I-Date\tinit", "contents": "Date ${1:date} = new Date($2);"},
		{"trigger": "I-DateCell\tinit", "contents": "DateCell ${1:cell} = new DateCell($2);"},
		{"trigger": "I-DateCellBehavior\tinit", "contents": "DateCellBehavior ${1:behavior} = new DateCellBehavior($2);"},
		{"trigger": "I-DateCellSkin\tinit", "contents": "DateCellSkin ${1:skin} = new DateCellSkin($2);"},
		{"trigger": "I-DateDV\tinit", "contents": "DateDV ${1:datedv} = new DateDV($2);"},
		{"trigger": "I-DateFormat\tinit", "contents": "DateFormat ${1:format} = new DateFormat($2);"},
		{"trigger": "I-DateFormatProvider\tinit", "contents": "DateFormatProvider ${1:provider} = new DateFormatProvider($2);"},
		{"trigger": "I-DateFormatSymbols\tinit", "contents": "DateFormatSymbols ${1:symbols} = new DateFormatSymbols($2);"},
		{"trigger": "I-DateFormatSymbolsProvider\tinit", "contents": "DateFormatSymbolsProvider ${1:provider} = new DateFormatSymbolsProvider($2);"},
		{"trigger": "I-DateFormatter\tinit", "contents": "DateFormatter ${1:formatter} = new DateFormatter($2);"},
		{"trigger": "I-DateParser\tinit", "contents": "DateParser ${1:parser} = new DateParser($2);"},
		{"trigger": "I-DatePicker\tinit", "contents": "DatePicker ${1:picker} = new DatePicker($2);"},
		{"trigger": "I-DatePickerBehavior\tinit", "contents": "DatePickerBehavior ${1:behavior} = new DatePickerBehavior($2);"},
		{"trigger": "I-DatePickerContent\tinit", "contents": "DatePickerContent ${1:content} = new DatePickerContent($2);"},
		{"trigger": "I-DatePickerHijrahContent\tinit", "contents": "DatePickerHijrahContent ${1:content} = new DatePickerHijrahContent($2);"},
		{"trigger": "I-DatePickerSkin\tinit", "contents": "DatePickerSkin ${1:skin} = new DatePickerSkin($2);"},
		{"trigger": "I-DateStringConverter\tinit", "contents": "DateStringConverter ${1:converter} = new DateStringConverter($2);"},
		{"trigger": "I-DateTimeAtCompleted\tinit", "contents": "DateTimeAtCompleted ${1:completed} = new DateTimeAtCompleted($2);"},
		{"trigger": "I-DateTimeAtCreation\tinit", "contents": "DateTimeAtCreation ${1:creation} = new DateTimeAtCreation($2);"},
		{"trigger": "I-DateTimeAtProcessing\tinit", "contents": "DateTimeAtProcessing ${1:processing} = new DateTimeAtProcessing($2);"},
		{"trigger": "I-DateTimeDV\tinit", "contents": "DateTimeDV ${1:datetimedv} = new DateTimeDV($2);"},
		{"trigger": "I-DateTimeException\tinit", "contents": "DateTimeException ${1:exception} = new DateTimeException($2);"},
		{"trigger": "I-DateTimeFormatter\tinit", "contents": "DateTimeFormatter ${1:formatter} = new DateTimeFormatter($2);"},
		{"trigger": "I-DateTimeFormatterBuilder\tinit", "contents": "DateTimeFormatterBuilder ${1:builder} = new DateTimeFormatterBuilder($2);"},
		{"trigger": "I-DateTimeParseContext\tinit", "contents": "DateTimeParseContext ${1:context} = new DateTimeParseContext($2);"},
		{"trigger": "I-DateTimeParseException\tinit", "contents": "DateTimeParseException ${1:exception} = new DateTimeParseException($2);"},
		{"trigger": "I-DateTimePrintContext\tinit", "contents": "DateTimePrintContext ${1:context} = new DateTimePrintContext($2);"},
		{"trigger": "I-DateTimeStringConverter\tinit", "contents": "DateTimeStringConverter ${1:converter} = new DateTimeStringConverter($2);"},
		{"trigger": "I-DateTimeSyntax\tinit", "contents": "DateTimeSyntax ${1:syntax} = new DateTimeSyntax($2);"},
		{"trigger": "I-DateTimeTextProvider\tinit", "contents": "DateTimeTextProvider ${1:provider} = new DateTimeTextProvider($2);"},
		{"trigger": "I-DayDV\tinit", "contents": "DayDV ${1:daydv} = new DayDV($2);"},
		{"trigger": "I-DayOfWeek\tinit", "contents": "DayOfWeek ${1:week} = new DayOfWeek($2);"},
		{"trigger": "I-DayTimeDurationDV\tinit", "contents": "DayTimeDurationDV ${1:daytimedurationdv} = new DayTimeDurationDV($2);"},
		{"trigger": "I-Debug\tinit", "contents": "Debug ${1:debug} = new Debug($2);"},
		{"trigger": "I-DebugGraphics\tinit", "contents": "DebugGraphics ${1:graphics} = new DebugGraphics($2);"},
		{"trigger": "I-DebugGraphicsFilter\tinit", "contents": "DebugGraphicsFilter ${1:filter} = new DebugGraphicsFilter($2);"},
		{"trigger": "I-DebugGraphicsInfo\tinit", "contents": "DebugGraphicsInfo ${1:info} = new DebugGraphicsInfo($2);"},
		{"trigger": "I-DebugGraphicsObserver\tinit", "contents": "DebugGraphicsObserver ${1:observer} = new DebugGraphicsObserver($2);"},
		{"trigger": "I-Debugger\tinit", "contents": "Debugger ${1:debugger} = new Debugger($2);"},
		{"trigger": "I-DecimalDV\tinit", "contents": "DecimalDV ${1:decimaldv} = new DecimalDV($2);"},
		{"trigger": "I-DecimalFormat\tinit", "contents": "DecimalFormat ${1:format} = new DecimalFormat($2);"},
		{"trigger": "I-DecimalFormatSymbols\tinit", "contents": "DecimalFormatSymbols ${1:symbols} = new DecimalFormatSymbols($2);"},
		{"trigger": "I-DecimalFormatSymbolsProvider\tinit", "contents": "DecimalFormatSymbolsProvider ${1:provider} = new DecimalFormatSymbolsProvider($2);"},
		{"trigger": "I-DecimalFormatting\tinit", "contents": "DecimalFormatting ${1:formatting} = new DecimalFormatting($2);"},
		{"trigger": "I-DecimalStyle\tinit", "contents": "DecimalStyle ${1:style} = new DecimalStyle($2);"},
		{"trigger": "I-DeclHandler\tinit", "contents": "DeclHandler ${1:handler} = new DeclHandler($2);"},
		{"trigger": "I-Declaration\tinit", "contents": "Declaration ${1:declaration} = new Declaration($2);"},
		{"trigger": "I-DeclaredType\tinit", "contents": "DeclaredType ${1:type} = new DeclaredType($2);"},
		{"trigger": "I-DeepNodeListImpl\tinit", "contents": "DeepNodeListImpl ${1:impl} = new DeepNodeListImpl($2);"},
		{"trigger": "I-DefaultBoundedRangeModel\tinit", "contents": "DefaultBoundedRangeModel ${1:model} = new DefaultBoundedRangeModel($2);"},
		{"trigger": "I-DefaultButtonModel\tinit", "contents": "DefaultButtonModel ${1:model} = new DefaultButtonModel($2);"},
		{"trigger": "I-DefaultCaret\tinit", "contents": "DefaultCaret ${1:caret} = new DefaultCaret($2);"},
		{"trigger": "I-DefaultCellEditor\tinit", "contents": "DefaultCellEditor ${1:editor} = new DefaultCellEditor($2);"},
		{"trigger": "I-DefaultColorSelectionModel\tinit", "contents": "DefaultColorSelectionModel ${1:model} = new DefaultColorSelectionModel($2);"},
		{"trigger": "I-DefaultComboBoxModel\tinit", "contents": "DefaultComboBoxModel ${1:model} = new DefaultComboBoxModel($2);"},
		{"trigger": "I-DefaultDatagramSocketImplFactory\tinit", "contents": "DefaultDatagramSocketImplFactory ${1:factory} = new DefaultDatagramSocketImplFactory($2);"},
		{"trigger": "I-DefaultDesktopManager\tinit", "contents": "DefaultDesktopManager ${1:manager} = new DefaultDesktopManager($2);"},
		{"trigger": "I-DefaultDocument\tinit", "contents": "DefaultDocument ${1:document} = new DefaultDocument($2);"},
		{"trigger": "I-DefaultEditorKit\tinit", "contents": "DefaultEditorKit ${1:kit} = new DefaultEditorKit($2);"},
		{"trigger": "I-DefaultElement\tinit", "contents": "DefaultElement ${1:element} = new DefaultElement($2);"},
		{"trigger": "I-DefaultErrorHandler\tinit", "contents": "DefaultErrorHandler ${1:handler} = new DefaultErrorHandler($2);"},
		{"trigger": "I-DefaultFileSystem\tinit", "contents": "DefaultFileSystem ${1:system} = new DefaultFileSystem($2);"},
		{"trigger": "I-DefaultFocusManager\tinit", "contents": "DefaultFocusManager ${1:manager} = new DefaultFocusManager($2);"},
		{"trigger": "I-DefaultFocusTraversalPolicy\tinit", "contents": "DefaultFocusTraversalPolicy ${1:policy} = new DefaultFocusTraversalPolicy($2);"},
		{"trigger": "I-DefaultFormatter\tinit", "contents": "DefaultFormatter ${1:formatter} = new DefaultFormatter($2);"},
		{"trigger": "I-DefaultFormatterFactory\tinit", "contents": "DefaultFormatterFactory ${1:factory} = new DefaultFormatterFactory($2);"},
		{"trigger": "I-DefaultHandler\tinit", "contents": "DefaultHandler ${1:handler} = new DefaultHandler($2);"},
		{"trigger": "I-DefaultHighlighter\tinit", "contents": "DefaultHighlighter ${1:highlighter} = new DefaultHighlighter($2);"},
		{"trigger": "I-DefaultInterface\tinit", "contents": "DefaultInterface ${1:interface} = new DefaultInterface($2);"},
		{"trigger": "I-DefaultKeyboardFocusManager\tinit", "contents": "DefaultKeyboardFocusManager ${1:manager} = new DefaultKeyboardFocusManager($2);"},
		{"trigger": "I-DefaultListCellRenderer\tinit", "contents": "DefaultListCellRenderer ${1:renderer} = new DefaultListCellRenderer($2);"},
		{"trigger": "I-DefaultListModel\tinit", "contents": "DefaultListModel ${1:model} = new DefaultListModel($2);"},
		{"trigger": "I-DefaultListSelectionModel\tinit", "contents": "DefaultListSelectionModel ${1:model} = new DefaultListSelectionModel($2);"},
		{"trigger": "I-DefaultLoaderRepository\tinit", "contents": "DefaultLoaderRepository ${1:repository} = new DefaultLoaderRepository($2);"},
		{"trigger": "I-DefaultMBeanServerInterceptor\tinit", "contents": "DefaultMBeanServerInterceptor ${1:interceptor} = new DefaultMBeanServerInterceptor($2);"},
		{"trigger": "I-DefaultMXBeanMappingFactory\tinit", "contents": "DefaultMXBeanMappingFactory ${1:factory} = new DefaultMXBeanMappingFactory($2);"},
		{"trigger": "I-DefaultMenuLayout\tinit", "contents": "DefaultMenuLayout ${1:layout} = new DefaultMenuLayout($2);"},
		{"trigger": "I-DefaultMetalTheme\tinit", "contents": "DefaultMetalTheme ${1:theme} = new DefaultMetalTheme($2);"},
		{"trigger": "I-DefaultMutableTreeNode\tinit", "contents": "DefaultMutableTreeNode ${1:node} = new DefaultMutableTreeNode($2);"},
		{"trigger": "I-DefaultNode\tinit", "contents": "DefaultNode ${1:node} = new DefaultNode($2);"},
		{"trigger": "I-DefaultPaths\tinit", "contents": "DefaultPaths ${1:paths} = new DefaultPaths($2);"},
		{"trigger": "I-DefaultPersistenceDelegate\tinit", "contents": "DefaultPersistenceDelegate ${1:delegate} = new DefaultPersistenceDelegate($2);"},
		{"trigger": "I-DefaultPlugin\tinit", "contents": "DefaultPlugin ${1:plugin} = new DefaultPlugin($2);"},
		{"trigger": "I-DefaultPreviewPanel\tinit", "contents": "DefaultPreviewPanel ${1:panel} = new DefaultPreviewPanel($2);"},
		{"trigger": "I-DefaultProperty\tinit", "contents": "DefaultProperty ${1:property} = new DefaultProperty($2);"},
		{"trigger": "I-DefaultRowSorter\tinit", "contents": "DefaultRowSorter ${1:sorter} = new DefaultRowSorter($2);"},
		{"trigger": "I-DefaultSingleSelectionModel\tinit", "contents": "DefaultSingleSelectionModel ${1:model} = new DefaultSingleSelectionModel($2);"},
		{"trigger": "I-DefaultStringConverter\tinit", "contents": "DefaultStringConverter ${1:converter} = new DefaultStringConverter($2);"},
		{"trigger": "I-DefaultStyledDocument\tinit", "contents": "DefaultStyledDocument ${1:document} = new DefaultStyledDocument($2);"},
		{"trigger": "I-DefaultSwatchChooserPanel\tinit", "contents": "DefaultSwatchChooserPanel ${1:panel} = new DefaultSwatchChooserPanel($2);"},
		{"trigger": "I-DefaultSynthStyleFactory\tinit", "contents": "DefaultSynthStyleFactory ${1:factory} = new DefaultSynthStyleFactory($2);"},
		{"trigger": "I-DefaultTableCellRenderer\tinit", "contents": "DefaultTableCellRenderer ${1:renderer} = new DefaultTableCellRenderer($2);"},
		{"trigger": "I-DefaultTableColumnModel\tinit", "contents": "DefaultTableColumnModel ${1:model} = new DefaultTableColumnModel($2);"},
		{"trigger": "I-DefaultTableModel\tinit", "contents": "DefaultTableModel ${1:model} = new DefaultTableModel($2);"},
		{"trigger": "I-DefaultText\tinit", "contents": "DefaultText ${1:text} = new DefaultText($2);"},
		{"trigger": "I-DefaultTextUI\tinit", "contents": "DefaultTextUI ${1:defaulttextui} = new DefaultTextUI($2);"},
		{"trigger": "I-DefaultTreeCell\tinit", "contents": "DefaultTreeCell ${1:cell} = new DefaultTreeCell($2);"},
		{"trigger": "I-DefaultTreeCellEditor\tinit", "contents": "DefaultTreeCellEditor ${1:editor} = new DefaultTreeCellEditor($2);"},
		{"trigger": "I-DefaultTreeCellRenderer\tinit", "contents": "DefaultTreeCellRenderer ${1:renderer} = new DefaultTreeCellRenderer($2);"},
		{"trigger": "I-DefaultTreeModel\tinit", "contents": "DefaultTreeModel ${1:model} = new DefaultTreeModel($2);"},
		{"trigger": "I-DefaultTreeSelectionModel\tinit", "contents": "DefaultTreeSelectionModel ${1:model} = new DefaultTreeSelectionModel($2);"},
		{"trigger": "I-DefaultValidationErrorHandler\tinit", "contents": "DefaultValidationErrorHandler ${1:handler} = new DefaultValidationErrorHandler($2);"},
		{"trigger": "I-DefaultValidationEventHandler\tinit", "contents": "DefaultValidationEventHandler ${1:handler} = new DefaultValidationEventHandler($2);"},
		{"trigger": "I-DefaultXMLDocumentHandler\tinit", "contents": "DefaultXMLDocumentHandler ${1:handler} = new DefaultXMLDocumentHandler($2);"},
		{"trigger": "I-DeferredAttrImpl\tinit", "contents": "DeferredAttrImpl ${1:impl} = new DeferredAttrImpl($2);"},
		{"trigger": "I-DeferredAttrNSImpl\tinit", "contents": "DeferredAttrNSImpl ${1:impl} = new DeferredAttrNSImpl($2);"},
		{"trigger": "I-DeferredCDATASectionImpl\tinit", "contents": "DeferredCDATASectionImpl ${1:impl} = new DeferredCDATASectionImpl($2);"},
		{"trigger": "I-DeferredCommentImpl\tinit", "contents": "DeferredCommentImpl ${1:impl} = new DeferredCommentImpl($2);"},
		{"trigger": "I-DeferredDOMImplementationImpl\tinit", "contents": "DeferredDOMImplementationImpl ${1:impl} = new DeferredDOMImplementationImpl($2);"},
		{"trigger": "I-DeferredDocumentImpl\tinit", "contents": "DeferredDocumentImpl ${1:impl} = new DeferredDocumentImpl($2);"},
		{"trigger": "I-DeferredDocumentTypeImpl\tinit", "contents": "DeferredDocumentTypeImpl ${1:impl} = new DeferredDocumentTypeImpl($2);"},
		{"trigger": "I-DeferredElementDefinitionImpl\tinit", "contents": "DeferredElementDefinitionImpl ${1:impl} = new DeferredElementDefinitionImpl($2);"},
		{"trigger": "I-DeferredElementImpl\tinit", "contents": "DeferredElementImpl ${1:impl} = new DeferredElementImpl($2);"},
		{"trigger": "I-DeferredElementNSImpl\tinit", "contents": "DeferredElementNSImpl ${1:impl} = new DeferredElementNSImpl($2);"},
		{"trigger": "I-DeferredEntityImpl\tinit", "contents": "DeferredEntityImpl ${1:impl} = new DeferredEntityImpl($2);"},
		{"trigger": "I-DeferredEntityReferenceImpl\tinit", "contents": "DeferredEntityReferenceImpl ${1:impl} = new DeferredEntityReferenceImpl($2);"},
		{"trigger": "I-DeferredNode\tinit", "contents": "DeferredNode ${1:node} = new DeferredNode($2);"},
		{"trigger": "I-DeferredNotationImpl\tinit", "contents": "DeferredNotationImpl ${1:impl} = new DeferredNotationImpl($2);"},
		{"trigger": "I-DeferredProcessingInstructionImpl\tinit", "contents": "DeferredProcessingInstructionImpl ${1:impl} = new DeferredProcessingInstructionImpl($2);"},
		{"trigger": "I-DeferredTextImpl\tinit", "contents": "DeferredTextImpl ${1:impl} = new DeferredTextImpl($2);"},
		{"trigger": "I-DefinitionKind\tinit", "contents": "DefinitionKind ${1:kind} = new DefinitionKind($2);"},
		{"trigger": "I-DefinitionKindHelper\tinit", "contents": "DefinitionKindHelper ${1:helper} = new DefinitionKindHelper($2);"},
		{"trigger": "I-Deflater\tinit", "contents": "Deflater ${1:deflater} = new Deflater($2);"},
		{"trigger": "I-DeflaterInputStream\tinit", "contents": "DeflaterInputStream ${1:stream} = new DeflaterInputStream($2);"},
		{"trigger": "I-DeflaterOutputStream\tinit", "contents": "DeflaterOutputStream ${1:stream} = new DeflaterOutputStream($2);"},
		{"trigger": "I-DelayQueue\tinit", "contents": "DelayQueue ${1:queue} = new DelayQueue($2);"},
		{"trigger": "I-Delayed\tinit", "contents": "Delayed ${1:delayed} = new Delayed($2);"},
		{"trigger": "I-DelayedCallback\tinit", "contents": "DelayedCallback ${1:callback} = new DelayedCallback($2);"},
		{"trigger": "I-DelayedRunnable\tinit", "contents": "DelayedRunnable ${1:runnable} = new DelayedRunnable($2);"},
		{"trigger": "I-Delegate\tinit", "contents": "Delegate ${1:delegate} = new Delegate($2);"},
		{"trigger": "I-DelegateEffect\tinit", "contents": "DelegateEffect ${1:effect} = new DelegateEffect($2);"},
		{"trigger": "I-DelegateInvocationHandlerImpl\tinit", "contents": "DelegateInvocationHandlerImpl ${1:impl} = new DelegateInvocationHandlerImpl($2);"},
		{"trigger": "I-DelegatingDefaultFocusManager\tinit", "contents": "DelegatingDefaultFocusManager ${1:manager} = new DelegatingDefaultFocusManager($2);"},
		{"trigger": "I-DelegatingMethodHandle\tinit", "contents": "DelegatingMethodHandle ${1:handle} = new DelegatingMethodHandle($2);"},
		{"trigger": "I-DelegationPermission\tinit", "contents": "DelegationPermission ${1:permission} = new DelegationPermission($2);"},
		{"trigger": "I-DeleteOnExitHook\tinit", "contents": "DeleteOnExitHook ${1:hook} = new DeleteOnExitHook($2);"},
		{"trigger": "I-Deprecated\tinit", "contents": "Deprecated ${1:deprecated} = new Deprecated($2);"},
		{"trigger": "I-DeprecatedTree\tinit", "contents": "DeprecatedTree ${1:tree} = new DeprecatedTree($2);"},
		{"trigger": "I-DepthTest\tinit", "contents": "DepthTest ${1:test} = new DepthTest($2);"},
		{"trigger": "I-Deque\tinit", "contents": "Deque ${1:deque} = new Deque($2);"},
		{"trigger": "I-DeriveColorConverter\tinit", "contents": "DeriveColorConverter ${1:converter} = new DeriveColorConverter($2);"},
		{"trigger": "I-DeriveSizeConverter\tinit", "contents": "DeriveSizeConverter ${1:converter} = new DeriveSizeConverter($2);"},
		{"trigger": "I-DerivedColor\tinit", "contents": "DerivedColor ${1:color} = new DerivedColor($2);"},
		{"trigger": "I-DescendantIterator\tinit", "contents": "DescendantIterator ${1:iterator} = new DescendantIterator($2);"},
		{"trigger": "I-DescendingVisitor\tinit", "contents": "DescendingVisitor ${1:visitor} = new DescendingVisitor($2);"},
		{"trigger": "I-Descriptor\tinit", "contents": "Descriptor ${1:descriptor} = new Descriptor($2);"},
		{"trigger": "I-DescriptorAccess\tinit", "contents": "DescriptorAccess ${1:access} = new DescriptorAccess($2);"},
		{"trigger": "I-DescriptorCache\tinit", "contents": "DescriptorCache ${1:cache} = new DescriptorCache($2);"},
		{"trigger": "I-DescriptorKey\tinit", "contents": "DescriptorKey ${1:key} = new DescriptorKey($2);"},
		{"trigger": "I-DescriptorListenerCleaner\tinit", "contents": "DescriptorListenerCleaner ${1:cleaner} = new DescriptorListenerCleaner($2);"},
		{"trigger": "I-DescriptorRead\tinit", "contents": "DescriptorRead ${1:read} = new DescriptorRead($2);"},
		{"trigger": "I-DescriptorSupport\tinit", "contents": "DescriptorSupport ${1:support} = new DescriptorSupport($2);"},
		{"trigger": "I-DesignMode\tinit", "contents": "DesignMode ${1:mode} = new DesignMode($2);"},
		{"trigger": "I-Desktop\tinit", "contents": "Desktop ${1:desktop} = new Desktop($2);"},
		{"trigger": "I-DesktopIconPainter\tinit", "contents": "DesktopIconPainter ${1:painter} = new DesktopIconPainter($2);"},
		{"trigger": "I-DesktopIconUI\tinit", "contents": "DesktopIconUI ${1:desktopiconui} = new DesktopIconUI($2);"},
		{"trigger": "I-DesktopManager\tinit", "contents": "DesktopManager ${1:manager} = new DesktopManager($2);"},
		{"trigger": "I-DesktopPanePainter\tinit", "contents": "DesktopPanePainter ${1:painter} = new DesktopPanePainter($2);"},
		{"trigger": "I-DesktopPaneUI\tinit", "contents": "DesktopPaneUI ${1:desktoppaneui} = new DesktopPaneUI($2);"},
		{"trigger": "I-DesktopPeer\tinit", "contents": "DesktopPeer ${1:peer} = new DesktopPeer($2);"},
		{"trigger": "I-DesktopProperty\tinit", "contents": "DesktopProperty ${1:property} = new DesktopProperty($2);"},
		{"trigger": "I-Destination\tinit", "contents": "Destination ${1:destination} = new Destination($2);"},
		{"trigger": "I-DestroyFailedException\tinit", "contents": "DestroyFailedException ${1:exception} = new DestroyFailedException($2);"},
		{"trigger": "I-Destroyable\tinit", "contents": "Destroyable ${1:destroyable} = new Destroyable($2);"},
		{"trigger": "I-Detail\tinit", "contents": "Detail ${1:detail} = new Detail($2);"},
		{"trigger": "I-DetailEntry\tinit", "contents": "DetailEntry ${1:entry} = new DetailEntry($2);"},
		{"trigger": "I-Diagnostic\tinit", "contents": "Diagnostic ${1:diagnostic} = new Diagnostic($2);"},
		{"trigger": "I-DiagnosticCollector\tinit", "contents": "DiagnosticCollector ${1:collector} = new DiagnosticCollector($2);"},
		{"trigger": "I-DiagnosticListener\tinit", "contents": "DiagnosticListener ${1:listener} = new DiagnosticListener($2);"},
		{"trigger": "I-DiagramComponent\tinit", "contents": "DiagramComponent ${1:component} = new DiagramComponent($2);"},
		{"trigger": "I-Dialog\tinit", "contents": "Dialog ${1:dialog} = new Dialog($2);"},
		{"trigger": "I-DialogCallbackHandler\tinit", "contents": "DialogCallbackHandler ${1:handler} = new DialogCallbackHandler($2);"},
		{"trigger": "I-DialogEvent\tinit", "contents": "DialogEvent ${1:event} = new DialogEvent($2);"},
		{"trigger": "I-DialogPane\tinit", "contents": "DialogPane ${1:pane} = new DialogPane($2);"},
		{"trigger": "I-DialogPeer\tinit", "contents": "DialogPeer ${1:peer} = new DialogPeer($2);"},
		{"trigger": "I-DialogTypeSelection\tinit", "contents": "DialogTypeSelection ${1:selection} = new DialogTypeSelection($2);"},
		{"trigger": "I-Dictionary\tinit", "contents": "Dictionary ${1:dictionary} = new Dictionary($2);"},
		{"trigger": "I-DigestException\tinit", "contents": "DigestException ${1:exception} = new DigestException($2);"},
		{"trigger": "I-DigestInputStream\tinit", "contents": "DigestInputStream ${1:stream} = new DigestInputStream($2);"},
		{"trigger": "I-DigestMethod\tinit", "contents": "DigestMethod ${1:method} = new DigestMethod($2);"},
		{"trigger": "I-DigestMethodParameterSpec\tinit", "contents": "DigestMethodParameterSpec ${1:spec} = new DigestMethodParameterSpec($2);"},
		{"trigger": "I-DigestOutputStream\tinit", "contents": "DigestOutputStream ${1:stream} = new DigestOutputStream($2);"},
		{"trigger": "I-DigesterOutputStream\tinit", "contents": "DigesterOutputStream ${1:stream} = new DigesterOutputStream($2);"},
		{"trigger": "I-DigitList\tinit", "contents": "DigitList ${1:list} = new DigitList($2);"},
		{"trigger": "I-DigraphNode\tinit", "contents": "DigraphNode ${1:node} = new DigraphNode($2);"},
		{"trigger": "I-Dimension\tinit", "contents": "Dimension ${1:dimension} = new Dimension($2);"},
		{"trigger": "I-Dimension2D\tinit", "contents": "Dimension2D ${1:dimension2d} = new Dimension2D($2);"},
		{"trigger": "I-Dimension2DBuilder\tinit", "contents": "Dimension2DBuilder ${1:builder} = new Dimension2DBuilder($2);"},
		{"trigger": "I-DimensionUIResource\tinit", "contents": "DimensionUIResource ${1:resource} = new DimensionUIResource($2);"},
		{"trigger": "I-DirContext\tinit", "contents": "DirContext ${1:context} = new DirContext($2);"},
		{"trigger": "I-DirObjectFactory\tinit", "contents": "DirObjectFactory ${1:factory} = new DirObjectFactory($2);"},
		{"trigger": "I-DirStateFactory\tinit", "contents": "DirStateFactory ${1:factory} = new DirStateFactory($2);"},
		{"trigger": "I-DirectByteBuffer\tinit", "contents": "DirectByteBuffer ${1:buffer} = new DirectByteBuffer($2);"},
		{"trigger": "I-DirectByteBufferR\tinit", "contents": "DirectByteBufferR ${1:directbytebufferr} = new DirectByteBufferR($2);"},
		{"trigger": "I-DirectCharBufferRS\tinit", "contents": "DirectCharBufferRS ${1:directcharbufferrs} = new DirectCharBufferRS($2);"},
		{"trigger": "I-DirectCharBufferRU\tinit", "contents": "DirectCharBufferRU ${1:directcharbufferru} = new DirectCharBufferRU($2);"},
		{"trigger": "I-DirectCharBufferS\tinit", "contents": "DirectCharBufferS ${1:directcharbuffers} = new DirectCharBufferS($2);"},
		{"trigger": "I-DirectCharBufferU\tinit", "contents": "DirectCharBufferU ${1:directcharbufferu} = new DirectCharBufferU($2);"},
		{"trigger": "I-DirectColorModel\tinit", "contents": "DirectColorModel ${1:model} = new DirectColorModel($2);"},
		{"trigger": "I-DirectDoubleBufferRS\tinit", "contents": "DirectDoubleBufferRS ${1:directdoublebufferrs} = new DirectDoubleBufferRS($2);"},
		{"trigger": "I-DirectDoubleBufferRU\tinit", "contents": "DirectDoubleBufferRU ${1:directdoublebufferru} = new DirectDoubleBufferRU($2);"},
		{"trigger": "I-DirectDoubleBufferS\tinit", "contents": "DirectDoubleBufferS ${1:directdoublebuffers} = new DirectDoubleBufferS($2);"},
		{"trigger": "I-DirectDoubleBufferU\tinit", "contents": "DirectDoubleBufferU ${1:directdoublebufferu} = new DirectDoubleBufferU($2);"},
		{"trigger": "I-DirectEvent\tinit", "contents": "DirectEvent ${1:event} = new DirectEvent($2);"},
		{"trigger": "I-DirectFloatBufferRS\tinit", "contents": "DirectFloatBufferRS ${1:directfloatbufferrs} = new DirectFloatBufferRS($2);"},
		{"trigger": "I-DirectFloatBufferRU\tinit", "contents": "DirectFloatBufferRU ${1:directfloatbufferru} = new DirectFloatBufferRU($2);"},
		{"trigger": "I-DirectFloatBufferS\tinit", "contents": "DirectFloatBufferS ${1:directfloatbuffers} = new DirectFloatBufferS($2);"},
		{"trigger": "I-DirectFloatBufferU\tinit", "contents": "DirectFloatBufferU ${1:directfloatbufferu} = new DirectFloatBufferU($2);"},
		{"trigger": "I-DirectIntBufferRS\tinit", "contents": "DirectIntBufferRS ${1:directintbufferrs} = new DirectIntBufferRS($2);"},
		{"trigger": "I-DirectIntBufferRU\tinit", "contents": "DirectIntBufferRU ${1:directintbufferru} = new DirectIntBufferRU($2);"},
		{"trigger": "I-DirectIntBufferS\tinit", "contents": "DirectIntBufferS ${1:directintbuffers} = new DirectIntBufferS($2);"},
		{"trigger": "I-DirectIntBufferU\tinit", "contents": "DirectIntBufferU ${1:directintbufferu} = new DirectIntBufferU($2);"},
		{"trigger": "I-DirectLongBufferRS\tinit", "contents": "DirectLongBufferRS ${1:directlongbufferrs} = new DirectLongBufferRS($2);"},
		{"trigger": "I-DirectLongBufferRU\tinit", "contents": "DirectLongBufferRU ${1:directlongbufferru} = new DirectLongBufferRU($2);"},
		{"trigger": "I-DirectLongBufferS\tinit", "contents": "DirectLongBufferS ${1:directlongbuffers} = new DirectLongBufferS($2);"},
		{"trigger": "I-DirectLongBufferU\tinit", "contents": "DirectLongBufferU ${1:directlongbufferu} = new DirectLongBufferU($2);"},
		{"trigger": "I-DirectMethodHandle\tinit", "contents": "DirectMethodHandle ${1:handle} = new DirectMethodHandle($2);"},
		{"trigger": "I-DirectRTPiscesAlphaConsumer\tinit", "contents": "DirectRTPiscesAlphaConsumer ${1:consumer} = new DirectRTPiscesAlphaConsumer($2);"},
		{"trigger": "I-DirectShortBufferRS\tinit", "contents": "DirectShortBufferRS ${1:directshortbufferrs} = new DirectShortBufferRS($2);"},
		{"trigger": "I-DirectShortBufferRU\tinit", "contents": "DirectShortBufferRU ${1:directshortbufferru} = new DirectShortBufferRU($2);"},
		{"trigger": "I-DirectShortBufferS\tinit", "contents": "DirectShortBufferS ${1:directshortbuffers} = new DirectShortBufferS($2);"},
		{"trigger": "I-DirectShortBufferU\tinit", "contents": "DirectShortBufferU ${1:directshortbufferu} = new DirectShortBufferU($2);"},
		{"trigger": "I-Direction\tinit", "contents": "Direction ${1:direction} = new Direction($2);"},
		{"trigger": "I-DirectoryChooser\tinit", "contents": "DirectoryChooser ${1:chooser} = new DirectoryChooser($2);"},
		{"trigger": "I-DirectoryChooserBuilder\tinit", "contents": "DirectoryChooserBuilder ${1:builder} = new DirectoryChooserBuilder($2);"},
		{"trigger": "I-DirectoryIteratorException\tinit", "contents": "DirectoryIteratorException ${1:exception} = new DirectoryIteratorException($2);"},
		{"trigger": "I-DirectoryLock\tinit", "contents": "DirectoryLock ${1:lock} = new DirectoryLock($2);"},
		{"trigger": "I-DirectoryManager\tinit", "contents": "DirectoryManager ${1:manager} = new DirectoryManager($2);"},
		{"trigger": "I-DirectoryNotEmptyException\tinit", "contents": "DirectoryNotEmptyException ${1:exception} = new DirectoryNotEmptyException($2);"},
		{"trigger": "I-DirectoryStream\tinit", "contents": "DirectoryStream ${1:stream} = new DirectoryStream($2);"},
		{"trigger": "I-DirectoryURLConnection\tinit", "contents": "DirectoryURLConnection ${1:connection} = new DirectoryURLConnection($2);"},
		{"trigger": "I-DirtyBits\tinit", "contents": "DirtyBits ${1:bits} = new DirtyBits($2);"},
		{"trigger": "I-DirtyHint\tinit", "contents": "DirtyHint ${1:hint} = new DirtyHint($2);"},
		{"trigger": "I-DirtyRegionContainer\tinit", "contents": "DirtyRegionContainer ${1:container} = new DirtyRegionContainer($2);"},
		{"trigger": "I-DirtyRegionPool\tinit", "contents": "DirtyRegionPool ${1:pool} = new DirtyRegionPool($2);"},
		{"trigger": "I-Dispatch\tinit", "contents": "Dispatch ${1:dispatch} = new Dispatch($2);"},
		{"trigger": "I-DisplacementMap\tinit", "contents": "DisplacementMap ${1:map} = new DisplacementMap($2);"},
		{"trigger": "I-DisplacementMapBuilder\tinit", "contents": "DisplacementMapBuilder ${1:builder} = new DisplacementMapBuilder($2);"},
		{"trigger": "I-DisplayMode\tinit", "contents": "DisplayMode ${1:mode} = new DisplayMode($2);"},
		{"trigger": "I-DispmanAcceleratedScreen\tinit", "contents": "DispmanAcceleratedScreen ${1:screen} = new DispmanAcceleratedScreen($2);"},
		{"trigger": "I-DispmanCursor\tinit", "contents": "DispmanCursor ${1:cursor} = new DispmanCursor($2);"},
		{"trigger": "I-DispmanPlatform\tinit", "contents": "DispmanPlatform ${1:platform} = new DispmanPlatform($2);"},
		{"trigger": "I-DispmanPlatformFactory\tinit", "contents": "DispmanPlatformFactory ${1:factory} = new DispmanPlatformFactory($2);"},
		{"trigger": "I-DispmanScreen\tinit", "contents": "DispmanScreen ${1:screen} = new DispmanScreen($2);"},
		{"trigger": "I-Disposer\tinit", "contents": "Disposer ${1:disposer} = new Disposer($2);"},
		{"trigger": "I-DisposerManagedResource\tinit", "contents": "DisposerManagedResource ${1:resource} = new DisposerManagedResource($2);"},
		{"trigger": "I-DisposerRecord\tinit", "contents": "DisposerRecord ${1:record} = new DisposerRecord($2);"},
		{"trigger": "I-DistantLight\tinit", "contents": "DistantLight ${1:light} = new DistantLight($2);"},
		{"trigger": "I-DistinctOps\tinit", "contents": "DistinctOps ${1:ops} = new DistinctOps($2);"},
		{"trigger": "I-Div\tinit", "contents": "Div ${1:div} = new Div($2);"},
		{"trigger": "I-DnDConstants\tinit", "contents": "DnDConstants ${1:constants} = new DnDConstants($2);"},
		{"trigger": "I-DnDEventMulticaster\tinit", "contents": "DnDEventMulticaster ${1:multicaster} = new DnDEventMulticaster($2);"},
		{"trigger": "I-DndEvent\tinit", "contents": "DndEvent ${1:event} = new DndEvent($2);"},
		{"trigger": "I-DoWhileLoopTree\tinit", "contents": "DoWhileLoopTree ${1:tree} = new DoWhileLoopTree($2);"},
		{"trigger": "I-Doc\tinit", "contents": "Doc ${1:doc} = new Doc($2);"},
		{"trigger": "I-DocAttribute\tinit", "contents": "DocAttribute ${1:attribute} = new DocAttribute($2);"},
		{"trigger": "I-DocAttributeSet\tinit", "contents": "DocAttributeSet ${1:set} = new DocAttributeSet($2);"},
		{"trigger": "I-DocCommentTree\tinit", "contents": "DocCommentTree ${1:tree} = new DocCommentTree($2);"},
		{"trigger": "I-DocErrorReporter\tinit", "contents": "DocErrorReporter ${1:reporter} = new DocErrorReporter($2);"},
		{"trigger": "I-DocFlavor\tinit", "contents": "DocFlavor ${1:flavor} = new DocFlavor($2);"},
		{"trigger": "I-DocPrintJob\tinit", "contents": "DocPrintJob ${1:job} = new DocPrintJob($2);"},
		{"trigger": "I-DocRootTree\tinit", "contents": "DocRootTree ${1:tree} = new DocRootTree($2);"},
		{"trigger": "I-DocSourcePositions\tinit", "contents": "DocSourcePositions ${1:positions} = new DocSourcePositions($2);"},
		{"trigger": "I-DocTree\tinit", "contents": "DocTree ${1:tree} = new DocTree($2);"},
		{"trigger": "I-DocTreePath\tinit", "contents": "DocTreePath ${1:path} = new DocTreePath($2);"},
		{"trigger": "I-DocTreePathScanner\tinit", "contents": "DocTreePathScanner ${1:scanner} = new DocTreePathScanner($2);"},
		{"trigger": "I-DocTreeScanner\tinit", "contents": "DocTreeScanner ${1:scanner} = new DocTreeScanner($2);"},
		{"trigger": "I-DocTreeVisitor\tinit", "contents": "DocTreeVisitor ${1:visitor} = new DocTreeVisitor($2);"},
		{"trigger": "I-DocTrees\tinit", "contents": "DocTrees ${1:trees} = new DocTrees($2);"},
		{"trigger": "I-Doclet\tinit", "contents": "Doclet ${1:doclet} = new Doclet($2);"},
		{"trigger": "I-Document\tinit", "contents": "Document ${1:document} = new Document($2);"},
		{"trigger": "I-DocumentBuilder\tinit", "contents": "DocumentBuilder ${1:builder} = new DocumentBuilder($2);"},
		{"trigger": "I-DocumentBuilderFactory\tinit", "contents": "DocumentBuilderFactory ${1:factory} = new DocumentBuilderFactory($2);"},
		{"trigger": "I-DocumentBuilderFactoryImpl\tinit", "contents": "DocumentBuilderFactoryImpl ${1:impl} = new DocumentBuilderFactoryImpl($2);"},
		{"trigger": "I-DocumentBuilderImpl\tinit", "contents": "DocumentBuilderImpl ${1:impl} = new DocumentBuilderImpl($2);"},
		{"trigger": "I-DocumentCSS\tinit", "contents": "DocumentCSS ${1:documentcss} = new DocumentCSS($2);"},
		{"trigger": "I-DocumentCache\tinit", "contents": "DocumentCache ${1:cache} = new DocumentCache($2);"},
		{"trigger": "I-DocumentCall\tinit", "contents": "DocumentCall ${1:call} = new DocumentCall($2);"},
		{"trigger": "I-DocumentEvent\tinit", "contents": "DocumentEvent ${1:event} = new DocumentEvent($2);"},
		{"trigger": "I-DocumentFilter\tinit", "contents": "DocumentFilter ${1:filter} = new DocumentFilter($2);"},
		{"trigger": "I-DocumentFragment\tinit", "contents": "DocumentFragment ${1:fragment} = new DocumentFragment($2);"},
		{"trigger": "I-DocumentFragmentImpl\tinit", "contents": "DocumentFragmentImpl ${1:impl} = new DocumentFragmentImpl($2);"},
		{"trigger": "I-DocumentHandler\tinit", "contents": "DocumentHandler ${1:handler} = new DocumentHandler($2);"},
		{"trigger": "I-DocumentImpl\tinit", "contents": "DocumentImpl ${1:impl} = new DocumentImpl($2);"},
		{"trigger": "I-DocumentListener\tinit", "contents": "DocumentListener ${1:listener} = new DocumentListener($2);"},
		{"trigger": "I-DocumentName\tinit", "contents": "DocumentName ${1:name} = new DocumentName($2);"},
		{"trigger": "I-DocumentParser\tinit", "contents": "DocumentParser ${1:parser} = new DocumentParser($2);"},
		{"trigger": "I-DocumentRange\tinit", "contents": "DocumentRange ${1:range} = new DocumentRange($2);"},
		{"trigger": "I-DocumentSerializer\tinit", "contents": "DocumentSerializer ${1:serializer} = new DocumentSerializer($2);"},
		{"trigger": "I-DocumentStyle\tinit", "contents": "DocumentStyle ${1:style} = new DocumentStyle($2);"},
		{"trigger": "I-DocumentTraversal\tinit", "contents": "DocumentTraversal ${1:traversal} = new DocumentTraversal($2);"},
		{"trigger": "I-DocumentType\tinit", "contents": "DocumentType ${1:type} = new DocumentType($2);"},
		{"trigger": "I-DocumentTypeImpl\tinit", "contents": "DocumentTypeImpl ${1:impl} = new DocumentTypeImpl($2);"},
		{"trigger": "I-DocumentView\tinit", "contents": "DocumentView ${1:view} = new DocumentView($2);"},
		{"trigger": "I-DocumentationTool\tinit", "contents": "DocumentationTool ${1:tool} = new DocumentationTool($2);"},
		{"trigger": "I-Documented\tinit", "contents": "Documented ${1:documented} = new Documented($2);"},
		{"trigger": "I-DomHandler\tinit", "contents": "DomHandler ${1:handler} = new DomHandler($2);"},
		{"trigger": "I-DomainCombiner\tinit", "contents": "DomainCombiner ${1:combiner} = new DomainCombiner($2);"},
		{"trigger": "I-DomainLoadStoreParameter\tinit", "contents": "DomainLoadStoreParameter ${1:parameter} = new DomainLoadStoreParameter($2);"},
		{"trigger": "I-DomainManager\tinit", "contents": "DomainManager ${1:manager} = new DomainManager($2);"},
		{"trigger": "I-DomainManagerOperations\tinit", "contents": "DomainManagerOperations ${1:operations} = new DomainManagerOperations($2);"},
		{"trigger": "I-DontCareFieldPosition\tinit", "contents": "DontCareFieldPosition ${1:position} = new DontCareFieldPosition($2);"},
		{"trigger": "I-DontInline\tinit", "contents": "DontInline ${1:inline} = new DontInline($2);"},
		{"trigger": "I-DosFileAttributeView\tinit", "contents": "DosFileAttributeView ${1:view} = new DosFileAttributeView($2);"},
		{"trigger": "I-DosFileAttributes\tinit", "contents": "DosFileAttributes ${1:attributes} = new DosFileAttributes($2);"},
		{"trigger": "I-Double\tinit", "contents": "Double ${1:double} = new Double($2);"},
		{"trigger": "I-DoubleAccumulator\tinit", "contents": "DoubleAccumulator ${1:accumulator} = new DoubleAccumulator($2);"},
		{"trigger": "I-DoubleAdder\tinit", "contents": "DoubleAdder ${1:adder} = new DoubleAdder($2);"},
		{"trigger": "I-DoubleBinaryOperator\tinit", "contents": "DoubleBinaryOperator ${1:operator} = new DoubleBinaryOperator($2);"},
		{"trigger": "I-DoubleBinding\tinit", "contents": "DoubleBinding ${1:binding} = new DoubleBinding($2);"},
		{"trigger": "I-DoubleBuffer\tinit", "contents": "DoubleBuffer ${1:buffer} = new DoubleBuffer($2);"},
		{"trigger": "I-DoubleConstant\tinit", "contents": "DoubleConstant ${1:constant} = new DoubleConstant($2);"},
		{"trigger": "I-DoubleConsumer\tinit", "contents": "DoubleConsumer ${1:consumer} = new DoubleConsumer($2);"},
		{"trigger": "I-DoubleDV\tinit", "contents": "DoubleDV ${1:doubledv} = new DoubleDV($2);"},
		{"trigger": "I-DoubleExpression\tinit", "contents": "DoubleExpression ${1:expression} = new DoubleExpression($2);"},
		{"trigger": "I-DoubleField\tinit", "contents": "DoubleField ${1:field} = new DoubleField($2);"},
		{"trigger": "I-DoubleFieldSkin\tinit", "contents": "DoubleFieldSkin ${1:skin} = new DoubleFieldSkin($2);"},
		{"trigger": "I-DoubleFunction\tinit", "contents": "DoubleFunction ${1:function} = new DoubleFunction($2);"},
		{"trigger": "I-DoubleHolder\tinit", "contents": "DoubleHolder ${1:holder} = new DoubleHolder($2);"},
		{"trigger": "I-DoublePipeline\tinit", "contents": "DoublePipeline ${1:pipeline} = new DoublePipeline($2);"},
		{"trigger": "I-DoublePredicate\tinit", "contents": "DoublePredicate ${1:predicate} = new DoublePredicate($2);"},
		{"trigger": "I-DoubleProperty\tinit", "contents": "DoubleProperty ${1:property} = new DoubleProperty($2);"},
		{"trigger": "I-DoublePropertyBase\tinit", "contents": "DoublePropertyBase ${1:base} = new DoublePropertyBase($2);"},
		{"trigger": "I-DoubleSeqHelper\tinit", "contents": "DoubleSeqHelper ${1:helper} = new DoubleSeqHelper($2);"},
		{"trigger": "I-DoubleSeqHolder\tinit", "contents": "DoubleSeqHolder ${1:holder} = new DoubleSeqHolder($2);"},
		{"trigger": "I-DoubleStream\tinit", "contents": "DoubleStream ${1:stream} = new DoubleStream($2);"},
		{"trigger": "I-DoubleStringConverter\tinit", "contents": "DoubleStringConverter ${1:converter} = new DoubleStringConverter($2);"},
		{"trigger": "I-DoubleSummaryStatistics\tinit", "contents": "DoubleSummaryStatistics ${1:statistics} = new DoubleSummaryStatistics($2);"},
		{"trigger": "I-DoubleSupplier\tinit", "contents": "DoubleSupplier ${1:supplier} = new DoubleSupplier($2);"},
		{"trigger": "I-DoubleToIntFunction\tinit", "contents": "DoubleToIntFunction ${1:function} = new DoubleToIntFunction($2);"},
		{"trigger": "I-DoubleToLongFunction\tinit", "contents": "DoubleToLongFunction ${1:function} = new DoubleToLongFunction($2);"},
		{"trigger": "I-DoubleUnaryOperator\tinit", "contents": "DoubleUnaryOperator ${1:operator} = new DoubleUnaryOperator($2);"},
		{"trigger": "I-DraconianErrorHandler\tinit", "contents": "DraconianErrorHandler ${1:handler} = new DraconianErrorHandler($2);"},
		{"trigger": "I-DragEvent\tinit", "contents": "DragEvent ${1:event} = new DragEvent($2);"},
		{"trigger": "I-DragGestureEvent\tinit", "contents": "DragGestureEvent ${1:event} = new DragGestureEvent($2);"},
		{"trigger": "I-DragGestureListener\tinit", "contents": "DragGestureListener ${1:listener} = new DragGestureListener($2);"},
		{"trigger": "I-DragGestureRecognizer\tinit", "contents": "DragGestureRecognizer ${1:recognizer} = new DragGestureRecognizer($2);"},
		{"trigger": "I-DragRecognitionSupport\tinit", "contents": "DragRecognitionSupport ${1:support} = new DragRecognitionSupport($2);"},
		{"trigger": "I-DragSource\tinit", "contents": "DragSource ${1:source} = new DragSource($2);"},
		{"trigger": "I-DragSourceAdapter\tinit", "contents": "DragSourceAdapter ${1:adapter} = new DragSourceAdapter($2);"},
		{"trigger": "I-DragSourceContext\tinit", "contents": "DragSourceContext ${1:context} = new DragSourceContext($2);"},
		{"trigger": "I-DragSourceContextPeer\tinit", "contents": "DragSourceContextPeer ${1:peer} = new DragSourceContextPeer($2);"},
		{"trigger": "I-DragSourceDragEvent\tinit", "contents": "DragSourceDragEvent ${1:event} = new DragSourceDragEvent($2);"},
		{"trigger": "I-DragSourceDropEvent\tinit", "contents": "DragSourceDropEvent ${1:event} = new DragSourceDropEvent($2);"},
		{"trigger": "I-DragSourceEvent\tinit", "contents": "DragSourceEvent ${1:event} = new DragSourceEvent($2);"},
		{"trigger": "I-DragSourceListener\tinit", "contents": "DragSourceListener ${1:listener} = new DragSourceListener($2);"},
		{"trigger": "I-DragSourceMotionListener\tinit", "contents": "DragSourceMotionListener ${1:listener} = new DragSourceMotionListener($2);"},
		{"trigger": "I-Dragboard\tinit", "contents": "Dragboard ${1:dragboard} = new Dragboard($2);"},
		{"trigger": "I-DragboardHelper\tinit", "contents": "DragboardHelper ${1:helper} = new DragboardHelper($2);"},
		{"trigger": "I-DrawMode\tinit", "contents": "DrawMode ${1:mode} = new DrawMode($2);"},
		{"trigger": "I-Driver\tinit", "contents": "Driver ${1:driver} = new Driver($2);"},
		{"trigger": "I-DriverAction\tinit", "contents": "DriverAction ${1:action} = new DriverAction($2);"},
		{"trigger": "I-DriverManager\tinit", "contents": "DriverManager ${1:manager} = new DriverManager($2);"},
		{"trigger": "I-DriverPropertyInfo\tinit", "contents": "DriverPropertyInfo ${1:info} = new DriverPropertyInfo($2);"},
		{"trigger": "I-DropMode\tinit", "contents": "DropMode ${1:mode} = new DropMode($2);"},
		{"trigger": "I-DropShadow\tinit", "contents": "DropShadow ${1:shadow} = new DropShadow($2);"},
		{"trigger": "I-DropShadowBuilder\tinit", "contents": "DropShadowBuilder ${1:builder} = new DropShadowBuilder($2);"},
		{"trigger": "I-DropShadowEffect\tinit", "contents": "DropShadowEffect ${1:effect} = new DropShadowEffect($2);"},
		{"trigger": "I-DropTarget\tinit", "contents": "DropTarget ${1:target} = new DropTarget($2);"},
		{"trigger": "I-DropTargetAdapter\tinit", "contents": "DropTargetAdapter ${1:adapter} = new DropTargetAdapter($2);"},
		{"trigger": "I-DropTargetContext\tinit", "contents": "DropTargetContext ${1:context} = new DropTargetContext($2);"},
		{"trigger": "I-DropTargetContextPeer\tinit", "contents": "DropTargetContextPeer ${1:peer} = new DropTargetContextPeer($2);"},
		{"trigger": "I-DropTargetDragEvent\tinit", "contents": "DropTargetDragEvent ${1:event} = new DropTargetDragEvent($2);"},
		{"trigger": "I-DropTargetDropEvent\tinit", "contents": "DropTargetDropEvent ${1:event} = new DropTargetDropEvent($2);"},
		{"trigger": "I-DropTargetEvent\tinit", "contents": "DropTargetEvent ${1:event} = new DropTargetEvent($2);"},
		{"trigger": "I-DropTargetListener\tinit", "contents": "DropTargetListener ${1:listener} = new DropTargetListener($2);"},
		{"trigger": "I-DropTargetPeer\tinit", "contents": "DropTargetPeer ${1:peer} = new DropTargetPeer($2);"},
		{"trigger": "I-DualPivotQuicksort\tinit", "contents": "DualPivotQuicksort ${1:quicksort} = new DualPivotQuicksort($2);"},
		{"trigger": "I-DualStackPlainDatagramSocketImpl\tinit", "contents": "DualStackPlainDatagramSocketImpl ${1:impl} = new DualStackPlainDatagramSocketImpl($2);"},
		{"trigger": "I-DualStackPlainSocketImpl\tinit", "contents": "DualStackPlainSocketImpl ${1:impl} = new DualStackPlainSocketImpl($2);"},
		{"trigger": "I-DummyContext\tinit", "contents": "DummyContext ${1:context} = new DummyContext($2);"},
		{"trigger": "I-DummyGraphics\tinit", "contents": "DummyGraphics ${1:graphics} = new DummyGraphics($2);"},
		{"trigger": "I-DummyRTTexture\tinit", "contents": "DummyRTTexture ${1:texture} = new DummyRTTexture($2);"},
		{"trigger": "I-DummyResource\tinit", "contents": "DummyResource ${1:resource} = new DummyResource($2);"},
		{"trigger": "I-DummyResourceFactory\tinit", "contents": "DummyResourceFactory ${1:factory} = new DummyResourceFactory($2);"},
		{"trigger": "I-DummyShader\tinit", "contents": "DummyShader ${1:shader} = new DummyShader($2);"},
		{"trigger": "I-DummySwapChain\tinit", "contents": "DummySwapChain ${1:chain} = new DummySwapChain($2);"},
		{"trigger": "I-DummyTexture\tinit", "contents": "DummyTexture ${1:texture} = new DummyTexture($2);"},
		{"trigger": "I-DummyTexturePool\tinit", "contents": "DummyTexturePool ${1:pool} = new DummyTexturePool($2);"},
		{"trigger": "I-DummyToolkit\tinit", "contents": "DummyToolkit ${1:toolkit} = new DummyToolkit($2);"},
		{"trigger": "I-DummyVertexBuffer\tinit", "contents": "DummyVertexBuffer ${1:buffer} = new DummyVertexBuffer($2);"},
		{"trigger": "I-DumpRenderTree\tinit", "contents": "DumpRenderTree ${1:tree} = new DumpRenderTree($2);"},
		{"trigger": "I-DupFilterIterator\tinit", "contents": "DupFilterIterator ${1:iterator} = new DupFilterIterator($2);"},
		{"trigger": "I-DuplicateFormatFlagsException\tinit", "contents": "DuplicateFormatFlagsException ${1:exception} = new DuplicateFormatFlagsException($2);"},
		{"trigger": "I-DuplicateName\tinit", "contents": "DuplicateName ${1:name} = new DuplicateName($2);"},
		{"trigger": "I-DuplicateNameHelper\tinit", "contents": "DuplicateNameHelper ${1:helper} = new DuplicateNameHelper($2);"},
		{"trigger": "I-Duration\tinit", "contents": "Duration ${1:duration} = new Duration($2);"},
		{"trigger": "I-DurationConverter\tinit", "contents": "DurationConverter ${1:converter} = new DurationConverter($2);"},
		{"trigger": "I-DurationDV\tinit", "contents": "DurationDV ${1:durationdv} = new DurationDV($2);"},
		{"trigger": "I-DurationDayTimeImpl\tinit", "contents": "DurationDayTimeImpl ${1:impl} = new DurationDayTimeImpl($2);"},
		{"trigger": "I-DurationImpl\tinit", "contents": "DurationImpl ${1:impl} = new DurationImpl($2);"},
		{"trigger": "I-DurationYearMonthImpl\tinit", "contents": "DurationYearMonthImpl ${1:impl} = new DurationYearMonthImpl($2);"},
		{"trigger": "I-DynAny\tinit", "contents": "DynAny ${1:any} = new DynAny($2);"},
		{"trigger": "I-DynAnyFactory\tinit", "contents": "DynAnyFactory ${1:factory} = new DynAnyFactory($2);"},
		{"trigger": "I-DynAnyFactoryHelper\tinit", "contents": "DynAnyFactoryHelper ${1:helper} = new DynAnyFactoryHelper($2);"},
		{"trigger": "I-DynAnyFactoryOperations\tinit", "contents": "DynAnyFactoryOperations ${1:operations} = new DynAnyFactoryOperations($2);"},
		{"trigger": "I-DynAnyHelper\tinit", "contents": "DynAnyHelper ${1:helper} = new DynAnyHelper($2);"},
		{"trigger": "I-DynAnyOperations\tinit", "contents": "DynAnyOperations ${1:operations} = new DynAnyOperations($2);"},
		{"trigger": "I-DynAnySeqHelper\tinit", "contents": "DynAnySeqHelper ${1:helper} = new DynAnySeqHelper($2);"},
		{"trigger": "I-DynArray\tinit", "contents": "DynArray ${1:array} = new DynArray($2);"},
		{"trigger": "I-DynArrayHelper\tinit", "contents": "DynArrayHelper ${1:helper} = new DynArrayHelper($2);"},
		{"trigger": "I-DynArrayOperations\tinit", "contents": "DynArrayOperations ${1:operations} = new DynArrayOperations($2);"},
		{"trigger": "I-DynEnum\tinit", "contents": "DynEnum ${1:enum} = new DynEnum($2);"},
		{"trigger": "I-DynEnumHelper\tinit", "contents": "DynEnumHelper ${1:helper} = new DynEnumHelper($2);"},
		{"trigger": "I-DynEnumOperations\tinit", "contents": "DynEnumOperations ${1:operations} = new DynEnumOperations($2);"},
		{"trigger": "I-DynFixed\tinit", "contents": "DynFixed ${1:fixed} = new DynFixed($2);"},
		{"trigger": "I-DynFixedHelper\tinit", "contents": "DynFixedHelper ${1:helper} = new DynFixedHelper($2);"},
		{"trigger": "I-DynFixedOperations\tinit", "contents": "DynFixedOperations ${1:operations} = new DynFixedOperations($2);"},
		{"trigger": "I-DynSequence\tinit", "contents": "DynSequence ${1:sequence} = new DynSequence($2);"},
		{"trigger": "I-DynSequenceHelper\tinit", "contents": "DynSequenceHelper ${1:helper} = new DynSequenceHelper($2);"},
		{"trigger": "I-DynSequenceOperations\tinit", "contents": "DynSequenceOperations ${1:operations} = new DynSequenceOperations($2);"},
		{"trigger": "I-DynStruct\tinit", "contents": "DynStruct ${1:struct} = new DynStruct($2);"},
		{"trigger": "I-DynStructHelper\tinit", "contents": "DynStructHelper ${1:helper} = new DynStructHelper($2);"},
		{"trigger": "I-DynStructOperations\tinit", "contents": "DynStructOperations ${1:operations} = new DynStructOperations($2);"},
		{"trigger": "I-DynUnion\tinit", "contents": "DynUnion ${1:union} = new DynUnion($2);"},
		{"trigger": "I-DynUnionHelper\tinit", "contents": "DynUnionHelper ${1:helper} = new DynUnionHelper($2);"},
		{"trigger": "I-DynUnionOperations\tinit", "contents": "DynUnionOperations ${1:operations} = new DynUnionOperations($2);"},
		{"trigger": "I-DynValue\tinit", "contents": "DynValue ${1:value} = new DynValue($2);"},
		{"trigger": "I-DynValueBox\tinit", "contents": "DynValueBox ${1:box} = new DynValueBox($2);"},
		{"trigger": "I-DynValueBoxOperations\tinit", "contents": "DynValueBoxOperations ${1:operations} = new DynValueBoxOperations($2);"},
		{"trigger": "I-DynValueCommon\tinit", "contents": "DynValueCommon ${1:common} = new DynValueCommon($2);"},
		{"trigger": "I-DynValueCommonOperations\tinit", "contents": "DynValueCommonOperations ${1:operations} = new DynValueCommonOperations($2);"},
		{"trigger": "I-DynValueHelper\tinit", "contents": "DynValueHelper ${1:helper} = new DynValueHelper($2);"},
		{"trigger": "I-DynValueOperations\tinit", "contents": "DynValueOperations ${1:operations} = new DynValueOperations($2);"},
		{"trigger": "I-DynamicImplementation\tinit", "contents": "DynamicImplementation ${1:implementation} = new DynamicImplementation($2);"},
		{"trigger": "I-DynamicMBean\tinit", "contents": "DynamicMBean ${1:bean} = new DynamicMBean($2);"},
		{"trigger": "I-DynamicMethodMarshaller\tinit", "contents": "DynamicMethodMarshaller ${1:marshaller} = new DynamicMethodMarshaller($2);"},
		{"trigger": "I-DynamicStub\tinit", "contents": "DynamicStub ${1:stub} = new DynamicStub($2);"},
		{"trigger": "I-ECField\tinit", "contents": "ECField ${1:field} = new ECField($2);"},
		{"trigger": "I-ECFieldF2m\tinit", "contents": "ECFieldF2m ${1:f2m} = new ECFieldF2m($2);"},
		{"trigger": "I-ECFieldFp\tinit", "contents": "ECFieldFp ${1:fp} = new ECFieldFp($2);"},
		{"trigger": "I-ECGenParameterSpec\tinit", "contents": "ECGenParameterSpec ${1:spec} = new ECGenParameterSpec($2);"},
		{"trigger": "I-ECKey\tinit", "contents": "ECKey ${1:key} = new ECKey($2);"},
		{"trigger": "I-ECParameterSpec\tinit", "contents": "ECParameterSpec ${1:spec} = new ECParameterSpec($2);"},
		{"trigger": "I-ECPoint\tinit", "contents": "ECPoint ${1:point} = new ECPoint($2);"},
		{"trigger": "I-ECPrivateKey\tinit", "contents": "ECPrivateKey ${1:key} = new ECPrivateKey($2);"},
		{"trigger": "I-ECPrivateKeySpec\tinit", "contents": "ECPrivateKeySpec ${1:spec} = new ECPrivateKeySpec($2);"},
		{"trigger": "I-ECPublicKey\tinit", "contents": "ECPublicKey ${1:key} = new ECPublicKey($2);"},
		{"trigger": "I-ECPublicKeySpec\tinit", "contents": "ECPublicKeySpec ${1:spec} = new ECPublicKeySpec($2);"},
		{"trigger": "I-EGL\tinit", "contents": "EGL ${1:egl} = new EGL($2);"},
		{"trigger": "I-EGLFBGLContext\tinit", "contents": "EGLFBGLContext ${1:context} = new EGLFBGLContext($2);"},
		{"trigger": "I-EGLFBGLDrawable\tinit", "contents": "EGLFBGLDrawable ${1:drawable} = new EGLFBGLDrawable($2);"},
		{"trigger": "I-EGLFBGLFactory\tinit", "contents": "EGLFBGLFactory ${1:factory} = new EGLFBGLFactory($2);"},
		{"trigger": "I-EGLFBGLPixelFormat\tinit", "contents": "EGLFBGLPixelFormat ${1:format} = new EGLFBGLPixelFormat($2);"},
		{"trigger": "I-EGLX11GLContext\tinit", "contents": "EGLX11GLContext ${1:context} = new EGLX11GLContext($2);"},
		{"trigger": "I-EGLX11GLDrawable\tinit", "contents": "EGLX11GLDrawable ${1:drawable} = new EGLX11GLDrawable($2);"},
		{"trigger": "I-EGLX11GLFactory\tinit", "contents": "EGLX11GLFactory ${1:factory} = new EGLX11GLFactory($2);"},
		{"trigger": "I-EGLX11GLPixelFormat\tinit", "contents": "EGLX11GLPixelFormat ${1:format} = new EGLX11GLPixelFormat($2);"},
		{"trigger": "I-ENCODING_CDR_ENCAPS\tinit", "contents": "ENCODING_CDR_ENCAPS ${1:encoding} = new ENCODING_CDR_ENCAPS($2);"},
		{"trigger": "I-ENTITYDatatypeValidator\tinit", "contents": "ENTITYDatatypeValidator ${1:validator} = new ENTITYDatatypeValidator($2);"},
		{"trigger": "I-EOFException\tinit", "contents": "EOFException ${1:exception} = new EOFException($2);"},
		{"trigger": "I-ES2Context\tinit", "contents": "ES2Context ${1:context} = new ES2Context($2);"},
		{"trigger": "I-ES2Graphics\tinit", "contents": "ES2Graphics ${1:graphics} = new ES2Graphics($2);"},
		{"trigger": "I-ES2Light\tinit", "contents": "ES2Light ${1:light} = new ES2Light($2);"},
		{"trigger": "I-ES2Mesh\tinit", "contents": "ES2Mesh ${1:mesh} = new ES2Mesh($2);"},
		{"trigger": "I-ES2MeshView\tinit", "contents": "ES2MeshView ${1:view} = new ES2MeshView($2);"},
		{"trigger": "I-ES2PhongMaterial\tinit", "contents": "ES2PhongMaterial ${1:material} = new ES2PhongMaterial($2);"},
		{"trigger": "I-ES2PhongShader\tinit", "contents": "ES2PhongShader ${1:shader} = new ES2PhongShader($2);"},
		{"trigger": "I-ES2Pipeline\tinit", "contents": "ES2Pipeline ${1:pipeline} = new ES2Pipeline($2);"},
		{"trigger": "I-ES2RTTexture\tinit", "contents": "ES2RTTexture ${1:texture} = new ES2RTTexture($2);"},
		{"trigger": "I-ES2RTTextureData\tinit", "contents": "ES2RTTextureData ${1:data} = new ES2RTTextureData($2);"},
		{"trigger": "I-ES2RenderTarget\tinit", "contents": "ES2RenderTarget ${1:target} = new ES2RenderTarget($2);"},
		{"trigger": "I-ES2ResourceFactory\tinit", "contents": "ES2ResourceFactory ${1:factory} = new ES2ResourceFactory($2);"},
		{"trigger": "I-ES2Shader\tinit", "contents": "ES2Shader ${1:shader} = new ES2Shader($2);"},
		{"trigger": "I-ES2ShaderSource\tinit", "contents": "ES2ShaderSource ${1:source} = new ES2ShaderSource($2);"},
		{"trigger": "I-ES2SwapChain\tinit", "contents": "ES2SwapChain ${1:chain} = new ES2SwapChain($2);"},
		{"trigger": "I-ES2Texture\tinit", "contents": "ES2Texture ${1:texture} = new ES2Texture($2);"},
		{"trigger": "I-ES2TextureData\tinit", "contents": "ES2TextureData ${1:data} = new ES2TextureData($2);"},
		{"trigger": "I-ES2TextureResource\tinit", "contents": "ES2TextureResource ${1:resource} = new ES2TextureResource($2);"},
		{"trigger": "I-ES2VertexBuffer\tinit", "contents": "ES2VertexBuffer ${1:buffer} = new ES2VertexBuffer($2);"},
		{"trigger": "I-ES2VramPool\tinit", "contents": "ES2VramPool ${1:pool} = new ES2VramPool($2);"},
		{"trigger": "I-Edge\tinit", "contents": "Edge ${1:edge} = new Edge($2);"},
		{"trigger": "I-EditableView\tinit", "contents": "EditableView ${1:view} = new EditableView($2);"},
		{"trigger": "I-EditorKit\tinit", "contents": "EditorKit ${1:kit} = new EditorKit($2);"},
		{"trigger": "I-EditorPanePainter\tinit", "contents": "EditorPanePainter ${1:painter} = new EditorPanePainter($2);"},
		{"trigger": "I-Effect\tinit", "contents": "Effect ${1:effect} = new Effect($2);"},
		{"trigger": "I-EffectChangeListener\tinit", "contents": "EffectChangeListener ${1:listener} = new EffectChangeListener($2);"},
		{"trigger": "I-EffectConverter\tinit", "contents": "EffectConverter ${1:converter} = new EffectConverter($2);"},
		{"trigger": "I-EffectDirtyBits\tinit", "contents": "EffectDirtyBits ${1:bits} = new EffectDirtyBits($2);"},
		{"trigger": "I-EffectFilter\tinit", "contents": "EffectFilter ${1:filter} = new EffectFilter($2);"},
		{"trigger": "I-EffectPeer\tinit", "contents": "EffectPeer ${1:peer} = new EffectPeer($2);"},
		{"trigger": "I-EffectUtil\tinit", "contents": "EffectUtil ${1:util} = new EffectUtil($2);"},
		{"trigger": "I-EffectUtils\tinit", "contents": "EffectUtils ${1:utils} = new EffectUtils($2);"},
		{"trigger": "I-ElemContext\tinit", "contents": "ElemContext ${1:context} = new ElemContext($2);"},
		{"trigger": "I-ElemDesc\tinit", "contents": "ElemDesc ${1:desc} = new ElemDesc($2);"},
		{"trigger": "I-Element\tinit", "contents": "Element ${1:element} = new Element($2);"},
		{"trigger": "I-ElementAvailableCall\tinit", "contents": "ElementAvailableCall ${1:call} = new ElementAvailableCall($2);"},
		{"trigger": "I-ElementCSSInlineStyle\tinit", "contents": "ElementCSSInlineStyle ${1:style} = new ElementCSSInlineStyle($2);"},
		{"trigger": "I-ElementChecker\tinit", "contents": "ElementChecker ${1:checker} = new ElementChecker($2);"},
		{"trigger": "I-ElementCheckerImpl\tinit", "contents": "ElementCheckerImpl ${1:impl} = new ElementCheckerImpl($2);"},
		{"trigger": "I-ElementDefinitionImpl\tinit", "contents": "ElementDefinitionImpl ${1:impl} = new ElementDefinitionImpl($2);"},
		{"trigger": "I-ElementFilter\tinit", "contents": "ElementFilter ${1:filter} = new ElementFilter($2);"},
		{"trigger": "I-ElementImpl\tinit", "contents": "ElementImpl ${1:impl} = new ElementImpl($2);"},
		{"trigger": "I-ElementIterator\tinit", "contents": "ElementIterator ${1:iterator} = new ElementIterator($2);"},
		{"trigger": "I-ElementKind\tinit", "contents": "ElementKind ${1:kind} = new ElementKind($2);"},
		{"trigger": "I-ElementNSImpl\tinit", "contents": "ElementNSImpl ${1:impl} = new ElementNSImpl($2);"},
		{"trigger": "I-ElementObservableListDecorator\tinit", "contents": "ElementObservableListDecorator ${1:decorator} = new ElementObservableListDecorator($2);"},
		{"trigger": "I-ElementObserver\tinit", "contents": "ElementObserver ${1:observer} = new ElementObserver($2);"},
		{"trigger": "I-ElementPSVI\tinit", "contents": "ElementPSVI ${1:elementpsvi} = new ElementPSVI($2);"},
		{"trigger": "I-ElementPSVImpl\tinit", "contents": "ElementPSVImpl ${1:impl} = new ElementPSVImpl($2);"},
		{"trigger": "I-ElementProxy\tinit", "contents": "ElementProxy ${1:proxy} = new ElementProxy($2);"},
		{"trigger": "I-ElementSchemePointer\tinit", "contents": "ElementSchemePointer ${1:pointer} = new ElementSchemePointer($2);"},
		{"trigger": "I-ElementState\tinit", "contents": "ElementState ${1:state} = new ElementState($2);"},
		{"trigger": "I-ElementType\tinit", "contents": "ElementType ${1:type} = new ElementType($2);"},
		{"trigger": "I-ElementVisitor\tinit", "contents": "ElementVisitor ${1:visitor} = new ElementVisitor($2);"},
		{"trigger": "I-Elements\tinit", "contents": "Elements ${1:elements} = new Elements($2);"},
		{"trigger": "I-Ellipse\tinit", "contents": "Ellipse ${1:ellipse} = new Ellipse($2);"},
		{"trigger": "I-Ellipse2D\tinit", "contents": "Ellipse2D ${1:ellipse2d} = new Ellipse2D($2);"},
		{"trigger": "I-EllipseBuilder\tinit", "contents": "EllipseBuilder ${1:builder} = new EllipseBuilder($2);"},
		{"trigger": "I-EllipseIterator\tinit", "contents": "EllipseIterator ${1:iterator} = new EllipseIterator($2);"},
		{"trigger": "I-EllipticCurve\tinit", "contents": "EllipticCurve ${1:curve} = new EllipticCurve($2);"},
		{"trigger": "I-EmbeddedScene\tinit", "contents": "EmbeddedScene ${1:scene} = new EmbeddedScene($2);"},
		{"trigger": "I-EmbeddedSceneDS\tinit", "contents": "EmbeddedSceneDS ${1:embeddedsceneds} = new EmbeddedSceneDS($2);"},
		{"trigger": "I-EmbeddedSceneDSInterface\tinit", "contents": "EmbeddedSceneDSInterface ${1:interface} = new EmbeddedSceneDSInterface($2);"},
		{"trigger": "I-EmbeddedSceneDT\tinit", "contents": "EmbeddedSceneDT ${1:embeddedscenedt} = new EmbeddedSceneDT($2);"},
		{"trigger": "I-EmbeddedSceneDTInterface\tinit", "contents": "EmbeddedSceneDTInterface ${1:interface} = new EmbeddedSceneDTInterface($2);"},
		{"trigger": "I-EmbeddedSceneDnD\tinit", "contents": "EmbeddedSceneDnD ${1:embeddedscenednd} = new EmbeddedSceneDnD($2);"},
		{"trigger": "I-EmbeddedSceneInterface\tinit", "contents": "EmbeddedSceneInterface ${1:interface} = new EmbeddedSceneInterface($2);"},
		{"trigger": "I-EmbeddedStage\tinit", "contents": "EmbeddedStage ${1:stage} = new EmbeddedStage($2);"},
		{"trigger": "I-EmbeddedStageInterface\tinit", "contents": "EmbeddedStageInterface ${1:interface} = new EmbeddedStageInterface($2);"},
		{"trigger": "I-EmbeddedState\tinit", "contents": "EmbeddedState ${1:state} = new EmbeddedState($2);"},
		{"trigger": "I-EmbeddedTextContextMenuContent\tinit", "contents": "EmbeddedTextContextMenuContent ${1:content} = new EmbeddedTextContextMenuContent($2);"},
		{"trigger": "I-EmbeddedWindow\tinit", "contents": "EmbeddedWindow ${1:window} = new EmbeddedWindow($2);"},
		{"trigger": "I-EmptyBorder\tinit", "contents": "EmptyBorder ${1:border} = new EmptyBorder($2);"},
		{"trigger": "I-EmptyFilter\tinit", "contents": "EmptyFilter ${1:filter} = new EmptyFilter($2);"},
		{"trigger": "I-EmptyIterator\tinit", "contents": "EmptyIterator ${1:iterator} = new EmptyIterator($2);"},
		{"trigger": "I-EmptySerializer\tinit", "contents": "EmptySerializer ${1:serializer} = new EmptySerializer($2);"},
		{"trigger": "I-EmptyStackException\tinit", "contents": "EmptyStackException ${1:exception} = new EmptyStackException($2);"},
		{"trigger": "I-EmptyStatementTree\tinit", "contents": "EmptyStatementTree ${1:tree} = new EmptyStatementTree($2);"},
		{"trigger": "I-EmptyVisitor\tinit", "contents": "EmptyVisitor ${1:visitor} = new EmptyVisitor($2);"},
		{"trigger": "I-EmptyXMLSchema\tinit", "contents": "EmptyXMLSchema ${1:schema} = new EmptyXMLSchema($2);"},
		{"trigger": "I-EncapsulationFactoryBase\tinit", "contents": "EncapsulationFactoryBase ${1:base} = new EncapsulationFactoryBase($2);"},
		{"trigger": "I-EncodedKeySpec\tinit", "contents": "EncodedKeySpec ${1:spec} = new EncodedKeySpec($2);"},
		{"trigger": "I-Encoder\tinit", "contents": "Encoder ${1:encoder} = new Encoder($2);"},
		{"trigger": "I-Encoding\tinit", "contents": "Encoding ${1:encoding} = new Encoding($2);"},
		{"trigger": "I-EncodingInfo\tinit", "contents": "EncodingInfo ${1:info} = new EncodingInfo($2);"},
		{"trigger": "I-EncodingMap\tinit", "contents": "EncodingMap ${1:map} = new EncodingMap($2);"},
		{"trigger": "I-Encodings\tinit", "contents": "Encodings ${1:encodings} = new Encodings($2);"},
		{"trigger": "I-EncryptedData\tinit", "contents": "EncryptedData ${1:data} = new EncryptedData($2);"},
		{"trigger": "I-EncryptedKey\tinit", "contents": "EncryptedKey ${1:key} = new EncryptedKey($2);"},
		{"trigger": "I-EncryptedKeyResolver\tinit", "contents": "EncryptedKeyResolver ${1:resolver} = new EncryptedKeyResolver($2);"},
		{"trigger": "I-EncryptedType\tinit", "contents": "EncryptedType ${1:type} = new EncryptedType($2);"},
		{"trigger": "I-EncryptionConstants\tinit", "contents": "EncryptionConstants ${1:constants} = new EncryptionConstants($2);"},
		{"trigger": "I-EncryptionElementProxy\tinit", "contents": "EncryptionElementProxy ${1:proxy} = new EncryptionElementProxy($2);"},
		{"trigger": "I-EncryptionMethod\tinit", "contents": "EncryptionMethod ${1:method} = new EncryptionMethod($2);"},
		{"trigger": "I-EncryptionProperties\tinit", "contents": "EncryptionProperties ${1:properties} = new EncryptionProperties($2);"},
		{"trigger": "I-EncryptionProperty\tinit", "contents": "EncryptionProperty ${1:property} = new EncryptionProperty($2);"},
		{"trigger": "I-EndDocument\tinit", "contents": "EndDocument ${1:document} = new EndDocument($2);"},
		{"trigger": "I-EndElement\tinit", "contents": "EndElement ${1:element} = new EndElement($2);"},
		{"trigger": "I-EndElementTree\tinit", "contents": "EndElementTree ${1:tree} = new EndElementTree($2);"},
		{"trigger": "I-EndPointInfo\tinit", "contents": "EndPointInfo ${1:info} = new EndPointInfo($2);"},
		{"trigger": "I-EndPointInfoHelper\tinit", "contents": "EndPointInfoHelper ${1:helper} = new EndPointInfoHelper($2);"},
		{"trigger": "I-EndPointInfoHolder\tinit", "contents": "EndPointInfoHolder ${1:holder} = new EndPointInfoHolder($2);"},
		{"trigger": "I-Endpoint\tinit", "contents": "Endpoint ${1:endpoint} = new Endpoint($2);"},
		{"trigger": "I-EndpointContext\tinit", "contents": "EndpointContext ${1:context} = new EndpointContext($2);"},
		{"trigger": "I-EndpointInfoListHelper\tinit", "contents": "EndpointInfoListHelper ${1:helper} = new EndpointInfoListHelper($2);"},
		{"trigger": "I-EndpointInfoListHolder\tinit", "contents": "EndpointInfoListHolder ${1:holder} = new EndpointInfoListHolder($2);"},
		{"trigger": "I-EndpointReference\tinit", "contents": "EndpointReference ${1:reference} = new EndpointReference($2);"},
		{"trigger": "I-EnhancedForLoopTree\tinit", "contents": "EnhancedForLoopTree ${1:tree} = new EnhancedForLoopTree($2);"},
		{"trigger": "I-EnteredExitedHandler\tinit", "contents": "EnteredExitedHandler ${1:handler} = new EnteredExitedHandler($2);"},
		{"trigger": "I-Entity\tinit", "contents": "Entity ${1:entity} = new Entity($2);"},
		{"trigger": "I-EntityDV\tinit", "contents": "EntityDV ${1:entitydv} = new EntityDV($2);"},
		{"trigger": "I-EntityDeclaration\tinit", "contents": "EntityDeclaration ${1:declaration} = new EntityDeclaration($2);"},
		{"trigger": "I-EntityImpl\tinit", "contents": "EntityImpl ${1:impl} = new EntityImpl($2);"},
		{"trigger": "I-EntityReference\tinit", "contents": "EntityReference ${1:reference} = new EntityReference($2);"},
		{"trigger": "I-EntityReferenceImpl\tinit", "contents": "EntityReferenceImpl ${1:impl} = new EntityReferenceImpl($2);"},
		{"trigger": "I-EntityResolver\tinit", "contents": "EntityResolver ${1:resolver} = new EntityResolver($2);"},
		{"trigger": "I-EntityResolver2Wrapper\tinit", "contents": "EntityResolver2Wrapper ${1:wrapper} = new EntityResolver2Wrapper($2);"},
		{"trigger": "I-EntityResolverWrapper\tinit", "contents": "EntityResolverWrapper ${1:wrapper} = new EntityResolverWrapper($2);"},
		{"trigger": "I-EntityState\tinit", "contents": "EntityState ${1:state} = new EntityState($2);"},
		{"trigger": "I-EntityTree\tinit", "contents": "EntityTree ${1:tree} = new EntityTree($2);"},
		{"trigger": "I-EntryPair\tinit", "contents": "EntryPair ${1:pair} = new EntryPair($2);"},
		{"trigger": "I-Enum\tinit", "contents": "Enum ${1:enum} = new Enum($2);"},
		{"trigger": "I-EnumConstantNotPresentException\tinit", "contents": "EnumConstantNotPresentException ${1:exception} = new EnumConstantNotPresentException($2);"},
		{"trigger": "I-EnumControl\tinit", "contents": "EnumControl ${1:control} = new EnumControl($2);"},
		{"trigger": "I-EnumConverter\tinit", "contents": "EnumConverter ${1:converter} = new EnumConverter($2);"},
		{"trigger": "I-EnumMap\tinit", "contents": "EnumMap ${1:map} = new EnumMap($2);"},
		{"trigger": "I-EnumRowStatus\tinit", "contents": "EnumRowStatus ${1:status} = new EnumRowStatus($2);"},
		{"trigger": "I-EnumSet\tinit", "contents": "EnumSet ${1:set} = new EnumSet($2);"},
		{"trigger": "I-EnumSyntax\tinit", "contents": "EnumSyntax ${1:syntax} = new EnumSyntax($2);"},
		{"trigger": "I-Enumerated\tinit", "contents": "Enumerated ${1:enumerated} = new Enumerated($2);"},
		{"trigger": "I-Enumeration\tinit", "contents": "Enumeration ${1:enumeration} = new Enumeration($2);"},
		{"trigger": "I-EnvHelp\tinit", "contents": "EnvHelp ${1:help} = new EnvHelp($2);"},
		{"trigger": "I-Environment\tinit", "contents": "Environment ${1:environment} = new Environment($2);"},
		{"trigger": "I-EnvironmentCheck\tinit", "contents": "EnvironmentCheck ${1:check} = new EnvironmentCheck($2);"},
		{"trigger": "I-EqualityExpr\tinit", "contents": "EqualityExpr ${1:expr} = new EqualityExpr($2);"},
		{"trigger": "I-EqualizerBand\tinit", "contents": "EqualizerBand ${1:band} = new EqualizerBand($2);"},
		{"trigger": "I-Equals\tinit", "contents": "Equals ${1:equals} = new Equals($2);"},
		{"trigger": "I-Era\tinit", "contents": "Era ${1:era} = new Era($2);"},
		{"trigger": "I-ErroneousTree\tinit", "contents": "ErroneousTree ${1:tree} = new ErroneousTree($2);"},
		{"trigger": "I-Error\tinit", "contents": "Error ${1:error} = new Error($2);"},
		{"trigger": "I-ErrorHandler\tinit", "contents": "ErrorHandler ${1:handler} = new ErrorHandler($2);"},
		{"trigger": "I-ErrorHandlerAdaptor\tinit", "contents": "ErrorHandlerAdaptor ${1:adaptor} = new ErrorHandlerAdaptor($2);"},
		{"trigger": "I-ErrorHandlerProxy\tinit", "contents": "ErrorHandlerProxy ${1:proxy} = new ErrorHandlerProxy($2);"},
		{"trigger": "I-ErrorHandlerWrapper\tinit", "contents": "ErrorHandlerWrapper ${1:wrapper} = new ErrorHandlerWrapper($2);"},
		{"trigger": "I-ErrorListener\tinit", "contents": "ErrorListener ${1:listener} = new ErrorListener($2);"},
		{"trigger": "I-ErrorManager\tinit", "contents": "ErrorManager ${1:manager} = new ErrorManager($2);"},
		{"trigger": "I-ErrorMessages\tinit", "contents": "ErrorMessages ${1:messages} = new ErrorMessages($2);"},
		{"trigger": "I-ErrorMsg\tinit", "contents": "ErrorMsg ${1:msg} = new ErrorMsg($2);"},
		{"trigger": "I-ErrorType\tinit", "contents": "ErrorType ${1:type} = new ErrorType($2);"},
		{"trigger": "I-EtchedBorder\tinit", "contents": "EtchedBorder ${1:border} = new EtchedBorder($2);"},
		{"trigger": "I-Eula\tinit", "contents": "Eula ${1:eula} = new Eula($2);"},
		{"trigger": "I-Event\tinit", "contents": "Event ${1:event} = new Event($2);"},
		{"trigger": "I-EventContext\tinit", "contents": "EventContext ${1:context} = new EventContext($2);"},
		{"trigger": "I-EventDirContext\tinit", "contents": "EventDirContext ${1:context} = new EventDirContext($2);"},
		{"trigger": "I-EventDispatchChain\tinit", "contents": "EventDispatchChain ${1:chain} = new EventDispatchChain($2);"},
		{"trigger": "I-EventDispatchChainImpl\tinit", "contents": "EventDispatchChainImpl ${1:impl} = new EventDispatchChainImpl($2);"},
		{"trigger": "I-EventDispatchThread\tinit", "contents": "EventDispatchThread ${1:thread} = new EventDispatchThread($2);"},
		{"trigger": "I-EventDispatchTree\tinit", "contents": "EventDispatchTree ${1:tree} = new EventDispatchTree($2);"},
		{"trigger": "I-EventDispatchTreeImpl\tinit", "contents": "EventDispatchTreeImpl ${1:impl} = new EventDispatchTreeImpl($2);"},
		{"trigger": "I-EventDispatcher\tinit", "contents": "EventDispatcher ${1:dispatcher} = new EventDispatcher($2);"},
		{"trigger": "I-EventException\tinit", "contents": "EventException ${1:exception} = new EventException($2);"},
		{"trigger": "I-EventFilter\tinit", "contents": "EventFilter ${1:filter} = new EventFilter($2);"},
		{"trigger": "I-EventHandler\tinit", "contents": "EventHandler ${1:handler} = new EventHandler($2);"},
		{"trigger": "I-EventHandlerManager\tinit", "contents": "EventHandlerManager ${1:manager} = new EventHandlerManager($2);"},
		{"trigger": "I-EventHandlerProperties\tinit", "contents": "EventHandlerProperties ${1:properties} = new EventHandlerProperties($2);"},
		{"trigger": "I-EventHelper\tinit", "contents": "EventHelper ${1:helper} = new EventHelper($2);"},
		{"trigger": "I-EventImpl\tinit", "contents": "EventImpl ${1:impl} = new EventImpl($2);"},
		{"trigger": "I-EventListener\tinit", "contents": "EventListener ${1:listener} = new EventListener($2);"},
		{"trigger": "I-EventListenerImpl\tinit", "contents": "EventListenerImpl ${1:impl} = new EventListenerImpl($2);"},
		{"trigger": "I-EventListenerList\tinit", "contents": "EventListenerList ${1:list} = new EventListenerList($2);"},
		{"trigger": "I-EventListenerProxy\tinit", "contents": "EventListenerProxy ${1:proxy} = new EventListenerProxy($2);"},
		{"trigger": "I-EventLoop\tinit", "contents": "EventLoop ${1:loop} = new EventLoop($2);"},
		{"trigger": "I-EventLoopImpl\tinit", "contents": "EventLoopImpl ${1:impl} = new EventLoopImpl($2);"},
		{"trigger": "I-EventObject\tinit", "contents": "EventObject ${1:object} = new EventObject($2);"},
		{"trigger": "I-EventPortSelectorProvider\tinit", "contents": "EventPortSelectorProvider ${1:provider} = new EventPortSelectorProvider($2);"},
		{"trigger": "I-EventQueue\tinit", "contents": "EventQueue ${1:queue} = new EventQueue($2);"},
		{"trigger": "I-EventReaderDelegate\tinit", "contents": "EventReaderDelegate ${1:delegate} = new EventReaderDelegate($2);"},
		{"trigger": "I-EventRedirector\tinit", "contents": "EventRedirector ${1:redirector} = new EventRedirector($2);"},
		{"trigger": "I-EventSender\tinit", "contents": "EventSender ${1:sender} = new EventSender($2);"},
		{"trigger": "I-EventSetDescriptor\tinit", "contents": "EventSetDescriptor ${1:descriptor} = new EventSetDescriptor($2);"},
		{"trigger": "I-EventTarget\tinit", "contents": "EventTarget ${1:target} = new EventTarget($2);"},
		{"trigger": "I-EventType\tinit", "contents": "EventType ${1:type} = new EventType($2);"},
		{"trigger": "I-EventUtil\tinit", "contents": "EventUtil ${1:util} = new EventUtil($2);"},
		{"trigger": "I-ExcC14NParameterSpec\tinit", "contents": "ExcC14NParameterSpec ${1:spec} = new ExcC14NParameterSpec($2);"},
		{"trigger": "I-Exception\tinit", "contents": "Exception ${1:exception} = new Exception($2);"},
		{"trigger": "I-ExceptionConstants\tinit", "contents": "ExceptionConstants ${1:constants} = new ExceptionConstants($2);"},
		{"trigger": "I-ExceptionDetailMessage\tinit", "contents": "ExceptionDetailMessage ${1:message} = new ExceptionDetailMessage($2);"},
		{"trigger": "I-ExceptionInInitializerError\tinit", "contents": "ExceptionInInitializerError ${1:error} = new ExceptionInInitializerError($2);"},
		{"trigger": "I-ExceptionList\tinit", "contents": "ExceptionList ${1:list} = new ExceptionList($2);"},
		{"trigger": "I-ExceptionListener\tinit", "contents": "ExceptionListener ${1:listener} = new ExceptionListener($2);"},
		{"trigger": "I-ExceptionTable\tinit", "contents": "ExceptionTable ${1:table} = new ExceptionTable($2);"},
		{"trigger": "I-ExceptionThrower\tinit", "contents": "ExceptionThrower ${1:thrower} = new ExceptionThrower($2);"},
		{"trigger": "I-Exchanger\tinit", "contents": "Exchanger ${1:exchanger} = new Exchanger($2);"},
		{"trigger": "I-Executable\tinit", "contents": "Executable ${1:executable} = new Executable($2);"},
		{"trigger": "I-ExecutableElement\tinit", "contents": "ExecutableElement ${1:element} = new ExecutableElement($2);"},
		{"trigger": "I-ExecutableMemberDoc\tinit", "contents": "ExecutableMemberDoc ${1:doc} = new ExecutableMemberDoc($2);"},
		{"trigger": "I-ExecutableType\tinit", "contents": "ExecutableType ${1:type} = new ExecutableType($2);"},
		{"trigger": "I-ExecutionException\tinit", "contents": "ExecutionException ${1:exception} = new ExecutionException($2);"},
		{"trigger": "I-Executor\tinit", "contents": "Executor ${1:executor} = new Executor($2);"},
		{"trigger": "I-ExecutorCompletionService\tinit", "contents": "ExecutorCompletionService ${1:service} = new ExecutorCompletionService($2);"},
		{"trigger": "I-ExecutorService\tinit", "contents": "ExecutorService ${1:service} = new ExecutorService($2);"},
		{"trigger": "I-Executors\tinit", "contents": "Executors ${1:executors} = new Executors($2);"},
		{"trigger": "I-ExpandVetoException\tinit", "contents": "ExpandVetoException ${1:exception} = new ExpandVetoException($2);"},
		{"trigger": "I-ExpandedNameTable\tinit", "contents": "ExpandedNameTable ${1:table} = new ExpandedNameTable($2);"},
		{"trigger": "I-ExpiringCache\tinit", "contents": "ExpiringCache ${1:cache} = new ExpiringCache($2);"},
		{"trigger": "I-ExportException\tinit", "contents": "ExportException ${1:exception} = new ExportException($2);"},
		{"trigger": "I-Expression\tinit", "contents": "Expression ${1:expression} = new Expression($2);"},
		{"trigger": "I-ExpressionContext\tinit", "contents": "ExpressionContext ${1:context} = new ExpressionContext($2);"},
		{"trigger": "I-ExpressionHelper\tinit", "contents": "ExpressionHelper ${1:helper} = new ExpressionHelper($2);"},
		{"trigger": "I-ExpressionHelperBase\tinit", "contents": "ExpressionHelperBase ${1:base} = new ExpressionHelperBase($2);"},
		{"trigger": "I-ExpressionNode\tinit", "contents": "ExpressionNode ${1:node} = new ExpressionNode($2);"},
		{"trigger": "I-ExpressionOwner\tinit", "contents": "ExpressionOwner ${1:owner} = new ExpressionOwner($2);"},
		{"trigger": "I-ExpressionStatementTree\tinit", "contents": "ExpressionStatementTree ${1:tree} = new ExpressionStatementTree($2);"},
		{"trigger": "I-ExpressionTree\tinit", "contents": "ExpressionTree ${1:tree} = new ExpressionTree($2);"},
		{"trigger": "I-ExpressionValue\tinit", "contents": "ExpressionValue ${1:value} = new ExpressionValue($2);"},
		{"trigger": "I-ExsltBase\tinit", "contents": "ExsltBase ${1:base} = new ExsltBase($2);"},
		{"trigger": "I-ExsltCommon\tinit", "contents": "ExsltCommon ${1:common} = new ExsltCommon($2);"},
		{"trigger": "I-ExsltDatetime\tinit", "contents": "ExsltDatetime ${1:datetime} = new ExsltDatetime($2);"},
		{"trigger": "I-ExsltDynamic\tinit", "contents": "ExsltDynamic ${1:dynamic} = new ExsltDynamic($2);"},
		{"trigger": "I-ExsltMath\tinit", "contents": "ExsltMath ${1:math} = new ExsltMath($2);"},
		{"trigger": "I-ExsltSets\tinit", "contents": "ExsltSets ${1:sets} = new ExsltSets($2);"},
		{"trigger": "I-ExsltStrings\tinit", "contents": "ExsltStrings ${1:strings} = new ExsltStrings($2);"},
		{"trigger": "I-ExtendedContentHandler\tinit", "contents": "ExtendedContentHandler ${1:handler} = new ExtendedContentHandler($2);"},
		{"trigger": "I-ExtendedGSSContext\tinit", "contents": "ExtendedGSSContext ${1:context} = new ExtendedGSSContext($2);"},
		{"trigger": "I-ExtendedGSSCredential\tinit", "contents": "ExtendedGSSCredential ${1:credential} = new ExtendedGSSCredential($2);"},
		{"trigger": "I-ExtendedInputMethodRequests\tinit", "contents": "ExtendedInputMethodRequests ${1:requests} = new ExtendedInputMethodRequests($2);"},
		{"trigger": "I-ExtendedLexicalHandler\tinit", "contents": "ExtendedLexicalHandler ${1:handler} = new ExtendedLexicalHandler($2);"},
		{"trigger": "I-ExtendedRequest\tinit", "contents": "ExtendedRequest ${1:request} = new ExtendedRequest($2);"},
		{"trigger": "I-ExtendedResponse\tinit", "contents": "ExtendedResponse ${1:response} = new ExtendedResponse($2);"},
		{"trigger": "I-ExtendedSAX\tinit", "contents": "ExtendedSAX ${1:extendedsax} = new ExtendedSAX($2);"},
		{"trigger": "I-ExtendedSchemaDVFactoryImpl\tinit", "contents": "ExtendedSchemaDVFactoryImpl ${1:impl} = new ExtendedSchemaDVFactoryImpl($2);"},
		{"trigger": "I-ExtendedTime\tinit", "contents": "ExtendedTime ${1:time} = new ExtendedTime($2);"},
		{"trigger": "I-ExtendedType\tinit", "contents": "ExtendedType ${1:type} = new ExtendedType($2);"},
		{"trigger": "I-ExtendedXMLCatalogReader\tinit", "contents": "ExtendedXMLCatalogReader ${1:reader} = new ExtendedXMLCatalogReader($2);"},
		{"trigger": "I-Extension\tinit", "contents": "Extension ${1:extension} = new Extension($2);"},
		{"trigger": "I-Extensions\tinit", "contents": "Extensions ${1:extensions} = new Extensions($2);"},
		{"trigger": "I-ExtensionsProvider\tinit", "contents": "ExtensionsProvider ${1:provider} = new ExtensionsProvider($2);"},
		{"trigger": "I-ExternalSubsetResolver\tinit", "contents": "ExternalSubsetResolver ${1:resolver} = new ExternalSubsetResolver($2);"},
		{"trigger": "I-Externalizable\tinit", "contents": "Externalizable ${1:externalizable} = new Externalizable($2);"},
		{"trigger": "I-F2D\tinit", "contents": "F2D ${1:f2d} = new F2D($2);"},
		{"trigger": "I-F2I\tinit", "contents": "F2I ${1:f2i} = new F2I($2);"},
		{"trigger": "I-F2L\tinit", "contents": "F2L ${1:f2l} = new F2L($2);"},
		{"trigger": "I-FADD\tinit", "contents": "FADD ${1:fadd} = new FADD($2);"},
		{"trigger": "I-FALOAD\tinit", "contents": "FALOAD ${1:faload} = new FALOAD($2);"},
		{"trigger": "I-FASTORE\tinit", "contents": "FASTORE ${1:fastore} = new FASTORE($2);"},
		{"trigger": "I-FBDevScreen\tinit", "contents": "FBDevScreen ${1:screen} = new FBDevScreen($2);"},
		{"trigger": "I-FCMPG\tinit", "contents": "FCMPG ${1:fcmpg} = new FCMPG($2);"},
		{"trigger": "I-FCMPL\tinit", "contents": "FCMPL ${1:fcmpl} = new FCMPL($2);"},
		{"trigger": "I-FCONST\tinit", "contents": "FCONST ${1:fconst} = new FCONST($2);"},
		{"trigger": "I-FDIV\tinit", "contents": "FDIV ${1:fdiv} = new FDIV($2);"},
		{"trigger": "I-FLOAD\tinit", "contents": "FLOAD ${1:fload} = new FLOAD($2);"},
		{"trigger": "I-FLVMetadataParser\tinit", "contents": "FLVMetadataParser ${1:parser} = new FLVMetadataParser($2);"},
		{"trigger": "I-FMUL\tinit", "contents": "FMUL ${1:fmul} = new FMUL($2);"},
		{"trigger": "I-FNEG\tinit", "contents": "FNEG ${1:fneg} = new FNEG($2);"},
		{"trigger": "I-FREE_MEM\tinit", "contents": "FREE_MEM ${1:free} = new FREE_MEM($2);"},
		{"trigger": "I-FREM\tinit", "contents": "FREM ${1:frem} = new FREM($2);"},
		{"trigger": "I-FRETURN\tinit", "contents": "FRETURN ${1:freturn} = new FRETURN($2);"},
		{"trigger": "I-FSM\tinit", "contents": "FSM ${1:fsm} = new FSM($2);"},
		{"trigger": "I-FSMImpl\tinit", "contents": "FSMImpl ${1:impl} = new FSMImpl($2);"},
		{"trigger": "I-FSMTest\tinit", "contents": "FSMTest ${1:test} = new FSMTest($2);"},
		{"trigger": "I-FSTORE\tinit", "contents": "FSTORE ${1:fstore} = new FSTORE($2);"},
		{"trigger": "I-FSUB\tinit", "contents": "FSUB ${1:fsub} = new FSUB($2);"},
		{"trigger": "I-FTDisposer\tinit", "contents": "FTDisposer ${1:disposer} = new FTDisposer($2);"},
		{"trigger": "I-FTFactory\tinit", "contents": "FTFactory ${1:factory} = new FTFactory($2);"},
		{"trigger": "I-FTFontFile\tinit", "contents": "FTFontFile ${1:file} = new FTFontFile($2);"},
		{"trigger": "I-FTFontStrike\tinit", "contents": "FTFontStrike ${1:strike} = new FTFontStrike($2);"},
		{"trigger": "I-FTGlyph\tinit", "contents": "FTGlyph ${1:glyph} = new FTGlyph($2);"},
		{"trigger": "I-FT_Bitmap\tinit", "contents": "FT_Bitmap ${1:bitmap} = new FT_Bitmap($2);"},
		{"trigger": "I-FT_GlyphSlotRec\tinit", "contents": "FT_GlyphSlotRec ${1:rec} = new FT_GlyphSlotRec($2);"},
		{"trigger": "I-FT_Glyph_Metrics\tinit", "contents": "FT_Glyph_Metrics ${1:metrics} = new FT_Glyph_Metrics($2);"},
		{"trigger": "I-FT_Matrix\tinit", "contents": "FT_Matrix ${1:matrix} = new FT_Matrix($2);"},
		{"trigger": "I-FXCanvas\tinit", "contents": "FXCanvas ${1:canvas} = new FXCanvas($2);"},
		{"trigger": "I-FXCollections\tinit", "contents": "FXCollections ${1:collections} = new FXCollections($2);"},
		{"trigger": "I-FXDialog\tinit", "contents": "FXDialog ${1:dialog} = new FXDialog($2);"},
		{"trigger": "I-FXDnD\tinit", "contents": "FXDnD ${1:fxdnd} = new FXDnD($2);"},
		{"trigger": "I-FXML\tinit", "contents": "FXML ${1:fxml} = new FXML($2);"},
		{"trigger": "I-FXMLLoader\tinit", "contents": "FXMLLoader ${1:loader} = new FXMLLoader($2);"},
		{"trigger": "I-FXRobot\tinit", "contents": "FXRobot ${1:robot} = new FXRobot($2);"},
		{"trigger": "I-FXRobotFactory\tinit", "contents": "FXRobotFactory ${1:factory} = new FXRobotFactory($2);"},
		{"trigger": "I-FXRobotHelper\tinit", "contents": "FXRobotHelper ${1:helper} = new FXRobotHelper($2);"},
		{"trigger": "I-FXRobotImage\tinit", "contents": "FXRobotImage ${1:image} = new FXRobotImage($2);"},
		{"trigger": "I-FXVK\tinit", "contents": "FXVK ${1:fxvk} = new FXVK($2);"},
		{"trigger": "I-FXVKCharEntities\tinit", "contents": "FXVKCharEntities ${1:entities} = new FXVKCharEntities($2);"},
		{"trigger": "I-FXVKSkin\tinit", "contents": "FXVKSkin ${1:skin} = new FXVKSkin($2);"},
		{"trigger": "I-FactoryConfigurationError\tinit", "contents": "FactoryConfigurationError ${1:error} = new FactoryConfigurationError($2);"},
		{"trigger": "I-FactoryEnumeration\tinit", "contents": "FactoryEnumeration ${1:enumeration} = new FactoryEnumeration($2);"},
		{"trigger": "I-FactoryFinder\tinit", "contents": "FactoryFinder ${1:finder} = new FactoryFinder($2);"},
		{"trigger": "I-FactoryImpl\tinit", "contents": "FactoryImpl ${1:impl} = new FactoryImpl($2);"},
		{"trigger": "I-FactoryResetException\tinit", "contents": "FactoryResetException ${1:exception} = new FactoryResetException($2);"},
		{"trigger": "I-FadeTransition\tinit", "contents": "FadeTransition ${1:transition} = new FadeTransition($2);"},
		{"trigger": "I-FadeTransitionBuilder\tinit", "contents": "FadeTransitionBuilder ${1:builder} = new FadeTransitionBuilder($2);"},
		{"trigger": "I-FailedLoginException\tinit", "contents": "FailedLoginException ${1:exception} = new FailedLoginException($2);"},
		{"trigger": "I-Fallback\tinit", "contents": "Fallback ${1:fallback} = new Fallback($2);"},
		{"trigger": "I-FallbackResource\tinit", "contents": "FallbackResource ${1:resource} = new FallbackResource($2);"},
		{"trigger": "I-FastStringBuffer\tinit", "contents": "FastStringBuffer ${1:buffer} = new FastStringBuffer($2);"},
		{"trigger": "I-FaultAction\tinit", "contents": "FaultAction ${1:action} = new FaultAction($2);"},
		{"trigger": "I-FeatureDescriptor\tinit", "contents": "FeatureDescriptor ${1:descriptor} = new FeatureDescriptor($2);"},
		{"trigger": "I-FeatureManager\tinit", "contents": "FeatureManager ${1:manager} = new FeatureManager($2);"},
		{"trigger": "I-FeaturePropertyBase\tinit", "contents": "FeaturePropertyBase ${1:base} = new FeaturePropertyBase($2);"},
		{"trigger": "I-FeatureState\tinit", "contents": "FeatureState ${1:state} = new FeatureState($2);"},
		{"trigger": "I-Fidelity\tinit", "contents": "Fidelity ${1:fidelity} = new Fidelity($2);"},
		{"trigger": "I-Field\tinit", "contents": "Field ${1:field} = new Field($2);"},
		{"trigger": "I-FieldActivator\tinit", "contents": "FieldActivator ${1:activator} = new FieldActivator($2);"},
		{"trigger": "I-FieldDoc\tinit", "contents": "FieldDoc ${1:doc} = new FieldDoc($2);"},
		{"trigger": "I-FieldGen\tinit", "contents": "FieldGen ${1:gen} = new FieldGen($2);"},
		{"trigger": "I-FieldGenOrMethodGen\tinit", "contents": "FieldGenOrMethodGen ${1:gen} = new FieldGenOrMethodGen($2);"},
		{"trigger": "I-FieldInstruction\tinit", "contents": "FieldInstruction ${1:instruction} = new FieldInstruction($2);"},
		{"trigger": "I-FieldNameHelper\tinit", "contents": "FieldNameHelper ${1:helper} = new FieldNameHelper($2);"},
		{"trigger": "I-FieldObserver\tinit", "contents": "FieldObserver ${1:observer} = new FieldObserver($2);"},
		{"trigger": "I-FieldOrMethod\tinit", "contents": "FieldOrMethod ${1:method} = new FieldOrMethod($2);"},
		{"trigger": "I-FieldPosition\tinit", "contents": "FieldPosition ${1:position} = new FieldPosition($2);"},
		{"trigger": "I-FieldView\tinit", "contents": "FieldView ${1:view} = new FieldView($2);"},
		{"trigger": "I-File\tinit", "contents": "File ${1:file} = new File($2);"},
		{"trigger": "I-FileAlreadyExistsException\tinit", "contents": "FileAlreadyExistsException ${1:exception} = new FileAlreadyExistsException($2);"},
		{"trigger": "I-FileAttribute\tinit", "contents": "FileAttribute ${1:attribute} = new FileAttribute($2);"},
		{"trigger": "I-FileAttributeView\tinit", "contents": "FileAttributeView ${1:view} = new FileAttributeView($2);"},
		{"trigger": "I-FileCacheImageInputStream\tinit", "contents": "FileCacheImageInputStream ${1:stream} = new FileCacheImageInputStream($2);"},
		{"trigger": "I-FileCacheImageOutputStream\tinit", "contents": "FileCacheImageOutputStream ${1:stream} = new FileCacheImageOutputStream($2);"},
		{"trigger": "I-FileChannel\tinit", "contents": "FileChannel ${1:channel} = new FileChannel($2);"},
		{"trigger": "I-FileChooser\tinit", "contents": "FileChooser ${1:chooser} = new FileChooser($2);"},
		{"trigger": "I-FileChooserBuilder\tinit", "contents": "FileChooserBuilder ${1:builder} = new FileChooserBuilder($2);"},
		{"trigger": "I-FileChooserPainter\tinit", "contents": "FileChooserPainter ${1:painter} = new FileChooserPainter($2);"},
		{"trigger": "I-FileChooserType\tinit", "contents": "FileChooserType ${1:type} = new FileChooserType($2);"},
		{"trigger": "I-FileChooserUI\tinit", "contents": "FileChooserUI ${1:filechooserui} = new FileChooserUI($2);"},
		{"trigger": "I-FileDescriptor\tinit", "contents": "FileDescriptor ${1:descriptor} = new FileDescriptor($2);"},
		{"trigger": "I-FileDialog\tinit", "contents": "FileDialog ${1:dialog} = new FileDialog($2);"},
		{"trigger": "I-FileDialogPeer\tinit", "contents": "FileDialogPeer ${1:peer} = new FileDialogPeer($2);"},
		{"trigger": "I-FileFilter\tinit", "contents": "FileFilter ${1:filter} = new FileFilter($2);"},
		{"trigger": "I-FileHandler\tinit", "contents": "FileHandler ${1:handler} = new FileHandler($2);"},
		{"trigger": "I-FileImageInputStream\tinit", "contents": "FileImageInputStream ${1:stream} = new FileImageInputStream($2);"},
		{"trigger": "I-FileImageInputStreamSpi\tinit", "contents": "FileImageInputStreamSpi ${1:spi} = new FileImageInputStreamSpi($2);"},
		{"trigger": "I-FileImageOutputStream\tinit", "contents": "FileImageOutputStream ${1:stream} = new FileImageOutputStream($2);"},
		{"trigger": "I-FileImageOutputStreamSpi\tinit", "contents": "FileImageOutputStreamSpi ${1:spi} = new FileImageOutputStreamSpi($2);"},
		{"trigger": "I-FileInputStream\tinit", "contents": "FileInputStream ${1:stream} = new FileInputStream($2);"},
		{"trigger": "I-FileLock\tinit", "contents": "FileLock ${1:lock} = new FileLock($2);"},
		{"trigger": "I-FileLockInterruptionException\tinit", "contents": "FileLockInterruptionException ${1:exception} = new FileLockInterruptionException($2);"},
		{"trigger": "I-FileLoginModule\tinit", "contents": "FileLoginModule ${1:module} = new FileLoginModule($2);"},
		{"trigger": "I-FileNameExtensionFilter\tinit", "contents": "FileNameExtensionFilter ${1:filter} = new FileNameExtensionFilter($2);"},
		{"trigger": "I-FileNameMap\tinit", "contents": "FileNameMap ${1:map} = new FileNameMap($2);"},
		{"trigger": "I-FileNotFoundException\tinit", "contents": "FileNotFoundException ${1:exception} = new FileNotFoundException($2);"},
		{"trigger": "I-FileObject\tinit", "contents": "FileObject ${1:object} = new FileObject($2);"},
		{"trigger": "I-FileOutputStream\tinit", "contents": "FileOutputStream ${1:stream} = new FileOutputStream($2);"},
		{"trigger": "I-FileOwnerAttributeView\tinit", "contents": "FileOwnerAttributeView ${1:view} = new FileOwnerAttributeView($2);"},
		{"trigger": "I-FilePermission\tinit", "contents": "FilePermission ${1:permission} = new FilePermission($2);"},
		{"trigger": "I-FileReader\tinit", "contents": "FileReader ${1:reader} = new FileReader($2);"},
		{"trigger": "I-FileStore\tinit", "contents": "FileStore ${1:store} = new FileStore($2);"},
		{"trigger": "I-FileStoreAttributeView\tinit", "contents": "FileStoreAttributeView ${1:view} = new FileStoreAttributeView($2);"},
		{"trigger": "I-FileSystem\tinit", "contents": "FileSystem ${1:system} = new FileSystem($2);"},
		{"trigger": "I-FileSystemAlreadyExistsException\tinit", "contents": "FileSystemAlreadyExistsException ${1:exception} = new FileSystemAlreadyExistsException($2);"},
		{"trigger": "I-FileSystemException\tinit", "contents": "FileSystemException ${1:exception} = new FileSystemException($2);"},
		{"trigger": "I-FileSystemLoopException\tinit", "contents": "FileSystemLoopException ${1:exception} = new FileSystemLoopException($2);"},
		{"trigger": "I-FileSystemNotFoundException\tinit", "contents": "FileSystemNotFoundException ${1:exception} = new FileSystemNotFoundException($2);"},
		{"trigger": "I-FileSystemProvider\tinit", "contents": "FileSystemProvider ${1:provider} = new FileSystemProvider($2);"},
		{"trigger": "I-FileSystemView\tinit", "contents": "FileSystemView ${1:view} = new FileSystemView($2);"},
		{"trigger": "I-FileSystems\tinit", "contents": "FileSystems ${1:systems} = new FileSystems($2);"},
		{"trigger": "I-FileTime\tinit", "contents": "FileTime ${1:time} = new FileTime($2);"},
		{"trigger": "I-FileTreeIterator\tinit", "contents": "FileTreeIterator ${1:iterator} = new FileTreeIterator($2);"},
		{"trigger": "I-FileTreeWalker\tinit", "contents": "FileTreeWalker ${1:walker} = new FileTreeWalker($2);"},
		{"trigger": "I-FileTypeDetector\tinit", "contents": "FileTypeDetector ${1:detector} = new FileTypeDetector($2);"},
		{"trigger": "I-FileURL\tinit", "contents": "FileURL ${1:fileurl} = new FileURL($2);"},
		{"trigger": "I-FileView\tinit", "contents": "FileView ${1:view} = new FileView($2);"},
		{"trigger": "I-FileVisitOption\tinit", "contents": "FileVisitOption ${1:option} = new FileVisitOption($2);"},
		{"trigger": "I-FileVisitResult\tinit", "contents": "FileVisitResult ${1:result} = new FileVisitResult($2);"},
		{"trigger": "I-FileVisitor\tinit", "contents": "FileVisitor ${1:visitor} = new FileVisitor($2);"},
		{"trigger": "I-FileWriter\tinit", "contents": "FileWriter ${1:writer} = new FileWriter($2);"},
		{"trigger": "I-FilenameFilter\tinit", "contents": "FilenameFilter ${1:filter} = new FilenameFilter($2);"},
		{"trigger": "I-Filer\tinit", "contents": "Filer ${1:filer} = new Filer($2);"},
		{"trigger": "I-FilerException\tinit", "contents": "FilerException ${1:exception} = new FilerException($2);"},
		{"trigger": "I-Files\tinit", "contents": "Files ${1:files} = new Files($2);"},
		{"trigger": "I-FillRule\tinit", "contents": "FillRule ${1:rule} = new FillRule($2);"},
		{"trigger": "I-FillTransition\tinit", "contents": "FillTransition ${1:transition} = new FillTransition($2);"},
		{"trigger": "I-FillTransitionBuilder\tinit", "contents": "FillTransitionBuilder ${1:builder} = new FillTransitionBuilder($2);"},
		{"trigger": "I-Filter\tinit", "contents": "Filter ${1:filter} = new Filter($2);"},
		{"trigger": "I-FilterContext\tinit", "contents": "FilterContext ${1:context} = new FilterContext($2);"},
		{"trigger": "I-FilterEffect\tinit", "contents": "FilterEffect ${1:effect} = new FilterEffect($2);"},
		{"trigger": "I-FilterExpr\tinit", "contents": "FilterExpr ${1:expr} = new FilterExpr($2);"},
		{"trigger": "I-FilterExprIterator\tinit", "contents": "FilterExprIterator ${1:iterator} = new FilterExprIterator($2);"},
		{"trigger": "I-FilterExprIteratorSimple\tinit", "contents": "FilterExprIteratorSimple ${1:simple} = new FilterExprIteratorSimple($2);"},
		{"trigger": "I-FilterExprWalker\tinit", "contents": "FilterExprWalker ${1:walker} = new FilterExprWalker($2);"},
		{"trigger": "I-FilterGenerator\tinit", "contents": "FilterGenerator ${1:generator} = new FilterGenerator($2);"},
		{"trigger": "I-FilterInputStream\tinit", "contents": "FilterInputStream ${1:stream} = new FilterInputStream($2);"},
		{"trigger": "I-FilterIterator\tinit", "contents": "FilterIterator ${1:iterator} = new FilterIterator($2);"},
		{"trigger": "I-FilterOutputStream\tinit", "contents": "FilterOutputStream ${1:stream} = new FilterOutputStream($2);"},
		{"trigger": "I-FilterParentPath\tinit", "contents": "FilterParentPath ${1:path} = new FilterParentPath($2);"},
		{"trigger": "I-FilterReader\tinit", "contents": "FilterReader ${1:reader} = new FilterReader($2);"},
		{"trigger": "I-FilterWriter\tinit", "contents": "FilterWriter ${1:writer} = new FilterWriter($2);"},
		{"trigger": "I-Filterable\tinit", "contents": "Filterable ${1:filterable} = new Filterable($2);"},
		{"trigger": "I-FilteredAbsoluteLocationPath\tinit", "contents": "FilteredAbsoluteLocationPath ${1:path} = new FilteredAbsoluteLocationPath($2);"},
		{"trigger": "I-FilteredImageSource\tinit", "contents": "FilteredImageSource ${1:source} = new FilteredImageSource($2);"},
		{"trigger": "I-FilteredList\tinit", "contents": "FilteredList ${1:list} = new FilteredList($2);"},
		{"trigger": "I-FilteredRowSet\tinit", "contents": "FilteredRowSet ${1:set} = new FilteredRowSet($2);"},
		{"trigger": "I-FilteredStepIterator\tinit", "contents": "FilteredStepIterator ${1:iterator} = new FilteredStepIterator($2);"},
		{"trigger": "I-FinalReference\tinit", "contents": "FinalReference ${1:reference} = new FinalReference($2);"},
		{"trigger": "I-Finalizer\tinit", "contents": "Finalizer ${1:finalizer} = new Finalizer($2);"},
		{"trigger": "I-FindOps\tinit", "contents": "FindOps ${1:ops} = new FindOps($2);"},
		{"trigger": "I-Finishings\tinit", "contents": "Finishings ${1:finishings} = new Finishings($2);"},
		{"trigger": "I-FiniteClipEnvelope\tinit", "contents": "FiniteClipEnvelope ${1:envelope} = new FiniteClipEnvelope($2);"},
		{"trigger": "I-FixedHeightLayoutCache\tinit", "contents": "FixedHeightLayoutCache ${1:cache} = new FixedHeightLayoutCache($2);"},
		{"trigger": "I-FixedHolder\tinit", "contents": "FixedHolder ${1:holder} = new FixedHolder($2);"},
		{"trigger": "I-FlatteningPathIterator\tinit", "contents": "FlatteningPathIterator ${1:iterator} = new FlatteningPathIterator($2);"},
		{"trigger": "I-FlavorEvent\tinit", "contents": "FlavorEvent ${1:event} = new FlavorEvent($2);"},
		{"trigger": "I-FlavorException\tinit", "contents": "FlavorException ${1:exception} = new FlavorException($2);"},
		{"trigger": "I-FlavorListener\tinit", "contents": "FlavorListener ${1:listener} = new FlavorListener($2);"},
		{"trigger": "I-FlavorMap\tinit", "contents": "FlavorMap ${1:map} = new FlavorMap($2);"},
		{"trigger": "I-FlavorTable\tinit", "contents": "FlavorTable ${1:table} = new FlavorTable($2);"},
		{"trigger": "I-Float\tinit", "contents": "Float ${1:float} = new Float($2);"},
		{"trigger": "I-FloatArraySyncer\tinit", "contents": "FloatArraySyncer ${1:syncer} = new FloatArraySyncer($2);"},
		{"trigger": "I-FloatBinding\tinit", "contents": "FloatBinding ${1:binding} = new FloatBinding($2);"},
		{"trigger": "I-FloatBuffer\tinit", "contents": "FloatBuffer ${1:buffer} = new FloatBuffer($2);"},
		{"trigger": "I-FloatConstant\tinit", "contents": "FloatConstant ${1:constant} = new FloatConstant($2);"},
		{"trigger": "I-FloatControl\tinit", "contents": "FloatControl ${1:control} = new FloatControl($2);"},
		{"trigger": "I-FloatDV\tinit", "contents": "FloatDV ${1:floatdv} = new FloatDV($2);"},
		{"trigger": "I-FloatExpression\tinit", "contents": "FloatExpression ${1:expression} = new FloatExpression($2);"},
		{"trigger": "I-FloatHolder\tinit", "contents": "FloatHolder ${1:holder} = new FloatHolder($2);"},
		{"trigger": "I-FloatMap\tinit", "contents": "FloatMap ${1:map} = new FloatMap($2);"},
		{"trigger": "I-FloatMapBuilder\tinit", "contents": "FloatMapBuilder ${1:builder} = new FloatMapBuilder($2);"},
		{"trigger": "I-FloatProperty\tinit", "contents": "FloatProperty ${1:property} = new FloatProperty($2);"},
		{"trigger": "I-FloatPropertyBase\tinit", "contents": "FloatPropertyBase ${1:base} = new FloatPropertyBase($2);"},
		{"trigger": "I-FloatSeqHelper\tinit", "contents": "FloatSeqHelper ${1:helper} = new FloatSeqHelper($2);"},
		{"trigger": "I-FloatSeqHolder\tinit", "contents": "FloatSeqHolder ${1:holder} = new FloatSeqHolder($2);"},
		{"trigger": "I-FloatStringConverter\tinit", "contents": "FloatStringConverter ${1:converter} = new FloatStringConverter($2);"},
		{"trigger": "I-Flood\tinit", "contents": "Flood ${1:flood} = new Flood($2);"},
		{"trigger": "I-FloorCall\tinit", "contents": "FloorCall ${1:call} = new FloorCall($2);"},
		{"trigger": "I-FlowLayout\tinit", "contents": "FlowLayout ${1:layout} = new FlowLayout($2);"},
		{"trigger": "I-FlowList\tinit", "contents": "FlowList ${1:list} = new FlowList($2);"},
		{"trigger": "I-FlowPane\tinit", "contents": "FlowPane ${1:pane} = new FlowPane($2);"},
		{"trigger": "I-FlowPaneBuilder\tinit", "contents": "FlowPaneBuilder ${1:builder} = new FlowPaneBuilder($2);"},
		{"trigger": "I-FlowView\tinit", "contents": "FlowView ${1:view} = new FlowView($2);"},
		{"trigger": "I-Flushable\tinit", "contents": "Flushable ${1:flushable} = new Flushable($2);"},
		{"trigger": "I-FocusAdapter\tinit", "contents": "FocusAdapter ${1:adapter} = new FocusAdapter($2);"},
		{"trigger": "I-FocusCause\tinit", "contents": "FocusCause ${1:cause} = new FocusCause($2);"},
		{"trigger": "I-FocusEvent\tinit", "contents": "FocusEvent ${1:event} = new FocusEvent($2);"},
		{"trigger": "I-FocusListener\tinit", "contents": "FocusListener ${1:listener} = new FocusListener($2);"},
		{"trigger": "I-FocusManager\tinit", "contents": "FocusManager ${1:manager} = new FocusManager($2);"},
		{"trigger": "I-FocusModel\tinit", "contents": "FocusModel ${1:model} = new FocusModel($2);"},
		{"trigger": "I-FocusTraversalPolicy\tinit", "contents": "FocusTraversalPolicy ${1:policy} = new FocusTraversalPolicy($2);"},
		{"trigger": "I-FocusUngrabEvent\tinit", "contents": "FocusUngrabEvent ${1:event} = new FocusUngrabEvent($2);"},
		{"trigger": "I-Font\tinit", "contents": "Font ${1:font} = new Font($2);"},
		{"trigger": "I-FontBuilder\tinit", "contents": "FontBuilder ${1:builder} = new FontBuilder($2);"},
		{"trigger": "I-FontConfigManager\tinit", "contents": "FontConfigManager ${1:manager} = new FontConfigManager($2);"},
		{"trigger": "I-FontConstants\tinit", "contents": "FontConstants ${1:constants} = new FontConstants($2);"},
		{"trigger": "I-FontConverter\tinit", "contents": "FontConverter ${1:converter} = new FontConverter($2);"},
		{"trigger": "I-FontCssMetaData\tinit", "contents": "FontCssMetaData ${1:data} = new FontCssMetaData($2);"},
		{"trigger": "I-FontFace\tinit", "contents": "FontFace ${1:face} = new FontFace($2);"},
		{"trigger": "I-FontFactory\tinit", "contents": "FontFactory ${1:factory} = new FontFactory($2);"},
		{"trigger": "I-FontFileReader\tinit", "contents": "FontFileReader ${1:reader} = new FontFileReader($2);"},
		{"trigger": "I-FontFileWriter\tinit", "contents": "FontFileWriter ${1:writer} = new FontFileWriter($2);"},
		{"trigger": "I-FontFormatException\tinit", "contents": "FontFormatException ${1:exception} = new FontFormatException($2);"},
		{"trigger": "I-FontLoader\tinit", "contents": "FontLoader ${1:loader} = new FontLoader($2);"},
		{"trigger": "I-FontMetrics\tinit", "contents": "FontMetrics ${1:metrics} = new FontMetrics($2);"},
		{"trigger": "I-FontPeer\tinit", "contents": "FontPeer ${1:peer} = new FontPeer($2);"},
		{"trigger": "I-FontPosture\tinit", "contents": "FontPosture ${1:posture} = new FontPosture($2);"},
		{"trigger": "I-FontRenderContext\tinit", "contents": "FontRenderContext ${1:context} = new FontRenderContext($2);"},
		{"trigger": "I-FontResource\tinit", "contents": "FontResource ${1:resource} = new FontResource($2);"},
		{"trigger": "I-FontSmoothingType\tinit", "contents": "FontSmoothingType ${1:type} = new FontSmoothingType($2);"},
		{"trigger": "I-FontStrike\tinit", "contents": "FontStrike ${1:strike} = new FontStrike($2);"},
		{"trigger": "I-FontStrikeDesc\tinit", "contents": "FontStrikeDesc ${1:desc} = new FontStrikeDesc($2);"},
		{"trigger": "I-FontUIResource\tinit", "contents": "FontUIResource ${1:resource} = new FontUIResource($2);"},
		{"trigger": "I-FontWeight\tinit", "contents": "FontWeight ${1:weight} = new FontWeight($2);"},
		{"trigger": "I-ForEach\tinit", "contents": "ForEach ${1:each} = new ForEach($2);"},
		{"trigger": "I-ForEachOps\tinit", "contents": "ForEachOps ${1:ops} = new ForEachOps($2);"},
		{"trigger": "I-ForLoopTree\tinit", "contents": "ForLoopTree ${1:tree} = new ForLoopTree($2);"},
		{"trigger": "I-ForceInline\tinit", "contents": "ForceInline ${1:inline} = new ForceInline($2);"},
		{"trigger": "I-ForkJoinPool\tinit", "contents": "ForkJoinPool ${1:pool} = new ForkJoinPool($2);"},
		{"trigger": "I-ForkJoinTask\tinit", "contents": "ForkJoinTask ${1:task} = new ForkJoinTask($2);"},
		{"trigger": "I-ForkJoinWorkerThread\tinit", "contents": "ForkJoinWorkerThread ${1:thread} = new ForkJoinWorkerThread($2);"},
		{"trigger": "I-FormDataElement\tinit", "contents": "FormDataElement ${1:element} = new FormDataElement($2);"},
		{"trigger": "I-FormSubmitEvent\tinit", "contents": "FormSubmitEvent ${1:event} = new FormSubmitEvent($2);"},
		{"trigger": "I-FormView\tinit", "contents": "FormView ${1:view} = new FormView($2);"},
		{"trigger": "I-Format\tinit", "contents": "Format ${1:format} = new Format($2);"},
		{"trigger": "I-FormatConversionProvider\tinit", "contents": "FormatConversionProvider ${1:provider} = new FormatConversionProvider($2);"},
		{"trigger": "I-FormatFlagsConversionMismatchException\tinit", "contents": "FormatFlagsConversionMismatchException ${1:exception} = new FormatFlagsConversionMismatchException($2);"},
		{"trigger": "I-FormatMismatch\tinit", "contents": "FormatMismatch ${1:mismatch} = new FormatMismatch($2);"},
		{"trigger": "I-FormatMismatchHelper\tinit", "contents": "FormatMismatchHelper ${1:helper} = new FormatMismatchHelper($2);"},
		{"trigger": "I-FormatNumberCall\tinit", "contents": "FormatNumberCall ${1:call} = new FormatNumberCall($2);"},
		{"trigger": "I-FormatStringConverter\tinit", "contents": "FormatStringConverter ${1:converter} = new FormatStringConverter($2);"},
		{"trigger": "I-FormatStyle\tinit", "contents": "FormatStyle ${1:style} = new FormatStyle($2);"},
		{"trigger": "I-Formattable\tinit", "contents": "Formattable ${1:formattable} = new Formattable($2);"},
		{"trigger": "I-FormattableFlags\tinit", "contents": "FormattableFlags ${1:flags} = new FormattableFlags($2);"},
		{"trigger": "I-FormattedTextFieldPainter\tinit", "contents": "FormattedTextFieldPainter ${1:painter} = new FormattedTextFieldPainter($2);"},
		{"trigger": "I-Formatter\tinit", "contents": "Formatter ${1:formatter} = new Formatter($2);"},
		{"trigger": "I-FormatterAccessor\tinit", "contents": "FormatterAccessor ${1:accessor} = new FormatterAccessor($2);"},
		{"trigger": "I-FormatterClosedException\tinit", "contents": "FormatterClosedException ${1:exception} = new FormatterClosedException($2);"},
		{"trigger": "I-ForwardException\tinit", "contents": "ForwardException ${1:exception} = new ForwardException($2);"},
		{"trigger": "I-ForwardPositionIterator\tinit", "contents": "ForwardPositionIterator ${1:iterator} = new ForwardPositionIterator($2);"},
		{"trigger": "I-ForwardRequest\tinit", "contents": "ForwardRequest ${1:request} = new ForwardRequest($2);"},
		{"trigger": "I-ForwardRequestHelper\tinit", "contents": "ForwardRequestHelper ${1:helper} = new ForwardRequestHelper($2);"},
		{"trigger": "I-ForwardingFileObject\tinit", "contents": "ForwardingFileObject ${1:object} = new ForwardingFileObject($2);"},
		{"trigger": "I-ForwardingJavaFileManager\tinit", "contents": "ForwardingJavaFileManager ${1:manager} = new ForwardingJavaFileManager($2);"},
		{"trigger": "I-ForwardingJavaFileObject\tinit", "contents": "ForwardingJavaFileObject ${1:object} = new ForwardingJavaFileObject($2);"},
		{"trigger": "I-FoundIndex\tinit", "contents": "FoundIndex ${1:index} = new FoundIndex($2);"},
		{"trigger": "I-Frame\tinit", "contents": "Frame ${1:frame} = new Frame($2);"},
		{"trigger": "I-FramePeer\tinit", "contents": "FramePeer ${1:peer} = new FramePeer($2);"},
		{"trigger": "I-FrameSetView\tinit", "contents": "FrameSetView ${1:view} = new FrameSetView($2);"},
		{"trigger": "I-FrameView\tinit", "contents": "FrameView ${1:view} = new FrameView($2);"},
		{"trigger": "I-Framebuffer\tinit", "contents": "Framebuffer ${1:framebuffer} = new Framebuffer($2);"},
		{"trigger": "I-FullDVFactory\tinit", "contents": "FullDVFactory ${1:factory} = new FullDVFactory($2);"},
		{"trigger": "I-FuncBoolean\tinit", "contents": "FuncBoolean ${1:boolean} = new FuncBoolean($2);"},
		{"trigger": "I-FuncCeiling\tinit", "contents": "FuncCeiling ${1:ceiling} = new FuncCeiling($2);"},
		{"trigger": "I-FuncConcat\tinit", "contents": "FuncConcat ${1:concat} = new FuncConcat($2);"},
		{"trigger": "I-FuncContains\tinit", "contents": "FuncContains ${1:contains} = new FuncContains($2);"},
		{"trigger": "I-FuncCount\tinit", "contents": "FuncCount ${1:count} = new FuncCount($2);"},
		{"trigger": "I-FuncCurrent\tinit", "contents": "FuncCurrent ${1:current} = new FuncCurrent($2);"},
		{"trigger": "I-FuncDoclocation\tinit", "contents": "FuncDoclocation ${1:doclocation} = new FuncDoclocation($2);"},
		{"trigger": "I-FuncExtElementAvailable\tinit", "contents": "FuncExtElementAvailable ${1:available} = new FuncExtElementAvailable($2);"},
		{"trigger": "I-FuncExtFunction\tinit", "contents": "FuncExtFunction ${1:function} = new FuncExtFunction($2);"},
		{"trigger": "I-FuncExtFunctionAvailable\tinit", "contents": "FuncExtFunctionAvailable ${1:available} = new FuncExtFunctionAvailable($2);"},
		{"trigger": "I-FuncFalse\tinit", "contents": "FuncFalse ${1:false} = new FuncFalse($2);"},
		{"trigger": "I-FuncFloor\tinit", "contents": "FuncFloor ${1:floor} = new FuncFloor($2);"},
		{"trigger": "I-FuncGenerateId\tinit", "contents": "FuncGenerateId ${1:id} = new FuncGenerateId($2);"},
		{"trigger": "I-FuncHere\tinit", "contents": "FuncHere ${1:here} = new FuncHere($2);"},
		{"trigger": "I-FuncId\tinit", "contents": "FuncId ${1:id} = new FuncId($2);"},
		{"trigger": "I-FuncLang\tinit", "contents": "FuncLang ${1:lang} = new FuncLang($2);"},
		{"trigger": "I-FuncLast\tinit", "contents": "FuncLast ${1:last} = new FuncLast($2);"},
		{"trigger": "I-FuncLoader\tinit", "contents": "FuncLoader ${1:loader} = new FuncLoader($2);"},
		{"trigger": "I-FuncLocalPart\tinit", "contents": "FuncLocalPart ${1:part} = new FuncLocalPart($2);"},
		{"trigger": "I-FuncNamespace\tinit", "contents": "FuncNamespace ${1:namespace} = new FuncNamespace($2);"},
		{"trigger": "I-FuncNormalizeSpace\tinit", "contents": "FuncNormalizeSpace ${1:space} = new FuncNormalizeSpace($2);"},
		{"trigger": "I-FuncNot\tinit", "contents": "FuncNot ${1:not} = new FuncNot($2);"},
		{"trigger": "I-FuncNumber\tinit", "contents": "FuncNumber ${1:number} = new FuncNumber($2);"},
		{"trigger": "I-FuncPosition\tinit", "contents": "FuncPosition ${1:position} = new FuncPosition($2);"},
		{"trigger": "I-FuncQname\tinit", "contents": "FuncQname ${1:qname} = new FuncQname($2);"},
		{"trigger": "I-FuncRound\tinit", "contents": "FuncRound ${1:round} = new FuncRound($2);"},
		{"trigger": "I-FuncStartsWith\tinit", "contents": "FuncStartsWith ${1:with} = new FuncStartsWith($2);"},
		{"trigger": "I-FuncString\tinit", "contents": "FuncString ${1:string} = new FuncString($2);"},
		{"trigger": "I-FuncStringLength\tinit", "contents": "FuncStringLength ${1:length} = new FuncStringLength($2);"},
		{"trigger": "I-FuncSubstring\tinit", "contents": "FuncSubstring ${1:substring} = new FuncSubstring($2);"},
		{"trigger": "I-FuncSubstringAfter\tinit", "contents": "FuncSubstringAfter ${1:after} = new FuncSubstringAfter($2);"},
		{"trigger": "I-FuncSubstringBefore\tinit", "contents": "FuncSubstringBefore ${1:before} = new FuncSubstringBefore($2);"},
		{"trigger": "I-FuncSum\tinit", "contents": "FuncSum ${1:sum} = new FuncSum($2);"},
		{"trigger": "I-FuncSystemProperty\tinit", "contents": "FuncSystemProperty ${1:property} = new FuncSystemProperty($2);"},
		{"trigger": "I-FuncTranslate\tinit", "contents": "FuncTranslate ${1:translate} = new FuncTranslate($2);"},
		{"trigger": "I-FuncTrue\tinit", "contents": "FuncTrue ${1:true} = new FuncTrue($2);"},
		{"trigger": "I-FuncUnparsedEntityURI\tinit", "contents": "FuncUnparsedEntityURI ${1:funcunparsedentityuri} = new FuncUnparsedEntityURI($2);"},
		{"trigger": "I-Function\tinit", "contents": "Function ${1:function} = new Function($2);"},
		{"trigger": "I-Function2Args\tinit", "contents": "Function2Args ${1:args} = new Function2Args($2);"},
		{"trigger": "I-Function3Args\tinit", "contents": "Function3Args ${1:args} = new Function3Args($2);"},
		{"trigger": "I-FunctionAvailableCall\tinit", "contents": "FunctionAvailableCall ${1:call} = new FunctionAvailableCall($2);"},
		{"trigger": "I-FunctionCall\tinit", "contents": "FunctionCall ${1:call} = new FunctionCall($2);"},
		{"trigger": "I-FunctionDef1Arg\tinit", "contents": "FunctionDef1Arg ${1:arg} = new FunctionDef1Arg($2);"},
		{"trigger": "I-FunctionMultiArgs\tinit", "contents": "FunctionMultiArgs ${1:args} = new FunctionMultiArgs($2);"},
		{"trigger": "I-FunctionOneArg\tinit", "contents": "FunctionOneArg ${1:arg} = new FunctionOneArg($2);"},
		{"trigger": "I-FunctionPattern\tinit", "contents": "FunctionPattern ${1:pattern} = new FunctionPattern($2);"},
		{"trigger": "I-FunctionTable\tinit", "contents": "FunctionTable ${1:table} = new FunctionTable($2);"},
		{"trigger": "I-FunctionalInterface\tinit", "contents": "FunctionalInterface ${1:interface} = new FunctionalInterface($2);"},
		{"trigger": "I-Future\tinit", "contents": "Future ${1:future} = new Future($2);"},
		{"trigger": "I-FutureTask\tinit", "contents": "FutureTask ${1:task} = new FutureTask($2);"},
		{"trigger": "I-GETFIELD\tinit", "contents": "GETFIELD ${1:getfield} = new GETFIELD($2);"},
		{"trigger": "I-GETSTATIC\tinit", "contents": "GETSTATIC ${1:getstatic} = new GETSTATIC($2);"},
		{"trigger": "I-GIFDescriptor\tinit", "contents": "GIFDescriptor ${1:descriptor} = new GIFDescriptor($2);"},
		{"trigger": "I-GIFImageLoaderFactory\tinit", "contents": "GIFImageLoaderFactory ${1:factory} = new GIFImageLoaderFactory($2);"},
		{"trigger": "I-GIFImageMetadata\tinit", "contents": "GIFImageMetadata ${1:metadata} = new GIFImageMetadata($2);"},
		{"trigger": "I-GIFImageMetadataFormat\tinit", "contents": "GIFImageMetadataFormat ${1:format} = new GIFImageMetadataFormat($2);"},
		{"trigger": "I-GIFImageMetadataFormatResources\tinit", "contents": "GIFImageMetadataFormatResources ${1:resources} = new GIFImageMetadataFormatResources($2);"},
		{"trigger": "I-GIFImageReader\tinit", "contents": "GIFImageReader ${1:reader} = new GIFImageReader($2);"},
		{"trigger": "I-GIFImageReaderSpi\tinit", "contents": "GIFImageReaderSpi ${1:spi} = new GIFImageReaderSpi($2);"},
		{"trigger": "I-GIFImageWriter\tinit", "contents": "GIFImageWriter ${1:writer} = new GIFImageWriter($2);"},
		{"trigger": "I-GIFImageWriterSpi\tinit", "contents": "GIFImageWriterSpi ${1:spi} = new GIFImageWriterSpi($2);"},
		{"trigger": "I-GIFMetadata\tinit", "contents": "GIFMetadata ${1:metadata} = new GIFMetadata($2);"},
		{"trigger": "I-GIFStreamMetadata\tinit", "contents": "GIFStreamMetadata ${1:metadata} = new GIFStreamMetadata($2);"},
		{"trigger": "I-GIFStreamMetadataFormat\tinit", "contents": "GIFStreamMetadataFormat ${1:format} = new GIFStreamMetadataFormat($2);"},
		{"trigger": "I-GIFStreamMetadataFormatResources\tinit", "contents": "GIFStreamMetadataFormatResources ${1:resources} = new GIFStreamMetadataFormatResources($2);"},
		{"trigger": "I-GIFWritableImageMetadata\tinit", "contents": "GIFWritableImageMetadata ${1:metadata} = new GIFWritableImageMetadata($2);"},
		{"trigger": "I-GIFWritableStreamMetadata\tinit", "contents": "GIFWritableStreamMetadata ${1:metadata} = new GIFWritableStreamMetadata($2);"},
		{"trigger": "I-GIOPVersion\tinit", "contents": "GIOPVersion ${1:version} = new GIOPVersion($2);"},
		{"trigger": "I-GLContext\tinit", "contents": "GLContext ${1:context} = new GLContext($2);"},
		{"trigger": "I-GLDrawable\tinit", "contents": "GLDrawable ${1:drawable} = new GLDrawable($2);"},
		{"trigger": "I-GLException\tinit", "contents": "GLException ${1:exception} = new GLException($2);"},
		{"trigger": "I-GLFactory\tinit", "contents": "GLFactory ${1:factory} = new GLFactory($2);"},
		{"trigger": "I-GLGPUInfo\tinit", "contents": "GLGPUInfo ${1:info} = new GLGPUInfo($2);"},
		{"trigger": "I-GLPixelFormat\tinit", "contents": "GLPixelFormat ${1:format} = new GLPixelFormat($2);"},
		{"trigger": "I-GOTO\tinit", "contents": "GOTO ${1:goto} = new GOTO($2);"},
		{"trigger": "I-GOTO_W\tinit", "contents": "GOTO_W ${1:goto} = new GOTO_W($2);"},
		{"trigger": "I-GSSContext\tinit", "contents": "GSSContext ${1:context} = new GSSContext($2);"},
		{"trigger": "I-GSSCredential\tinit", "contents": "GSSCredential ${1:credential} = new GSSCredential($2);"},
		{"trigger": "I-GSSException\tinit", "contents": "GSSException ${1:exception} = new GSSException($2);"},
		{"trigger": "I-GSSManager\tinit", "contents": "GSSManager ${1:manager} = new GSSManager($2);"},
		{"trigger": "I-GSSName\tinit", "contents": "GSSName ${1:name} = new GSSName($2);"},
		{"trigger": "I-GSSUtil\tinit", "contents": "GSSUtil ${1:util} = new GSSUtil($2);"},
		{"trigger": "I-GSTMedia\tinit", "contents": "GSTMedia ${1:media} = new GSTMedia($2);"},
		{"trigger": "I-GSTMediaPlayer\tinit", "contents": "GSTMediaPlayer ${1:player} = new GSTMediaPlayer($2);"},
		{"trigger": "I-GSTPlatform\tinit", "contents": "GSTPlatform ${1:platform} = new GSTPlatform($2);"},
		{"trigger": "I-GTKColorChooserPanel\tinit", "contents": "GTKColorChooserPanel ${1:panel} = new GTKColorChooserPanel($2);"},
		{"trigger": "I-GTKColorType\tinit", "contents": "GTKColorType ${1:type} = new GTKColorType($2);"},
		{"trigger": "I-GTKConstants\tinit", "contents": "GTKConstants ${1:constants} = new GTKConstants($2);"},
		{"trigger": "I-GTKEngine\tinit", "contents": "GTKEngine ${1:engine} = new GTKEngine($2);"},
		{"trigger": "I-GTKFileChooserUI\tinit", "contents": "GTKFileChooserUI ${1:gtkfilechooserui} = new GTKFileChooserUI($2);"},
		{"trigger": "I-GTKGraphicsUtils\tinit", "contents": "GTKGraphicsUtils ${1:utils} = new GTKGraphicsUtils($2);"},
		{"trigger": "I-GTKIconFactory\tinit", "contents": "GTKIconFactory ${1:factory} = new GTKIconFactory($2);"},
		{"trigger": "I-GTKLookAndFeel\tinit", "contents": "GTKLookAndFeel ${1:feel} = new GTKLookAndFeel($2);"},
		{"trigger": "I-GTKPainter\tinit", "contents": "GTKPainter ${1:painter} = new GTKPainter($2);"},
		{"trigger": "I-GTKRegion\tinit", "contents": "GTKRegion ${1:region} = new GTKRegion($2);"},
		{"trigger": "I-GTKStyle\tinit", "contents": "GTKStyle ${1:style} = new GTKStyle($2);"},
		{"trigger": "I-GTKStyleFactory\tinit", "contents": "GTKStyleFactory ${1:factory} = new GTKStyleFactory($2);"},
		{"trigger": "I-GZIPInputStream\tinit", "contents": "GZIPInputStream ${1:stream} = new GZIPInputStream($2);"},
		{"trigger": "I-GZIPOutputStream\tinit", "contents": "GZIPOutputStream ${1:stream} = new GZIPOutputStream($2);"},
		{"trigger": "I-GapContent\tinit", "contents": "GapContent ${1:content} = new GapContent($2);"},
		{"trigger": "I-GapVector\tinit", "contents": "GapVector ${1:vector} = new GapVector($2);"},
		{"trigger": "I-GarbageCollectorMXBean\tinit", "contents": "GarbageCollectorMXBean ${1:bean} = new GarbageCollectorMXBean($2);"},
		{"trigger": "I-GatheringByteChannel\tinit", "contents": "GatheringByteChannel ${1:channel} = new GatheringByteChannel($2);"},
		{"trigger": "I-GaugeMonitor\tinit", "contents": "GaugeMonitor ${1:monitor} = new GaugeMonitor($2);"},
		{"trigger": "I-GaugeMonitorMBean\tinit", "contents": "GaugeMonitorMBean ${1:bean} = new GaugeMonitorMBean($2);"},
		{"trigger": "I-GaussianBlur\tinit", "contents": "GaussianBlur ${1:blur} = new GaussianBlur($2);"},
		{"trigger": "I-GaussianBlurBuilder\tinit", "contents": "GaussianBlurBuilder ${1:builder} = new GaussianBlurBuilder($2);"},
		{"trigger": "I-GaussianBlurState\tinit", "contents": "GaussianBlurState ${1:state} = new GaussianBlurState($2);"},
		{"trigger": "I-GaussianRenderState\tinit", "contents": "GaussianRenderState ${1:state} = new GaussianRenderState($2);"},
		{"trigger": "I-GaussianShadow\tinit", "contents": "GaussianShadow ${1:shadow} = new GaussianShadow($2);"},
		{"trigger": "I-GaussianShadowState\tinit", "contents": "GaussianShadowState ${1:state} = new GaussianShadowState($2);"},
		{"trigger": "I-General\tinit", "contents": "General ${1:general} = new General($2);"},
		{"trigger": "I-GeneralClipInterpolator\tinit", "contents": "GeneralClipInterpolator ${1:interpolator} = new GeneralClipInterpolator($2);"},
		{"trigger": "I-GeneralPath\tinit", "contents": "GeneralPath ${1:path} = new GeneralPath($2);"},
		{"trigger": "I-GeneralSecurityException\tinit", "contents": "GeneralSecurityException ${1:exception} = new GeneralSecurityException($2);"},
		{"trigger": "I-GeneralShadow\tinit", "contents": "GeneralShadow ${1:shadow} = new GeneralShadow($2);"},
		{"trigger": "I-GeneralShapePair\tinit", "contents": "GeneralShapePair ${1:pair} = new GeneralShapePair($2);"},
		{"trigger": "I-GeneralTransform3D\tinit", "contents": "GeneralTransform3D ${1:generaltransform3d} = new GeneralTransform3D($2);"},
		{"trigger": "I-GenerateIdCall\tinit", "contents": "GenerateIdCall ${1:call} = new GenerateIdCall($2);"},
		{"trigger": "I-Generated\tinit", "contents": "Generated ${1:generated} = new Generated($2);"},
		{"trigger": "I-GenericArrayType\tinit", "contents": "GenericArrayType ${1:type} = new GenericArrayType($2);"},
		{"trigger": "I-GenericDeclaration\tinit", "contents": "GenericDeclaration ${1:declaration} = new GenericDeclaration($2);"},
		{"trigger": "I-GenericSignatureFormatError\tinit", "contents": "GenericSignatureFormatError ${1:error} = new GenericSignatureFormatError($2);"},
		{"trigger": "I-GestureEvent\tinit", "contents": "GestureEvent ${1:event} = new GestureEvent($2);"},
		{"trigger": "I-GestureRecognizer\tinit", "contents": "GestureRecognizer ${1:recognizer} = new GestureRecognizer($2);"},
		{"trigger": "I-GestureRecognizers\tinit", "contents": "GestureRecognizers ${1:recognizers} = new GestureRecognizers($2);"},
		{"trigger": "I-GestureSupport\tinit", "contents": "GestureSupport ${1:support} = new GestureSupport($2);"},
		{"trigger": "I-GetEndPointInfoAgainException\tinit", "contents": "GetEndPointInfoAgainException ${1:exception} = new GetEndPointInfoAgainException($2);"},
		{"trigger": "I-GetEvent\tinit", "contents": "GetEvent ${1:event} = new GetEvent($2);"},
		{"trigger": "I-GetORBPropertiesFileAction\tinit", "contents": "GetORBPropertiesFileAction ${1:action} = new GetORBPropertiesFileAction($2);"},
		{"trigger": "I-GetOpt\tinit", "contents": "GetOpt ${1:opt} = new GetOpt($2);"},
		{"trigger": "I-GetOptsException\tinit", "contents": "GetOptsException ${1:exception} = new GetOptsException($2);"},
		{"trigger": "I-GetPropertyAction\tinit", "contents": "GetPropertyAction ${1:action} = new GetPropertyAction($2);"},
		{"trigger": "I-GlassAppletWindow\tinit", "contents": "GlassAppletWindow ${1:window} = new GlassAppletWindow($2);"},
		{"trigger": "I-GlassEventUtils\tinit", "contents": "GlassEventUtils ${1:utils} = new GlassEventUtils($2);"},
		{"trigger": "I-GlassMenuEventHandler\tinit", "contents": "GlassMenuEventHandler ${1:handler} = new GlassMenuEventHandler($2);"},
		{"trigger": "I-GlassScene\tinit", "contents": "GlassScene ${1:scene} = new GlassScene($2);"},
		{"trigger": "I-GlassSceneDnDEventHandler\tinit", "contents": "GlassSceneDnDEventHandler ${1:handler} = new GlassSceneDnDEventHandler($2);"},
		{"trigger": "I-GlassStage\tinit", "contents": "GlassStage ${1:stage} = new GlassStage($2);"},
		{"trigger": "I-GlassSystemMenu\tinit", "contents": "GlassSystemMenu ${1:menu} = new GlassSystemMenu($2);"},
		{"trigger": "I-GlassTouchEventListener\tinit", "contents": "GlassTouchEventListener ${1:listener} = new GlassTouchEventListener($2);"},
		{"trigger": "I-GlassViewEventHandler\tinit", "contents": "GlassViewEventHandler ${1:handler} = new GlassViewEventHandler($2);"},
		{"trigger": "I-GlassWindowEventHandler\tinit", "contents": "GlassWindowEventHandler ${1:handler} = new GlassWindowEventHandler($2);"},
		{"trigger": "I-GlobalMenuAdapter\tinit", "contents": "GlobalMenuAdapter ${1:adapter} = new GlobalMenuAdapter($2);"},
		{"trigger": "I-Glow\tinit", "contents": "Glow ${1:glow} = new Glow($2);"},
		{"trigger": "I-GlowBuilder\tinit", "contents": "GlowBuilder ${1:builder} = new GlowBuilder($2);"},
		{"trigger": "I-Glyph\tinit", "contents": "Glyph ${1:glyph} = new Glyph($2);"},
		{"trigger": "I-GlyphCache\tinit", "contents": "GlyphCache ${1:cache} = new GlyphCache($2);"},
		{"trigger": "I-GlyphJustificationInfo\tinit", "contents": "GlyphJustificationInfo ${1:info} = new GlyphJustificationInfo($2);"},
		{"trigger": "I-GlyphLayout\tinit", "contents": "GlyphLayout ${1:layout} = new GlyphLayout($2);"},
		{"trigger": "I-GlyphList\tinit", "contents": "GlyphList ${1:list} = new GlyphList($2);"},
		{"trigger": "I-GlyphMetrics\tinit", "contents": "GlyphMetrics ${1:metrics} = new GlyphMetrics($2);"},
		{"trigger": "I-GlyphVector\tinit", "contents": "GlyphVector ${1:vector} = new GlyphVector($2);"},
		{"trigger": "I-GlyphView\tinit", "contents": "GlyphView ${1:view} = new GlyphView($2);"},
		{"trigger": "I-GotoInstruction\tinit", "contents": "GotoInstruction ${1:instruction} = new GotoInstruction($2);"},
		{"trigger": "I-Gradient\tinit", "contents": "Gradient ${1:gradient} = new Gradient($2);"},
		{"trigger": "I-GradientColorMap\tinit", "contents": "GradientColorMap ${1:map} = new GradientColorMap($2);"},
		{"trigger": "I-GradientPaint\tinit", "contents": "GradientPaint ${1:paint} = new GradientPaint($2);"},
		{"trigger": "I-GradientPaintContext\tinit", "contents": "GradientPaintContext ${1:context} = new GradientPaintContext($2);"},
		{"trigger": "I-GradientUtils\tinit", "contents": "GradientUtils ${1:utils} = new GradientUtils($2);"},
		{"trigger": "I-Grammar\tinit", "contents": "Grammar ${1:grammar} = new Grammar($2);"},
		{"trigger": "I-GraphicAttribute\tinit", "contents": "GraphicAttribute ${1:attribute} = new GraphicAttribute($2);"},
		{"trigger": "I-Graphics\tinit", "contents": "Graphics ${1:graphics} = new Graphics($2);"},
		{"trigger": "I-Graphics2D\tinit", "contents": "Graphics2D ${1:graphics2d} = new Graphics2D($2);"},
		{"trigger": "I-GraphicsCallback\tinit", "contents": "GraphicsCallback ${1:callback} = new GraphicsCallback($2);"},
		{"trigger": "I-GraphicsConfigTemplate\tinit", "contents": "GraphicsConfigTemplate ${1:template} = new GraphicsConfigTemplate($2);"},
		{"trigger": "I-GraphicsConfiguration\tinit", "contents": "GraphicsConfiguration ${1:configuration} = new GraphicsConfiguration($2);"},
		{"trigger": "I-GraphicsContext\tinit", "contents": "GraphicsContext ${1:context} = new GraphicsContext($2);"},
		{"trigger": "I-GraphicsDecoder\tinit", "contents": "GraphicsDecoder ${1:decoder} = new GraphicsDecoder($2);"},
		{"trigger": "I-GraphicsDevice\tinit", "contents": "GraphicsDevice ${1:device} = new GraphicsDevice($2);"},
		{"trigger": "I-GraphicsEnvironment\tinit", "contents": "GraphicsEnvironment ${1:environment} = new GraphicsEnvironment($2);"},
		{"trigger": "I-GraphicsPipeline\tinit", "contents": "GraphicsPipeline ${1:pipeline} = new GraphicsPipeline($2);"},
		{"trigger": "I-GraphicsResource\tinit", "contents": "GraphicsResource ${1:resource} = new GraphicsResource($2);"},
		{"trigger": "I-GraphicsWrapper\tinit", "contents": "GraphicsWrapper ${1:wrapper} = new GraphicsWrapper($2);"},
		{"trigger": "I-GrayFilter\tinit", "contents": "GrayFilter ${1:filter} = new GrayFilter($2);"},
		{"trigger": "I-GregorianCalendar\tinit", "contents": "GregorianCalendar ${1:calendar} = new GregorianCalendar($2);"},
		{"trigger": "I-GridBagConstraints\tinit", "contents": "GridBagConstraints ${1:constraints} = new GridBagConstraints($2);"},
		{"trigger": "I-GridBagLayout\tinit", "contents": "GridBagLayout ${1:layout} = new GridBagLayout($2);"},
		{"trigger": "I-GridBagLayoutInfo\tinit", "contents": "GridBagLayoutInfo ${1:info} = new GridBagLayoutInfo($2);"},
		{"trigger": "I-GridLayout\tinit", "contents": "GridLayout ${1:layout} = new GridLayout($2);"},
		{"trigger": "I-GridPane\tinit", "contents": "GridPane ${1:pane} = new GridPane($2);"},
		{"trigger": "I-GridPaneBuilder\tinit", "contents": "GridPaneBuilder ${1:builder} = new GridPaneBuilder($2);"},
		{"trigger": "I-Group\tinit", "contents": "Group ${1:group} = new Group($2);"},
		{"trigger": "I-GroupBuilder\tinit", "contents": "GroupBuilder ${1:builder} = new GroupBuilder($2);"},
		{"trigger": "I-GroupImpl\tinit", "contents": "GroupImpl ${1:impl} = new GroupImpl($2);"},
		{"trigger": "I-GroupLayout\tinit", "contents": "GroupLayout ${1:layout} = new GroupLayout($2);"},
		{"trigger": "I-GroupPrincipal\tinit", "contents": "GroupPrincipal ${1:principal} = new GroupPrincipal($2);"},
		{"trigger": "I-GrowableDataBuffer\tinit", "contents": "GrowableDataBuffer ${1:buffer} = new GrowableDataBuffer($2);"},
		{"trigger": "I-Gt\tinit", "contents": "Gt ${1:gt} = new Gt($2);"},
		{"trigger": "I-Gte\tinit", "contents": "Gte ${1:gte} = new Gte($2);"},
		{"trigger": "I-GtkApplication\tinit", "contents": "GtkApplication ${1:application} = new GtkApplication($2);"},
		{"trigger": "I-GtkChildWindow\tinit", "contents": "GtkChildWindow ${1:window} = new GtkChildWindow($2);"},
		{"trigger": "I-GtkClipboardDelegate\tinit", "contents": "GtkClipboardDelegate ${1:delegate} = new GtkClipboardDelegate($2);"},
		{"trigger": "I-GtkCommonDialogs\tinit", "contents": "GtkCommonDialogs ${1:dialogs} = new GtkCommonDialogs($2);"},
		{"trigger": "I-GtkCursor\tinit", "contents": "GtkCursor ${1:cursor} = new GtkCursor($2);"},
		{"trigger": "I-GtkDnDClipboard\tinit", "contents": "GtkDnDClipboard ${1:clipboard} = new GtkDnDClipboard($2);"},
		{"trigger": "I-GtkMenuBarDelegate\tinit", "contents": "GtkMenuBarDelegate ${1:delegate} = new GtkMenuBarDelegate($2);"},
		{"trigger": "I-GtkMenuDelegate\tinit", "contents": "GtkMenuDelegate ${1:delegate} = new GtkMenuDelegate($2);"},
		{"trigger": "I-GtkMenuItemDelegate\tinit", "contents": "GtkMenuItemDelegate ${1:delegate} = new GtkMenuItemDelegate($2);"},
		{"trigger": "I-GtkPixels\tinit", "contents": "GtkPixels ${1:pixels} = new GtkPixels($2);"},
		{"trigger": "I-GtkPlatformFactory\tinit", "contents": "GtkPlatformFactory ${1:factory} = new GtkPlatformFactory($2);"},
		{"trigger": "I-GtkRobot\tinit", "contents": "GtkRobot ${1:robot} = new GtkRobot($2);"},
		{"trigger": "I-GtkSystemClipboard\tinit", "contents": "GtkSystemClipboard ${1:clipboard} = new GtkSystemClipboard($2);"},
		{"trigger": "I-GtkTimer\tinit", "contents": "GtkTimer ${1:timer} = new GtkTimer($2);"},
		{"trigger": "I-GtkView\tinit", "contents": "GtkView ${1:view} = new GtkView($2);"},
		{"trigger": "I-GtkWindow\tinit", "contents": "GtkWindow ${1:window} = new GtkWindow($2);"},
		{"trigger": "I-Guard\tinit", "contents": "Guard ${1:guard} = new Guard($2);"},
		{"trigger": "I-GuardBase\tinit", "contents": "GuardBase ${1:base} = new GuardBase($2);"},
		{"trigger": "I-GuardedObject\tinit", "contents": "GuardedObject ${1:object} = new GuardedObject($2);"},
		{"trigger": "I-HBGlyphLayout\tinit", "contents": "HBGlyphLayout ${1:layout} = new HBGlyphLayout($2);"},
		{"trigger": "I-HBox\tinit", "contents": "HBox ${1:box} = new HBox($2);"},
		{"trigger": "I-HBoxBuilder\tinit", "contents": "HBoxBuilder ${1:builder} = new HBoxBuilder($2);"},
		{"trigger": "I-HLSConnectionHolder\tinit", "contents": "HLSConnectionHolder ${1:holder} = new HLSConnectionHolder($2);"},
		{"trigger": "I-HLineTo\tinit", "contents": "HLineTo ${1:to} = new HLineTo($2);"},
		{"trigger": "I-HLineToBuilder\tinit", "contents": "HLineToBuilder ${1:builder} = new HLineToBuilder($2);"},
		{"trigger": "I-HMACParameterSpec\tinit", "contents": "HMACParameterSpec ${1:spec} = new HMACParameterSpec($2);"},
		{"trigger": "I-HOLDING\tinit", "contents": "HOLDING ${1:holding} = new HOLDING($2);"},
		{"trigger": "I-HPos\tinit", "contents": "HPos ${1:pos} = new HPos($2);"},
		{"trigger": "I-HRuleView\tinit", "contents": "HRuleView ${1:view} = new HRuleView($2);"},
		{"trigger": "I-HTML\tinit", "contents": "HTML ${1:html} = new HTML($2);"},
		{"trigger": "I-HTMLAnchorElement\tinit", "contents": "HTMLAnchorElement ${1:element} = new HTMLAnchorElement($2);"},
		{"trigger": "I-HTMLAnchorElementImpl\tinit", "contents": "HTMLAnchorElementImpl ${1:impl} = new HTMLAnchorElementImpl($2);"},
		{"trigger": "I-HTMLAppletElement\tinit", "contents": "HTMLAppletElement ${1:element} = new HTMLAppletElement($2);"},
		{"trigger": "I-HTMLAppletElementImpl\tinit", "contents": "HTMLAppletElementImpl ${1:impl} = new HTMLAppletElementImpl($2);"},
		{"trigger": "I-HTMLAreaElement\tinit", "contents": "HTMLAreaElement ${1:element} = new HTMLAreaElement($2);"},
		{"trigger": "I-HTMLAreaElementImpl\tinit", "contents": "HTMLAreaElementImpl ${1:impl} = new HTMLAreaElementImpl($2);"},
		{"trigger": "I-HTMLBRElement\tinit", "contents": "HTMLBRElement ${1:element} = new HTMLBRElement($2);"},
		{"trigger": "I-HTMLBRElementImpl\tinit", "contents": "HTMLBRElementImpl ${1:impl} = new HTMLBRElementImpl($2);"},
		{"trigger": "I-HTMLBaseElement\tinit", "contents": "HTMLBaseElement ${1:element} = new HTMLBaseElement($2);"},
		{"trigger": "I-HTMLBaseElementImpl\tinit", "contents": "HTMLBaseElementImpl ${1:impl} = new HTMLBaseElementImpl($2);"},
		{"trigger": "I-HTMLBaseFontElement\tinit", "contents": "HTMLBaseFontElement ${1:element} = new HTMLBaseFontElement($2);"},
		{"trigger": "I-HTMLBaseFontElementImpl\tinit", "contents": "HTMLBaseFontElementImpl ${1:impl} = new HTMLBaseFontElementImpl($2);"},
		{"trigger": "I-HTMLBodyElement\tinit", "contents": "HTMLBodyElement ${1:element} = new HTMLBodyElement($2);"},
		{"trigger": "I-HTMLBodyElementImpl\tinit", "contents": "HTMLBodyElementImpl ${1:impl} = new HTMLBodyElementImpl($2);"},
		{"trigger": "I-HTMLButtonElement\tinit", "contents": "HTMLButtonElement ${1:element} = new HTMLButtonElement($2);"},
		{"trigger": "I-HTMLButtonElementImpl\tinit", "contents": "HTMLButtonElementImpl ${1:impl} = new HTMLButtonElementImpl($2);"},
		{"trigger": "I-HTMLCollection\tinit", "contents": "HTMLCollection ${1:collection} = new HTMLCollection($2);"},
		{"trigger": "I-HTMLCollectionImpl\tinit", "contents": "HTMLCollectionImpl ${1:impl} = new HTMLCollectionImpl($2);"},
		{"trigger": "I-HTMLDListElement\tinit", "contents": "HTMLDListElement ${1:element} = new HTMLDListElement($2);"},
		{"trigger": "I-HTMLDListElementImpl\tinit", "contents": "HTMLDListElementImpl ${1:impl} = new HTMLDListElementImpl($2);"},
		{"trigger": "I-HTMLDOMImplementation\tinit", "contents": "HTMLDOMImplementation ${1:implementation} = new HTMLDOMImplementation($2);"},
		{"trigger": "I-HTMLDirectoryElement\tinit", "contents": "HTMLDirectoryElement ${1:element} = new HTMLDirectoryElement($2);"},
		{"trigger": "I-HTMLDirectoryElementImpl\tinit", "contents": "HTMLDirectoryElementImpl ${1:impl} = new HTMLDirectoryElementImpl($2);"},
		{"trigger": "I-HTMLDivElement\tinit", "contents": "HTMLDivElement ${1:element} = new HTMLDivElement($2);"},
		{"trigger": "I-HTMLDivElementImpl\tinit", "contents": "HTMLDivElementImpl ${1:impl} = new HTMLDivElementImpl($2);"},
		{"trigger": "I-HTMLDocument\tinit", "contents": "HTMLDocument ${1:document} = new HTMLDocument($2);"},
		{"trigger": "I-HTMLDocumentImpl\tinit", "contents": "HTMLDocumentImpl ${1:impl} = new HTMLDocumentImpl($2);"},
		{"trigger": "I-HTMLEditor\tinit", "contents": "HTMLEditor ${1:editor} = new HTMLEditor($2);"},
		{"trigger": "I-HTMLEditorBehavior\tinit", "contents": "HTMLEditorBehavior ${1:behavior} = new HTMLEditorBehavior($2);"},
		{"trigger": "I-HTMLEditorKit\tinit", "contents": "HTMLEditorKit ${1:kit} = new HTMLEditorKit($2);"},
		{"trigger": "I-HTMLEditorSkin\tinit", "contents": "HTMLEditorSkin ${1:skin} = new HTMLEditorSkin($2);"},
		{"trigger": "I-HTMLElement\tinit", "contents": "HTMLElement ${1:element} = new HTMLElement($2);"},
		{"trigger": "I-HTMLElementImpl\tinit", "contents": "HTMLElementImpl ${1:impl} = new HTMLElementImpl($2);"},
		{"trigger": "I-HTMLFieldSetElement\tinit", "contents": "HTMLFieldSetElement ${1:element} = new HTMLFieldSetElement($2);"},
		{"trigger": "I-HTMLFieldSetElementImpl\tinit", "contents": "HTMLFieldSetElementImpl ${1:impl} = new HTMLFieldSetElementImpl($2);"},
		{"trigger": "I-HTMLFontElement\tinit", "contents": "HTMLFontElement ${1:element} = new HTMLFontElement($2);"},
		{"trigger": "I-HTMLFontElementImpl\tinit", "contents": "HTMLFontElementImpl ${1:impl} = new HTMLFontElementImpl($2);"},
		{"trigger": "I-HTMLFormElement\tinit", "contents": "HTMLFormElement ${1:element} = new HTMLFormElement($2);"},
		{"trigger": "I-HTMLFormElementImpl\tinit", "contents": "HTMLFormElementImpl ${1:impl} = new HTMLFormElementImpl($2);"},
		{"trigger": "I-HTMLFrameElement\tinit", "contents": "HTMLFrameElement ${1:element} = new HTMLFrameElement($2);"},
		{"trigger": "I-HTMLFrameElementImpl\tinit", "contents": "HTMLFrameElementImpl ${1:impl} = new HTMLFrameElementImpl($2);"},
		{"trigger": "I-HTMLFrameHyperlinkEvent\tinit", "contents": "HTMLFrameHyperlinkEvent ${1:event} = new HTMLFrameHyperlinkEvent($2);"},
		{"trigger": "I-HTMLFrameSetElement\tinit", "contents": "HTMLFrameSetElement ${1:element} = new HTMLFrameSetElement($2);"},
		{"trigger": "I-HTMLFrameSetElementImpl\tinit", "contents": "HTMLFrameSetElementImpl ${1:impl} = new HTMLFrameSetElementImpl($2);"},
		{"trigger": "I-HTMLHRElement\tinit", "contents": "HTMLHRElement ${1:element} = new HTMLHRElement($2);"},
		{"trigger": "I-HTMLHRElementImpl\tinit", "contents": "HTMLHRElementImpl ${1:impl} = new HTMLHRElementImpl($2);"},
		{"trigger": "I-HTMLHeadElement\tinit", "contents": "HTMLHeadElement ${1:element} = new HTMLHeadElement($2);"},
		{"trigger": "I-HTMLHeadElementImpl\tinit", "contents": "HTMLHeadElementImpl ${1:impl} = new HTMLHeadElementImpl($2);"},
		{"trigger": "I-HTMLHeadingElement\tinit", "contents": "HTMLHeadingElement ${1:element} = new HTMLHeadingElement($2);"},
		{"trigger": "I-HTMLHeadingElementImpl\tinit", "contents": "HTMLHeadingElementImpl ${1:impl} = new HTMLHeadingElementImpl($2);"},
		{"trigger": "I-HTMLHtmlElement\tinit", "contents": "HTMLHtmlElement ${1:element} = new HTMLHtmlElement($2);"},
		{"trigger": "I-HTMLHtmlElementImpl\tinit", "contents": "HTMLHtmlElementImpl ${1:impl} = new HTMLHtmlElementImpl($2);"},
		{"trigger": "I-HTMLIFrameElement\tinit", "contents": "HTMLIFrameElement ${1:element} = new HTMLIFrameElement($2);"},
		{"trigger": "I-HTMLIFrameElementImpl\tinit", "contents": "HTMLIFrameElementImpl ${1:impl} = new HTMLIFrameElementImpl($2);"},
		{"trigger": "I-HTMLImageElement\tinit", "contents": "HTMLImageElement ${1:element} = new HTMLImageElement($2);"},
		{"trigger": "I-HTMLImageElementImpl\tinit", "contents": "HTMLImageElementImpl ${1:impl} = new HTMLImageElementImpl($2);"},
		{"trigger": "I-HTMLInputElement\tinit", "contents": "HTMLInputElement ${1:element} = new HTMLInputElement($2);"},
		{"trigger": "I-HTMLInputElementImpl\tinit", "contents": "HTMLInputElementImpl ${1:impl} = new HTMLInputElementImpl($2);"},
		{"trigger": "I-HTMLIsIndexElement\tinit", "contents": "HTMLIsIndexElement ${1:element} = new HTMLIsIndexElement($2);"},
		{"trigger": "I-HTMLLIElement\tinit", "contents": "HTMLLIElement ${1:element} = new HTMLLIElement($2);"},
		{"trigger": "I-HTMLLIElementImpl\tinit", "contents": "HTMLLIElementImpl ${1:impl} = new HTMLLIElementImpl($2);"},
		{"trigger": "I-HTMLLabelElement\tinit", "contents": "HTMLLabelElement ${1:element} = new HTMLLabelElement($2);"},
		{"trigger": "I-HTMLLabelElementImpl\tinit", "contents": "HTMLLabelElementImpl ${1:impl} = new HTMLLabelElementImpl($2);"},
		{"trigger": "I-HTMLLegendElement\tinit", "contents": "HTMLLegendElement ${1:element} = new HTMLLegendElement($2);"},
		{"trigger": "I-HTMLLegendElementImpl\tinit", "contents": "HTMLLegendElementImpl ${1:impl} = new HTMLLegendElementImpl($2);"},
		{"trigger": "I-HTMLLinkElement\tinit", "contents": "HTMLLinkElement ${1:element} = new HTMLLinkElement($2);"},
		{"trigger": "I-HTMLLinkElementImpl\tinit", "contents": "HTMLLinkElementImpl ${1:impl} = new HTMLLinkElementImpl($2);"},
		{"trigger": "I-HTMLMapElement\tinit", "contents": "HTMLMapElement ${1:element} = new HTMLMapElement($2);"},
		{"trigger": "I-HTMLMapElementImpl\tinit", "contents": "HTMLMapElementImpl ${1:impl} = new HTMLMapElementImpl($2);"},
		{"trigger": "I-HTMLMenuElement\tinit", "contents": "HTMLMenuElement ${1:element} = new HTMLMenuElement($2);"},
		{"trigger": "I-HTMLMenuElementImpl\tinit", "contents": "HTMLMenuElementImpl ${1:impl} = new HTMLMenuElementImpl($2);"},
		{"trigger": "I-HTMLMetaElement\tinit", "contents": "HTMLMetaElement ${1:element} = new HTMLMetaElement($2);"},
		{"trigger": "I-HTMLMetaElementImpl\tinit", "contents": "HTMLMetaElementImpl ${1:impl} = new HTMLMetaElementImpl($2);"},
		{"trigger": "I-HTMLModElement\tinit", "contents": "HTMLModElement ${1:element} = new HTMLModElement($2);"},
		{"trigger": "I-HTMLModElementImpl\tinit", "contents": "HTMLModElementImpl ${1:impl} = new HTMLModElementImpl($2);"},
		{"trigger": "I-HTMLOListElement\tinit", "contents": "HTMLOListElement ${1:element} = new HTMLOListElement($2);"},
		{"trigger": "I-HTMLOListElementImpl\tinit", "contents": "HTMLOListElementImpl ${1:impl} = new HTMLOListElementImpl($2);"},
		{"trigger": "I-HTMLObjectElement\tinit", "contents": "HTMLObjectElement ${1:element} = new HTMLObjectElement($2);"},
		{"trigger": "I-HTMLObjectElementImpl\tinit", "contents": "HTMLObjectElementImpl ${1:impl} = new HTMLObjectElementImpl($2);"},
		{"trigger": "I-HTMLOptGroupElement\tinit", "contents": "HTMLOptGroupElement ${1:element} = new HTMLOptGroupElement($2);"},
		{"trigger": "I-HTMLOptGroupElementImpl\tinit", "contents": "HTMLOptGroupElementImpl ${1:impl} = new HTMLOptGroupElementImpl($2);"},
		{"trigger": "I-HTMLOptionElement\tinit", "contents": "HTMLOptionElement ${1:element} = new HTMLOptionElement($2);"},
		{"trigger": "I-HTMLOptionElementImpl\tinit", "contents": "HTMLOptionElementImpl ${1:impl} = new HTMLOptionElementImpl($2);"},
		{"trigger": "I-HTMLOptionsCollectionImpl\tinit", "contents": "HTMLOptionsCollectionImpl ${1:impl} = new HTMLOptionsCollectionImpl($2);"},
		{"trigger": "I-HTMLParagraphElement\tinit", "contents": "HTMLParagraphElement ${1:element} = new HTMLParagraphElement($2);"},
		{"trigger": "I-HTMLParagraphElementImpl\tinit", "contents": "HTMLParagraphElementImpl ${1:impl} = new HTMLParagraphElementImpl($2);"},
		{"trigger": "I-HTMLParamElement\tinit", "contents": "HTMLParamElement ${1:element} = new HTMLParamElement($2);"},
		{"trigger": "I-HTMLParamElementImpl\tinit", "contents": "HTMLParamElementImpl ${1:impl} = new HTMLParamElementImpl($2);"},
		{"trigger": "I-HTMLPreElement\tinit", "contents": "HTMLPreElement ${1:element} = new HTMLPreElement($2);"},
		{"trigger": "I-HTMLPreElementImpl\tinit", "contents": "HTMLPreElementImpl ${1:impl} = new HTMLPreElementImpl($2);"},
		{"trigger": "I-HTMLQuoteElement\tinit", "contents": "HTMLQuoteElement ${1:element} = new HTMLQuoteElement($2);"},
		{"trigger": "I-HTMLQuoteElementImpl\tinit", "contents": "HTMLQuoteElementImpl ${1:impl} = new HTMLQuoteElementImpl($2);"},
		{"trigger": "I-HTMLScriptElement\tinit", "contents": "HTMLScriptElement ${1:element} = new HTMLScriptElement($2);"},
		{"trigger": "I-HTMLScriptElementImpl\tinit", "contents": "HTMLScriptElementImpl ${1:impl} = new HTMLScriptElementImpl($2);"},
		{"trigger": "I-HTMLSelectElement\tinit", "contents": "HTMLSelectElement ${1:element} = new HTMLSelectElement($2);"},
		{"trigger": "I-HTMLSelectElementImpl\tinit", "contents": "HTMLSelectElementImpl ${1:impl} = new HTMLSelectElementImpl($2);"},
		{"trigger": "I-HTMLSerializer\tinit", "contents": "HTMLSerializer ${1:serializer} = new HTMLSerializer($2);"},
		{"trigger": "I-HTMLStyleElement\tinit", "contents": "HTMLStyleElement ${1:element} = new HTMLStyleElement($2);"},
		{"trigger": "I-HTMLStyleElementImpl\tinit", "contents": "HTMLStyleElementImpl ${1:impl} = new HTMLStyleElementImpl($2);"},
		{"trigger": "I-HTMLTableCaptionElement\tinit", "contents": "HTMLTableCaptionElement ${1:element} = new HTMLTableCaptionElement($2);"},
		{"trigger": "I-HTMLTableCaptionElementImpl\tinit", "contents": "HTMLTableCaptionElementImpl ${1:impl} = new HTMLTableCaptionElementImpl($2);"},
		{"trigger": "I-HTMLTableCellElement\tinit", "contents": "HTMLTableCellElement ${1:element} = new HTMLTableCellElement($2);"},
		{"trigger": "I-HTMLTableCellElementImpl\tinit", "contents": "HTMLTableCellElementImpl ${1:impl} = new HTMLTableCellElementImpl($2);"},
		{"trigger": "I-HTMLTableColElement\tinit", "contents": "HTMLTableColElement ${1:element} = new HTMLTableColElement($2);"},
		{"trigger": "I-HTMLTableColElementImpl\tinit", "contents": "HTMLTableColElementImpl ${1:impl} = new HTMLTableColElementImpl($2);"},
		{"trigger": "I-HTMLTableElement\tinit", "contents": "HTMLTableElement ${1:element} = new HTMLTableElement($2);"},
		{"trigger": "I-HTMLTableElementImpl\tinit", "contents": "HTMLTableElementImpl ${1:impl} = new HTMLTableElementImpl($2);"},
		{"trigger": "I-HTMLTableRowElement\tinit", "contents": "HTMLTableRowElement ${1:element} = new HTMLTableRowElement($2);"},
		{"trigger": "I-HTMLTableRowElementImpl\tinit", "contents": "HTMLTableRowElementImpl ${1:impl} = new HTMLTableRowElementImpl($2);"},
		{"trigger": "I-HTMLTableSectionElement\tinit", "contents": "HTMLTableSectionElement ${1:element} = new HTMLTableSectionElement($2);"},
		{"trigger": "I-HTMLTableSectionElementImpl\tinit", "contents": "HTMLTableSectionElementImpl ${1:impl} = new HTMLTableSectionElementImpl($2);"},
		{"trigger": "I-HTMLTextAreaElement\tinit", "contents": "HTMLTextAreaElement ${1:element} = new HTMLTextAreaElement($2);"},
		{"trigger": "I-HTMLTextAreaElementImpl\tinit", "contents": "HTMLTextAreaElementImpl ${1:impl} = new HTMLTextAreaElementImpl($2);"},
		{"trigger": "I-HTMLTitleElement\tinit", "contents": "HTMLTitleElement ${1:element} = new HTMLTitleElement($2);"},
		{"trigger": "I-HTMLTitleElementImpl\tinit", "contents": "HTMLTitleElementImpl ${1:impl} = new HTMLTitleElementImpl($2);"},
		{"trigger": "I-HTMLUListElement\tinit", "contents": "HTMLUListElement ${1:element} = new HTMLUListElement($2);"},
		{"trigger": "I-HTMLUListElementImpl\tinit", "contents": "HTMLUListElementImpl ${1:impl} = new HTMLUListElementImpl($2);"},
		{"trigger": "I-HTMLWriter\tinit", "contents": "HTMLWriter ${1:writer} = new HTMLWriter($2);"},
		{"trigger": "I-HTMLdtd\tinit", "contents": "HTMLdtd ${1:ldtd} = new HTMLdtd($2);"},
		{"trigger": "I-HTTPBinding\tinit", "contents": "HTTPBinding ${1:binding} = new HTTPBinding($2);"},
		{"trigger": "I-HTTPException\tinit", "contents": "HTTPException ${1:exception} = new HTTPException($2);"},
		{"trigger": "I-HTTPInputSource\tinit", "contents": "HTTPInputSource ${1:source} = new HTTPInputSource($2);"},
		{"trigger": "I-HVSeparableKernel\tinit", "contents": "HVSeparableKernel ${1:kernel} = new HVSeparableKernel($2);"},
		{"trigger": "I-Handler\tinit", "contents": "Handler ${1:handler} = new Handler($2);"},
		{"trigger": "I-HandlerBase\tinit", "contents": "HandlerBase ${1:base} = new HandlerBase($2);"},
		{"trigger": "I-HandlerResolver\tinit", "contents": "HandlerResolver ${1:resolver} = new HandlerResolver($2);"},
		{"trigger": "I-HasControls\tinit", "contents": "HasControls ${1:controls} = new HasControls($2);"},
		{"trigger": "I-HasPositionalPredChecker\tinit", "contents": "HasPositionalPredChecker ${1:checker} = new HasPositionalPredChecker($2);"},
		{"trigger": "I-HashAttributeSet\tinit", "contents": "HashAttributeSet ${1:set} = new HashAttributeSet($2);"},
		{"trigger": "I-HashDocAttributeSet\tinit", "contents": "HashDocAttributeSet ${1:set} = new HashDocAttributeSet($2);"},
		{"trigger": "I-HashMap\tinit", "contents": "HashMap<${1:String}, ${2:Integer}> ${3:map} = new HashMap<>();"},
		{"trigger": "I-HashPrintJobAttributeSet\tinit", "contents": "HashPrintJobAttributeSet ${1:set} = new HashPrintJobAttributeSet($2);"},
		{"trigger": "I-HashPrintRequestAttributeSet\tinit", "contents": "HashPrintRequestAttributeSet ${1:set} = new HashPrintRequestAttributeSet($2);"},
		{"trigger": "I-HashPrintServiceAttributeSet\tinit", "contents": "HashPrintServiceAttributeSet ${1:set} = new HashPrintServiceAttributeSet($2);"},
		{"trigger": "I-HashSet\tinit", "contents": "HashSet<${1:String}> ${2:set} = new HashSet<${1:String}>($3);"},
		{"trigger": "I-Hashtable\tinit", "contents": "Hashtable ${1:hashtable} = new Hashtable($2);"},
		{"trigger": "I-Hashtree2Node\tinit", "contents": "Hashtree2Node ${1:node} = new Hashtree2Node($2);"},
		{"trigger": "I-HeadlessException\tinit", "contents": "HeadlessException ${1:exception} = new HeadlessException($2);"},
		{"trigger": "I-HeadlessPlatform\tinit", "contents": "HeadlessPlatform ${1:platform} = new HeadlessPlatform($2);"},
		{"trigger": "I-HeadlessPlatformFactory\tinit", "contents": "HeadlessPlatformFactory ${1:factory} = new HeadlessPlatformFactory($2);"},
		{"trigger": "I-HeadlessScreen\tinit", "contents": "HeadlessScreen ${1:screen} = new HeadlessScreen($2);"},
		{"trigger": "I-HeapByteBuffer\tinit", "contents": "HeapByteBuffer ${1:buffer} = new HeapByteBuffer($2);"},
		{"trigger": "I-HeapByteBufferR\tinit", "contents": "HeapByteBufferR ${1:heapbytebufferr} = new HeapByteBufferR($2);"},
		{"trigger": "I-HeapCharBuffer\tinit", "contents": "HeapCharBuffer ${1:buffer} = new HeapCharBuffer($2);"},
		{"trigger": "I-HeapCharBufferR\tinit", "contents": "HeapCharBufferR ${1:heapcharbufferr} = new HeapCharBufferR($2);"},
		{"trigger": "I-HeapDoubleBuffer\tinit", "contents": "HeapDoubleBuffer ${1:buffer} = new HeapDoubleBuffer($2);"},
		{"trigger": "I-HeapDoubleBufferR\tinit", "contents": "HeapDoubleBufferR ${1:heapdoublebufferr} = new HeapDoubleBufferR($2);"},
		{"trigger": "I-HeapFloatBuffer\tinit", "contents": "HeapFloatBuffer ${1:buffer} = new HeapFloatBuffer($2);"},
		{"trigger": "I-HeapFloatBufferR\tinit", "contents": "HeapFloatBufferR ${1:heapfloatbufferr} = new HeapFloatBufferR($2);"},
		{"trigger": "I-HeapImage\tinit", "contents": "HeapImage ${1:image} = new HeapImage($2);"},
		{"trigger": "I-HeapIntBuffer\tinit", "contents": "HeapIntBuffer ${1:buffer} = new HeapIntBuffer($2);"},
		{"trigger": "I-HeapIntBufferR\tinit", "contents": "HeapIntBufferR ${1:heapintbufferr} = new HeapIntBufferR($2);"},
		{"trigger": "I-HeapLongBuffer\tinit", "contents": "HeapLongBuffer ${1:buffer} = new HeapLongBuffer($2);"},
		{"trigger": "I-HeapLongBufferR\tinit", "contents": "HeapLongBufferR ${1:heaplongbufferr} = new HeapLongBufferR($2);"},
		{"trigger": "I-HeapShortBuffer\tinit", "contents": "HeapShortBuffer ${1:buffer} = new HeapShortBuffer($2);"},
		{"trigger": "I-HeapShortBufferR\tinit", "contents": "HeapShortBufferR ${1:heapshortbufferr} = new HeapShortBufferR($2);"},
		{"trigger": "I-HeavyweightDialog\tinit", "contents": "HeavyweightDialog ${1:dialog} = new HeavyweightDialog($2);"},
		{"trigger": "I-HelperNodeList\tinit", "contents": "HelperNodeList ${1:list} = new HelperNodeList($2);"},
		{"trigger": "I-Helpers\tinit", "contents": "Helpers ${1:helpers} = new Helpers($2);"},
		{"trigger": "I-HexBin\tinit", "contents": "HexBin ${1:bin} = new HexBin($2);"},
		{"trigger": "I-HexBinaryAdapter\tinit", "contents": "HexBinaryAdapter ${1:adapter} = new HexBinaryAdapter($2);"},
		{"trigger": "I-HexBinaryDV\tinit", "contents": "HexBinaryDV ${1:hexbinarydv} = new HexBinaryDV($2);"},
		{"trigger": "I-HiddenTagView\tinit", "contents": "HiddenTagView ${1:view} = new HiddenTagView($2);"},
		{"trigger": "I-HierarchyBoundsAdapter\tinit", "contents": "HierarchyBoundsAdapter ${1:adapter} = new HierarchyBoundsAdapter($2);"},
		{"trigger": "I-HierarchyBoundsListener\tinit", "contents": "HierarchyBoundsListener ${1:listener} = new HierarchyBoundsListener($2);"},
		{"trigger": "I-HierarchyEvent\tinit", "contents": "HierarchyEvent ${1:event} = new HierarchyEvent($2);"},
		{"trigger": "I-HierarchyListener\tinit", "contents": "HierarchyListener ${1:listener} = new HierarchyListener($2);"},
		{"trigger": "I-HighlightRegion\tinit", "contents": "HighlightRegion ${1:region} = new HighlightRegion($2);"},
		{"trigger": "I-Highlighter\tinit", "contents": "Highlighter ${1:highlighter} = new Highlighter($2);"},
		{"trigger": "I-HijrahChronology\tinit", "contents": "HijrahChronology ${1:chronology} = new HijrahChronology($2);"},
		{"trigger": "I-HijrahDate\tinit", "contents": "HijrahDate ${1:date} = new HijrahDate($2);"},
		{"trigger": "I-HijrahEra\tinit", "contents": "HijrahEra ${1:era} = new HijrahEra($2);"},
		{"trigger": "I-HitInfo\tinit", "contents": "HitInfo ${1:info} = new HitInfo($2);"},
		{"trigger": "I-Holder\tinit", "contents": "Holder ${1:holder} = new Holder($2);"},
		{"trigger": "I-HorizontalDirection\tinit", "contents": "HorizontalDirection ${1:direction} = new HorizontalDirection($2);"},
		{"trigger": "I-Host\tinit", "contents": "Host ${1:host} = new Host($2);"},
		{"trigger": "I-HostDragStartListener\tinit", "contents": "HostDragStartListener ${1:listener} = new HostDragStartListener($2);"},
		{"trigger": "I-HostInterface\tinit", "contents": "HostInterface ${1:interface} = new HostInterface($2);"},
		{"trigger": "I-HostPortrange\tinit", "contents": "HostPortrange ${1:portrange} = new HostPortrange($2);"},
		{"trigger": "I-HostServices\tinit", "contents": "HostServices ${1:services} = new HostServices($2);"},
		{"trigger": "I-HostServicesDelegate\tinit", "contents": "HostServicesDelegate ${1:delegate} = new HostServicesDelegate($2);"},
		{"trigger": "I-HostUtils\tinit", "contents": "HostUtils ${1:utils} = new HostUtils($2);"},
		{"trigger": "I-HttpConnectSocketImpl\tinit", "contents": "HttpConnectSocketImpl ${1:impl} = new HttpConnectSocketImpl($2);"},
		{"trigger": "I-HttpContext\tinit", "contents": "HttpContext ${1:context} = new HttpContext($2);"},
		{"trigger": "I-HttpCookie\tinit", "contents": "HttpCookie ${1:cookie} = new HttpCookie($2);"},
		{"trigger": "I-HttpExchange\tinit", "contents": "HttpExchange ${1:exchange} = new HttpExchange($2);"},
		{"trigger": "I-HttpHandler\tinit", "contents": "HttpHandler ${1:handler} = new HttpHandler($2);"},
		{"trigger": "I-HttpRetryException\tinit", "contents": "HttpRetryException ${1:exception} = new HttpRetryException($2);"},
		{"trigger": "I-HttpURLConnection\tinit", "contents": "HttpURLConnection ${1:connection} = new HttpURLConnection($2);"},
		{"trigger": "I-Hueristic2D\tinit", "contents": "Hueristic2D ${1:hueristic2d} = new Hueristic2D($2);"},
		{"trigger": "I-Hyperlink\tinit", "contents": "Hyperlink ${1:hyperlink} = new Hyperlink($2);"},
		{"trigger": "I-HyperlinkBuilder\tinit", "contents": "HyperlinkBuilder ${1:builder} = new HyperlinkBuilder($2);"},
		{"trigger": "I-HyperlinkEvent\tinit", "contents": "HyperlinkEvent ${1:event} = new HyperlinkEvent($2);"},
		{"trigger": "I-HyperlinkListener\tinit", "contents": "HyperlinkListener ${1:listener} = new HyperlinkListener($2);"},
		{"trigger": "I-HyperlinkSkin\tinit", "contents": "HyperlinkSkin ${1:skin} = new HyperlinkSkin($2);"},
		{"trigger": "I-I18N\tinit", "contents": "I18N ${1:i18n} = new I18N($2);"},
		{"trigger": "I-I18NImpl\tinit", "contents": "I18NImpl ${1:impl} = new I18NImpl($2);"},
		{"trigger": "I-I18n\tinit", "contents": "I18n ${1:i18n} = new I18n($2);"},
		{"trigger": "I-I2B\tinit", "contents": "I2B ${1:i2b} = new I2B($2);"},
		{"trigger": "I-I2C\tinit", "contents": "I2C ${1:i2c} = new I2C($2);"},
		{"trigger": "I-I2D\tinit", "contents": "I2D ${1:i2d} = new I2D($2);"},
		{"trigger": "I-I2F\tinit", "contents": "I2F ${1:i2f} = new I2F($2);"},
		{"trigger": "I-I2L\tinit", "contents": "I2L ${1:i2l} = new I2L($2);"},
		{"trigger": "I-I2S\tinit", "contents": "I2S ${1:i2s} = new I2S($2);"},
		{"trigger": "I-IADD\tinit", "contents": "IADD ${1:iadd} = new IADD($2);"},
		{"trigger": "I-IALOAD\tinit", "contents": "IALOAD ${1:iaload} = new IALOAD($2);"},
		{"trigger": "I-IAND\tinit", "contents": "IAND ${1:iand} = new IAND($2);"},
		{"trigger": "I-IASTORE\tinit", "contents": "IASTORE ${1:iastore} = new IASTORE($2);"},
		{"trigger": "I-ICC_ColorSpace\tinit", "contents": "ICC_ColorSpace ${1:space} = new ICC_ColorSpace($2);"},
		{"trigger": "I-ICC_Profile\tinit", "contents": "ICC_Profile ${1:profile} = new ICC_Profile($2);"},
		{"trigger": "I-ICC_ProfileGray\tinit", "contents": "ICC_ProfileGray ${1:gray} = new ICC_ProfileGray($2);"},
		{"trigger": "I-ICC_ProfileRGB\tinit", "contents": "ICC_ProfileRGB ${1:icc} = new ICC_ProfileRGB($2);"},
		{"trigger": "I-ICONST\tinit", "contents": "ICONST ${1:iconst} = new ICONST($2);"},
		{"trigger": "I-ID2D1Brush\tinit", "contents": "ID2D1Brush ${1:brush} = new ID2D1Brush($2);"},
		{"trigger": "I-ID2D1Factory\tinit", "contents": "ID2D1Factory ${1:factory} = new ID2D1Factory($2);"},
		{"trigger": "I-ID2D1RenderTarget\tinit", "contents": "ID2D1RenderTarget ${1:target} = new ID2D1RenderTarget($2);"},
		{"trigger": "I-ID3MetadataParser\tinit", "contents": "ID3MetadataParser ${1:parser} = new ID3MetadataParser($2);"},
		{"trigger": "I-IDDV\tinit", "contents": "IDDV ${1:iddv} = new IDDV($2);"},
		{"trigger": "I-IDDatatypeValidator\tinit", "contents": "IDDatatypeValidator ${1:validator} = new IDDatatypeValidator($2);"},
		{"trigger": "I-IDIV\tinit", "contents": "IDIV ${1:idiv} = new IDIV($2);"},
		{"trigger": "I-IDLEntity\tinit", "contents": "IDLEntity ${1:entity} = new IDLEntity($2);"},
		{"trigger": "I-IDLNameTranslator\tinit", "contents": "IDLNameTranslator ${1:translator} = new IDLNameTranslator($2);"},
		{"trigger": "I-IDLType\tinit", "contents": "IDLType ${1:type} = new IDLType($2);"},
		{"trigger": "I-IDLTypeHelper\tinit", "contents": "IDLTypeHelper ${1:helper} = new IDLTypeHelper($2);"},
		{"trigger": "I-IDLTypeOperations\tinit", "contents": "IDLTypeOperations ${1:operations} = new IDLTypeOperations($2);"},
		{"trigger": "I-IDN\tinit", "contents": "IDN ${1:idn} = new IDN($2);"},
		{"trigger": "I-IDProperty\tinit", "contents": "IDProperty ${1:property} = new IDProperty($2);"},
		{"trigger": "I-IDREFDV\tinit", "contents": "IDREFDV ${1:idrefdv} = new IDREFDV($2);"},
		{"trigger": "I-IDREFDatatypeValidator\tinit", "contents": "IDREFDatatypeValidator ${1:validator} = new IDREFDatatypeValidator($2);"},
		{"trigger": "I-IDWriteFactory\tinit", "contents": "IDWriteFactory ${1:factory} = new IDWriteFactory($2);"},
		{"trigger": "I-IDWriteFont\tinit", "contents": "IDWriteFont ${1:font} = new IDWriteFont($2);"},
		{"trigger": "I-IDWriteFontCollection\tinit", "contents": "IDWriteFontCollection ${1:collection} = new IDWriteFontCollection($2);"},
		{"trigger": "I-IDWriteFontFace\tinit", "contents": "IDWriteFontFace ${1:face} = new IDWriteFontFace($2);"},
		{"trigger": "I-IDWriteFontFamily\tinit", "contents": "IDWriteFontFamily ${1:family} = new IDWriteFontFamily($2);"},
		{"trigger": "I-IDWriteFontFile\tinit", "contents": "IDWriteFontFile ${1:file} = new IDWriteFontFile($2);"},
		{"trigger": "I-IDWriteFontList\tinit", "contents": "IDWriteFontList ${1:list} = new IDWriteFontList($2);"},
		{"trigger": "I-IDWriteGlyphRunAnalysis\tinit", "contents": "IDWriteGlyphRunAnalysis ${1:analysis} = new IDWriteGlyphRunAnalysis($2);"},
		{"trigger": "I-IDWriteLocalizedStrings\tinit", "contents": "IDWriteLocalizedStrings ${1:strings} = new IDWriteLocalizedStrings($2);"},
		{"trigger": "I-IDWriteTextAnalyzer\tinit", "contents": "IDWriteTextAnalyzer ${1:analyzer} = new IDWriteTextAnalyzer($2);"},
		{"trigger": "I-IDWriteTextFormat\tinit", "contents": "IDWriteTextFormat ${1:format} = new IDWriteTextFormat($2);"},
		{"trigger": "I-IDWriteTextLayout\tinit", "contents": "IDWriteTextLayout ${1:layout} = new IDWriteTextLayout($2);"},
		{"trigger": "I-ID_ASSIGNMENT_POLICY_ID\tinit", "contents": "ID_ASSIGNMENT_POLICY_ID ${1:id} = new ID_ASSIGNMENT_POLICY_ID($2);"},
		{"trigger": "I-ID_UNIQUENESS_POLICY_ID\tinit", "contents": "ID_UNIQUENESS_POLICY_ID ${1:id} = new ID_UNIQUENESS_POLICY_ID($2);"},
		{"trigger": "I-IFEQ\tinit", "contents": "IFEQ ${1:ifeq} = new IFEQ($2);"},
		{"trigger": "I-IFGE\tinit", "contents": "IFGE ${1:ifge} = new IFGE($2);"},
		{"trigger": "I-IFGT\tinit", "contents": "IFGT ${1:ifgt} = new IFGT($2);"},
		{"trigger": "I-IFLE\tinit", "contents": "IFLE ${1:ifle} = new IFLE($2);"},
		{"trigger": "I-IFLT\tinit", "contents": "IFLT ${1:iflt} = new IFLT($2);"},
		{"trigger": "I-IFNE\tinit", "contents": "IFNE ${1:ifne} = new IFNE($2);"},
		{"trigger": "I-IFNONNULL\tinit", "contents": "IFNONNULL ${1:ifnonnull} = new IFNONNULL($2);"},
		{"trigger": "I-IFNULL\tinit", "contents": "IFNULL ${1:ifnull} = new IFNULL($2);"},
		{"trigger": "I-IF_ACMPEQ\tinit", "contents": "IF_ACMPEQ ${1:if} = new IF_ACMPEQ($2);"},
		{"trigger": "I-IF_ACMPNE\tinit", "contents": "IF_ACMPNE ${1:if} = new IF_ACMPNE($2);"},
		{"trigger": "I-IF_ICMPEQ\tinit", "contents": "IF_ICMPEQ ${1:if} = new IF_ICMPEQ($2);"},
		{"trigger": "I-IF_ICMPGE\tinit", "contents": "IF_ICMPGE ${1:if} = new IF_ICMPGE($2);"},
		{"trigger": "I-IF_ICMPGT\tinit", "contents": "IF_ICMPGT ${1:if} = new IF_ICMPGT($2);"},
		{"trigger": "I-IF_ICMPLE\tinit", "contents": "IF_ICMPLE ${1:if} = new IF_ICMPLE($2);"},
		{"trigger": "I-IF_ICMPLT\tinit", "contents": "IF_ICMPLT ${1:if} = new IF_ICMPLT($2);"},
		{"trigger": "I-IF_ICMPNE\tinit", "contents": "IF_ICMPNE ${1:if} = new IF_ICMPNE($2);"},
		{"trigger": "I-IINC\tinit", "contents": "IINC ${1:iinc} = new IINC($2);"},
		{"trigger": "I-IIOByteBuffer\tinit", "contents": "IIOByteBuffer ${1:buffer} = new IIOByteBuffer($2);"},
		{"trigger": "I-IIOException\tinit", "contents": "IIOException ${1:exception} = new IIOException($2);"},
		{"trigger": "I-IIOImage\tinit", "contents": "IIOImage ${1:image} = new IIOImage($2);"},
		{"trigger": "I-IIOInvalidTreeException\tinit", "contents": "IIOInvalidTreeException ${1:exception} = new IIOInvalidTreeException($2);"},
		{"trigger": "I-IIOMetadata\tinit", "contents": "IIOMetadata ${1:metadata} = new IIOMetadata($2);"},
		{"trigger": "I-IIOMetadataController\tinit", "contents": "IIOMetadataController ${1:controller} = new IIOMetadataController($2);"},
		{"trigger": "I-IIOMetadataFormat\tinit", "contents": "IIOMetadataFormat ${1:format} = new IIOMetadataFormat($2);"},
		{"trigger": "I-IIOMetadataFormatImpl\tinit", "contents": "IIOMetadataFormatImpl ${1:impl} = new IIOMetadataFormatImpl($2);"},
		{"trigger": "I-IIOMetadataNode\tinit", "contents": "IIOMetadataNode ${1:node} = new IIOMetadataNode($2);"},
		{"trigger": "I-IIOPAddress\tinit", "contents": "IIOPAddress ${1:address} = new IIOPAddress($2);"},
		{"trigger": "I-IIOPFactories\tinit", "contents": "IIOPFactories ${1:factories} = new IIOPFactories($2);"},
		{"trigger": "I-IIOPHelper\tinit", "contents": "IIOPHelper ${1:helper} = new IIOPHelper($2);"},
		{"trigger": "I-IIOPPrimaryToContactInfo\tinit", "contents": "IIOPPrimaryToContactInfo ${1:info} = new IIOPPrimaryToContactInfo($2);"},
		{"trigger": "I-IIOPProfile\tinit", "contents": "IIOPProfile ${1:profile} = new IIOPProfile($2);"},
		{"trigger": "I-IIOPProfileTemplate\tinit", "contents": "IIOPProfileTemplate ${1:template} = new IIOPProfileTemplate($2);"},
		{"trigger": "I-IIOPProxy\tinit", "contents": "IIOPProxy ${1:proxy} = new IIOPProxy($2);"},
		{"trigger": "I-IIOPProxyImpl\tinit", "contents": "IIOPProxyImpl ${1:impl} = new IIOPProxyImpl($2);"},
		{"trigger": "I-IIOP_CLEAR_TEXT\tinit", "contents": "IIOP_CLEAR_TEXT ${1:iiop} = new IIOP_CLEAR_TEXT($2);"},
		{"trigger": "I-IIOParam\tinit", "contents": "IIOParam ${1:param} = new IIOParam($2);"},
		{"trigger": "I-IIOParamController\tinit", "contents": "IIOParamController ${1:controller} = new IIOParamController($2);"},
		{"trigger": "I-IIOReadProgressListener\tinit", "contents": "IIOReadProgressListener ${1:listener} = new IIOReadProgressListener($2);"},
		{"trigger": "I-IIOReadUpdateListener\tinit", "contents": "IIOReadUpdateListener ${1:listener} = new IIOReadUpdateListener($2);"},
		{"trigger": "I-IIOReadWarningListener\tinit", "contents": "IIOReadWarningListener ${1:listener} = new IIOReadWarningListener($2);"},
		{"trigger": "I-IIORegistry\tinit", "contents": "IIORegistry ${1:registry} = new IIORegistry($2);"},
		{"trigger": "I-IIOServiceProvider\tinit", "contents": "IIOServiceProvider ${1:provider} = new IIOServiceProvider($2);"},
		{"trigger": "I-IIOWriteProgressListener\tinit", "contents": "IIOWriteProgressListener ${1:listener} = new IIOWriteProgressListener($2);"},
		{"trigger": "I-IIOWriteWarningListener\tinit", "contents": "IIOWriteWarningListener ${1:listener} = new IIOWriteWarningListener($2);"},
		{"trigger": "I-ILOAD\tinit", "contents": "ILOAD ${1:iload} = new ILOAD($2);"},
		{"trigger": "I-IMPLICIT_ACTIVATION_POLICY_ID\tinit", "contents": "IMPLICIT_ACTIVATION_POLICY_ID ${1:implicit} = new IMPLICIT_ACTIVATION_POLICY_ID($2);"},
		{"trigger": "I-IMP_LIMIT\tinit", "contents": "IMP_LIMIT ${1:imp} = new IMP_LIMIT($2);"},
		{"trigger": "I-IMUL\tinit", "contents": "IMUL ${1:imul} = new IMUL($2);"},
		{"trigger": "I-INACTIVE\tinit", "contents": "INACTIVE ${1:inactive} = new INACTIVE($2);"},
		{"trigger": "I-INEG\tinit", "contents": "INEG ${1:ineg} = new INEG($2);"},
		{"trigger": "I-INITIALIZE\tinit", "contents": "INITIALIZE ${1:initialize} = new INITIALIZE($2);"},
		{"trigger": "I-INSTANCEOF\tinit", "contents": "INSTANCEOF ${1:instanceof} = new INSTANCEOF($2);"},
		{"trigger": "I-INTERNAL\tinit", "contents": "INTERNAL ${1:internal} = new INTERNAL($2);"},
		{"trigger": "I-INTF_REPOS\tinit", "contents": "INTF_REPOS ${1:intf} = new INTF_REPOS($2);"},
		{"trigger": "I-INVALID_ACTIVITY\tinit", "contents": "INVALID_ACTIVITY ${1:invalid} = new INVALID_ACTIVITY($2);"},
		{"trigger": "I-INVALID_TRANSACTION\tinit", "contents": "INVALID_TRANSACTION ${1:invalid} = new INVALID_TRANSACTION($2);"},
		{"trigger": "I-INVOKEINTERFACE\tinit", "contents": "INVOKEINTERFACE ${1:invokeinterface} = new INVOKEINTERFACE($2);"},
		{"trigger": "I-INVOKESPECIAL\tinit", "contents": "INVOKESPECIAL ${1:invokespecial} = new INVOKESPECIAL($2);"},
		{"trigger": "I-INVOKESTATIC\tinit", "contents": "INVOKESTATIC ${1:invokestatic} = new INVOKESTATIC($2);"},
		{"trigger": "I-INVOKEVIRTUAL\tinit", "contents": "INVOKEVIRTUAL ${1:invokevirtual} = new INVOKEVIRTUAL($2);"},
		{"trigger": "I-INV_FLAG\tinit", "contents": "INV_FLAG ${1:inv} = new INV_FLAG($2);"},
		{"trigger": "I-INV_IDENT\tinit", "contents": "INV_IDENT ${1:inv} = new INV_IDENT($2);"},
		{"trigger": "I-INV_OBJREF\tinit", "contents": "INV_OBJREF ${1:inv} = new INV_OBJREF($2);"},
		{"trigger": "I-INV_POLICY\tinit", "contents": "INV_POLICY ${1:inv} = new INV_POLICY($2);"},
		{"trigger": "I-IOError\tinit", "contents": "IOError ${1:error} = new IOError($2);"},
		{"trigger": "I-IOException\tinit", "contents": "IOException ${1:exception} = new IOException($2);"},
		{"trigger": "I-IOR\tinit", "contents": "IOR ${1:ior} = new IOR($2);"},
		{"trigger": "I-IORFactories\tinit", "contents": "IORFactories ${1:factories} = new IORFactories($2);"},
		{"trigger": "I-IORFactory\tinit", "contents": "IORFactory ${1:factory} = new IORFactory($2);"},
		{"trigger": "I-IORHelper\tinit", "contents": "IORHelper ${1:helper} = new IORHelper($2);"},
		{"trigger": "I-IORHolder\tinit", "contents": "IORHolder ${1:holder} = new IORHolder($2);"},
		{"trigger": "I-IORInfo\tinit", "contents": "IORInfo ${1:info} = new IORInfo($2);"},
		{"trigger": "I-IORInfoExt\tinit", "contents": "IORInfoExt ${1:ext} = new IORInfoExt($2);"},
		{"trigger": "I-IORInfoOperations\tinit", "contents": "IORInfoOperations ${1:operations} = new IORInfoOperations($2);"},
		{"trigger": "I-IORInterceptor\tinit", "contents": "IORInterceptor ${1:interceptor} = new IORInterceptor($2);"},
		{"trigger": "I-IORInterceptorOperations\tinit", "contents": "IORInterceptorOperations ${1:operations} = new IORInterceptorOperations($2);"},
		{"trigger": "I-IORInterceptor_3_0Helper\tinit", "contents": "IORInterceptor_3_0Helper ${1:helper} = new IORInterceptor_3_0Helper($2);"},
		{"trigger": "I-IORInterceptor_3_0Holder\tinit", "contents": "IORInterceptor_3_0Holder ${1:holder} = new IORInterceptor_3_0Holder($2);"},
		{"trigger": "I-IORInterceptor_3_0Operations\tinit", "contents": "IORInterceptor_3_0Operations ${1:operations} = new IORInterceptor_3_0Operations($2);"},
		{"trigger": "I-IORTemplate\tinit", "contents": "IORTemplate ${1:template} = new IORTemplate($2);"},
		{"trigger": "I-IORTemplateList\tinit", "contents": "IORTemplateList ${1:list} = new IORTemplateList($2);"},
		{"trigger": "I-IORToSocketInfo\tinit", "contents": "IORToSocketInfo ${1:info} = new IORToSocketInfo($2);"},
		{"trigger": "I-IORTransformer\tinit", "contents": "IORTransformer ${1:transformer} = new IORTransformer($2);"},
		{"trigger": "I-IOSGLContext\tinit", "contents": "IOSGLContext ${1:context} = new IOSGLContext($2);"},
		{"trigger": "I-IOSGLDrawable\tinit", "contents": "IOSGLDrawable ${1:drawable} = new IOSGLDrawable($2);"},
		{"trigger": "I-IOSGLFactory\tinit", "contents": "IOSGLFactory ${1:factory} = new IOSGLFactory($2);"},
		{"trigger": "I-IOSGLPixelFormat\tinit", "contents": "IOSGLPixelFormat ${1:format} = new IOSGLPixelFormat($2);"},
		{"trigger": "I-IOSMedia\tinit", "contents": "IOSMedia ${1:media} = new IOSMedia($2);"},
		{"trigger": "I-IOSMediaPlayer\tinit", "contents": "IOSMediaPlayer ${1:player} = new IOSMediaPlayer($2);"},
		{"trigger": "I-IOSPlatform\tinit", "contents": "IOSPlatform ${1:platform} = new IOSPlatform($2);"},
		{"trigger": "I-IREM\tinit", "contents": "IREM ${1:irem} = new IREM($2);"},
		{"trigger": "I-IRETURN\tinit", "contents": "IRETURN ${1:ireturn} = new IRETURN($2);"},
		{"trigger": "I-IRObject\tinit", "contents": "IRObject ${1:object} = new IRObject($2);"},
		{"trigger": "I-IRObjectOperations\tinit", "contents": "IRObjectOperations ${1:operations} = new IRObjectOperations($2);"},
		{"trigger": "I-ISHL\tinit", "contents": "ISHL ${1:ishl} = new ISHL($2);"},
		{"trigger": "I-ISHR\tinit", "contents": "ISHR ${1:ishr} = new ISHR($2);"},
		{"trigger": "I-ISTORE\tinit", "contents": "ISTORE ${1:istore} = new ISTORE($2);"},
		{"trigger": "I-ISUB\tinit", "contents": "ISUB ${1:isub} = new ISUB($2);"},
		{"trigger": "I-IUSHR\tinit", "contents": "IUSHR ${1:iushr} = new IUSHR($2);"},
		{"trigger": "I-IUnknown\tinit", "contents": "IUnknown ${1:unknown} = new IUnknown($2);"},
		{"trigger": "I-IWICBitmap\tinit", "contents": "IWICBitmap ${1:bitmap} = new IWICBitmap($2);"},
		{"trigger": "I-IWICBitmapLock\tinit", "contents": "IWICBitmapLock ${1:lock} = new IWICBitmapLock($2);"},
		{"trigger": "I-IWICImagingFactory\tinit", "contents": "IWICImagingFactory ${1:factory} = new IWICImagingFactory($2);"},
		{"trigger": "I-IXOR\tinit", "contents": "IXOR ${1:ixor} = new IXOR($2);"},
		{"trigger": "I-Icon\tinit", "contents": "Icon ${1:icon} = new Icon($2);"},
		{"trigger": "I-IconUIResource\tinit", "contents": "IconUIResource ${1:resource} = new IconUIResource($2);"},
		{"trigger": "I-IconView\tinit", "contents": "IconView ${1:view} = new IconView($2);"},
		{"trigger": "I-IdAssignmentPolicy\tinit", "contents": "IdAssignmentPolicy ${1:policy} = new IdAssignmentPolicy($2);"},
		{"trigger": "I-IdAssignmentPolicyOperations\tinit", "contents": "IdAssignmentPolicyOperations ${1:operations} = new IdAssignmentPolicyOperations($2);"},
		{"trigger": "I-IdAssignmentPolicyValue\tinit", "contents": "IdAssignmentPolicyValue ${1:value} = new IdAssignmentPolicyValue($2);"},
		{"trigger": "I-IdKeyPattern\tinit", "contents": "IdKeyPattern ${1:pattern} = new IdKeyPattern($2);"},
		{"trigger": "I-IdPattern\tinit", "contents": "IdPattern ${1:pattern} = new IdPattern($2);"},
		{"trigger": "I-IdResolver\tinit", "contents": "IdResolver ${1:resolver} = new IdResolver($2);"},
		{"trigger": "I-IdUniquenessPolicy\tinit", "contents": "IdUniquenessPolicy ${1:policy} = new IdUniquenessPolicy($2);"},
		{"trigger": "I-IdUniquenessPolicyOperations\tinit", "contents": "IdUniquenessPolicyOperations ${1:operations} = new IdUniquenessPolicyOperations($2);"},
		{"trigger": "I-IdUniquenessPolicyValue\tinit", "contents": "IdUniquenessPolicyValue ${1:value} = new IdUniquenessPolicyValue($2);"},
		{"trigger": "I-Identifiable\tinit", "contents": "Identifiable ${1:identifiable} = new Identifiable($2);"},
		{"trigger": "I-IdentifiableBase\tinit", "contents": "IdentifiableBase ${1:base} = new IdentifiableBase($2);"},
		{"trigger": "I-IdentifiableContainerBase\tinit", "contents": "IdentifiableContainerBase ${1:base} = new IdentifiableContainerBase($2);"},
		{"trigger": "I-IdentifiableFactory\tinit", "contents": "IdentifiableFactory ${1:factory} = new IdentifiableFactory($2);"},
		{"trigger": "I-IdentifiableFactoryFinder\tinit", "contents": "IdentifiableFactoryFinder ${1:finder} = new IdentifiableFactoryFinder($2);"},
		{"trigger": "I-IdentifierHelper\tinit", "contents": "IdentifierHelper ${1:helper} = new IdentifierHelper($2);"},
		{"trigger": "I-IdentifierTree\tinit", "contents": "IdentifierTree ${1:tree} = new IdentifierTree($2);"},
		{"trigger": "I-Identity\tinit", "contents": "Identity ${1:identity} = new Identity($2);"},
		{"trigger": "I-IdentityConstraint\tinit", "contents": "IdentityConstraint ${1:constraint} = new IdentityConstraint($2);"},
		{"trigger": "I-IdentityHashMap\tinit", "contents": "IdentityHashMap ${1:map} = new IdentityHashMap($2);"},
		{"trigger": "I-IdentityScope\tinit", "contents": "IdentityScope ${1:scope} = new IdentityScope($2);"},
		{"trigger": "I-If\tinit", "contents": "If ${1:if} = new If($2);"},
		{"trigger": "I-IfInstruction\tinit", "contents": "IfInstruction ${1:instruction} = new IfInstruction($2);"},
		{"trigger": "I-IfTree\tinit", "contents": "IfTree ${1:tree} = new IfTree($2);"},
		{"trigger": "I-IgnoreAllErrorHandler\tinit", "contents": "IgnoreAllErrorHandler ${1:handler} = new IgnoreAllErrorHandler($2);"},
		{"trigger": "I-IllegalAccessError\tinit", "contents": "IllegalAccessError ${1:error} = new IllegalAccessError($2);"},
		{"trigger": "I-IllegalAccessException\tinit", "contents": "IllegalAccessException ${1:exception} = new IllegalAccessException($2);"},
		{"trigger": "I-IllegalArgumentException\tinit", "contents": "IllegalArgumentException ${1:exception} = new IllegalArgumentException($2);"},
		{"trigger": "I-IllegalBlockingModeException\tinit", "contents": "IllegalBlockingModeException ${1:exception} = new IllegalBlockingModeException($2);"},
		{"trigger": "I-IllegalChannelGroupException\tinit", "contents": "IllegalChannelGroupException ${1:exception} = new IllegalChannelGroupException($2);"},
		{"trigger": "I-IllegalCharException\tinit", "contents": "IllegalCharException ${1:exception} = new IllegalCharException($2);"},
		{"trigger": "I-IllegalCharsetNameException\tinit", "contents": "IllegalCharsetNameException ${1:exception} = new IllegalCharsetNameException($2);"},
		{"trigger": "I-IllegalClassFormatException\tinit", "contents": "IllegalClassFormatException ${1:exception} = new IllegalClassFormatException($2);"},
		{"trigger": "I-IllegalComponentStateException\tinit", "contents": "IllegalComponentStateException ${1:exception} = new IllegalComponentStateException($2);"},
		{"trigger": "I-IllegalFormatCodePointException\tinit", "contents": "IllegalFormatCodePointException ${1:exception} = new IllegalFormatCodePointException($2);"},
		{"trigger": "I-IllegalFormatConversionException\tinit", "contents": "IllegalFormatConversionException ${1:exception} = new IllegalFormatConversionException($2);"},
		{"trigger": "I-IllegalFormatException\tinit", "contents": "IllegalFormatException ${1:exception} = new IllegalFormatException($2);"},
		{"trigger": "I-IllegalFormatFlagsException\tinit", "contents": "IllegalFormatFlagsException ${1:exception} = new IllegalFormatFlagsException($2);"},
		{"trigger": "I-IllegalFormatPrecisionException\tinit", "contents": "IllegalFormatPrecisionException ${1:exception} = new IllegalFormatPrecisionException($2);"},
		{"trigger": "I-IllegalFormatWidthException\tinit", "contents": "IllegalFormatWidthException ${1:exception} = new IllegalFormatWidthException($2);"},
		{"trigger": "I-IllegalMonitorStateException\tinit", "contents": "IllegalMonitorStateException ${1:exception} = new IllegalMonitorStateException($2);"},
		{"trigger": "I-IllegalPathStateException\tinit", "contents": "IllegalPathStateException ${1:exception} = new IllegalPathStateException($2);"},
		{"trigger": "I-IllegalSelectorException\tinit", "contents": "IllegalSelectorException ${1:exception} = new IllegalSelectorException($2);"},
		{"trigger": "I-IllegalStateException\tinit", "contents": "IllegalStateException ${1:exception} = new IllegalStateException($2);"},
		{"trigger": "I-IllegalThreadStateException\tinit", "contents": "IllegalThreadStateException ${1:exception} = new IllegalThreadStateException($2);"},
		{"trigger": "I-IllformedLocaleException\tinit", "contents": "IllformedLocaleException ${1:exception} = new IllformedLocaleException($2);"},
		{"trigger": "I-Image\tinit", "contents": "Image ${1:image} = new Image($2);"},
		{"trigger": "I-ImageCache\tinit", "contents": "ImageCache ${1:cache} = new ImageCache($2);"},
		{"trigger": "I-ImageCapabilities\tinit", "contents": "ImageCapabilities ${1:capabilities} = new ImageCapabilities($2);"},
		{"trigger": "I-ImageConsumer\tinit", "contents": "ImageConsumer ${1:consumer} = new ImageConsumer($2);"},
		{"trigger": "I-ImageCursor\tinit", "contents": "ImageCursor ${1:cursor} = new ImageCursor($2);"},
		{"trigger": "I-ImageCursorBuilder\tinit", "contents": "ImageCursorBuilder ${1:builder} = new ImageCursorBuilder($2);"},
		{"trigger": "I-ImageCursorFrame\tinit", "contents": "ImageCursorFrame ${1:frame} = new ImageCursorFrame($2);"},
		{"trigger": "I-ImageData\tinit", "contents": "ImageData ${1:data} = new ImageData($2);"},
		{"trigger": "I-ImageDataRenderer\tinit", "contents": "ImageDataRenderer ${1:renderer} = new ImageDataRenderer($2);"},
		{"trigger": "I-ImageDescriptor\tinit", "contents": "ImageDescriptor ${1:descriptor} = new ImageDescriptor($2);"},
		{"trigger": "I-ImageFilter\tinit", "contents": "ImageFilter ${1:filter} = new ImageFilter($2);"},
		{"trigger": "I-ImageFormatDescription\tinit", "contents": "ImageFormatDescription ${1:description} = new ImageFormatDescription($2);"},
		{"trigger": "I-ImageFormatException\tinit", "contents": "ImageFormatException ${1:exception} = new ImageFormatException($2);"},
		{"trigger": "I-ImageFrame\tinit", "contents": "ImageFrame ${1:frame} = new ImageFrame($2);"},
		{"trigger": "I-ImageGraphicAttribute\tinit", "contents": "ImageGraphicAttribute ${1:attribute} = new ImageGraphicAttribute($2);"},
		{"trigger": "I-ImageIO\tinit", "contents": "ImageIO ${1:imageio} = new ImageIO($2);"},
		{"trigger": "I-ImageIcon\tinit", "contents": "ImageIcon ${1:icon} = new ImageIcon($2);"},
		{"trigger": "I-ImageInput\tinit", "contents": "ImageInput ${1:input} = new ImageInput($2);"},
		{"trigger": "I-ImageInputBuilder\tinit", "contents": "ImageInputBuilder ${1:builder} = new ImageInputBuilder($2);"},
		{"trigger": "I-ImageInputStream\tinit", "contents": "ImageInputStream ${1:stream} = new ImageInputStream($2);"},
		{"trigger": "I-ImageInputStreamImpl\tinit", "contents": "ImageInputStreamImpl ${1:impl} = new ImageInputStreamImpl($2);"},
		{"trigger": "I-ImageInputStreamSpi\tinit", "contents": "ImageInputStreamSpi ${1:spi} = new ImageInputStreamSpi($2);"},
		{"trigger": "I-ImageLoadListener\tinit", "contents": "ImageLoadListener ${1:listener} = new ImageLoadListener($2);"},
		{"trigger": "I-ImageLoader\tinit", "contents": "ImageLoader ${1:loader} = new ImageLoader($2);"},
		{"trigger": "I-ImageLoaderFactory\tinit", "contents": "ImageLoaderFactory ${1:factory} = new ImageLoaderFactory($2);"},
		{"trigger": "I-ImageLoaderImpl\tinit", "contents": "ImageLoaderImpl ${1:impl} = new ImageLoaderImpl($2);"},
		{"trigger": "I-ImageMetadata\tinit", "contents": "ImageMetadata ${1:metadata} = new ImageMetadata($2);"},
		{"trigger": "I-ImageObserver\tinit", "contents": "ImageObserver ${1:observer} = new ImageObserver($2);"},
		{"trigger": "I-ImageOutputStream\tinit", "contents": "ImageOutputStream ${1:stream} = new ImageOutputStream($2);"},
		{"trigger": "I-ImageOutputStreamImpl\tinit", "contents": "ImageOutputStreamImpl ${1:impl} = new ImageOutputStreamImpl($2);"},
		{"trigger": "I-ImageOutputStreamSpi\tinit", "contents": "ImageOutputStreamSpi ${1:spi} = new ImageOutputStreamSpi($2);"},
		{"trigger": "I-ImagePainter\tinit", "contents": "ImagePainter ${1:painter} = new ImagePainter($2);"},
		{"trigger": "I-ImagePattern\tinit", "contents": "ImagePattern ${1:pattern} = new ImagePattern($2);"},
		{"trigger": "I-ImagePatternBuilder\tinit", "contents": "ImagePatternBuilder ${1:builder} = new ImagePatternBuilder($2);"},
		{"trigger": "I-ImagePool\tinit", "contents": "ImagePool ${1:pool} = new ImagePool($2);"},
		{"trigger": "I-ImageProducer\tinit", "contents": "ImageProducer ${1:producer} = new ImageProducer($2);"},
		{"trigger": "I-ImageReadParam\tinit", "contents": "ImageReadParam ${1:param} = new ImageReadParam($2);"},
		{"trigger": "I-ImageReader\tinit", "contents": "ImageReader ${1:reader} = new ImageReader($2);"},
		{"trigger": "I-ImageReaderSpi\tinit", "contents": "ImageReaderSpi ${1:spi} = new ImageReaderSpi($2);"},
		{"trigger": "I-ImageReaderWriterSpi\tinit", "contents": "ImageReaderWriterSpi ${1:spi} = new ImageReaderWriterSpi($2);"},
		{"trigger": "I-ImageScalingHelper\tinit", "contents": "ImageScalingHelper ${1:helper} = new ImageScalingHelper($2);"},
		{"trigger": "I-ImageStorage\tinit", "contents": "ImageStorage ${1:storage} = new ImageStorage($2);"},
		{"trigger": "I-ImageStorageException\tinit", "contents": "ImageStorageException ${1:exception} = new ImageStorageException($2);"},
		{"trigger": "I-ImageTools\tinit", "contents": "ImageTools ${1:tools} = new ImageTools($2);"},
		{"trigger": "I-ImageTranscoder\tinit", "contents": "ImageTranscoder ${1:transcoder} = new ImageTranscoder($2);"},
		{"trigger": "I-ImageTranscoderSpi\tinit", "contents": "ImageTranscoderSpi ${1:spi} = new ImageTranscoderSpi($2);"},
		{"trigger": "I-ImageTypeSpecifier\tinit", "contents": "ImageTypeSpecifier ${1:specifier} = new ImageTypeSpecifier($2);"},
		{"trigger": "I-ImageUtil\tinit", "contents": "ImageUtil ${1:util} = new ImageUtil($2);"},
		{"trigger": "I-ImageView\tinit", "contents": "ImageView ${1:view} = new ImageView($2);"},
		{"trigger": "I-ImageViewBuilder\tinit", "contents": "ImageViewBuilder ${1:builder} = new ImageViewBuilder($2);"},
		{"trigger": "I-ImageWriteParam\tinit", "contents": "ImageWriteParam ${1:param} = new ImageWriteParam($2);"},
		{"trigger": "I-ImageWriter\tinit", "contents": "ImageWriter ${1:writer} = new ImageWriter($2);"},
		{"trigger": "I-ImageWriterSpi\tinit", "contents": "ImageWriterSpi ${1:spi} = new ImageWriterSpi($2);"},
		{"trigger": "I-ImagingOpException\tinit", "contents": "ImagingOpException ${1:exception} = new ImagingOpException($2);"},
		{"trigger": "I-ImmutableDescriptor\tinit", "contents": "ImmutableDescriptor ${1:descriptor} = new ImmutableDescriptor($2);"},
		{"trigger": "I-ImmutableObservableList\tinit", "contents": "ImmutableObservableList ${1:list} = new ImmutableObservableList($2);"},
		{"trigger": "I-ImplicitActivationPolicy\tinit", "contents": "ImplicitActivationPolicy ${1:policy} = new ImplicitActivationPolicy($2);"},
		{"trigger": "I-ImplicitActivationPolicyOperations\tinit", "contents": "ImplicitActivationPolicyOperations ${1:operations} = new ImplicitActivationPolicyOperations($2);"},
		{"trigger": "I-ImplicitActivationPolicyValue\tinit", "contents": "ImplicitActivationPolicyValue ${1:value} = new ImplicitActivationPolicyValue($2);"},
		{"trigger": "I-Import\tinit", "contents": "Import ${1:import} = new Import($2);"},
		{"trigger": "I-ImportTree\tinit", "contents": "ImportTree ${1:tree} = new ImportTree($2);"},
		{"trigger": "I-InMemoryCookieStore\tinit", "contents": "InMemoryCookieStore ${1:store} = new InMemoryCookieStore($2);"},
		{"trigger": "I-InQueryExp\tinit", "contents": "InQueryExp ${1:exp} = new InQueryExp($2);"},
		{"trigger": "I-Include\tinit", "contents": "Include ${1:include} = new Include($2);"},
		{"trigger": "I-InclusiveNamespaces\tinit", "contents": "InclusiveNamespaces ${1:namespaces} = new InclusiveNamespaces($2);"},
		{"trigger": "I-IncompatibleClassChangeError\tinit", "contents": "IncompatibleClassChangeError ${1:error} = new IncompatibleClassChangeError($2);"},
		{"trigger": "I-IncompleteAnnotationException\tinit", "contents": "IncompleteAnnotationException ${1:exception} = new IncompleteAnnotationException($2);"},
		{"trigger": "I-InconsistentTypeCode\tinit", "contents": "InconsistentTypeCode ${1:code} = new InconsistentTypeCode($2);"},
		{"trigger": "I-InconsistentTypeCodeHelper\tinit", "contents": "InconsistentTypeCodeHelper ${1:helper} = new InconsistentTypeCodeHelper($2);"},
		{"trigger": "I-IncrementalSAXSource\tinit", "contents": "IncrementalSAXSource ${1:source} = new IncrementalSAXSource($2);"},
		{"trigger": "I-IncrementalSAXSource_Filter\tinit", "contents": "IncrementalSAXSource_Filter ${1:filter} = new IncrementalSAXSource_Filter($2);"},
		{"trigger": "I-IncrementalSAXSource_Xerces\tinit", "contents": "IncrementalSAXSource_Xerces ${1:xerces} = new IncrementalSAXSource_Xerces($2);"},
		{"trigger": "I-IndentPrinter\tinit", "contents": "IndentPrinter ${1:printer} = new IndentPrinter($2);"},
		{"trigger": "I-IndexColorModel\tinit", "contents": "IndexColorModel ${1:model} = new IndexColorModel($2);"},
		{"trigger": "I-IndexOutOfBoundsException\tinit", "contents": "IndexOutOfBoundsException ${1:exception} = new IndexOutOfBoundsException($2);"},
		{"trigger": "I-IndexRange\tinit", "contents": "IndexRange ${1:range} = new IndexRange($2);"},
		{"trigger": "I-IndexRangeBuilder\tinit", "contents": "IndexRangeBuilder ${1:builder} = new IndexRangeBuilder($2);"},
		{"trigger": "I-IndexedCell\tinit", "contents": "IndexedCell ${1:cell} = new IndexedCell($2);"},
		{"trigger": "I-IndexedCellBuilder\tinit", "contents": "IndexedCellBuilder ${1:builder} = new IndexedCellBuilder($2);"},
		{"trigger": "I-IndexedInstruction\tinit", "contents": "IndexedInstruction ${1:instruction} = new IndexedInstruction($2);"},
		{"trigger": "I-IndexedPropertyChangeEvent\tinit", "contents": "IndexedPropertyChangeEvent ${1:event} = new IndexedPropertyChangeEvent($2);"},
		{"trigger": "I-IndexedPropertyDescriptor\tinit", "contents": "IndexedPropertyDescriptor ${1:descriptor} = new IndexedPropertyDescriptor($2);"},
		{"trigger": "I-IndirectionException\tinit", "contents": "IndirectionException ${1:exception} = new IndirectionException($2);"},
		{"trigger": "I-Inet4Address\tinit", "contents": "Inet4Address ${1:address} = new Inet4Address($2);"},
		{"trigger": "I-Inet4AddressImpl\tinit", "contents": "Inet4AddressImpl ${1:impl} = new Inet4AddressImpl($2);"},
		{"trigger": "I-Inet6Address\tinit", "contents": "Inet6Address ${1:address} = new Inet6Address($2);"},
		{"trigger": "I-Inet6AddressImpl\tinit", "contents": "Inet6AddressImpl ${1:impl} = new Inet6AddressImpl($2);"},
		{"trigger": "I-InetAddress\tinit", "contents": "InetAddress ${1:address} = new InetAddress($2);"},
		{"trigger": "I-InetAddressAcl\tinit", "contents": "InetAddressAcl ${1:acl} = new InetAddressAcl($2);"},
		{"trigger": "I-InetAddressContainer\tinit", "contents": "InetAddressContainer ${1:container} = new InetAddressContainer($2);"},
		{"trigger": "I-InetAddressImpl\tinit", "contents": "InetAddressImpl ${1:impl} = new InetAddressImpl($2);"},
		{"trigger": "I-InetSocketAddress\tinit", "contents": "InetSocketAddress ${1:address} = new InetSocketAddress(${2:\"addr\"}, ${3:port});"},
		{"trigger": "I-InfiniteClipEnvelope\tinit", "contents": "InfiniteClipEnvelope ${1:envelope} = new InfiniteClipEnvelope($2);"},
		{"trigger": "I-Inflater\tinit", "contents": "Inflater ${1:inflater} = new Inflater($2);"},
		{"trigger": "I-InflaterInputStream\tinit", "contents": "InflaterInputStream ${1:stream} = new InflaterInputStream($2);"},
		{"trigger": "I-InflaterOutputStream\tinit", "contents": "InflaterOutputStream ${1:stream} = new InflaterOutputStream($2);"},
		{"trigger": "I-InfoFromMemberName\tinit", "contents": "InfoFromMemberName ${1:name} = new InfoFromMemberName($2);"},
		{"trigger": "I-InheritDocTree\tinit", "contents": "InheritDocTree ${1:tree} = new InheritDocTree($2);"},
		{"trigger": "I-InheritableThreadLocal\tinit", "contents": "InheritableThreadLocal ${1:local} = new InheritableThreadLocal($2);"},
		{"trigger": "I-Inherited\tinit", "contents": "Inherited ${1:inherited} = new Inherited($2);"},
		{"trigger": "I-Init\tinit", "contents": "Init ${1:init} = new Init($2);"},
		{"trigger": "I-InitialContext\tinit", "contents": "InitialContext ${1:context} = new InitialContext($2);"},
		{"trigger": "I-InitialContextFactory\tinit", "contents": "InitialContextFactory ${1:factory} = new InitialContextFactory($2);"},
		{"trigger": "I-InitialContextFactoryBuilder\tinit", "contents": "InitialContextFactoryBuilder ${1:builder} = new InitialContextFactoryBuilder($2);"},
		{"trigger": "I-InitialDirContext\tinit", "contents": "InitialDirContext ${1:context} = new InitialDirContext($2);"},
		{"trigger": "I-InitialLdapContext\tinit", "contents": "InitialLdapContext ${1:context} = new InitialLdapContext($2);"},
		{"trigger": "I-InitialNameService\tinit", "contents": "InitialNameService ${1:service} = new InitialNameService($2);"},
		{"trigger": "I-InitialNameServiceHelper\tinit", "contents": "InitialNameServiceHelper ${1:helper} = new InitialNameServiceHelper($2);"},
		{"trigger": "I-InitialNameServiceHolder\tinit", "contents": "InitialNameServiceHolder ${1:holder} = new InitialNameServiceHolder($2);"},
		{"trigger": "I-InitialNameServiceOperations\tinit", "contents": "InitialNameServiceOperations ${1:operations} = new InitialNameServiceOperations($2);"},
		{"trigger": "I-InitialServerRequestDispatcher\tinit", "contents": "InitialServerRequestDispatcher ${1:dispatcher} = new InitialServerRequestDispatcher($2);"},
		{"trigger": "I-Initializable\tinit", "contents": "Initializable ${1:initializable} = new Initializable($2);"},
		{"trigger": "I-InlineTagTree\tinit", "contents": "InlineTagTree ${1:tree} = new InlineTagTree($2);"},
		{"trigger": "I-InlineView\tinit", "contents": "InlineView ${1:view} = new InlineView($2);"},
		{"trigger": "I-InnerClass\tinit", "contents": "InnerClass ${1:class} = new InnerClass($2);"},
		{"trigger": "I-InnerClassLambdaMetafactory\tinit", "contents": "InnerClassLambdaMetafactory ${1:metafactory} = new InnerClassLambdaMetafactory($2);"},
		{"trigger": "I-InnerClasses\tinit", "contents": "InnerClasses ${1:classes} = new InnerClasses($2);"},
		{"trigger": "I-InnerGlowEffect\tinit", "contents": "InnerGlowEffect ${1:effect} = new InnerGlowEffect($2);"},
		{"trigger": "I-InnerShadow\tinit", "contents": "InnerShadow ${1:shadow} = new InnerShadow($2);"},
		{"trigger": "I-InnerShadowBuilder\tinit", "contents": "InnerShadowBuilder ${1:builder} = new InnerShadowBuilder($2);"},
		{"trigger": "I-InnerShadowEffect\tinit", "contents": "InnerShadowEffect ${1:effect} = new InnerShadowEffect($2);"},
		{"trigger": "I-Input\tinit", "contents": "Input ${1:input} = new Input($2);"},
		{"trigger": "I-InputContext\tinit", "contents": "InputContext ${1:context} = new InputContext($2);"},
		{"trigger": "I-InputDevice\tinit", "contents": "InputDevice ${1:device} = new InputDevice($2);"},
		{"trigger": "I-InputDeviceRegistry\tinit", "contents": "InputDeviceRegistry ${1:registry} = new InputDeviceRegistry($2);"},
		{"trigger": "I-InputEvent\tinit", "contents": "InputEvent ${1:event} = new InputEvent($2);"},
		{"trigger": "I-InputEventUtils\tinit", "contents": "InputEventUtils ${1:utils} = new InputEventUtils($2);"},
		{"trigger": "I-InputField\tinit", "contents": "InputField ${1:field} = new InputField($2);"},
		{"trigger": "I-InputFieldSkin\tinit", "contents": "InputFieldSkin ${1:skin} = new InputFieldSkin($2);"},
		{"trigger": "I-InputImpl\tinit", "contents": "InputImpl ${1:impl} = new InputImpl($2);"},
		{"trigger": "I-InputMap\tinit", "contents": "InputMap ${1:map} = new InputMap($2);"},
		{"trigger": "I-InputMapUIResource\tinit", "contents": "InputMapUIResource ${1:resource} = new InputMapUIResource($2);"},
		{"trigger": "I-InputMethod\tinit", "contents": "InputMethod ${1:method} = new InputMethod($2);"},
		{"trigger": "I-InputMethodClient\tinit", "contents": "InputMethodClient ${1:client} = new InputMethodClient($2);"},
		{"trigger": "I-InputMethodClientImpl\tinit", "contents": "InputMethodClientImpl ${1:impl} = new InputMethodClientImpl($2);"},
		{"trigger": "I-InputMethodContext\tinit", "contents": "InputMethodContext ${1:context} = new InputMethodContext($2);"},
		{"trigger": "I-InputMethodDescriptor\tinit", "contents": "InputMethodDescriptor ${1:descriptor} = new InputMethodDescriptor($2);"},
		{"trigger": "I-InputMethodEvent\tinit", "contents": "InputMethodEvent ${1:event} = new InputMethodEvent($2);"},
		{"trigger": "I-InputMethodHighlight\tinit", "contents": "InputMethodHighlight ${1:highlight} = new InputMethodHighlight($2);"},
		{"trigger": "I-InputMethodListener\tinit", "contents": "InputMethodListener ${1:listener} = new InputMethodListener($2);"},
		{"trigger": "I-InputMethodRequests\tinit", "contents": "InputMethodRequests ${1:requests} = new InputMethodRequests($2);"},
		{"trigger": "I-InputMethodSupport\tinit", "contents": "InputMethodSupport ${1:support} = new InputMethodSupport($2);"},
		{"trigger": "I-InputMethodTextRun\tinit", "contents": "InputMethodTextRun ${1:run} = new InputMethodTextRun($2);"},
		{"trigger": "I-InputMismatchException\tinit", "contents": "InputMismatchException ${1:exception} = new InputMismatchException($2);"},
		{"trigger": "I-InputSource\tinit", "contents": "InputSource ${1:source} = new InputSource($2);"},
		{"trigger": "I-InputStream\tinit", "contents": "InputStream ${1:stream} = new InputStream($2);"},
		{"trigger": "I-InputStreamAdapter\tinit", "contents": "InputStreamAdapter ${1:adapter} = new InputStreamAdapter($2);"},
		{"trigger": "I-InputStreamImageInputStreamSpi\tinit", "contents": "InputStreamImageInputStreamSpi ${1:spi} = new InputStreamImageInputStreamSpi($2);"},
		{"trigger": "I-InputStreamReader\tinit", "contents": "InputStreamReader ${1:reader} = new InputStreamReader($2);"},
		{"trigger": "I-InputSubset\tinit", "contents": "InputSubset ${1:subset} = new InputSubset($2);"},
		{"trigger": "I-InputVerifier\tinit", "contents": "InputVerifier ${1:verifier} = new InputVerifier($2);"},
		{"trigger": "I-InquireSecContextPermission\tinit", "contents": "InquireSecContextPermission ${1:permission} = new InquireSecContextPermission($2);"},
		{"trigger": "I-InquireType\tinit", "contents": "InquireType ${1:type} = new InquireType($2);"},
		{"trigger": "I-Insets\tinit", "contents": "Insets ${1:insets} = new Insets($2);"},
		{"trigger": "I-InsetsBuilder\tinit", "contents": "InsetsBuilder ${1:builder} = new InsetsBuilder($2);"},
		{"trigger": "I-InsetsConverter\tinit", "contents": "InsetsConverter ${1:converter} = new InsetsConverter($2);"},
		{"trigger": "I-InsetsUIResource\tinit", "contents": "InsetsUIResource ${1:resource} = new InsetsUIResource($2);"},
		{"trigger": "I-InspectorClient\tinit", "contents": "InspectorClient ${1:client} = new InspectorClient($2);"},
		{"trigger": "I-InstanceAlreadyExistsException\tinit", "contents": "InstanceAlreadyExistsException ${1:exception} = new InstanceAlreadyExistsException($2);"},
		{"trigger": "I-InstanceNotFoundException\tinit", "contents": "InstanceNotFoundException ${1:exception} = new InstanceNotFoundException($2);"},
		{"trigger": "I-InstanceOfQueryExp\tinit", "contents": "InstanceOfQueryExp ${1:exp} = new InstanceOfQueryExp($2);"},
		{"trigger": "I-InstanceOfTree\tinit", "contents": "InstanceOfTree ${1:tree} = new InstanceOfTree($2);"},
		{"trigger": "I-Instant\tinit", "contents": "Instant ${1:instant} = new Instant($2);"},
		{"trigger": "I-InstantiationError\tinit", "contents": "InstantiationError ${1:error} = new InstantiationError($2);"},
		{"trigger": "I-InstantiationException\tinit", "contents": "InstantiationException ${1:exception} = new InstantiationException($2);"},
		{"trigger": "I-Instruction\tinit", "contents": "Instruction ${1:instruction} = new Instruction($2);"},
		{"trigger": "I-InstructionComparator\tinit", "contents": "InstructionComparator ${1:comparator} = new InstructionComparator($2);"},
		{"trigger": "I-InstructionConstants\tinit", "contents": "InstructionConstants ${1:constants} = new InstructionConstants($2);"},
		{"trigger": "I-InstructionFactory\tinit", "contents": "InstructionFactory ${1:factory} = new InstructionFactory($2);"},
		{"trigger": "I-InstructionFinder\tinit", "contents": "InstructionFinder ${1:finder} = new InstructionFinder($2);"},
		{"trigger": "I-InstructionHandle\tinit", "contents": "InstructionHandle ${1:handle} = new InstructionHandle($2);"},
		{"trigger": "I-InstructionList\tinit", "contents": "InstructionList ${1:list} = new InstructionList($2);"},
		{"trigger": "I-InstructionListObserver\tinit", "contents": "InstructionListObserver ${1:observer} = new InstructionListObserver($2);"},
		{"trigger": "I-InstructionTargeter\tinit", "contents": "InstructionTargeter ${1:targeter} = new InstructionTargeter($2);"},
		{"trigger": "I-Instrument\tinit", "contents": "Instrument ${1:instrument} = new Instrument($2);"},
		{"trigger": "I-Instrumentation\tinit", "contents": "Instrumentation ${1:instrumentation} = new Instrumentation($2);"},
		{"trigger": "I-InsufficientResourcesException\tinit", "contents": "InsufficientResourcesException ${1:exception} = new InsufficientResourcesException($2);"},
		{"trigger": "I-IntArgb\tinit", "contents": "IntArgb ${1:argb} = new IntArgb($2);"},
		{"trigger": "I-IntArgbPre\tinit", "contents": "IntArgbPre ${1:pre} = new IntArgbPre($2);"},
		{"trigger": "I-IntArrayWrapper\tinit", "contents": "IntArrayWrapper ${1:wrapper} = new IntArrayWrapper($2);"},
		{"trigger": "I-IntBinaryOperator\tinit", "contents": "IntBinaryOperator ${1:operator} = new IntBinaryOperator($2);"},
		{"trigger": "I-IntBuffer\tinit", "contents": "IntBuffer ${1:buffer} = new IntBuffer($2);"},
		{"trigger": "I-IntConsumer\tinit", "contents": "IntConsumer ${1:consumer} = new IntConsumer($2);"},
		{"trigger": "I-IntExpr\tinit", "contents": "IntExpr ${1:expr} = new IntExpr($2);"},
		{"trigger": "I-IntFunction\tinit", "contents": "IntFunction ${1:function} = new IntFunction($2);"},
		{"trigger": "I-IntHolder\tinit", "contents": "IntHolder ${1:holder} = new IntHolder($2);"},
		{"trigger": "I-IntPipeline\tinit", "contents": "IntPipeline ${1:pipeline} = new IntPipeline($2);"},
		{"trigger": "I-IntPixelAccessor\tinit", "contents": "IntPixelAccessor ${1:accessor} = new IntPixelAccessor($2);"},
		{"trigger": "I-IntPixelGetter\tinit", "contents": "IntPixelGetter ${1:getter} = new IntPixelGetter($2);"},
		{"trigger": "I-IntPixelSetter\tinit", "contents": "IntPixelSetter ${1:setter} = new IntPixelSetter($2);"},
		{"trigger": "I-IntPredicate\tinit", "contents": "IntPredicate ${1:predicate} = new IntPredicate($2);"},
		{"trigger": "I-IntSet\tinit", "contents": "IntSet ${1:set} = new IntSet($2);"},
		{"trigger": "I-IntStack\tinit", "contents": "IntStack ${1:stack} = new IntStack($2);"},
		{"trigger": "I-IntStream\tinit", "contents": "IntStream ${1:stream} = new IntStream($2);"},
		{"trigger": "I-IntSummaryStatistics\tinit", "contents": "IntSummaryStatistics ${1:statistics} = new IntSummaryStatistics($2);"},
		{"trigger": "I-IntSupplier\tinit", "contents": "IntSupplier ${1:supplier} = new IntSupplier($2);"},
		{"trigger": "I-IntTo4ByteSameConverter\tinit", "contents": "IntTo4ByteSameConverter ${1:converter} = new IntTo4ByteSameConverter($2);"},
		{"trigger": "I-IntToBytePixelConverter\tinit", "contents": "IntToBytePixelConverter ${1:converter} = new IntToBytePixelConverter($2);"},
		{"trigger": "I-IntToDoubleFunction\tinit", "contents": "IntToDoubleFunction ${1:function} = new IntToDoubleFunction($2);"},
		{"trigger": "I-IntToIntPixelConverter\tinit", "contents": "IntToIntPixelConverter ${1:converter} = new IntToIntPixelConverter($2);"},
		{"trigger": "I-IntToLongFunction\tinit", "contents": "IntToLongFunction ${1:function} = new IntToLongFunction($2);"},
		{"trigger": "I-IntType\tinit", "contents": "IntType ${1:type} = new IntType($2);"},
		{"trigger": "I-IntUnaryOperator\tinit", "contents": "IntUnaryOperator ${1:operator} = new IntUnaryOperator($2);"},
		{"trigger": "I-IntVector\tinit", "contents": "IntVector ${1:vector} = new IntVector($2);"},
		{"trigger": "I-Integer\tinit", "contents": "Integer ${1:integer} = new Integer($2);"},
		{"trigger": "I-IntegerArray\tinit", "contents": "IntegerArray ${1:array} = new IntegerArray($2);"},
		{"trigger": "I-IntegerArraySyncer\tinit", "contents": "IntegerArraySyncer ${1:syncer} = new IntegerArraySyncer($2);"},
		{"trigger": "I-IntegerBinding\tinit", "contents": "IntegerBinding ${1:binding} = new IntegerBinding($2);"},
		{"trigger": "I-IntegerConstant\tinit", "contents": "IntegerConstant ${1:constant} = new IntegerConstant($2);"},
		{"trigger": "I-IntegerDV\tinit", "contents": "IntegerDV ${1:integerdv} = new IntegerDV($2);"},
		{"trigger": "I-IntegerExpression\tinit", "contents": "IntegerExpression ${1:expression} = new IntegerExpression($2);"},
		{"trigger": "I-IntegerField\tinit", "contents": "IntegerField ${1:field} = new IntegerField($2);"},
		{"trigger": "I-IntegerFieldSkin\tinit", "contents": "IntegerFieldSkin ${1:skin} = new IntegerFieldSkin($2);"},
		{"trigger": "I-IntegerProperty\tinit", "contents": "IntegerProperty ${1:property} = new IntegerProperty($2);"},
		{"trigger": "I-IntegerPropertyBase\tinit", "contents": "IntegerPropertyBase ${1:base} = new IntegerPropertyBase($2);"},
		{"trigger": "I-IntegerStringConverter\tinit", "contents": "IntegerStringConverter ${1:converter} = new IntegerStringConverter($2);"},
		{"trigger": "I-IntegerSyntax\tinit", "contents": "IntegerSyntax ${1:syntax} = new IntegerSyntax($2);"},
		{"trigger": "I-IntegratedParserConfiguration\tinit", "contents": "IntegratedParserConfiguration ${1:configuration} = new IntegratedParserConfiguration($2);"},
		{"trigger": "I-IntegrityHmac\tinit", "contents": "IntegrityHmac ${1:hmac} = new IntegrityHmac($2);"},
		{"trigger": "I-Interceptor\tinit", "contents": "Interceptor ${1:interceptor} = new Interceptor($2);"},
		{"trigger": "I-InterceptorOperations\tinit", "contents": "InterceptorOperations ${1:operations} = new InterceptorOperations($2);"},
		{"trigger": "I-InterfaceAddress\tinit", "contents": "InterfaceAddress ${1:address} = new InterfaceAddress($2);"},
		{"trigger": "I-InternalError\tinit", "contents": "InternalError ${1:error} = new InternalError($2);"},
		{"trigger": "I-InternalFrameAdapter\tinit", "contents": "InternalFrameAdapter ${1:adapter} = new InternalFrameAdapter($2);"},
		{"trigger": "I-InternalFrameEvent\tinit", "contents": "InternalFrameEvent ${1:event} = new InternalFrameEvent($2);"},
		{"trigger": "I-InternalFrameFocusTraversalPolicy\tinit", "contents": "InternalFrameFocusTraversalPolicy ${1:policy} = new InternalFrameFocusTraversalPolicy($2);"},
		{"trigger": "I-InternalFrameListener\tinit", "contents": "InternalFrameListener ${1:listener} = new InternalFrameListener($2);"},
		{"trigger": "I-InternalFramePainter\tinit", "contents": "InternalFramePainter ${1:painter} = new InternalFramePainter($2);"},
		{"trigger": "I-InternalFrameTitlePaneCloseButtonPainter\tinit", "contents": "InternalFrameTitlePaneCloseButtonPainter ${1:painter} = new InternalFrameTitlePaneCloseButtonPainter($2);"},
		{"trigger": "I-InternalFrameTitlePaneCloseButtonWindowNotFocusedState\tinit", "contents": "InternalFrameTitlePaneCloseButtonWindowNotFocusedState ${1:state} = new InternalFrameTitlePaneCloseButtonWindowNotFocusedState($2);"},
		{"trigger": "I-InternalFrameTitlePaneIconifyButtonPainter\tinit", "contents": "InternalFrameTitlePaneIconifyButtonPainter ${1:painter} = new InternalFrameTitlePaneIconifyButtonPainter($2);"},
		{"trigger": "I-InternalFrameTitlePaneIconifyButtonWindowNotFocusedState\tinit", "contents": "InternalFrameTitlePaneIconifyButtonWindowNotFocusedState ${1:state} = new InternalFrameTitlePaneIconifyButtonWindowNotFocusedState($2);"},
		{"trigger": "I-InternalFrameTitlePaneMaximizeButtonPainter\tinit", "contents": "InternalFrameTitlePaneMaximizeButtonPainter ${1:painter} = new InternalFrameTitlePaneMaximizeButtonPainter($2);"},
		{"trigger": "I-InternalFrameTitlePaneMaximizeButtonWindowMaximizedState\tinit", "contents": "InternalFrameTitlePaneMaximizeButtonWindowMaximizedState ${1:state} = new InternalFrameTitlePaneMaximizeButtonWindowMaximizedState($2);"},
		{"trigger": "I-InternalFrameTitlePaneMaximizeButtonWindowNotFocusedState\tinit", "contents": "InternalFrameTitlePaneMaximizeButtonWindowNotFocusedState ${1:state} = new InternalFrameTitlePaneMaximizeButtonWindowNotFocusedState($2);"},
		{"trigger": "I-InternalFrameTitlePaneMenuButtonPainter\tinit", "contents": "InternalFrameTitlePaneMenuButtonPainter ${1:painter} = new InternalFrameTitlePaneMenuButtonPainter($2);"},
		{"trigger": "I-InternalFrameTitlePaneMenuButtonWindowNotFocusedState\tinit", "contents": "InternalFrameTitlePaneMenuButtonWindowNotFocusedState ${1:state} = new InternalFrameTitlePaneMenuButtonWindowNotFocusedState($2);"},
		{"trigger": "I-InternalFrameTitlePanePainter\tinit", "contents": "InternalFrameTitlePanePainter ${1:painter} = new InternalFrameTitlePanePainter($2);"},
		{"trigger": "I-InternalFrameTitlePaneWindowFocusedState\tinit", "contents": "InternalFrameTitlePaneWindowFocusedState ${1:state} = new InternalFrameTitlePaneWindowFocusedState($2);"},
		{"trigger": "I-InternalFrameUI\tinit", "contents": "InternalFrameUI ${1:internalframeui} = new InternalFrameUI($2);"},
		{"trigger": "I-InternalFrameWindowFocusedState\tinit", "contents": "InternalFrameWindowFocusedState ${1:state} = new InternalFrameWindowFocusedState($2);"},
		{"trigger": "I-InternalRuntimeError\tinit", "contents": "InternalRuntimeError ${1:error} = new InternalRuntimeError($2);"},
		{"trigger": "I-InternationalFormatter\tinit", "contents": "InternationalFormatter ${1:formatter} = new InternationalFormatter($2);"},
		{"trigger": "I-Interpolatable\tinit", "contents": "Interpolatable ${1:interpolatable} = new Interpolatable($2);"},
		{"trigger": "I-InterpolationInterval\tinit", "contents": "InterpolationInterval ${1:interval} = new InterpolationInterval($2);"},
		{"trigger": "I-Interpolator\tinit", "contents": "Interpolator ${1:interpolator} = new Interpolator($2);"},
		{"trigger": "I-InterruptedByTimeoutException\tinit", "contents": "InterruptedByTimeoutException ${1:exception} = new InterruptedByTimeoutException($2);"},
		{"trigger": "I-InterruptedException\tinit", "contents": "InterruptedException ${1:exception} = new InterruptedException($2);"},
		{"trigger": "I-InterruptedIOException\tinit", "contents": "InterruptedIOException ${1:exception} = new InterruptedIOException($2);"},
		{"trigger": "I-InterruptedNamingException\tinit", "contents": "InterruptedNamingException ${1:exception} = new InterruptedNamingException($2);"},
		{"trigger": "I-InterruptibleChannel\tinit", "contents": "InterruptibleChannel ${1:channel} = new InterruptibleChannel($2);"},
		{"trigger": "I-IntersectionType\tinit", "contents": "IntersectionType ${1:type} = new IntersectionType($2);"},
		{"trigger": "I-IntersectionTypeTree\tinit", "contents": "IntersectionTypeTree ${1:tree} = new IntersectionTypeTree($2);"},
		{"trigger": "I-IntrospectionException\tinit", "contents": "IntrospectionException ${1:exception} = new IntrospectionException($2);"},
		{"trigger": "I-Introspector\tinit", "contents": "Introspector ${1:introspector} = new Introspector($2);"},
		{"trigger": "I-Invalid\tinit", "contents": "Invalid ${1:invalid} = new Invalid($2);"},
		{"trigger": "I-InvalidAddress\tinit", "contents": "InvalidAddress ${1:address} = new InvalidAddress($2);"},
		{"trigger": "I-InvalidAddressHelper\tinit", "contents": "InvalidAddressHelper ${1:helper} = new InvalidAddressHelper($2);"},
		{"trigger": "I-InvalidAddressHolder\tinit", "contents": "InvalidAddressHolder ${1:holder} = new InvalidAddressHolder($2);"},
		{"trigger": "I-InvalidAlgorithmParameterException\tinit", "contents": "InvalidAlgorithmParameterException ${1:exception} = new InvalidAlgorithmParameterException($2);"},
		{"trigger": "I-InvalidApplicationException\tinit", "contents": "InvalidApplicationException ${1:exception} = new InvalidApplicationException($2);"},
		{"trigger": "I-InvalidAttributeIdentifierException\tinit", "contents": "InvalidAttributeIdentifierException ${1:exception} = new InvalidAttributeIdentifierException($2);"},
		{"trigger": "I-InvalidAttributeValueException\tinit", "contents": "InvalidAttributeValueException ${1:exception} = new InvalidAttributeValueException($2);"},
		{"trigger": "I-InvalidAttributesException\tinit", "contents": "InvalidAttributesException ${1:exception} = new InvalidAttributesException($2);"},
		{"trigger": "I-InvalidCanonicalizerException\tinit", "contents": "InvalidCanonicalizerException ${1:exception} = new InvalidCanonicalizerException($2);"},
		{"trigger": "I-InvalidClassException\tinit", "contents": "InvalidClassException ${1:exception} = new InvalidClassException($2);"},
		{"trigger": "I-InvalidDatatypeFacetException\tinit", "contents": "InvalidDatatypeFacetException ${1:exception} = new InvalidDatatypeFacetException($2);"},
		{"trigger": "I-InvalidDatatypeValueException\tinit", "contents": "InvalidDatatypeValueException ${1:exception} = new InvalidDatatypeValueException($2);"},
		{"trigger": "I-InvalidDigestValueException\tinit", "contents": "InvalidDigestValueException ${1:exception} = new InvalidDigestValueException($2);"},
		{"trigger": "I-InvalidDnDOperationException\tinit", "contents": "InvalidDnDOperationException ${1:exception} = new InvalidDnDOperationException($2);"},
		{"trigger": "I-InvalidKeyException\tinit", "contents": "InvalidKeyException ${1:exception} = new InvalidKeyException($2);"},
		{"trigger": "I-InvalidKeyResolverException\tinit", "contents": "InvalidKeyResolverException ${1:exception} = new InvalidKeyResolverException($2);"},
		{"trigger": "I-InvalidKeySpecException\tinit", "contents": "InvalidKeySpecException ${1:exception} = new InvalidKeySpecException($2);"},
		{"trigger": "I-InvalidMarkException\tinit", "contents": "InvalidMarkException ${1:exception} = new InvalidMarkException($2);"},
		{"trigger": "I-InvalidMidiDataException\tinit", "contents": "InvalidMidiDataException ${1:exception} = new InvalidMidiDataException($2);"},
		{"trigger": "I-InvalidName\tinit", "contents": "InvalidName ${1:name} = new InvalidName($2);"},
		{"trigger": "I-InvalidNameException\tinit", "contents": "InvalidNameException ${1:exception} = new InvalidNameException($2);"},
		{"trigger": "I-InvalidNameHelper\tinit", "contents": "InvalidNameHelper ${1:helper} = new InvalidNameHelper($2);"},
		{"trigger": "I-InvalidNameHolder\tinit", "contents": "InvalidNameHolder ${1:holder} = new InvalidNameHolder($2);"},
		{"trigger": "I-InvalidORBid\tinit", "contents": "InvalidORBid ${1:bid} = new InvalidORBid($2);"},
		{"trigger": "I-InvalidORBidHelper\tinit", "contents": "InvalidORBidHelper ${1:helper} = new InvalidORBidHelper($2);"},
		{"trigger": "I-InvalidORBidHolder\tinit", "contents": "InvalidORBidHolder ${1:holder} = new InvalidORBidHolder($2);"},
		{"trigger": "I-InvalidObjectException\tinit", "contents": "InvalidObjectException ${1:exception} = new InvalidObjectException($2);"},
		{"trigger": "I-InvalidOpenTypeException\tinit", "contents": "InvalidOpenTypeException ${1:exception} = new InvalidOpenTypeException($2);"},
		{"trigger": "I-InvalidParameterException\tinit", "contents": "InvalidParameterException ${1:exception} = new InvalidParameterException($2);"},
		{"trigger": "I-InvalidParameterSpecException\tinit", "contents": "InvalidParameterSpecException ${1:exception} = new InvalidParameterSpecException($2);"},
		{"trigger": "I-InvalidPathException\tinit", "contents": "InvalidPathException ${1:exception} = new InvalidPathException($2);"},
		{"trigger": "I-InvalidPolicy\tinit", "contents": "InvalidPolicy ${1:policy} = new InvalidPolicy($2);"},
		{"trigger": "I-InvalidPolicyHelper\tinit", "contents": "InvalidPolicyHelper ${1:helper} = new InvalidPolicyHelper($2);"},
		{"trigger": "I-InvalidPreferencesFormatException\tinit", "contents": "InvalidPreferencesFormatException ${1:exception} = new InvalidPreferencesFormatException($2);"},
		{"trigger": "I-InvalidPropertiesFormatException\tinit", "contents": "InvalidPropertiesFormatException ${1:exception} = new InvalidPropertiesFormatException($2);"},
		{"trigger": "I-InvalidRelationIdException\tinit", "contents": "InvalidRelationIdException ${1:exception} = new InvalidRelationIdException($2);"},
		{"trigger": "I-InvalidRelationServiceException\tinit", "contents": "InvalidRelationServiceException ${1:exception} = new InvalidRelationServiceException($2);"},
		{"trigger": "I-InvalidRelationTypeException\tinit", "contents": "InvalidRelationTypeException ${1:exception} = new InvalidRelationTypeException($2);"},
		{"trigger": "I-InvalidRoleInfoException\tinit", "contents": "InvalidRoleInfoException ${1:exception} = new InvalidRoleInfoException($2);"},
		{"trigger": "I-InvalidRoleValueException\tinit", "contents": "InvalidRoleValueException ${1:exception} = new InvalidRoleValueException($2);"},
		{"trigger": "I-InvalidSearchControlsException\tinit", "contents": "InvalidSearchControlsException ${1:exception} = new InvalidSearchControlsException($2);"},
		{"trigger": "I-InvalidSearchFilterException\tinit", "contents": "InvalidSearchFilterException ${1:exception} = new InvalidSearchFilterException($2);"},
		{"trigger": "I-InvalidSeq\tinit", "contents": "InvalidSeq ${1:seq} = new InvalidSeq($2);"},
		{"trigger": "I-InvalidSignatureValueException\tinit", "contents": "InvalidSignatureValueException ${1:exception} = new InvalidSignatureValueException($2);"},
		{"trigger": "I-InvalidSlot\tinit", "contents": "InvalidSlot ${1:slot} = new InvalidSlot($2);"},
		{"trigger": "I-InvalidSlotHelper\tinit", "contents": "InvalidSlotHelper ${1:helper} = new InvalidSlotHelper($2);"},
		{"trigger": "I-InvalidTargetObjectTypeException\tinit", "contents": "InvalidTargetObjectTypeException ${1:exception} = new InvalidTargetObjectTypeException($2);"},
		{"trigger": "I-InvalidTransformException\tinit", "contents": "InvalidTransformException ${1:exception} = new InvalidTransformException($2);"},
		{"trigger": "I-InvalidTypeForEncoding\tinit", "contents": "InvalidTypeForEncoding ${1:encoding} = new InvalidTypeForEncoding($2);"},
		{"trigger": "I-InvalidTypeForEncodingHelper\tinit", "contents": "InvalidTypeForEncodingHelper ${1:helper} = new InvalidTypeForEncodingHelper($2);"},
		{"trigger": "I-InvalidValue\tinit", "contents": "InvalidValue ${1:value} = new InvalidValue($2);"},
		{"trigger": "I-InvalidValueHelper\tinit", "contents": "InvalidValueHelper ${1:helper} = new InvalidValueHelper($2);"},
		{"trigger": "I-InvalidationListener\tinit", "contents": "InvalidationListener ${1:listener} = new InvalidationListener($2);"},
		{"trigger": "I-InvertMask\tinit", "contents": "InvertMask ${1:mask} = new InvertMask($2);"},
		{"trigger": "I-Invocable\tinit", "contents": "Invocable ${1:invocable} = new Invocable($2);"},
		{"trigger": "I-InvocationEvent\tinit", "contents": "InvocationEvent ${1:event} = new InvocationEvent($2);"},
		{"trigger": "I-InvocationHandler\tinit", "contents": "InvocationHandler ${1:handler} = new InvocationHandler($2);"},
		{"trigger": "I-InvocationHandlerFactory\tinit", "contents": "InvocationHandlerFactory ${1:factory} = new InvocationHandlerFactory($2);"},
		{"trigger": "I-InvocationTargetException\tinit", "contents": "InvocationTargetException ${1:exception} = new InvocationTargetException($2);"},
		{"trigger": "I-InvokeDynamic\tinit", "contents": "InvokeDynamic ${1:dynamic} = new InvokeDynamic($2);"},
		{"trigger": "I-InvokeHandler\tinit", "contents": "InvokeHandler ${1:handler} = new InvokeHandler($2);"},
		{"trigger": "I-InvokeInstruction\tinit", "contents": "InvokeInstruction ${1:instruction} = new InvokeInstruction($2);"},
		{"trigger": "I-InvokeLaterDispatcher\tinit", "contents": "InvokeLaterDispatcher ${1:dispatcher} = new InvokeLaterDispatcher($2);"},
		{"trigger": "I-Invoker\tinit", "contents": "Invoker ${1:invoker} = new Invoker($2);"},
		{"trigger": "I-InvokerBytecodeGenerator\tinit", "contents": "InvokerBytecodeGenerator ${1:generator} = new InvokerBytecodeGenerator($2);"},
		{"trigger": "I-Invokers\tinit", "contents": "Invokers ${1:invokers} = new Invokers($2);"},
		{"trigger": "I-IosApplication\tinit", "contents": "IosApplication ${1:application} = new IosApplication($2);"},
		{"trigger": "I-IosClipboardDelegate\tinit", "contents": "IosClipboardDelegate ${1:delegate} = new IosClipboardDelegate($2);"},
		{"trigger": "I-IosCursor\tinit", "contents": "IosCursor ${1:cursor} = new IosCursor($2);"},
		{"trigger": "I-IosDescriptor\tinit", "contents": "IosDescriptor ${1:descriptor} = new IosDescriptor($2);"},
		{"trigger": "I-IosDnDClipboard\tinit", "contents": "IosDnDClipboard ${1:clipboard} = new IosDnDClipboard($2);"},
		{"trigger": "I-IosGestureSupport\tinit", "contents": "IosGestureSupport ${1:support} = new IosGestureSupport($2);"},
		{"trigger": "I-IosImageLoader\tinit", "contents": "IosImageLoader ${1:loader} = new IosImageLoader($2);"},
		{"trigger": "I-IosImageLoaderFactory\tinit", "contents": "IosImageLoaderFactory ${1:factory} = new IosImageLoaderFactory($2);"},
		{"trigger": "I-IosMenuBarDelegate\tinit", "contents": "IosMenuBarDelegate ${1:delegate} = new IosMenuBarDelegate($2);"},
		{"trigger": "I-IosMenuDelegate\tinit", "contents": "IosMenuDelegate ${1:delegate} = new IosMenuDelegate($2);"},
		{"trigger": "I-IosPasteboard\tinit", "contents": "IosPasteboard ${1:pasteboard} = new IosPasteboard($2);"},
		{"trigger": "I-IosPixels\tinit", "contents": "IosPixels ${1:pixels} = new IosPixels($2);"},
		{"trigger": "I-IosPlatformFactory\tinit", "contents": "IosPlatformFactory ${1:factory} = new IosPlatformFactory($2);"},
		{"trigger": "I-IosRobot\tinit", "contents": "IosRobot ${1:robot} = new IosRobot($2);"},
		{"trigger": "I-IosSystemClipboard\tinit", "contents": "IosSystemClipboard ${1:clipboard} = new IosSystemClipboard($2);"},
		{"trigger": "I-IosTimer\tinit", "contents": "IosTimer ${1:timer} = new IosTimer($2);"},
		{"trigger": "I-IosView\tinit", "contents": "IosView ${1:view} = new IosView($2);"},
		{"trigger": "I-IosWindow\tinit", "contents": "IosWindow ${1:window} = new IosWindow($2);"},
		{"trigger": "I-IsindexView\tinit", "contents": "IsindexView ${1:view} = new IsindexView($2);"},
		{"trigger": "I-IsoChronology\tinit", "contents": "IsoChronology ${1:chronology} = new IsoChronology($2);"},
		{"trigger": "I-IsoEra\tinit", "contents": "IsoEra ${1:era} = new IsoEra($2);"},
		{"trigger": "I-IsoFields\tinit", "contents": "IsoFields ${1:fields} = new IsoFields($2);"},
		{"trigger": "I-IstringHelper\tinit", "contents": "IstringHelper ${1:helper} = new IstringHelper($2);"},
		{"trigger": "I-ItemEvent\tinit", "contents": "ItemEvent ${1:event} = new ItemEvent($2);"},
		{"trigger": "I-ItemListener\tinit", "contents": "ItemListener ${1:listener} = new ItemListener($2);"},
		{"trigger": "I-ItemPSVI\tinit", "contents": "ItemPSVI ${1:itempsvi} = new ItemPSVI($2);"},
		{"trigger": "I-ItemSelectable\tinit", "contents": "ItemSelectable ${1:selectable} = new ItemSelectable($2);"},
		{"trigger": "I-Iterable\tinit", "contents": "Iterable ${1:iterable} = new Iterable($2);"},
		{"trigger": "I-Iterator\tinit", "contents": "Iterator<${1:String}>${2:it} = ${3:list}.iterator();"},
		{"trigger": "I-IteratorPool\tinit", "contents": "IteratorPool ${1:pool} = new IteratorPool($2);"},
		{"trigger": "I-J2DFontFactory\tinit", "contents": "J2DFontFactory ${1:factory} = new J2DFontFactory($2);"},
		{"trigger": "I-J2DPipeline\tinit", "contents": "J2DPipeline ${1:pipeline} = new J2DPipeline($2);"},
		{"trigger": "I-J2DPresentable\tinit", "contents": "J2DPresentable ${1:presentable} = new J2DPresentable($2);"},
		{"trigger": "I-J2DPrinter\tinit", "contents": "J2DPrinter ${1:printer} = new J2DPrinter($2);"},
		{"trigger": "I-J2DPrinterJob\tinit", "contents": "J2DPrinterJob ${1:job} = new J2DPrinterJob($2);"},
		{"trigger": "I-J2DPrismGraphics\tinit", "contents": "J2DPrismGraphics ${1:graphics} = new J2DPrismGraphics($2);"},
		{"trigger": "I-J2DRTTexture\tinit", "contents": "J2DRTTexture ${1:texture} = new J2DRTTexture($2);"},
		{"trigger": "I-J2DResourceFactory\tinit", "contents": "J2DResourceFactory ${1:factory} = new J2DResourceFactory($2);"},
		{"trigger": "I-J2DTexture\tinit", "contents": "J2DTexture ${1:texture} = new J2DTexture($2);"},
		{"trigger": "I-J2DTexturePool\tinit", "contents": "J2DTexturePool ${1:pool} = new J2DTexturePool($2);"},
		{"trigger": "I-JAXB\tinit", "contents": "JAXB ${1:jaxb} = new JAXB($2);"},
		{"trigger": "I-JAXBContext\tinit", "contents": "JAXBContext ${1:context} = new JAXBContext($2);"},
		{"trigger": "I-JAXBElement\tinit", "contents": "JAXBElement ${1:element} = new JAXBElement($2);"},
		{"trigger": "I-JAXBException\tinit", "contents": "JAXBException ${1:exception} = new JAXBException($2);"},
		{"trigger": "I-JAXBIntrospector\tinit", "contents": "JAXBIntrospector ${1:introspector} = new JAXBIntrospector($2);"},
		{"trigger": "I-JAXBPermission\tinit", "contents": "JAXBPermission ${1:permission} = new JAXBPermission($2);"},
		{"trigger": "I-JAXBResult\tinit", "contents": "JAXBResult ${1:result} = new JAXBResult($2);"},
		{"trigger": "I-JAXBSource\tinit", "contents": "JAXBSource ${1:source} = new JAXBSource($2);"},
		{"trigger": "I-JAXPConstants\tinit", "contents": "JAXPConstants ${1:constants} = new JAXPConstants($2);"},
		{"trigger": "I-JAXPExtensionsProvider\tinit", "contents": "JAXPExtensionsProvider ${1:provider} = new JAXPExtensionsProvider($2);"},
		{"trigger": "I-JAXPNamespaceContextWrapper\tinit", "contents": "JAXPNamespaceContextWrapper ${1:wrapper} = new JAXPNamespaceContextWrapper($2);"},
		{"trigger": "I-JAXPPrefixResolver\tinit", "contents": "JAXPPrefixResolver ${1:resolver} = new JAXPPrefixResolver($2);"},
		{"trigger": "I-JAXPValidationMessageFormatter\tinit", "contents": "JAXPValidationMessageFormatter ${1:formatter} = new JAXPValidationMessageFormatter($2);"},
		{"trigger": "I-JAXPValidatorComponent\tinit", "contents": "JAXPValidatorComponent ${1:component} = new JAXPValidatorComponent($2);"},
		{"trigger": "I-JAXPVariableStack\tinit", "contents": "JAXPVariableStack ${1:stack} = new JAXPVariableStack($2);"},
		{"trigger": "I-JApplet\tinit", "contents": "JApplet ${1:applet} = new JApplet($2);"},
		{"trigger": "I-JButton\tinit", "contents": "JButton ${1:button} = new JButton(${2:\"My button\"});"},
		{"trigger": "I-JCEMapper\tinit", "contents": "JCEMapper ${1:mapper} = new JCEMapper($2);"},
		{"trigger": "I-JCheckBox\tinit", "contents": "JCheckBox ${1:box} = new JCheckBox($2);"},
		{"trigger": "I-JCheckBoxMenuItem\tinit", "contents": "JCheckBoxMenuItem ${1:item} = new JCheckBoxMenuItem($2);"},
		{"trigger": "I-JColorChooser\tinit", "contents": "JColorChooser ${1:chooser} = new JColorChooser($2);"},
		{"trigger": "I-JComboBox\tinit", "contents": "JComboBox ${1:box} = new JComboBox($2);"},
		{"trigger": "I-JComponent\tinit", "contents": "JComponent ${1:component} = new JComponent($2);"},
		{"trigger": "I-JDBCType\tinit", "contents": "JDBCType ${1:type} = new JDBCType($2);"},
		{"trigger": "I-JDKXPathAPI\tinit", "contents": "JDKXPathAPI ${1:jdkxpathapi} = new JDKXPathAPI($2);"},
		{"trigger": "I-JDKXPathFactory\tinit", "contents": "JDKXPathFactory ${1:factory} = new JDKXPathFactory($2);"},
		{"trigger": "I-JDMAccess\tinit", "contents": "JDMAccess ${1:access} = new JDMAccess($2);"},
		{"trigger": "I-JDMAclBlock\tinit", "contents": "JDMAclBlock ${1:block} = new JDMAclBlock($2);"},
		{"trigger": "I-JDMAclItem\tinit", "contents": "JDMAclItem ${1:item} = new JDMAclItem($2);"},
		{"trigger": "I-JDMCommunities\tinit", "contents": "JDMCommunities ${1:communities} = new JDMCommunities($2);"},
		{"trigger": "I-JDMCommunity\tinit", "contents": "JDMCommunity ${1:community} = new JDMCommunity($2);"},
		{"trigger": "I-JDMEnterprise\tinit", "contents": "JDMEnterprise ${1:enterprise} = new JDMEnterprise($2);"},
		{"trigger": "I-JDMHost\tinit", "contents": "JDMHost ${1:host} = new JDMHost($2);"},
		{"trigger": "I-JDMHostInform\tinit", "contents": "JDMHostInform ${1:inform} = new JDMHostInform($2);"},
		{"trigger": "I-JDMHostName\tinit", "contents": "JDMHostName ${1:name} = new JDMHostName($2);"},
		{"trigger": "I-JDMHostTrap\tinit", "contents": "JDMHostTrap ${1:trap} = new JDMHostTrap($2);"},
		{"trigger": "I-JDMInformBlock\tinit", "contents": "JDMInformBlock ${1:block} = new JDMInformBlock($2);"},
		{"trigger": "I-JDMInformCommunity\tinit", "contents": "JDMInformCommunity ${1:community} = new JDMInformCommunity($2);"},
		{"trigger": "I-JDMInformInterestedHost\tinit", "contents": "JDMInformInterestedHost ${1:host} = new JDMInformInterestedHost($2);"},
		{"trigger": "I-JDMInformItem\tinit", "contents": "JDMInformItem ${1:item} = new JDMInformItem($2);"},
		{"trigger": "I-JDMIpAddress\tinit", "contents": "JDMIpAddress ${1:address} = new JDMIpAddress($2);"},
		{"trigger": "I-JDMIpMask\tinit", "contents": "JDMIpMask ${1:mask} = new JDMIpMask($2);"},
		{"trigger": "I-JDMIpV6Address\tinit", "contents": "JDMIpV6Address ${1:address} = new JDMIpV6Address($2);"},
		{"trigger": "I-JDMManagers\tinit", "contents": "JDMManagers ${1:managers} = new JDMManagers($2);"},
		{"trigger": "I-JDMNetMask\tinit", "contents": "JDMNetMask ${1:mask} = new JDMNetMask($2);"},
		{"trigger": "I-JDMSecurityDefs\tinit", "contents": "JDMSecurityDefs ${1:defs} = new JDMSecurityDefs($2);"},
		{"trigger": "I-JDMTrapBlock\tinit", "contents": "JDMTrapBlock ${1:block} = new JDMTrapBlock($2);"},
		{"trigger": "I-JDMTrapCommunity\tinit", "contents": "JDMTrapCommunity ${1:community} = new JDMTrapCommunity($2);"},
		{"trigger": "I-JDMTrapInterestedHost\tinit", "contents": "JDMTrapInterestedHost ${1:host} = new JDMTrapInterestedHost($2);"},
		{"trigger": "I-JDMTrapItem\tinit", "contents": "JDMTrapItem ${1:item} = new JDMTrapItem($2);"},
		{"trigger": "I-JDMTrapNum\tinit", "contents": "JDMTrapNum ${1:num} = new JDMTrapNum($2);"},
		{"trigger": "I-JDesktopPane\tinit", "contents": "JDesktopPane ${1:pane} = new JDesktopPane($2);"},
		{"trigger": "I-JDialog\tinit", "contents": "JDialog ${1:dialog} = new JDialog($2);"},
		{"trigger": "I-JEditorPane\tinit", "contents": "JEditorPane ${1:pane} = new JEditorPane($2);"},
		{"trigger": "I-JFIFMarkerSegment\tinit", "contents": "JFIFMarkerSegment ${1:segment} = new JFIFMarkerSegment($2);"},
		{"trigger": "I-JFRInputEvent\tinit", "contents": "JFRInputEvent ${1:event} = new JFRInputEvent($2);"},
		{"trigger": "I-JFRLogger\tinit", "contents": "JFRLogger ${1:logger} = new JFRLogger($2);"},
		{"trigger": "I-JFRPulseEvent\tinit", "contents": "JFRPulseEvent ${1:event} = new JFRPulseEvent($2);"},
		{"trigger": "I-JFXPanel\tinit", "contents": "JFXPanel ${1:panel} = new JFXPanel($2);"},
		{"trigger": "I-JFXPanelBuilder\tinit", "contents": "JFXPanelBuilder ${1:builder} = new JFXPanelBuilder($2);"},
		{"trigger": "I-JFXTextAnalysisSink\tinit", "contents": "JFXTextAnalysisSink ${1:sink} = new JFXTextAnalysisSink($2);"},
		{"trigger": "I-JFXTextRenderer\tinit", "contents": "JFXTextRenderer ${1:renderer} = new JFXTextRenderer($2);"},
		{"trigger": "I-JFileChooser\tinit", "contents": "JFileChooser ${1:chooser} = new JFileChooser($2);"},
		{"trigger": "I-JFormattedTextField\tinit", "contents": "JFormattedTextField ${1:field} = new JFormattedTextField($2);"},
		{"trigger": "I-JFrame\tinit", "contents": "JFrame ${1:frame} = new JFrame(\"${2:My title}\");"},
		{"trigger": "I-JInternalFrame\tinit", "contents": "JInternalFrame ${1:frame} = new JInternalFrame($2);"},
		{"trigger": "I-JJTParserState\tinit", "contents": "JJTParserState ${1:state} = new JJTParserState($2);"},
		{"trigger": "I-JLabel\tinit", "contents": "JLabel ${1:label} = new JLabel($2);"},
		{"trigger": "I-JLayer\tinit", "contents": "JLayer ${1:layer} = new JLayer($2);"},
		{"trigger": "I-JLayeredPane\tinit", "contents": "JLayeredPane ${1:pane} = new JLayeredPane($2);"},
		{"trigger": "I-JList\tinit", "contents": "JList ${1:list} = new JList($2);"},
		{"trigger": "I-JMException\tinit", "contents": "JMException ${1:exception} = new JMException($2);"},
		{"trigger": "I-JMRuntimeException\tinit", "contents": "JMRuntimeException ${1:exception} = new JMRuntimeException($2);"},
		{"trigger": "I-JMX\tinit", "contents": "JMX ${1:jmx} = new JMX($2);"},
		{"trigger": "I-JMXAddressable\tinit", "contents": "JMXAddressable ${1:addressable} = new JMXAddressable($2);"},
		{"trigger": "I-JMXAuthenticator\tinit", "contents": "JMXAuthenticator ${1:authenticator} = new JMXAuthenticator($2);"},
		{"trigger": "I-JMXConnectionNotification\tinit", "contents": "JMXConnectionNotification ${1:notification} = new JMXConnectionNotification($2);"},
		{"trigger": "I-JMXConnector\tinit", "contents": "JMXConnector ${1:connector} = new JMXConnector($2);"},
		{"trigger": "I-JMXConnectorFactory\tinit", "contents": "JMXConnectorFactory ${1:factory} = new JMXConnectorFactory($2);"},
		{"trigger": "I-JMXConnectorProvider\tinit", "contents": "JMXConnectorProvider ${1:provider} = new JMXConnectorProvider($2);"},
		{"trigger": "I-JMXConnectorServer\tinit", "contents": "JMXConnectorServer ${1:server} = new JMXConnectorServer($2);"},
		{"trigger": "I-JMXConnectorServerFactory\tinit", "contents": "JMXConnectorServerFactory ${1:factory} = new JMXConnectorServerFactory($2);"},
		{"trigger": "I-JMXConnectorServerMBean\tinit", "contents": "JMXConnectorServerMBean ${1:bean} = new JMXConnectorServerMBean($2);"},
		{"trigger": "I-JMXConnectorServerProvider\tinit", "contents": "JMXConnectorServerProvider ${1:provider} = new JMXConnectorServerProvider($2);"},
		{"trigger": "I-JMXPluggableAuthenticator\tinit", "contents": "JMXPluggableAuthenticator ${1:authenticator} = new JMXPluggableAuthenticator($2);"},
		{"trigger": "I-JMXPrincipal\tinit", "contents": "JMXPrincipal ${1:principal} = new JMXPrincipal($2);"},
		{"trigger": "I-JMXProviderException\tinit", "contents": "JMXProviderException ${1:exception} = new JMXProviderException($2);"},
		{"trigger": "I-JMXServerErrorException\tinit", "contents": "JMXServerErrorException ${1:exception} = new JMXServerErrorException($2);"},
		{"trigger": "I-JMXServiceURL\tinit", "contents": "JMXServiceURL ${1:jmxserviceurl} = new JMXServiceURL($2);"},
		{"trigger": "I-JMXSubjectDomainCombiner\tinit", "contents": "JMXSubjectDomainCombiner ${1:combiner} = new JMXSubjectDomainCombiner($2);"},
		{"trigger": "I-JMenu\tinit", "contents": "JMenu ${1:menu} = new JMenu($2);"},
		{"trigger": "I-JMenuBar\tinit", "contents": "JMenuBar ${1:bar} = new JMenuBar($2);"},
		{"trigger": "I-JMenuItem\tinit", "contents": "JMenuItem ${1:item} = new JMenuItem($2);"},
		{"trigger": "I-JOptionPane\tinit", "contents": "JOptionPane ${1:pane} = new JOptionPane($2);"},
		{"trigger": "I-JPEG\tinit", "contents": "JPEG ${1:jpeg} = new JPEG($2);"},
		{"trigger": "I-JPEGBuffer\tinit", "contents": "JPEGBuffer ${1:buffer} = new JPEGBuffer($2);"},
		{"trigger": "I-JPEGCodec\tinit", "contents": "JPEGCodec ${1:codec} = new JPEGCodec($2);"},
		{"trigger": "I-JPEGDecodeParam\tinit", "contents": "JPEGDecodeParam ${1:param} = new JPEGDecodeParam($2);"},
		{"trigger": "I-JPEGDescriptor\tinit", "contents": "JPEGDescriptor ${1:descriptor} = new JPEGDescriptor($2);"},
		{"trigger": "I-JPEGEncodeParam\tinit", "contents": "JPEGEncodeParam ${1:param} = new JPEGEncodeParam($2);"},
		{"trigger": "I-JPEGHuffmanTable\tinit", "contents": "JPEGHuffmanTable ${1:table} = new JPEGHuffmanTable($2);"},
		{"trigger": "I-JPEGImageDecoder\tinit", "contents": "JPEGImageDecoder ${1:decoder} = new JPEGImageDecoder($2);"},
		{"trigger": "I-JPEGImageEncoder\tinit", "contents": "JPEGImageEncoder ${1:encoder} = new JPEGImageEncoder($2);"},
		{"trigger": "I-JPEGImageLoader\tinit", "contents": "JPEGImageLoader ${1:loader} = new JPEGImageLoader($2);"},
		{"trigger": "I-JPEGImageLoaderFactory\tinit", "contents": "JPEGImageLoaderFactory ${1:factory} = new JPEGImageLoaderFactory($2);"},
		{"trigger": "I-JPEGImageMetadataFormat\tinit", "contents": "JPEGImageMetadataFormat ${1:format} = new JPEGImageMetadataFormat($2);"},
		{"trigger": "I-JPEGImageMetadataFormatResources\tinit", "contents": "JPEGImageMetadataFormatResources ${1:resources} = new JPEGImageMetadataFormatResources($2);"},
		{"trigger": "I-JPEGImageReadParam\tinit", "contents": "JPEGImageReadParam ${1:param} = new JPEGImageReadParam($2);"},
		{"trigger": "I-JPEGImageReader\tinit", "contents": "JPEGImageReader ${1:reader} = new JPEGImageReader($2);"},
		{"trigger": "I-JPEGImageReaderResources\tinit", "contents": "JPEGImageReaderResources ${1:resources} = new JPEGImageReaderResources($2);"},
		{"trigger": "I-JPEGImageReaderSpi\tinit", "contents": "JPEGImageReaderSpi ${1:spi} = new JPEGImageReaderSpi($2);"},
		{"trigger": "I-JPEGImageWriteParam\tinit", "contents": "JPEGImageWriteParam ${1:param} = new JPEGImageWriteParam($2);"},
		{"trigger": "I-JPEGImageWriter\tinit", "contents": "JPEGImageWriter ${1:writer} = new JPEGImageWriter($2);"},
		{"trigger": "I-JPEGImageWriterResources\tinit", "contents": "JPEGImageWriterResources ${1:resources} = new JPEGImageWriterResources($2);"},
		{"trigger": "I-JPEGImageWriterSpi\tinit", "contents": "JPEGImageWriterSpi ${1:spi} = new JPEGImageWriterSpi($2);"},
		{"trigger": "I-JPEGMetadata\tinit", "contents": "JPEGMetadata ${1:metadata} = new JPEGMetadata($2);"},
		{"trigger": "I-JPEGMetadataFormat\tinit", "contents": "JPEGMetadataFormat ${1:format} = new JPEGMetadataFormat($2);"},
		{"trigger": "I-JPEGMetadataFormatResources\tinit", "contents": "JPEGMetadataFormatResources ${1:resources} = new JPEGMetadataFormatResources($2);"},
		{"trigger": "I-JPEGQTable\tinit", "contents": "JPEGQTable ${1:table} = new JPEGQTable($2);"},
		{"trigger": "I-JPEGStreamMetadataFormat\tinit", "contents": "JPEGStreamMetadataFormat ${1:format} = new JPEGStreamMetadataFormat($2);"},
		{"trigger": "I-JPEGStreamMetadataFormatResources\tinit", "contents": "JPEGStreamMetadataFormatResources ${1:resources} = new JPEGStreamMetadataFormatResources($2);"},
		{"trigger": "I-JPanel\tinit", "contents": "JPanel ${1:panel} = new JPanel($2);"},
		{"trigger": "I-JPasswordField\tinit", "contents": "JPasswordField ${1:field} = new JPasswordField($2);"},
		{"trigger": "I-JPopupMenu\tinit", "contents": "JPopupMenu ${1:menu} = new JPopupMenu($2);"},
		{"trigger": "I-JProgressBar\tinit", "contents": "JProgressBar ${1:bar} = new JProgressBar($2);"},
		{"trigger": "I-JRadioButton\tinit", "contents": "JRadioButton ${1:button} = new JRadioButton($2);"},
		{"trigger": "I-JRadioButtonMenuItem\tinit", "contents": "JRadioButtonMenuItem ${1:item} = new JRadioButtonMenuItem($2);"},
		{"trigger": "I-JRootPane\tinit", "contents": "JRootPane ${1:pane} = new JRootPane($2);"},
		{"trigger": "I-JSException\tinit", "contents": "JSException ${1:exception} = new JSException($2);"},
		{"trigger": "I-JSONObject\tinit", "contents": "JSONObject ${1:object} = new JSONObject($2);"},
		{"trigger": "I-JSObject\tinit", "contents": "JSObject ${1:object} = new JSObject($2);"},
		{"trigger": "I-JSR\tinit", "contents": "JSR ${1:jsr} = new JSR($2);"},
		{"trigger": "I-JSR_W\tinit", "contents": "JSR_W ${1:jsr} = new JSR_W($2);"},
		{"trigger": "I-JSWBoxBlurPeer\tinit", "contents": "JSWBoxBlurPeer ${1:peer} = new JSWBoxBlurPeer($2);"},
		{"trigger": "I-JSWBoxShadowPeer\tinit", "contents": "JSWBoxShadowPeer ${1:peer} = new JSWBoxShadowPeer($2);"},
		{"trigger": "I-JSWEffectPeer\tinit", "contents": "JSWEffectPeer ${1:peer} = new JSWEffectPeer($2);"},
		{"trigger": "I-JSWLinearConvolvePeer\tinit", "contents": "JSWLinearConvolvePeer ${1:peer} = new JSWLinearConvolvePeer($2);"},
		{"trigger": "I-JSWLinearConvolveShadowPeer\tinit", "contents": "JSWLinearConvolveShadowPeer ${1:peer} = new JSWLinearConvolveShadowPeer($2);"},
		{"trigger": "I-JSWRendererDelegate\tinit", "contents": "JSWRendererDelegate ${1:delegate} = new JSWRendererDelegate($2);"},
		{"trigger": "I-JScrollBar\tinit", "contents": "JScrollBar ${1:bar} = new JScrollBar($2);"},
		{"trigger": "I-JScrollPane\tinit", "contents": "JScrollPane ${1:pane} = new JScrollPane($2);"},
		{"trigger": "I-JSeparator\tinit", "contents": "JSeparator ${1:separator} = new JSeparator($2);"},
		{"trigger": "I-JSlider\tinit", "contents": "JSlider ${1:slider} = new JSlider($2);"},
		{"trigger": "I-JSpinner\tinit", "contents": "JSpinner ${1:spinner} = new JSpinner($2);"},
		{"trigger": "I-JSplitPane\tinit", "contents": "JSplitPane ${1:pane} = new JSplitPane($2);"},
		{"trigger": "I-JTabbedPane\tinit", "contents": "JTabbedPane ${1:pane} = new JTabbedPane($2);"},
		{"trigger": "I-JTable\tinit", "contents": "JTable ${1:table} = new JTable($2);"},
		{"trigger": "I-JTableHeader\tinit", "contents": "JTableHeader ${1:header} = new JTableHeader($2);"},
		{"trigger": "I-JTextArea\tinit", "contents": "JTextArea ${1:area} = new JTextArea($2);"},
		{"trigger": "I-JTextComponent\tinit", "contents": "JTextComponent ${1:component} = new JTextComponent($2);"},
		{"trigger": "I-JTextField\tinit", "contents": "JTextField ${1:field} = new JTextField($2);"},
		{"trigger": "I-JTextPane\tinit", "contents": "JTextPane ${1:pane} = new JTextPane($2);"},
		{"trigger": "I-JToggleButton\tinit", "contents": "JToggleButton ${1:button} = new JToggleButton($2);"},
		{"trigger": "I-JToolBar\tinit", "contents": "JToolBar ${1:bar} = new JToolBar($2);"},
		{"trigger": "I-JToolTip\tinit", "contents": "JToolTip ${1:tip} = new JToolTip($2);"},
		{"trigger": "I-JTree\tinit", "contents": "JTree ${1:tree} = new JTree($2);"},
		{"trigger": "I-JViewport\tinit", "contents": "JViewport ${1:viewport} = new JViewport($2);"},
		{"trigger": "I-JWindow\tinit", "contents": "JWindow ${1:window} = new JWindow($2);"},
		{"trigger": "I-JapaneseChronology\tinit", "contents": "JapaneseChronology ${1:chronology} = new JapaneseChronology($2);"},
		{"trigger": "I-JapaneseDate\tinit", "contents": "JapaneseDate ${1:date} = new JapaneseDate($2);"},
		{"trigger": "I-JapaneseEra\tinit", "contents": "JapaneseEra ${1:era} = new JapaneseEra($2);"},
		{"trigger": "I-JapaneseImperialCalendar\tinit", "contents": "JapaneseImperialCalendar ${1:calendar} = new JapaneseImperialCalendar($2);"},
		{"trigger": "I-JarEntry\tinit", "contents": "JarEntry ${1:entry} = new JarEntry($2);"},
		{"trigger": "I-JarException\tinit", "contents": "JarException ${1:exception} = new JarException($2);"},
		{"trigger": "I-JarFile\tinit", "contents": "JarFile ${1:file} = new JarFile($2);"},
		{"trigger": "I-JarInputStream\tinit", "contents": "JarInputStream ${1:stream} = new JarInputStream($2);"},
		{"trigger": "I-JarOutputStream\tinit", "contents": "JarOutputStream ${1:stream} = new JarOutputStream($2);"},
		{"trigger": "I-JarURLConnection\tinit", "contents": "JarURLConnection ${1:connection} = new JarURLConnection($2);"},
		{"trigger": "I-JarVerifier\tinit", "contents": "JarVerifier ${1:verifier} = new JarVerifier($2);"},
		{"trigger": "I-JavaBeanAccessHelper\tinit", "contents": "JavaBeanAccessHelper ${1:helper} = new JavaBeanAccessHelper($2);"},
		{"trigger": "I-JavaBeanBooleanProperty\tinit", "contents": "JavaBeanBooleanProperty ${1:property} = new JavaBeanBooleanProperty($2);"},
		{"trigger": "I-JavaBeanBooleanPropertyBuilder\tinit", "contents": "JavaBeanBooleanPropertyBuilder ${1:builder} = new JavaBeanBooleanPropertyBuilder($2);"},
		{"trigger": "I-JavaBeanDoubleProperty\tinit", "contents": "JavaBeanDoubleProperty ${1:property} = new JavaBeanDoubleProperty($2);"},
		{"trigger": "I-JavaBeanDoublePropertyBuilder\tinit", "contents": "JavaBeanDoublePropertyBuilder ${1:builder} = new JavaBeanDoublePropertyBuilder($2);"},
		{"trigger": "I-JavaBeanFloatProperty\tinit", "contents": "JavaBeanFloatProperty ${1:property} = new JavaBeanFloatProperty($2);"},
		{"trigger": "I-JavaBeanFloatPropertyBuilder\tinit", "contents": "JavaBeanFloatPropertyBuilder ${1:builder} = new JavaBeanFloatPropertyBuilder($2);"},
		{"trigger": "I-JavaBeanIntegerProperty\tinit", "contents": "JavaBeanIntegerProperty ${1:property} = new JavaBeanIntegerProperty($2);"},
		{"trigger": "I-JavaBeanIntegerPropertyBuilder\tinit", "contents": "JavaBeanIntegerPropertyBuilder ${1:builder} = new JavaBeanIntegerPropertyBuilder($2);"},
		{"trigger": "I-JavaBeanLongProperty\tinit", "contents": "JavaBeanLongProperty ${1:property} = new JavaBeanLongProperty($2);"},
		{"trigger": "I-JavaBeanLongPropertyBuilder\tinit", "contents": "JavaBeanLongPropertyBuilder ${1:builder} = new JavaBeanLongPropertyBuilder($2);"},
		{"trigger": "I-JavaBeanObjectProperty\tinit", "contents": "JavaBeanObjectProperty ${1:property} = new JavaBeanObjectProperty($2);"},
		{"trigger": "I-JavaBeanObjectPropertyBuilder\tinit", "contents": "JavaBeanObjectPropertyBuilder ${1:builder} = new JavaBeanObjectPropertyBuilder($2);"},
		{"trigger": "I-JavaBeanProperty\tinit", "contents": "JavaBeanProperty ${1:property} = new JavaBeanProperty($2);"},
		{"trigger": "I-JavaBeanPropertyBuilderHelper\tinit", "contents": "JavaBeanPropertyBuilderHelper ${1:helper} = new JavaBeanPropertyBuilderHelper($2);"},
		{"trigger": "I-JavaBeanQuickAccessor\tinit", "contents": "JavaBeanQuickAccessor ${1:accessor} = new JavaBeanQuickAccessor($2);"},
		{"trigger": "I-JavaBeanStringProperty\tinit", "contents": "JavaBeanStringProperty ${1:property} = new JavaBeanStringProperty($2);"},
		{"trigger": "I-JavaBeanStringPropertyBuilder\tinit", "contents": "JavaBeanStringPropertyBuilder ${1:builder} = new JavaBeanStringPropertyBuilder($2);"},
		{"trigger": "I-JavaClass\tinit", "contents": "JavaClass ${1:class} = new JavaClass($2);"},
		{"trigger": "I-JavaCodebaseComponent\tinit", "contents": "JavaCodebaseComponent ${1:component} = new JavaCodebaseComponent($2);"},
		{"trigger": "I-JavaCompiler\tinit", "contents": "JavaCompiler ${1:compiler} = new JavaCompiler($2);"},
		{"trigger": "I-JavaFXBuilderFactory\tinit", "contents": "JavaFXBuilderFactory ${1:factory} = new JavaFXBuilderFactory($2);"},
		{"trigger": "I-JavaFXFontBuilder\tinit", "contents": "JavaFXFontBuilder ${1:builder} = new JavaFXFontBuilder($2);"},
		{"trigger": "I-JavaFXImageBuilder\tinit", "contents": "JavaFXImageBuilder ${1:builder} = new JavaFXImageBuilder($2);"},
		{"trigger": "I-JavaFXSceneBuilder\tinit", "contents": "JavaFXSceneBuilder ${1:builder} = new JavaFXSceneBuilder($2);"},
		{"trigger": "I-JavaFileManager\tinit", "contents": "JavaFileManager ${1:manager} = new JavaFileManager($2);"},
		{"trigger": "I-JavaFileObject\tinit", "contents": "JavaFileObject ${1:object} = new JavaFileObject($2);"},
		{"trigger": "I-JavaPlatform\tinit", "contents": "JavaPlatform ${1:platform} = new JavaPlatform($2);"},
		{"trigger": "I-JavaSurface\tinit", "contents": "JavaSurface ${1:surface} = new JavaSurface($2);"},
		{"trigger": "I-JavaUtilJarAccessImpl\tinit", "contents": "JavaUtilJarAccessImpl ${1:impl} = new JavaUtilJarAccessImpl($2);"},
		{"trigger": "I-JavaUtils\tinit", "contents": "JavaUtils ${1:utils} = new JavaUtils($2);"},
		{"trigger": "I-JavaWrapper\tinit", "contents": "JavaWrapper ${1:wrapper} = new JavaWrapper($2);"},
		{"trigger": "I-JavacTask\tinit", "contents": "JavacTask ${1:task} = new JavacTask($2);"},
		{"trigger": "I-JavaxSecurityAuthKerberosAccessImpl\tinit", "contents": "JavaxSecurityAuthKerberosAccessImpl ${1:impl} = new JavaxSecurityAuthKerberosAccessImpl($2);"},
		{"trigger": "I-JdbcRowSet\tinit", "contents": "JdbcRowSet ${1:set} = new JdbcRowSet($2);"},
		{"trigger": "I-JmxMBeanServer\tinit", "contents": "JmxMBeanServer ${1:server} = new JmxMBeanServer($2);"},
		{"trigger": "I-JmxMBeanServerBuilder\tinit", "contents": "JmxMBeanServerBuilder ${1:builder} = new JmxMBeanServerBuilder($2);"},
		{"trigger": "I-JmxProperties\tinit", "contents": "JmxProperties ${1:properties} = new JmxProperties($2);"},
		{"trigger": "I-JndiLoginModule\tinit", "contents": "JndiLoginModule ${1:module} = new JndiLoginModule($2);"},
		{"trigger": "I-JobAttributes\tinit", "contents": "JobAttributes ${1:attributes} = new JobAttributes($2);"},
		{"trigger": "I-JobHoldUntil\tinit", "contents": "JobHoldUntil ${1:until} = new JobHoldUntil($2);"},
		{"trigger": "I-JobImpressions\tinit", "contents": "JobImpressions ${1:impressions} = new JobImpressions($2);"},
		{"trigger": "I-JobImpressionsCompleted\tinit", "contents": "JobImpressionsCompleted ${1:completed} = new JobImpressionsCompleted($2);"},
		{"trigger": "I-JobImpressionsSupported\tinit", "contents": "JobImpressionsSupported ${1:supported} = new JobImpressionsSupported($2);"},
		{"trigger": "I-JobKOctets\tinit", "contents": "JobKOctets ${1:octets} = new JobKOctets($2);"},
		{"trigger": "I-JobKOctetsProcessed\tinit", "contents": "JobKOctetsProcessed ${1:processed} = new JobKOctetsProcessed($2);"},
		{"trigger": "I-JobKOctetsSupported\tinit", "contents": "JobKOctetsSupported ${1:supported} = new JobKOctetsSupported($2);"},
		{"trigger": "I-JobMediaSheets\tinit", "contents": "JobMediaSheets ${1:sheets} = new JobMediaSheets($2);"},
		{"trigger": "I-JobMediaSheetsCompleted\tinit", "contents": "JobMediaSheetsCompleted ${1:completed} = new JobMediaSheetsCompleted($2);"},
		{"trigger": "I-JobMediaSheetsSupported\tinit", "contents": "JobMediaSheetsSupported ${1:supported} = new JobMediaSheetsSupported($2);"},
		{"trigger": "I-JobMessageFromOperator\tinit", "contents": "JobMessageFromOperator ${1:operator} = new JobMessageFromOperator($2);"},
		{"trigger": "I-JobName\tinit", "contents": "JobName ${1:name} = new JobName($2);"},
		{"trigger": "I-JobOriginatingUserName\tinit", "contents": "JobOriginatingUserName ${1:name} = new JobOriginatingUserName($2);"},
		{"trigger": "I-JobPriority\tinit", "contents": "JobPriority ${1:priority} = new JobPriority($2);"},
		{"trigger": "I-JobPrioritySupported\tinit", "contents": "JobPrioritySupported ${1:supported} = new JobPrioritySupported($2);"},
		{"trigger": "I-JobSettings\tinit", "contents": "JobSettings ${1:settings} = new JobSettings($2);"},
		{"trigger": "I-JobSheets\tinit", "contents": "JobSheets ${1:sheets} = new JobSheets($2);"},
		{"trigger": "I-JobState\tinit", "contents": "JobState ${1:state} = new JobState($2);"},
		{"trigger": "I-JobStateReason\tinit", "contents": "JobStateReason ${1:reason} = new JobStateReason($2);"},
		{"trigger": "I-JobStateReasons\tinit", "contents": "JobStateReasons ${1:reasons} = new JobStateReasons($2);"},
		{"trigger": "I-JoinRowSet\tinit", "contents": "JoinRowSet ${1:set} = new JoinRowSet($2);"},
		{"trigger": "I-Joinable\tinit", "contents": "Joinable ${1:joinable} = new Joinable($2);"},
		{"trigger": "I-JsrInstruction\tinit", "contents": "JsrInstruction ${1:instruction} = new JsrInstruction($2);"},
		{"trigger": "I-JulianFields\tinit", "contents": "JulianFields ${1:fields} = new JulianFields($2);"},
		{"trigger": "I-JumboEnumSet\tinit", "contents": "JumboEnumSet ${1:set} = new JumboEnumSet($2);"},
		{"trigger": "I-KerberosKey\tinit", "contents": "KerberosKey ${1:key} = new KerberosKey($2);"},
		{"trigger": "I-KerberosPrincipal\tinit", "contents": "KerberosPrincipal ${1:principal} = new KerberosPrincipal($2);"},
		{"trigger": "I-KerberosTicket\tinit", "contents": "KerberosTicket ${1:ticket} = new KerberosTicket($2);"},
		{"trigger": "I-Kernel\tinit", "contents": "Kernel ${1:kernel} = new Kernel($2);"},
		{"trigger": "I-Key\tinit", "contents": "Key ${1:key} = new Key($2);"},
		{"trigger": "I-KeyAdapter\tinit", "contents": "KeyAdapter ${1:adapter} = new KeyAdapter($2);"},
		{"trigger": "I-KeyAlreadyExistsException\tinit", "contents": "KeyAlreadyExistsException ${1:exception} = new KeyAlreadyExistsException($2);"},
		{"trigger": "I-KeyBinding\tinit", "contents": "KeyBinding ${1:binding} = new KeyBinding($2);"},
		{"trigger": "I-KeyCall\tinit", "contents": "KeyCall ${1:call} = new KeyCall($2);"},
		{"trigger": "I-KeyCharacterCombination\tinit", "contents": "KeyCharacterCombination ${1:combination} = new KeyCharacterCombination($2);"},
		{"trigger": "I-KeyCharacterCombinationBuilder\tinit", "contents": "KeyCharacterCombinationBuilder ${1:builder} = new KeyCharacterCombinationBuilder($2);"},
		{"trigger": "I-KeyCode\tinit", "contents": "KeyCode ${1:code} = new KeyCode($2);"},
		{"trigger": "I-KeyCodeCombination\tinit", "contents": "KeyCodeCombination ${1:combination} = new KeyCodeCombination($2);"},
		{"trigger": "I-KeyCodeCombinationBuilder\tinit", "contents": "KeyCodeCombinationBuilder ${1:builder} = new KeyCodeCombinationBuilder($2);"},
		{"trigger": "I-KeyCodeMap\tinit", "contents": "KeyCodeMap ${1:map} = new KeyCodeMap($2);"},
		{"trigger": "I-KeyCombination\tinit", "contents": "KeyCombination ${1:combination} = new KeyCombination($2);"},
		{"trigger": "I-KeyEvent\tinit", "contents": "KeyEvent ${1:event} = new KeyEvent($2);"},
		{"trigger": "I-KeyEventDispatcher\tinit", "contents": "KeyEventDispatcher ${1:dispatcher} = new KeyEventDispatcher($2);"},
		{"trigger": "I-KeyEventPostProcessor\tinit", "contents": "KeyEventPostProcessor ${1:processor} = new KeyEventPostProcessor($2);"},
		{"trigger": "I-KeyException\tinit", "contents": "KeyException ${1:exception} = new KeyException($2);"},
		{"trigger": "I-KeyFactory\tinit", "contents": "KeyFactory ${1:factory} = new KeyFactory($2);"},
		{"trigger": "I-KeyFactorySpi\tinit", "contents": "KeyFactorySpi ${1:spi} = new KeyFactorySpi($2);"},
		{"trigger": "I-KeyFrame\tinit", "contents": "KeyFrame ${1:frame} = new KeyFrame($2);"},
		{"trigger": "I-KeyImpl\tinit", "contents": "KeyImpl ${1:impl} = new KeyImpl($2);"},
		{"trigger": "I-KeyIndex\tinit", "contents": "KeyIndex ${1:index} = new KeyIndex($2);"},
		{"trigger": "I-KeyInfo\tinit", "contents": "KeyInfo ${1:info} = new KeyInfo($2);"},
		{"trigger": "I-KeyInfoContent\tinit", "contents": "KeyInfoContent ${1:content} = new KeyInfoContent($2);"},
		{"trigger": "I-KeyInfoFactory\tinit", "contents": "KeyInfoFactory ${1:factory} = new KeyInfoFactory($2);"},
		{"trigger": "I-KeyInfoReference\tinit", "contents": "KeyInfoReference ${1:reference} = new KeyInfoReference($2);"},
		{"trigger": "I-KeyInfoReferenceResolver\tinit", "contents": "KeyInfoReferenceResolver ${1:resolver} = new KeyInfoReferenceResolver($2);"},
		{"trigger": "I-KeyInput\tinit", "contents": "KeyInput ${1:input} = new KeyInput($2);"},
		{"trigger": "I-KeyListener\tinit", "contents": "KeyListener ${1:listener} = new KeyListener($2);"},
		{"trigger": "I-KeyManagementException\tinit", "contents": "KeyManagementException ${1:exception} = new KeyManagementException($2);"},
		{"trigger": "I-KeyName\tinit", "contents": "KeyName ${1:name} = new KeyName($2);"},
		{"trigger": "I-KeyPair\tinit", "contents": "KeyPair ${1:pair} = new KeyPair($2);"},
		{"trigger": "I-KeyPairGenerator\tinit", "contents": "KeyPairGenerator ${1:generator} = new KeyPairGenerator($2);"},
		{"trigger": "I-KeyPairGeneratorSpi\tinit", "contents": "KeyPairGeneratorSpi ${1:spi} = new KeyPairGeneratorSpi($2);"},
		{"trigger": "I-KeyPath\tinit", "contents": "KeyPath ${1:path} = new KeyPath($2);"},
		{"trigger": "I-KeyPattern\tinit", "contents": "KeyPattern ${1:pattern} = new KeyPattern($2);"},
		{"trigger": "I-KeyRef\tinit", "contents": "KeyRef ${1:ref} = new KeyRef($2);"},
		{"trigger": "I-KeyRep\tinit", "contents": "KeyRep ${1:rep} = new KeyRep($2);"},
		{"trigger": "I-KeyResolver\tinit", "contents": "KeyResolver ${1:resolver} = new KeyResolver($2);"},
		{"trigger": "I-KeyResolverException\tinit", "contents": "KeyResolverException ${1:exception} = new KeyResolverException($2);"},
		{"trigger": "I-KeyResolverSpi\tinit", "contents": "KeyResolverSpi ${1:spi} = new KeyResolverSpi($2);"},
		{"trigger": "I-KeySelector\tinit", "contents": "KeySelector ${1:selector} = new KeySelector($2);"},
		{"trigger": "I-KeySelectorException\tinit", "contents": "KeySelectorException ${1:exception} = new KeySelectorException($2);"},
		{"trigger": "I-KeySelectorResult\tinit", "contents": "KeySelectorResult ${1:result} = new KeySelectorResult($2);"},
		{"trigger": "I-KeySpec\tinit", "contents": "KeySpec ${1:spec} = new KeySpec($2);"},
		{"trigger": "I-KeyState\tinit", "contents": "KeyState ${1:state} = new KeyState($2);"},
		{"trigger": "I-KeyStore\tinit", "contents": "KeyStore ${1:store} = new KeyStore($2);"},
		{"trigger": "I-KeyStoreException\tinit", "contents": "KeyStoreException ${1:exception} = new KeyStoreException($2);"},
		{"trigger": "I-KeyStoreLoginModule\tinit", "contents": "KeyStoreLoginModule ${1:module} = new KeyStoreLoginModule($2);"},
		{"trigger": "I-KeyStoreResolver\tinit", "contents": "KeyStoreResolver ${1:resolver} = new KeyStoreResolver($2);"},
		{"trigger": "I-KeyStoreSpi\tinit", "contents": "KeyStoreSpi ${1:spi} = new KeyStoreSpi($2);"},
		{"trigger": "I-KeyStroke\tinit", "contents": "KeyStroke ${1:stroke} = new KeyStroke($2);"},
		{"trigger": "I-KeyTab\tinit", "contents": "KeyTab ${1:tab} = new KeyTab($2);"},
		{"trigger": "I-KeyUtils\tinit", "contents": "KeyUtils ${1:utils} = new KeyUtils($2);"},
		{"trigger": "I-KeyValue\tinit", "contents": "KeyValue ${1:value} = new KeyValue($2);"},
		{"trigger": "I-KeyValueContent\tinit", "contents": "KeyValueContent ${1:content} = new KeyValueContent($2);"},
		{"trigger": "I-KeyboardEventImpl\tinit", "contents": "KeyboardEventImpl ${1:impl} = new KeyboardEventImpl($2);"},
		{"trigger": "I-KeyboardFocusManager\tinit", "contents": "KeyboardFocusManager ${1:manager} = new KeyboardFocusManager($2);"},
		{"trigger": "I-KeyboardFocusManagerPeer\tinit", "contents": "KeyboardFocusManagerPeer ${1:peer} = new KeyboardFocusManagerPeer($2);"},
		{"trigger": "I-KeyboardManager\tinit", "contents": "KeyboardManager ${1:manager} = new KeyboardManager($2);"},
		{"trigger": "I-KeyboardShortcutsHandler\tinit", "contents": "KeyboardShortcutsHandler ${1:handler} = new KeyboardShortcutsHandler($2);"},
		{"trigger": "I-Keymap\tinit", "contents": "Keymap ${1:keymap} = new Keymap($2);"},
		{"trigger": "I-Keywords\tinit", "contents": "Keywords ${1:keywords} = new Keywords($2);"},
		{"trigger": "I-Krb5LoginModule\tinit", "contents": "Krb5LoginModule ${1:module} = new Krb5LoginModule($2);"},
		{"trigger": "I-L2D\tinit", "contents": "L2D ${1:l2d} = new L2D($2);"},
		{"trigger": "I-L2F\tinit", "contents": "L2F ${1:l2f} = new L2F($2);"},
		{"trigger": "I-L2I\tinit", "contents": "L2I ${1:l2i} = new L2I($2);"},
		{"trigger": "I-LADD\tinit", "contents": "LADD ${1:ladd} = new LADD($2);"},
		{"trigger": "I-LALOAD\tinit", "contents": "LALOAD ${1:laload} = new LALOAD($2);"},
		{"trigger": "I-LAND\tinit", "contents": "LAND ${1:land} = new LAND($2);"},
		{"trigger": "I-LASTORE\tinit", "contents": "LASTORE ${1:lastore} = new LASTORE($2);"},
		{"trigger": "I-LCMP\tinit", "contents": "LCMP ${1:lcmp} = new LCMP($2);"},
		{"trigger": "I-LCONST\tinit", "contents": "LCONST ${1:lconst} = new LCONST($2);"},
		{"trigger": "I-LCount\tinit", "contents": "LCount ${1:count} = new LCount($2);"},
		{"trigger": "I-LDAPCertStoreParameters\tinit", "contents": "LDAPCertStoreParameters ${1:parameters} = new LDAPCertStoreParameters($2);"},
		{"trigger": "I-LDC\tinit", "contents": "LDC ${1:ldc} = new LDC($2);"},
		{"trigger": "I-LDC2_W\tinit", "contents": "LDC2_W ${1:ldc2} = new LDC2_W($2);"},
		{"trigger": "I-LDC_W\tinit", "contents": "LDC_W ${1:ldc} = new LDC_W($2);"},
		{"trigger": "I-LDIV\tinit", "contents": "LDIV ${1:ldiv} = new LDIV($2);"},
		{"trigger": "I-LIFESPAN_POLICY_ID\tinit", "contents": "LIFESPAN_POLICY_ID ${1:lifespan} = new LIFESPAN_POLICY_ID($2);"},
		{"trigger": "I-LLOAD\tinit", "contents": "LLOAD ${1:lload} = new LLOAD($2);"},
		{"trigger": "I-LMUL\tinit", "contents": "LMUL ${1:lmul} = new LMUL($2);"},
		{"trigger": "I-LNEG\tinit", "contents": "LNEG ${1:lneg} = new LNEG($2);"},
		{"trigger": "I-LOCATION_FORWARD\tinit", "contents": "LOCATION_FORWARD ${1:location} = new LOCATION_FORWARD($2);"},
		{"trigger": "I-LOOKUPSWITCH\tinit", "contents": "LOOKUPSWITCH ${1:lookupswitch} = new LOOKUPSWITCH($2);"},
		{"trigger": "I-LOR\tinit", "contents": "LOR ${1:lor} = new LOR($2);"},
		{"trigger": "I-LREM\tinit", "contents": "LREM ${1:lrem} = new LREM($2);"},
		{"trigger": "I-LRETURN\tinit", "contents": "LRETURN ${1:lreturn} = new LRETURN($2);"},
		{"trigger": "I-LSException\tinit", "contents": "LSException ${1:exception} = new LSException($2);"},
		{"trigger": "I-LSHL\tinit", "contents": "LSHL ${1:lshl} = new LSHL($2);"},
		{"trigger": "I-LSHR\tinit", "contents": "LSHR ${1:lshr} = new LSHR($2);"},
		{"trigger": "I-LSInput\tinit", "contents": "LSInput ${1:input} = new LSInput($2);"},
		{"trigger": "I-LSInputList\tinit", "contents": "LSInputList ${1:list} = new LSInputList($2);"},
		{"trigger": "I-LSInputListImpl\tinit", "contents": "LSInputListImpl ${1:impl} = new LSInputListImpl($2);"},
		{"trigger": "I-LSLoadEvent\tinit", "contents": "LSLoadEvent ${1:event} = new LSLoadEvent($2);"},
		{"trigger": "I-LSOutput\tinit", "contents": "LSOutput ${1:output} = new LSOutput($2);"},
		{"trigger": "I-LSParser\tinit", "contents": "LSParser ${1:parser} = new LSParser($2);"},
		{"trigger": "I-LSParserFilter\tinit", "contents": "LSParserFilter ${1:filter} = new LSParserFilter($2);"},
		{"trigger": "I-LSProgressEvent\tinit", "contents": "LSProgressEvent ${1:event} = new LSProgressEvent($2);"},
		{"trigger": "I-LSResourceResolver\tinit", "contents": "LSResourceResolver ${1:resolver} = new LSResourceResolver($2);"},
		{"trigger": "I-LSSerializer\tinit", "contents": "LSSerializer ${1:serializer} = new LSSerializer($2);"},
		{"trigger": "I-LSSerializerFilter\tinit", "contents": "LSSerializerFilter ${1:filter} = new LSSerializerFilter($2);"},
		{"trigger": "I-LSTORE\tinit", "contents": "LSTORE ${1:lstore} = new LSTORE($2);"},
		{"trigger": "I-LSUB\tinit", "contents": "LSUB ${1:lsub} = new LSUB($2);"},
		{"trigger": "I-LUSHR\tinit", "contents": "LUSHR ${1:lushr} = new LUSHR($2);"},
		{"trigger": "I-LXOR\tinit", "contents": "LXOR ${1:lxor} = new LXOR($2);"},
		{"trigger": "I-LZWCompressor\tinit", "contents": "LZWCompressor ${1:compressor} = new LZWCompressor($2);"},
		{"trigger": "I-LZWStringTable\tinit", "contents": "LZWStringTable ${1:table} = new LZWStringTable($2);"},
		{"trigger": "I-Label\tinit", "contents": "Label ${1:label} = new Label($2);"},
		{"trigger": "I-LabelBuilder\tinit", "contents": "LabelBuilder ${1:builder} = new LabelBuilder($2);"},
		{"trigger": "I-LabelPeer\tinit", "contents": "LabelPeer ${1:peer} = new LabelPeer($2);"},
		{"trigger": "I-LabelSkin\tinit", "contents": "LabelSkin ${1:skin} = new LabelSkin($2);"},
		{"trigger": "I-LabelUI\tinit", "contents": "LabelUI ${1:labelui} = new LabelUI($2);"},
		{"trigger": "I-LabelView\tinit", "contents": "LabelView ${1:view} = new LabelView($2);"},
		{"trigger": "I-Labeled\tinit", "contents": "Labeled ${1:labeled} = new Labeled($2);"},
		{"trigger": "I-LabeledBuilder\tinit", "contents": "LabeledBuilder ${1:builder} = new LabeledBuilder($2);"},
		{"trigger": "I-LabeledImpl\tinit", "contents": "LabeledImpl ${1:impl} = new LabeledImpl($2);"},
		{"trigger": "I-LabeledSkinBase\tinit", "contents": "LabeledSkinBase ${1:base} = new LabeledSkinBase($2);"},
		{"trigger": "I-LabeledStatementTree\tinit", "contents": "LabeledStatementTree ${1:tree} = new LabeledStatementTree($2);"},
		{"trigger": "I-LabeledText\tinit", "contents": "LabeledText ${1:text} = new LabeledText($2);"},
		{"trigger": "I-LadderConverter\tinit", "contents": "LadderConverter ${1:converter} = new LadderConverter($2);"},
		{"trigger": "I-LambdaConversionException\tinit", "contents": "LambdaConversionException ${1:exception} = new LambdaConversionException($2);"},
		{"trigger": "I-LambdaExpressionTree\tinit", "contents": "LambdaExpressionTree ${1:tree} = new LambdaExpressionTree($2);"},
		{"trigger": "I-LambdaForm\tinit", "contents": "LambdaForm ${1:form} = new LambdaForm($2);"},
		{"trigger": "I-LambdaFormBuffer\tinit", "contents": "LambdaFormBuffer ${1:buffer} = new LambdaFormBuffer($2);"},
		{"trigger": "I-LambdaFormEditor\tinit", "contents": "LambdaFormEditor ${1:editor} = new LambdaFormEditor($2);"},
		{"trigger": "I-LambdaMetafactory\tinit", "contents": "LambdaMetafactory ${1:metafactory} = new LambdaMetafactory($2);"},
		{"trigger": "I-LangCall\tinit", "contents": "LangCall ${1:call} = new LangCall($2);"},
		{"trigger": "I-LanguageCallback\tinit", "contents": "LanguageCallback ${1:callback} = new LanguageCallback($2);"},
		{"trigger": "I-LanguageVersion\tinit", "contents": "LanguageVersion ${1:version} = new LanguageVersion($2);"},
		{"trigger": "I-LastCall\tinit", "contents": "LastCall ${1:call} = new LastCall($2);"},
		{"trigger": "I-LastOwnerException\tinit", "contents": "LastOwnerException ${1:exception} = new LastOwnerException($2);"},
		{"trigger": "I-LauncherImpl\tinit", "contents": "LauncherImpl ${1:impl} = new LauncherImpl($2);"},
		{"trigger": "I-LayerUI\tinit", "contents": "LayerUI ${1:layerui} = new LayerUI($2);"},
		{"trigger": "I-LayeredBackgroundPositionConverter\tinit", "contents": "LayeredBackgroundPositionConverter ${1:converter} = new LayeredBackgroundPositionConverter($2);"},
		{"trigger": "I-LayeredBackgroundSizeConverter\tinit", "contents": "LayeredBackgroundSizeConverter ${1:converter} = new LayeredBackgroundSizeConverter($2);"},
		{"trigger": "I-LayeredBorderPaintConverter\tinit", "contents": "LayeredBorderPaintConverter ${1:converter} = new LayeredBorderPaintConverter($2);"},
		{"trigger": "I-LayeredBorderStyleConverter\tinit", "contents": "LayeredBorderStyleConverter ${1:converter} = new LayeredBorderStyleConverter($2);"},
		{"trigger": "I-LayeredHighlighter\tinit", "contents": "LayeredHighlighter ${1:highlighter} = new LayeredHighlighter($2);"},
		{"trigger": "I-LayoutCache\tinit", "contents": "LayoutCache ${1:cache} = new LayoutCache($2);"},
		{"trigger": "I-LayoutComparator\tinit", "contents": "LayoutComparator ${1:comparator} = new LayoutComparator($2);"},
		{"trigger": "I-LayoutFlags\tinit", "contents": "LayoutFlags ${1:flags} = new LayoutFlags($2);"},
		{"trigger": "I-LayoutFocusTraversalPolicy\tinit", "contents": "LayoutFocusTraversalPolicy ${1:policy} = new LayoutFocusTraversalPolicy($2);"},
		{"trigger": "I-LayoutManager\tinit", "contents": "LayoutManager ${1:manager} = new LayoutManager($2);"},
		{"trigger": "I-LayoutPath\tinit", "contents": "LayoutPath ${1:path} = new LayoutPath($2);"},
		{"trigger": "I-LayoutQueue\tinit", "contents": "LayoutQueue ${1:queue} = new LayoutQueue($2);"},
		{"trigger": "I-LayoutStyle\tinit", "contents": "LayoutStyle ${1:style} = new LayoutStyle($2);"},
		{"trigger": "I-LazyActionMap\tinit", "contents": "LazyActionMap ${1:map} = new LazyActionMap($2);"},
		{"trigger": "I-LdapContext\tinit", "contents": "LdapContext ${1:context} = new LdapContext($2);"},
		{"trigger": "I-LdapLoginModule\tinit", "contents": "LdapLoginModule ${1:module} = new LdapLoginModule($2);"},
		{"trigger": "I-LdapName\tinit", "contents": "LdapName ${1:name} = new LdapName($2);"},
		{"trigger": "I-LdapPrincipal\tinit", "contents": "LdapPrincipal ${1:principal} = new LdapPrincipal($2);"},
		{"trigger": "I-LdapReferralException\tinit", "contents": "LdapReferralException ${1:exception} = new LdapReferralException($2);"},
		{"trigger": "I-Lease\tinit", "contents": "Lease ${1:lease} = new Lease($2);"},
		{"trigger": "I-LegacyGlueFocusTraversalPolicy\tinit", "contents": "LegacyGlueFocusTraversalPolicy ${1:policy} = new LegacyGlueFocusTraversalPolicy($2);"},
		{"trigger": "I-LegacyServerSocketEndPointInfo\tinit", "contents": "LegacyServerSocketEndPointInfo ${1:info} = new LegacyServerSocketEndPointInfo($2);"},
		{"trigger": "I-LegacyServerSocketManager\tinit", "contents": "LegacyServerSocketManager ${1:manager} = new LegacyServerSocketManager($2);"},
		{"trigger": "I-Legend\tinit", "contents": "Legend ${1:legend} = new Legend($2);"},
		{"trigger": "I-LensApplication\tinit", "contents": "LensApplication ${1:application} = new LensApplication($2);"},
		{"trigger": "I-LensClipboardDelegate\tinit", "contents": "LensClipboardDelegate ${1:delegate} = new LensClipboardDelegate($2);"},
		{"trigger": "I-LensCursor\tinit", "contents": "LensCursor ${1:cursor} = new LensCursor($2);"},
		{"trigger": "I-LensDnDClipboard\tinit", "contents": "LensDnDClipboard ${1:clipboard} = new LensDnDClipboard($2);"},
		{"trigger": "I-LensLogger\tinit", "contents": "LensLogger ${1:logger} = new LensLogger($2);"},
		{"trigger": "I-LensMenuBarDelegate\tinit", "contents": "LensMenuBarDelegate ${1:delegate} = new LensMenuBarDelegate($2);"},
		{"trigger": "I-LensMenuDelegate\tinit", "contents": "LensMenuDelegate ${1:delegate} = new LensMenuDelegate($2);"},
		{"trigger": "I-LensPixels\tinit", "contents": "LensPixels ${1:pixels} = new LensPixels($2);"},
		{"trigger": "I-LensPlatformFactory\tinit", "contents": "LensPlatformFactory ${1:factory} = new LensPlatformFactory($2);"},
		{"trigger": "I-LensRobot\tinit", "contents": "LensRobot ${1:robot} = new LensRobot($2);"},
		{"trigger": "I-LensSystemClipboard\tinit", "contents": "LensSystemClipboard ${1:clipboard} = new LensSystemClipboard($2);"},
		{"trigger": "I-LensTimer\tinit", "contents": "LensTimer ${1:timer} = new LensTimer($2);"},
		{"trigger": "I-LensTouchInputSupport\tinit", "contents": "LensTouchInputSupport ${1:support} = new LensTouchInputSupport($2);"},
		{"trigger": "I-LensView\tinit", "contents": "LensView ${1:view} = new LensView($2);"},
		{"trigger": "I-LensWindow\tinit", "contents": "LensWindow ${1:window} = new LensWindow($2);"},
		{"trigger": "I-Level\tinit", "contents": "Level ${1:level} = new Level($2);"},
		{"trigger": "I-Lexer\tinit", "contents": "Lexer ${1:lexer} = new Lexer($2);"},
		{"trigger": "I-LexerState\tinit", "contents": "LexerState ${1:state} = new LexerState($2);"},
		{"trigger": "I-LexicalHandler\tinit", "contents": "LexicalHandler ${1:handler} = new LexicalHandler($2);"},
		{"trigger": "I-LifespanPolicy\tinit", "contents": "LifespanPolicy ${1:policy} = new LifespanPolicy($2);"},
		{"trigger": "I-LifespanPolicyOperations\tinit", "contents": "LifespanPolicyOperations ${1:operations} = new LifespanPolicyOperations($2);"},
		{"trigger": "I-LifespanPolicyValue\tinit", "contents": "LifespanPolicyValue ${1:value} = new LifespanPolicyValue($2);"},
		{"trigger": "I-Light\tinit", "contents": "Light ${1:light} = new Light($2);"},
		{"trigger": "I-LightBase\tinit", "contents": "LightBase ${1:base} = new LightBase($2);"},
		{"trigger": "I-LightBuilder\tinit", "contents": "LightBuilder ${1:builder} = new LightBuilder($2);"},
		{"trigger": "I-Lighting\tinit", "contents": "Lighting ${1:lighting} = new Lighting($2);"},
		{"trigger": "I-LightingBuilder\tinit", "contents": "LightingBuilder ${1:builder} = new LightingBuilder($2);"},
		{"trigger": "I-LightweightPeer\tinit", "contents": "LightweightPeer ${1:peer} = new LightweightPeer($2);"},
		{"trigger": "I-LimitExceededException\tinit", "contents": "LimitExceededException ${1:exception} = new LimitExceededException($2);"},
		{"trigger": "I-Line\tinit", "contents": "Line ${1:line} = new Line($2);"},
		{"trigger": "I-Line2D\tinit", "contents": "Line2D ${1:line2d} = new Line2D($2);"},
		{"trigger": "I-LineBorder\tinit", "contents": "LineBorder ${1:border} = new LineBorder($2);"},
		{"trigger": "I-LineBreakMeasurer\tinit", "contents": "LineBreakMeasurer ${1:measurer} = new LineBreakMeasurer($2);"},
		{"trigger": "I-LineBuilder\tinit", "contents": "LineBuilder ${1:builder} = new LineBuilder($2);"},
		{"trigger": "I-LineChart\tinit", "contents": "LineChart ${1:chart} = new LineChart($2);"},
		{"trigger": "I-LineChartBuilder\tinit", "contents": "LineChartBuilder ${1:builder} = new LineChartBuilder($2);"},
		{"trigger": "I-LineEvent\tinit", "contents": "LineEvent ${1:event} = new LineEvent($2);"},
		{"trigger": "I-LineIterator\tinit", "contents": "LineIterator ${1:iterator} = new LineIterator($2);"},
		{"trigger": "I-LineListener\tinit", "contents": "LineListener ${1:listener} = new LineListener($2);"},
		{"trigger": "I-LineMap\tinit", "contents": "LineMap ${1:map} = new LineMap($2);"},
		{"trigger": "I-LineMetrics\tinit", "contents": "LineMetrics ${1:metrics} = new LineMetrics($2);"},
		{"trigger": "I-LineNumber\tinit", "contents": "LineNumber ${1:number} = new LineNumber($2);"},
		{"trigger": "I-LineNumberGen\tinit", "contents": "LineNumberGen ${1:gen} = new LineNumberGen($2);"},
		{"trigger": "I-LineNumberInputStream\tinit", "contents": "LineNumberInputStream ${1:stream} = new LineNumberInputStream($2);"},
		{"trigger": "I-LineNumberReader\tinit", "contents": "LineNumberReader ${1:reader} = new LineNumberReader($2);"},
		{"trigger": "I-LineNumberTable\tinit", "contents": "LineNumberTable ${1:table} = new LineNumberTable($2);"},
		{"trigger": "I-LineSeparator\tinit", "contents": "LineSeparator ${1:separator} = new LineSeparator($2);"},
		{"trigger": "I-LineTo\tinit", "contents": "LineTo ${1:to} = new LineTo($2);"},
		{"trigger": "I-LineToBuilder\tinit", "contents": "LineToBuilder ${1:builder} = new LineToBuilder($2);"},
		{"trigger": "I-LineUnavailableException\tinit", "contents": "LineUnavailableException ${1:exception} = new LineUnavailableException($2);"},
		{"trigger": "I-LineView\tinit", "contents": "LineView ${1:view} = new LineView($2);"},
		{"trigger": "I-LinearConvolveCoreEffect\tinit", "contents": "LinearConvolveCoreEffect ${1:effect} = new LinearConvolveCoreEffect($2);"},
		{"trigger": "I-LinearConvolveKernel\tinit", "contents": "LinearConvolveKernel ${1:kernel} = new LinearConvolveKernel($2);"},
		{"trigger": "I-LinearConvolveRenderState\tinit", "contents": "LinearConvolveRenderState ${1:state} = new LinearConvolveRenderState($2);"},
		{"trigger": "I-LinearGradient\tinit", "contents": "LinearGradient ${1:gradient} = new LinearGradient($2);"},
		{"trigger": "I-LinearGradientBuilder\tinit", "contents": "LinearGradientBuilder ${1:builder} = new LinearGradientBuilder($2);"},
		{"trigger": "I-LinearGradientContext\tinit", "contents": "LinearGradientContext ${1:context} = new LinearGradientContext($2);"},
		{"trigger": "I-LinearGradientPaint\tinit", "contents": "LinearGradientPaint ${1:paint} = new LinearGradientPaint($2);"},
		{"trigger": "I-LinearGradientPaintContext\tinit", "contents": "LinearGradientPaintContext ${1:context} = new LinearGradientPaintContext($2);"},
		{"trigger": "I-LinkException\tinit", "contents": "LinkException ${1:exception} = new LinkException($2);"},
		{"trigger": "I-LinkLoopException\tinit", "contents": "LinkLoopException ${1:exception} = new LinkLoopException($2);"},
		{"trigger": "I-LinkOption\tinit", "contents": "LinkOption ${1:option} = new LinkOption($2);"},
		{"trigger": "I-LinkPermission\tinit", "contents": "LinkPermission ${1:permission} = new LinkPermission($2);"},
		{"trigger": "I-LinkRef\tinit", "contents": "LinkRef ${1:ref} = new LinkRef($2);"},
		{"trigger": "I-LinkStyle\tinit", "contents": "LinkStyle ${1:style} = new LinkStyle($2);"},
		{"trigger": "I-LinkTree\tinit", "contents": "LinkTree ${1:tree} = new LinkTree($2);"},
		{"trigger": "I-LinkageError\tinit", "contents": "LinkageError ${1:error} = new LinkageError($2);"},
		{"trigger": "I-LinkedBlockingDeque\tinit", "contents": "LinkedBlockingDeque ${1:deque} = new LinkedBlockingDeque($2);"},
		{"trigger": "I-LinkedBlockingQueue\tinit", "contents": "LinkedBlockingQueue ${1:queue} = new LinkedBlockingQueue($2);"},
		{"trigger": "I-LinkedHashMap\tinit", "contents": "LinkedHashMap<${1:String}> ${2:map} = new LinkedHashMap<${1:String}>();"},
		{"trigger": "I-LinkedHashSet\tinit", "contents": "LinkedHashSet<${1:String}> ${2:set} = new LinkedHashSet<${1:String}>();"},
		{"trigger": "I-LinkedInvocationHandler\tinit", "contents": "LinkedInvocationHandler ${1:handler} = new LinkedInvocationHandler($2);"},
		{"trigger": "I-LinkedList\tinit", "contents": "LinkedList<${1:String}> ${2:list} = new LinkedList<>(${3});"},
		{"trigger": "I-LinkedTransferQueue\tinit", "contents": "LinkedTransferQueue ${1:queue} = new LinkedTransferQueue($2);"},
		{"trigger": "I-LinuxAbsoluteInputCapabilities\tinit", "contents": "LinuxAbsoluteInputCapabilities ${1:capabilities} = new LinuxAbsoluteInputCapabilities($2);"},
		{"trigger": "I-LinuxArch\tinit", "contents": "LinuxArch ${1:arch} = new LinuxArch($2);"},
		{"trigger": "I-LinuxEventBuffer\tinit", "contents": "LinuxEventBuffer ${1:buffer} = new LinuxEventBuffer($2);"},
		{"trigger": "I-LinuxEventBuffers\tinit", "contents": "LinuxEventBuffers ${1:buffers} = new LinuxEventBuffers($2);"},
		{"trigger": "I-LinuxFrameBuffer\tinit", "contents": "LinuxFrameBuffer ${1:buffer} = new LinuxFrameBuffer($2);"},
		{"trigger": "I-LinuxInput\tinit", "contents": "LinuxInput ${1:input} = new LinuxInput($2);"},
		{"trigger": "I-LinuxInputDevice\tinit", "contents": "LinuxInputDevice ${1:device} = new LinuxInputDevice($2);"},
		{"trigger": "I-LinuxInputDeviceRegistry\tinit", "contents": "LinuxInputDeviceRegistry ${1:registry} = new LinuxInputDeviceRegistry($2);"},
		{"trigger": "I-LinuxInputProcessor\tinit", "contents": "LinuxInputProcessor ${1:processor} = new LinuxInputProcessor($2);"},
		{"trigger": "I-LinuxKeyBits\tinit", "contents": "LinuxKeyBits ${1:bits} = new LinuxKeyBits($2);"},
		{"trigger": "I-LinuxKeyProcessor\tinit", "contents": "LinuxKeyProcessor ${1:processor} = new LinuxKeyProcessor($2);"},
		{"trigger": "I-LinuxMouseProcessor\tinit", "contents": "LinuxMouseProcessor ${1:processor} = new LinuxMouseProcessor($2);"},
		{"trigger": "I-LinuxPlatform\tinit", "contents": "LinuxPlatform ${1:platform} = new LinuxPlatform($2);"},
		{"trigger": "I-LinuxPlatformFactory\tinit", "contents": "LinuxPlatformFactory ${1:factory} = new LinuxPlatformFactory($2);"},
		{"trigger": "I-LinuxSimpleTouchProcessor\tinit", "contents": "LinuxSimpleTouchProcessor ${1:processor} = new LinuxSimpleTouchProcessor($2);"},
		{"trigger": "I-LinuxStatefulMultiTouchProcessor\tinit", "contents": "LinuxStatefulMultiTouchProcessor ${1:processor} = new LinuxStatefulMultiTouchProcessor($2);"},
		{"trigger": "I-LinuxStatelessMultiTouchProcessor\tinit", "contents": "LinuxStatelessMultiTouchProcessor ${1:processor} = new LinuxStatelessMultiTouchProcessor($2);"},
		{"trigger": "I-LinuxSystem\tinit", "contents": "LinuxSystem ${1:system} = new LinuxSystem($2);"},
		{"trigger": "I-LinuxTouchProcessor\tinit", "contents": "LinuxTouchProcessor ${1:processor} = new LinuxTouchProcessor($2);"},
		{"trigger": "I-LinuxTouchTransform\tinit", "contents": "LinuxTouchTransform ${1:transform} = new LinuxTouchTransform($2);"},
		{"trigger": "I-List\tinit", "contents": "List<${1:String}> ${2:list} = new ${3:ArrayList}<>();"},
		{"trigger": "I-ListBinding\tinit", "contents": "ListBinding ${1:binding} = new ListBinding($2);"},
		{"trigger": "I-ListCell\tinit", "contents": "ListCell ${1:cell} = new ListCell($2);"},
		{"trigger": "I-ListCellBehavior\tinit", "contents": "ListCellBehavior ${1:behavior} = new ListCellBehavior($2);"},
		{"trigger": "I-ListCellBuilder\tinit", "contents": "ListCellBuilder ${1:builder} = new ListCellBuilder($2);"},
		{"trigger": "I-ListCellRenderer\tinit", "contents": "ListCellRenderer ${1:renderer} = new ListCellRenderer($2);"},
		{"trigger": "I-ListCellSkin\tinit", "contents": "ListCellSkin ${1:skin} = new ListCellSkin($2);"},
		{"trigger": "I-ListChangeBuilder\tinit", "contents": "ListChangeBuilder ${1:builder} = new ListChangeBuilder($2);"},
		{"trigger": "I-ListChangeListener\tinit", "contents": "ListChangeListener ${1:listener} = new ListChangeListener($2);"},
		{"trigger": "I-ListDV\tinit", "contents": "ListDV ${1:listdv} = new ListDV($2);"},
		{"trigger": "I-ListDataEvent\tinit", "contents": "ListDataEvent ${1:event} = new ListDataEvent($2);"},
		{"trigger": "I-ListDataListener\tinit", "contents": "ListDataListener ${1:listener} = new ListDataListener($2);"},
		{"trigger": "I-ListDatatypeValidator\tinit", "contents": "ListDatatypeValidator ${1:validator} = new ListDatatypeValidator($2);"},
		{"trigger": "I-ListExpression\tinit", "contents": "ListExpression ${1:expression} = new ListExpression($2);"},
		{"trigger": "I-ListExpressionHelper\tinit", "contents": "ListExpressionHelper ${1:helper} = new ListExpressionHelper($2);"},
		{"trigger": "I-ListIterator\tinit", "contents": "ListIterator<${1:String}> ${2:it} = ${3:list}.listIterator(${4:optional: index});"},
		{"trigger": "I-ListListenerHelper\tinit", "contents": "ListListenerHelper ${1:helper} = new ListListenerHelper($2);"},
		{"trigger": "I-ListModel\tinit", "contents": "ListModel ${1:model} = new ListModel($2);"},
		{"trigger": "I-ListPeer\tinit", "contents": "ListPeer ${1:peer} = new ListPeer($2);"},
		{"trigger": "I-ListProperty\tinit", "contents": "ListProperty ${1:property} = new ListProperty($2);"},
		{"trigger": "I-ListPropertyBase\tinit", "contents": "ListPropertyBase ${1:base} = new ListPropertyBase($2);"},
		{"trigger": "I-ListResourceBundle\tinit", "contents": "ListResourceBundle ${1:bundle} = new ListResourceBundle($2);"},
		{"trigger": "I-ListSelectionEvent\tinit", "contents": "ListSelectionEvent ${1:event} = new ListSelectionEvent($2);"},
		{"trigger": "I-ListSelectionListener\tinit", "contents": "ListSelectionListener ${1:listener} = new ListSelectionListener($2);"},
		{"trigger": "I-ListSelectionModel\tinit", "contents": "ListSelectionModel ${1:model} = new ListSelectionModel($2);"},
		{"trigger": "I-ListUI\tinit", "contents": "ListUI ${1:listui} = new ListUI($2);"},
		{"trigger": "I-ListView\tinit", "contents": "ListView ${1:view} = new ListView($2);"},
		{"trigger": "I-ListViewBehavior\tinit", "contents": "ListViewBehavior ${1:behavior} = new ListViewBehavior($2);"},
		{"trigger": "I-ListViewBuilder\tinit", "contents": "ListViewBuilder ${1:builder} = new ListViewBuilder($2);"},
		{"trigger": "I-ListViewSkin\tinit", "contents": "ListViewSkin ${1:skin} = new ListViewSkin($2);"},
		{"trigger": "I-ListenerNotFoundException\tinit", "contents": "ListenerNotFoundException ${1:exception} = new ListenerNotFoundException($2);"},
		{"trigger": "I-ListingErrorHandler\tinit", "contents": "ListingErrorHandler ${1:handler} = new ListingErrorHandler($2);"},
		{"trigger": "I-LiteralAttribute\tinit", "contents": "LiteralAttribute ${1:attribute} = new LiteralAttribute($2);"},
		{"trigger": "I-LiteralElement\tinit", "contents": "LiteralElement ${1:element} = new LiteralElement($2);"},
		{"trigger": "I-LiteralExpr\tinit", "contents": "LiteralExpr ${1:expr} = new LiteralExpr($2);"},
		{"trigger": "I-LiteralExpression\tinit", "contents": "LiteralExpression ${1:expression} = new LiteralExpression($2);"},
		{"trigger": "I-LiteralTree\tinit", "contents": "LiteralTree ${1:tree} = new LiteralTree($2);"},
		{"trigger": "I-LoadClass\tinit", "contents": "LoadClass ${1:class} = new LoadClass($2);"},
		{"trigger": "I-LoadDocument\tinit", "contents": "LoadDocument ${1:document} = new LoadDocument($2);"},
		{"trigger": "I-LoadException\tinit", "contents": "LoadException ${1:exception} = new LoadException($2);"},
		{"trigger": "I-LoadInstruction\tinit", "contents": "LoadInstruction ${1:instruction} = new LoadInstruction($2);"},
		{"trigger": "I-LoadListener\tinit", "contents": "LoadListener ${1:listener} = new LoadListener($2);"},
		{"trigger": "I-LoadListenerClient\tinit", "contents": "LoadListenerClient ${1:client} = new LoadListenerClient($2);"},
		{"trigger": "I-LoaderHandler\tinit", "contents": "LoaderHandler ${1:handler} = new LoaderHandler($2);"},
		{"trigger": "I-LocPathIterator\tinit", "contents": "LocPathIterator ${1:iterator} = new LocPathIterator($2);"},
		{"trigger": "I-LocalClientRequestDispatcher\tinit", "contents": "LocalClientRequestDispatcher ${1:dispatcher} = new LocalClientRequestDispatcher($2);"},
		{"trigger": "I-LocalClientRequestDispatcherFactory\tinit", "contents": "LocalClientRequestDispatcherFactory ${1:factory} = new LocalClientRequestDispatcherFactory($2);"},
		{"trigger": "I-LocalClipboard\tinit", "contents": "LocalClipboard ${1:clipboard} = new LocalClipboard($2);"},
		{"trigger": "I-LocalDate\tinit", "contents": "LocalDate ${1:date} = new LocalDate($2);"},
		{"trigger": "I-LocalDateStringConverter\tinit", "contents": "LocalDateStringConverter ${1:converter} = new LocalDateStringConverter($2);"},
		{"trigger": "I-LocalDateTime\tinit", "contents": "LocalDateTime ${1:time} = new LocalDateTime($2);"},
		{"trigger": "I-LocalDateTimeStringConverter\tinit", "contents": "LocalDateTimeStringConverter ${1:converter} = new LocalDateTimeStringConverter($2);"},
		{"trigger": "I-LocalNameCall\tinit", "contents": "LocalNameCall ${1:call} = new LocalNameCall($2);"},
		{"trigger": "I-LocalObject\tinit", "contents": "LocalObject ${1:object} = new LocalObject($2);"},
		{"trigger": "I-LocalResolver\tinit", "contents": "LocalResolver ${1:resolver} = new LocalResolver($2);"},
		{"trigger": "I-LocalTime\tinit", "contents": "LocalTime ${1:time} = new LocalTime($2);"},
		{"trigger": "I-LocalTimeStringConverter\tinit", "contents": "LocalTimeStringConverter ${1:converter} = new LocalTimeStringConverter($2);"},
		{"trigger": "I-LocalVariable\tinit", "contents": "LocalVariable ${1:variable} = new LocalVariable($2);"},
		{"trigger": "I-LocalVariableGen\tinit", "contents": "LocalVariableGen ${1:gen} = new LocalVariableGen($2);"},
		{"trigger": "I-LocalVariableInstruction\tinit", "contents": "LocalVariableInstruction ${1:instruction} = new LocalVariableInstruction($2);"},
		{"trigger": "I-LocalVariableTable\tinit", "contents": "LocalVariableTable ${1:table} = new LocalVariableTable($2);"},
		{"trigger": "I-LocalVariableTypeTable\tinit", "contents": "LocalVariableTypeTable ${1:table} = new LocalVariableTypeTable($2);"},
		{"trigger": "I-Locale\tinit", "contents": "Locale ${1:locale} = new Locale($2);"},
		{"trigger": "I-LocaleISOData\tinit", "contents": "LocaleISOData ${1:data} = new LocaleISOData($2);"},
		{"trigger": "I-LocaleNameProvider\tinit", "contents": "LocaleNameProvider ${1:provider} = new LocaleNameProvider($2);"},
		{"trigger": "I-LocaleServiceProvider\tinit", "contents": "LocaleServiceProvider ${1:provider} = new LocaleServiceProvider($2);"},
		{"trigger": "I-LocaleUtility\tinit", "contents": "LocaleUtility ${1:utility} = new LocaleUtility($2);"},
		{"trigger": "I-LocalizedStrings\tinit", "contents": "LocalizedStrings ${1:strings} = new LocalizedStrings($2);"},
		{"trigger": "I-LocateRegistry\tinit", "contents": "LocateRegistry ${1:registry} = new LocateRegistry($2);"},
		{"trigger": "I-Location\tinit", "contents": "Location ${1:location} = new Location($2);"},
		{"trigger": "I-LocationPathPattern\tinit", "contents": "LocationPathPattern ${1:pattern} = new LocationPathPattern($2);"},
		{"trigger": "I-Locator\tinit", "contents": "Locator ${1:locator} = new Locator($2);"},
		{"trigger": "I-Locator2Impl\tinit", "contents": "Locator2Impl ${1:impl} = new Locator2Impl($2);"},
		{"trigger": "I-LocatorCache\tinit", "contents": "LocatorCache ${1:cache} = new LocatorCache($2);"},
		{"trigger": "I-LocatorHelper\tinit", "contents": "LocatorHelper ${1:helper} = new LocatorHelper($2);"},
		{"trigger": "I-LocatorHolder\tinit", "contents": "LocatorHolder ${1:holder} = new LocatorHolder($2);"},
		{"trigger": "I-LocatorImpl\tinit", "contents": "LocatorImpl ${1:impl} = new LocatorImpl($2);"},
		{"trigger": "I-LocatorOperations\tinit", "contents": "LocatorOperations ${1:operations} = new LocatorOperations($2);"},
		{"trigger": "I-LocatorProxy\tinit", "contents": "LocatorProxy ${1:proxy} = new LocatorProxy($2);"},
		{"trigger": "I-LocatorWrapper\tinit", "contents": "LocatorWrapper ${1:wrapper} = new LocatorWrapper($2);"},
		{"trigger": "I-Lock\tinit", "contents": "Lock ${1:lock} = new Lock($2);"},
		{"trigger": "I-LockInfo\tinit", "contents": "LockInfo ${1:info} = new LockInfo($2);"},
		{"trigger": "I-LockSupport\tinit", "contents": "LockSupport ${1:support} = new LockSupport($2);"},
		{"trigger": "I-LockableResource\tinit", "contents": "LockableResource ${1:resource} = new LockableResource($2);"},
		{"trigger": "I-LogManager\tinit", "contents": "LogManager ${1:manager} = new LogManager($2);"},
		{"trigger": "I-LogRecord\tinit", "contents": "LogRecord ${1:record} = new LogRecord($2);"},
		{"trigger": "I-LogStream\tinit", "contents": "LogStream ${1:stream} = new LogStream($2);"},
		{"trigger": "I-LogWrapperBase\tinit", "contents": "LogWrapperBase ${1:base} = new LogWrapperBase($2);"},
		{"trigger": "I-LogWrapperFactory\tinit", "contents": "LogWrapperFactory ${1:factory} = new LogWrapperFactory($2);"},
		{"trigger": "I-Logger\tinit", "contents": "Logger ${1:logger} = new Logger($2);"},
		{"trigger": "I-Logging\tinit", "contents": "Logging ${1:logging} = new Logging($2);"},
		{"trigger": "I-LoggingMXBean\tinit", "contents": "LoggingMXBean ${1:bean} = new LoggingMXBean($2);"},
		{"trigger": "I-LoggingPermission\tinit", "contents": "LoggingPermission ${1:permission} = new LoggingPermission($2);"},
		{"trigger": "I-LoggingProxyImpl\tinit", "contents": "LoggingProxyImpl ${1:impl} = new LoggingProxyImpl($2);"},
		{"trigger": "I-LogicalExpr\tinit", "contents": "LogicalExpr ${1:expr} = new LogicalExpr($2);"},
		{"trigger": "I-LogicalFont\tinit", "contents": "LogicalFont ${1:font} = new LogicalFont($2);"},
		{"trigger": "I-LogicalHandler\tinit", "contents": "LogicalHandler ${1:handler} = new LogicalHandler($2);"},
		{"trigger": "I-LogicalMessage\tinit", "contents": "LogicalMessage ${1:message} = new LogicalMessage($2);"},
		{"trigger": "I-LogicalMessageContext\tinit", "contents": "LogicalMessageContext ${1:context} = new LogicalMessageContext($2);"},
		{"trigger": "I-LoginContext\tinit", "contents": "LoginContext ${1:context} = new LoginContext($2);"},
		{"trigger": "I-LoginException\tinit", "contents": "LoginException ${1:exception} = new LoginException($2);"},
		{"trigger": "I-LoginModule\tinit", "contents": "LoginModule ${1:module} = new LoginModule($2);"},
		{"trigger": "I-Long\tinit", "contents": "Long ${1:long} = new Long($2);"},
		{"trigger": "I-LongAccumulator\tinit", "contents": "LongAccumulator ${1:accumulator} = new LongAccumulator($2);"},
		{"trigger": "I-LongAdder\tinit", "contents": "LongAdder ${1:adder} = new LongAdder($2);"},
		{"trigger": "I-LongArrayWrapper\tinit", "contents": "LongArrayWrapper ${1:wrapper} = new LongArrayWrapper($2);"},
		{"trigger": "I-LongBinaryOperator\tinit", "contents": "LongBinaryOperator ${1:operator} = new LongBinaryOperator($2);"},
		{"trigger": "I-LongBinding\tinit", "contents": "LongBinding ${1:binding} = new LongBinding($2);"},
		{"trigger": "I-LongBuffer\tinit", "contents": "LongBuffer ${1:buffer} = new LongBuffer($2);"},
		{"trigger": "I-LongConstant\tinit", "contents": "LongConstant ${1:constant} = new LongConstant($2);"},
		{"trigger": "I-LongConsumer\tinit", "contents": "LongConsumer ${1:consumer} = new LongConsumer($2);"},
		{"trigger": "I-LongExpression\tinit", "contents": "LongExpression ${1:expression} = new LongExpression($2);"},
		{"trigger": "I-LongFunction\tinit", "contents": "LongFunction ${1:function} = new LongFunction($2);"},
		{"trigger": "I-LongHolder\tinit", "contents": "LongHolder ${1:holder} = new LongHolder($2);"},
		{"trigger": "I-LongList\tinit", "contents": "LongList ${1:list} = new LongList($2);"},
		{"trigger": "I-LongLongSeqHelper\tinit", "contents": "LongLongSeqHelper ${1:helper} = new LongLongSeqHelper($2);"},
		{"trigger": "I-LongLongSeqHolder\tinit", "contents": "LongLongSeqHolder ${1:holder} = new LongLongSeqHolder($2);"},
		{"trigger": "I-LongMonitoredAttributeBase\tinit", "contents": "LongMonitoredAttributeBase ${1:base} = new LongMonitoredAttributeBase($2);"},
		{"trigger": "I-LongPipeline\tinit", "contents": "LongPipeline ${1:pipeline} = new LongPipeline($2);"},
		{"trigger": "I-LongPredicate\tinit", "contents": "LongPredicate ${1:predicate} = new LongPredicate($2);"},
		{"trigger": "I-LongProperty\tinit", "contents": "LongProperty ${1:property} = new LongProperty($2);"},
		{"trigger": "I-LongPropertyBase\tinit", "contents": "LongPropertyBase ${1:base} = new LongPropertyBase($2);"},
		{"trigger": "I-LongSeqHelper\tinit", "contents": "LongSeqHelper ${1:helper} = new LongSeqHelper($2);"},
		{"trigger": "I-LongSeqHolder\tinit", "contents": "LongSeqHolder ${1:holder} = new LongSeqHolder($2);"},
		{"trigger": "I-LongStream\tinit", "contents": "LongStream ${1:stream} = new LongStream($2);"},
		{"trigger": "I-LongStringConverter\tinit", "contents": "LongStringConverter ${1:converter} = new LongStringConverter($2);"},
		{"trigger": "I-LongSummaryStatistics\tinit", "contents": "LongSummaryStatistics ${1:statistics} = new LongSummaryStatistics($2);"},
		{"trigger": "I-LongSupplier\tinit", "contents": "LongSupplier ${1:supplier} = new LongSupplier($2);"},
		{"trigger": "I-LongToDoubleFunction\tinit", "contents": "LongToDoubleFunction ${1:function} = new LongToDoubleFunction($2);"},
		{"trigger": "I-LongToIntFunction\tinit", "contents": "LongToIntFunction ${1:function} = new LongToIntFunction($2);"},
		{"trigger": "I-LongUnaryOperator\tinit", "contents": "LongUnaryOperator ${1:operator} = new LongUnaryOperator($2);"},
		{"trigger": "I-LookAndFeel\tinit", "contents": "LookAndFeel ${1:feel} = new LookAndFeel($2);"},
		{"trigger": "I-LookaheadTouchFilter\tinit", "contents": "LookaheadTouchFilter ${1:filter} = new LookaheadTouchFilter($2);"},
		{"trigger": "I-LookupOp\tinit", "contents": "LookupOp ${1:op} = new LookupOp($2);"},
		{"trigger": "I-LookupTable\tinit", "contents": "LookupTable ${1:table} = new LookupTable($2);"},
		{"trigger": "I-LoweredBorder\tinit", "contents": "LoweredBorder ${1:border} = new LoweredBorder($2);"},
		{"trigger": "I-Lt\tinit", "contents": "Lt ${1:lt} = new Lt($2);"},
		{"trigger": "I-Lte\tinit", "contents": "Lte ${1:lte} = new Lte($2);"},
		{"trigger": "I-MARSHAL\tinit", "contents": "MARSHAL ${1:marshal} = new MARSHAL($2);"},
		{"trigger": "I-MBeanAnalyzer\tinit", "contents": "MBeanAnalyzer ${1:analyzer} = new MBeanAnalyzer($2);"},
		{"trigger": "I-MBeanAttributeInfo\tinit", "contents": "MBeanAttributeInfo ${1:info} = new MBeanAttributeInfo($2);"},
		{"trigger": "I-MBeanConstructorInfo\tinit", "contents": "MBeanConstructorInfo ${1:info} = new MBeanConstructorInfo($2);"},
		{"trigger": "I-MBeanException\tinit", "contents": "MBeanException ${1:exception} = new MBeanException($2);"},
		{"trigger": "I-MBeanFeatureInfo\tinit", "contents": "MBeanFeatureInfo ${1:info} = new MBeanFeatureInfo($2);"},
		{"trigger": "I-MBeanInfo\tinit", "contents": "MBeanInfo ${1:info} = new MBeanInfo($2);"},
		{"trigger": "I-MBeanInstantiator\tinit", "contents": "MBeanInstantiator ${1:instantiator} = new MBeanInstantiator($2);"},
		{"trigger": "I-MBeanIntrospector\tinit", "contents": "MBeanIntrospector ${1:introspector} = new MBeanIntrospector($2);"},
		{"trigger": "I-MBeanNotificationInfo\tinit", "contents": "MBeanNotificationInfo ${1:info} = new MBeanNotificationInfo($2);"},
		{"trigger": "I-MBeanOperationInfo\tinit", "contents": "MBeanOperationInfo ${1:info} = new MBeanOperationInfo($2);"},
		{"trigger": "I-MBeanParameterInfo\tinit", "contents": "MBeanParameterInfo ${1:info} = new MBeanParameterInfo($2);"},
		{"trigger": "I-MBeanPermission\tinit", "contents": "MBeanPermission ${1:permission} = new MBeanPermission($2);"},
		{"trigger": "I-MBeanRegistration\tinit", "contents": "MBeanRegistration ${1:registration} = new MBeanRegistration($2);"},
		{"trigger": "I-MBeanRegistrationException\tinit", "contents": "MBeanRegistrationException ${1:exception} = new MBeanRegistrationException($2);"},
		{"trigger": "I-MBeanServer\tinit", "contents": "MBeanServer ${1:server} = new MBeanServer($2);"},
		{"trigger": "I-MBeanServerAccessController\tinit", "contents": "MBeanServerAccessController ${1:controller} = new MBeanServerAccessController($2);"},
		{"trigger": "I-MBeanServerBuilder\tinit", "contents": "MBeanServerBuilder ${1:builder} = new MBeanServerBuilder($2);"},
		{"trigger": "I-MBeanServerConnection\tinit", "contents": "MBeanServerConnection ${1:connection} = new MBeanServerConnection($2);"},
		{"trigger": "I-MBeanServerDelegate\tinit", "contents": "MBeanServerDelegate ${1:delegate} = new MBeanServerDelegate($2);"},
		{"trigger": "I-MBeanServerDelegateImpl\tinit", "contents": "MBeanServerDelegateImpl ${1:impl} = new MBeanServerDelegateImpl($2);"},
		{"trigger": "I-MBeanServerDelegateMBean\tinit", "contents": "MBeanServerDelegateMBean ${1:bean} = new MBeanServerDelegateMBean($2);"},
		{"trigger": "I-MBeanServerFactory\tinit", "contents": "MBeanServerFactory ${1:factory} = new MBeanServerFactory($2);"},
		{"trigger": "I-MBeanServerFileAccessController\tinit", "contents": "MBeanServerFileAccessController ${1:controller} = new MBeanServerFileAccessController($2);"},
		{"trigger": "I-MBeanServerForwarder\tinit", "contents": "MBeanServerForwarder ${1:forwarder} = new MBeanServerForwarder($2);"},
		{"trigger": "I-MBeanServerInterceptor\tinit", "contents": "MBeanServerInterceptor ${1:interceptor} = new MBeanServerInterceptor($2);"},
		{"trigger": "I-MBeanServerInvocationHandler\tinit", "contents": "MBeanServerInvocationHandler ${1:handler} = new MBeanServerInvocationHandler($2);"},
		{"trigger": "I-MBeanServerNotification\tinit", "contents": "MBeanServerNotification ${1:notification} = new MBeanServerNotification($2);"},
		{"trigger": "I-MBeanServerNotificationFilter\tinit", "contents": "MBeanServerNotificationFilter ${1:filter} = new MBeanServerNotificationFilter($2);"},
		{"trigger": "I-MBeanServerPermission\tinit", "contents": "MBeanServerPermission ${1:permission} = new MBeanServerPermission($2);"},
		{"trigger": "I-MBeanSupport\tinit", "contents": "MBeanSupport ${1:support} = new MBeanSupport($2);"},
		{"trigger": "I-MBeanTrustPermission\tinit", "contents": "MBeanTrustPermission ${1:permission} = new MBeanTrustPermission($2);"},
		{"trigger": "I-MGF1ParameterSpec\tinit", "contents": "MGF1ParameterSpec ${1:spec} = new MGF1ParameterSpec($2);"},
		{"trigger": "I-MLet\tinit", "contents": "MLet ${1:let} = new MLet($2);"},
		{"trigger": "I-MLetContent\tinit", "contents": "MLetContent ${1:content} = new MLetContent($2);"},
		{"trigger": "I-MLetMBean\tinit", "contents": "MLetMBean ${1:bean} = new MLetMBean($2);"},
		{"trigger": "I-MLetObjectInputStream\tinit", "contents": "MLetObjectInputStream ${1:stream} = new MLetObjectInputStream($2);"},
		{"trigger": "I-MLetParser\tinit", "contents": "MLetParser ${1:parser} = new MLetParser($2);"},
		{"trigger": "I-MONITORENTER\tinit", "contents": "MONITORENTER ${1:monitorenter} = new MONITORENTER($2);"},
		{"trigger": "I-MONITOREXIT\tinit", "contents": "MONITOREXIT ${1:monitorexit} = new MONITOREXIT($2);"},
		{"trigger": "I-MTOM\tinit", "contents": "MTOM ${1:mtom} = new MTOM($2);"},
		{"trigger": "I-MTOMFeature\tinit", "contents": "MTOMFeature ${1:feature} = new MTOMFeature($2);"},
		{"trigger": "I-MULTIANEWARRAY\tinit", "contents": "MULTIANEWARRAY ${1:multianewarray} = new MULTIANEWARRAY($2);"},
		{"trigger": "I-MX6AcceleratedScreen\tinit", "contents": "MX6AcceleratedScreen ${1:screen} = new MX6AcceleratedScreen($2);"},
		{"trigger": "I-MX6Cursor\tinit", "contents": "MX6Cursor ${1:cursor} = new MX6Cursor($2);"},
		{"trigger": "I-MX6Platform\tinit", "contents": "MX6Platform ${1:platform} = new MX6Platform($2);"},
		{"trigger": "I-MX6PlatformFactory\tinit", "contents": "MX6PlatformFactory ${1:factory} = new MX6PlatformFactory($2);"},
		{"trigger": "I-MXBean\tinit", "contents": "MXBean ${1:bean} = new MXBean($2);"},
		{"trigger": "I-MXBeanIntrospector\tinit", "contents": "MXBeanIntrospector ${1:introspector} = new MXBeanIntrospector($2);"},
		{"trigger": "I-MXBeanLookup\tinit", "contents": "MXBeanLookup ${1:lookup} = new MXBeanLookup($2);"},
		{"trigger": "I-MXBeanMapping\tinit", "contents": "MXBeanMapping ${1:mapping} = new MXBeanMapping($2);"},
		{"trigger": "I-MXBeanMappingFactory\tinit", "contents": "MXBeanMappingFactory ${1:factory} = new MXBeanMappingFactory($2);"},
		{"trigger": "I-MXBeanProxy\tinit", "contents": "MXBeanProxy ${1:proxy} = new MXBeanProxy($2);"},
		{"trigger": "I-MXBeanSupport\tinit", "contents": "MXBeanSupport ${1:support} = new MXBeanSupport($2);"},
		{"trigger": "I-MXExtension\tinit", "contents": "MXExtension ${1:extension} = new MXExtension($2);"},
		{"trigger": "I-MXNodeAlgorithm\tinit", "contents": "MXNodeAlgorithm ${1:algorithm} = new MXNodeAlgorithm($2);"},
		{"trigger": "I-MXNodeAlgorithmContext\tinit", "contents": "MXNodeAlgorithmContext ${1:context} = new MXNodeAlgorithmContext($2);"},
		{"trigger": "I-MacAccessible\tinit", "contents": "MacAccessible ${1:accessible} = new MacAccessible($2);"},
		{"trigger": "I-MacApplication\tinit", "contents": "MacApplication ${1:application} = new MacApplication($2);"},
		{"trigger": "I-MacClipboardDelegate\tinit", "contents": "MacClipboardDelegate ${1:delegate} = new MacClipboardDelegate($2);"},
		{"trigger": "I-MacCommonDialogs\tinit", "contents": "MacCommonDialogs ${1:dialogs} = new MacCommonDialogs($2);"},
		{"trigger": "I-MacCursor\tinit", "contents": "MacCursor ${1:cursor} = new MacCursor($2);"},
		{"trigger": "I-MacDnDClipboard\tinit", "contents": "MacDnDClipboard ${1:clipboard} = new MacDnDClipboard($2);"},
		{"trigger": "I-MacFileNSURL\tinit", "contents": "MacFileNSURL ${1:macfilensurl} = new MacFileNSURL($2);"},
		{"trigger": "I-MacFontFinder\tinit", "contents": "MacFontFinder ${1:finder} = new MacFontFinder($2);"},
		{"trigger": "I-MacGLContext\tinit", "contents": "MacGLContext ${1:context} = new MacGLContext($2);"},
		{"trigger": "I-MacGLDrawable\tinit", "contents": "MacGLDrawable ${1:drawable} = new MacGLDrawable($2);"},
		{"trigger": "I-MacGLFactory\tinit", "contents": "MacGLFactory ${1:factory} = new MacGLFactory($2);"},
		{"trigger": "I-MacGLPixelFormat\tinit", "contents": "MacGLPixelFormat ${1:format} = new MacGLPixelFormat($2);"},
		{"trigger": "I-MacGestureSupport\tinit", "contents": "MacGestureSupport ${1:support} = new MacGestureSupport($2);"},
		{"trigger": "I-MacMenuBarDelegate\tinit", "contents": "MacMenuBarDelegate ${1:delegate} = new MacMenuBarDelegate($2);"},
		{"trigger": "I-MacMenuDelegate\tinit", "contents": "MacMenuDelegate ${1:delegate} = new MacMenuDelegate($2);"},
		{"trigger": "I-MacPasteboard\tinit", "contents": "MacPasteboard ${1:pasteboard} = new MacPasteboard($2);"},
		{"trigger": "I-MacPixels\tinit", "contents": "MacPixels ${1:pixels} = new MacPixels($2);"},
		{"trigger": "I-MacPlatformFactory\tinit", "contents": "MacPlatformFactory ${1:factory} = new MacPlatformFactory($2);"},
		{"trigger": "I-MacRobot\tinit", "contents": "MacRobot ${1:robot} = new MacRobot($2);"},
		{"trigger": "I-MacSystemClipboard\tinit", "contents": "MacSystemClipboard ${1:clipboard} = new MacSystemClipboard($2);"},
		{"trigger": "I-MacTimer\tinit", "contents": "MacTimer ${1:timer} = new MacTimer($2);"},
		{"trigger": "I-MacTouchInputSupport\tinit", "contents": "MacTouchInputSupport ${1:support} = new MacTouchInputSupport($2);"},
		{"trigger": "I-MacVariant\tinit", "contents": "MacVariant ${1:variant} = new MacVariant($2);"},
		{"trigger": "I-MacView\tinit", "contents": "MacView ${1:view} = new MacView($2);"},
		{"trigger": "I-MacWindow\tinit", "contents": "MacWindow ${1:window} = new MacWindow($2);"},
		{"trigger": "I-MainThread\tinit", "contents": "MainThread ${1:thread} = new MainThread($2);"},
		{"trigger": "I-MakeImmutable\tinit", "contents": "MakeImmutable ${1:immutable} = new MakeImmutable($2);"},
		{"trigger": "I-MalformedByteSequenceException\tinit", "contents": "MalformedByteSequenceException ${1:exception} = new MalformedByteSequenceException($2);"},
		{"trigger": "I-MalformedInputException\tinit", "contents": "MalformedInputException ${1:exception} = new MalformedInputException($2);"},
		{"trigger": "I-MalformedLinkException\tinit", "contents": "MalformedLinkException ${1:exception} = new MalformedLinkException($2);"},
		{"trigger": "I-MalformedObjectNameException\tinit", "contents": "MalformedObjectNameException ${1:exception} = new MalformedObjectNameException($2);"},
		{"trigger": "I-MalformedParameterizedTypeException\tinit", "contents": "MalformedParameterizedTypeException ${1:exception} = new MalformedParameterizedTypeException($2);"},
		{"trigger": "I-MalformedParametersException\tinit", "contents": "MalformedParametersException ${1:exception} = new MalformedParametersException($2);"},
		{"trigger": "I-MalformedURLException\tinit", "contents": "MalformedURLException ${1:exception} = new MalformedURLException($2);"},
		{"trigger": "I-ManageReferralControl\tinit", "contents": "ManageReferralControl ${1:control} = new ManageReferralControl($2);"},
		{"trigger": "I-ManagedResource\tinit", "contents": "ManagedResource ${1:resource} = new ManagedResource($2);"},
		{"trigger": "I-ManagementFactory\tinit", "contents": "ManagementFactory ${1:factory} = new ManagementFactory($2);"},
		{"trigger": "I-ManagementPermission\tinit", "contents": "ManagementPermission ${1:permission} = new ManagementPermission($2);"},
		{"trigger": "I-Manifest\tinit", "contents": "Manifest ${1:manifest} = new Manifest($2);"},
		{"trigger": "I-Map\tinit", "contents": "Map ${1:map} = new ${2:HashMap}($3);"},
		{"trigger": "I-MapAdapterChange\tinit", "contents": "MapAdapterChange ${1:change} = new MapAdapterChange($2);"},
		{"trigger": "I-MapBinding\tinit", "contents": "MapBinding ${1:binding} = new MapBinding($2);"},
		{"trigger": "I-MapChangeListener\tinit", "contents": "MapChangeListener ${1:listener} = new MapChangeListener($2);"},
		{"trigger": "I-MapExpression\tinit", "contents": "MapExpression ${1:expression} = new MapExpression($2);"},
		{"trigger": "I-MapExpressionHelper\tinit", "contents": "MapExpressionHelper ${1:helper} = new MapExpressionHelper($2);"},
		{"trigger": "I-MapListenerHelper\tinit", "contents": "MapListenerHelper ${1:helper} = new MapListenerHelper($2);"},
		{"trigger": "I-MapProperty\tinit", "contents": "MapProperty ${1:property} = new MapProperty($2);"},
		{"trigger": "I-MapPropertyBase\tinit", "contents": "MapPropertyBase ${1:base} = new MapPropertyBase($2);"},
		{"trigger": "I-MapValueFactory\tinit", "contents": "MapValueFactory ${1:factory} = new MapValueFactory($2);"},
		{"trigger": "I-MappedByteBuffer\tinit", "contents": "MappedByteBuffer ${1:buffer} = new MappedByteBuffer($2);"},
		{"trigger": "I-MappingChange\tinit", "contents": "MappingChange ${1:change} = new MappingChange($2);"},
		{"trigger": "I-Margins\tinit", "contents": "Margins ${1:margins} = new Margins($2);"},
		{"trigger": "I-MarkerEvent\tinit", "contents": "MarkerEvent ${1:event} = new MarkerEvent($2);"},
		{"trigger": "I-MarkerInstruction\tinit", "contents": "MarkerInstruction ${1:instruction} = new MarkerInstruction($2);"},
		{"trigger": "I-MarkerListener\tinit", "contents": "MarkerListener ${1:listener} = new MarkerListener($2);"},
		{"trigger": "I-MarkerSegment\tinit", "contents": "MarkerSegment ${1:segment} = new MarkerSegment($2);"},
		{"trigger": "I-MarkerStateListener\tinit", "contents": "MarkerStateListener ${1:listener} = new MarkerStateListener($2);"},
		{"trigger": "I-MarshalException\tinit", "contents": "MarshalException ${1:exception} = new MarshalException($2);"},
		{"trigger": "I-MarshalledObject\tinit", "contents": "MarshalledObject ${1:object} = new MarshalledObject($2);"},
		{"trigger": "I-Marshaller\tinit", "contents": "Marshaller ${1:marshaller} = new Marshaller($2);"},
		{"trigger": "I-MaskData\tinit", "contents": "MaskData ${1:data} = new MaskData($2);"},
		{"trigger": "I-MaskFormatter\tinit", "contents": "MaskFormatter ${1:formatter} = new MaskFormatter($2);"},
		{"trigger": "I-MaskTextureGraphics\tinit", "contents": "MaskTextureGraphics ${1:graphics} = new MaskTextureGraphics($2);"},
		{"trigger": "I-MasterTimer\tinit", "contents": "MasterTimer ${1:timer} = new MasterTimer($2);"},
		{"trigger": "I-Match\tinit", "contents": "Match ${1:match} = new Match($2);"},
		{"trigger": "I-MatchGenerator\tinit", "contents": "MatchGenerator ${1:generator} = new MatchGenerator($2);"},
		{"trigger": "I-MatchOps\tinit", "contents": "MatchOps ${1:ops} = new MatchOps($2);"},
		{"trigger": "I-MatchPatternIterator\tinit", "contents": "MatchPatternIterator ${1:iterator} = new MatchPatternIterator($2);"},
		{"trigger": "I-MatchQueryExp\tinit", "contents": "MatchQueryExp ${1:exp} = new MatchQueryExp($2);"},
		{"trigger": "I-MatchResult\tinit", "contents": "MatchResult ${1:result} = new MatchResult($2);"},
		{"trigger": "I-Matcher\tinit", "contents": "Matcher ${1:matcher} = new Matcher($2);"},
		{"trigger": "I-MatchingIterator\tinit", "contents": "MatchingIterator ${1:iterator} = new MatchingIterator($2);"},
		{"trigger": "I-Material\tinit", "contents": "Material ${1:material} = new Material($2);"},
		{"trigger": "I-Math\tinit", "contents": "Math ${1:math} = new Math($2);"},
		{"trigger": "I-MathContext\tinit", "contents": "MathContext ${1:context} = new MathContext($2);"},
		{"trigger": "I-Matrix3f\tinit", "contents": "Matrix3f ${1:matrix3f} = new Matrix3f($2);"},
		{"trigger": "I-MatrixType\tinit", "contents": "MatrixType ${1:type} = new MatrixType($2);"},
		{"trigger": "I-MatteBorder\tinit", "contents": "MatteBorder ${1:border} = new MatteBorder($2);"},
		{"trigger": "I-MaxStreamFormatVersionComponent\tinit", "contents": "MaxStreamFormatVersionComponent ${1:component} = new MaxStreamFormatVersionComponent($2);"},
		{"trigger": "I-MaxStreamFormatVersionServiceContext\tinit", "contents": "MaxStreamFormatVersionServiceContext ${1:context} = new MaxStreamFormatVersionServiceContext($2);"},
		{"trigger": "I-Media\tinit", "contents": "Media ${1:media} = new Media($2);"},
		{"trigger": "I-MediaBuilder\tinit", "contents": "MediaBuilder ${1:builder} = new MediaBuilder($2);"},
		{"trigger": "I-MediaDisposer\tinit", "contents": "MediaDisposer ${1:disposer} = new MediaDisposer($2);"},
		{"trigger": "I-MediaError\tinit", "contents": "MediaError ${1:error} = new MediaError($2);"},
		{"trigger": "I-MediaErrorEvent\tinit", "contents": "MediaErrorEvent ${1:event} = new MediaErrorEvent($2);"},
		{"trigger": "I-MediaErrorListener\tinit", "contents": "MediaErrorListener ${1:listener} = new MediaErrorListener($2);"},
		{"trigger": "I-MediaException\tinit", "contents": "MediaException ${1:exception} = new MediaException($2);"},
		{"trigger": "I-MediaFrame\tinit", "contents": "MediaFrame ${1:frame} = new MediaFrame($2);"},
		{"trigger": "I-MediaFrameTracker\tinit", "contents": "MediaFrameTracker ${1:tracker} = new MediaFrameTracker($2);"},
		{"trigger": "I-MediaList\tinit", "contents": "MediaList ${1:list} = new MediaList($2);"},
		{"trigger": "I-MediaListImpl\tinit", "contents": "MediaListImpl ${1:impl} = new MediaListImpl($2);"},
		{"trigger": "I-MediaManager\tinit", "contents": "MediaManager ${1:manager} = new MediaManager($2);"},
		{"trigger": "I-MediaMarkerEvent\tinit", "contents": "MediaMarkerEvent ${1:event} = new MediaMarkerEvent($2);"},
		{"trigger": "I-MediaName\tinit", "contents": "MediaName ${1:name} = new MediaName($2);"},
		{"trigger": "I-MediaPlayer\tinit", "contents": "MediaPlayer ${1:player} = new MediaPlayer($2);"},
		{"trigger": "I-MediaPlayerBuilder\tinit", "contents": "MediaPlayerBuilder ${1:builder} = new MediaPlayerBuilder($2);"},
		{"trigger": "I-MediaPrintableArea\tinit", "contents": "MediaPrintableArea ${1:area} = new MediaPrintableArea($2);"},
		{"trigger": "I-MediaSize\tinit", "contents": "MediaSize ${1:size} = new MediaSize($2);"},
		{"trigger": "I-MediaSizeName\tinit", "contents": "MediaSizeName ${1:name} = new MediaSizeName($2);"},
		{"trigger": "I-MediaTracker\tinit", "contents": "MediaTracker ${1:tracker} = new MediaTracker($2);"},
		{"trigger": "I-MediaTray\tinit", "contents": "MediaTray ${1:tray} = new MediaTray($2);"},
		{"trigger": "I-MediaUtils\tinit", "contents": "MediaUtils ${1:utils} = new MediaUtils($2);"},
		{"trigger": "I-MediaView\tinit", "contents": "MediaView ${1:view} = new MediaView($2);"},
		{"trigger": "I-MediaViewBuilder\tinit", "contents": "MediaViewBuilder ${1:builder} = new MediaViewBuilder($2);"},
		{"trigger": "I-Member\tinit", "contents": "Member ${1:member} = new Member($2);"},
		{"trigger": "I-MemberDoc\tinit", "contents": "MemberDoc ${1:doc} = new MemberDoc($2);"},
		{"trigger": "I-MemberName\tinit", "contents": "MemberName ${1:name} = new MemberName($2);"},
		{"trigger": "I-MemberReferenceTree\tinit", "contents": "MemberReferenceTree ${1:tree} = new MemberReferenceTree($2);"},
		{"trigger": "I-MemberSelectTree\tinit", "contents": "MemberSelectTree ${1:tree} = new MemberSelectTree($2);"},
		{"trigger": "I-MembershipKey\tinit", "contents": "MembershipKey ${1:key} = new MembershipKey($2);"},
		{"trigger": "I-MemoryCache\tinit", "contents": "MemoryCache ${1:cache} = new MemoryCache($2);"},
		{"trigger": "I-MemoryCacheImageInputStream\tinit", "contents": "MemoryCacheImageInputStream ${1:stream} = new MemoryCacheImageInputStream($2);"},
		{"trigger": "I-MemoryCacheImageOutputStream\tinit", "contents": "MemoryCacheImageOutputStream ${1:stream} = new MemoryCacheImageOutputStream($2);"},
		{"trigger": "I-MemoryHandler\tinit", "contents": "MemoryHandler ${1:handler} = new MemoryHandler($2);"},
		{"trigger": "I-MemoryImageSource\tinit", "contents": "MemoryImageSource ${1:source} = new MemoryImageSource($2);"},
		{"trigger": "I-MemoryMXBean\tinit", "contents": "MemoryMXBean ${1:bean} = new MemoryMXBean($2);"},
		{"trigger": "I-MemoryManagerMXBean\tinit", "contents": "MemoryManagerMXBean ${1:bean} = new MemoryManagerMXBean($2);"},
		{"trigger": "I-MemoryNotificationInfo\tinit", "contents": "MemoryNotificationInfo ${1:info} = new MemoryNotificationInfo($2);"},
		{"trigger": "I-MemoryPoolMXBean\tinit", "contents": "MemoryPoolMXBean ${1:bean} = new MemoryPoolMXBean($2);"},
		{"trigger": "I-MemoryType\tinit", "contents": "MemoryType ${1:type} = new MemoryType($2);"},
		{"trigger": "I-MemoryUsage\tinit", "contents": "MemoryUsage ${1:usage} = new MemoryUsage($2);"},
		{"trigger": "I-Menu\tinit", "contents": "Menu ${1:menu} = new Menu($2);"},
		{"trigger": "I-MenuBar\tinit", "contents": "MenuBar ${1:bar} = new MenuBar($2);"},
		{"trigger": "I-MenuBarBuilder\tinit", "contents": "MenuBarBuilder ${1:builder} = new MenuBarBuilder($2);"},
		{"trigger": "I-MenuBarDelegate\tinit", "contents": "MenuBarDelegate ${1:delegate} = new MenuBarDelegate($2);"},
		{"trigger": "I-MenuBarMenuPainter\tinit", "contents": "MenuBarMenuPainter ${1:painter} = new MenuBarMenuPainter($2);"},
		{"trigger": "I-MenuBarPainter\tinit", "contents": "MenuBarPainter ${1:painter} = new MenuBarPainter($2);"},
		{"trigger": "I-MenuBarPeer\tinit", "contents": "MenuBarPeer ${1:peer} = new MenuBarPeer($2);"},
		{"trigger": "I-MenuBarSkin\tinit", "contents": "MenuBarSkin ${1:skin} = new MenuBarSkin($2);"},
		{"trigger": "I-MenuBarUI\tinit", "contents": "MenuBarUI ${1:menubarui} = new MenuBarUI($2);"},
		{"trigger": "I-MenuBase\tinit", "contents": "MenuBase ${1:base} = new MenuBase($2);"},
		{"trigger": "I-MenuBuilder\tinit", "contents": "MenuBuilder ${1:builder} = new MenuBuilder($2);"},
		{"trigger": "I-MenuButton\tinit", "contents": "MenuButton ${1:button} = new MenuButton($2);"},
		{"trigger": "I-MenuButtonBehavior\tinit", "contents": "MenuButtonBehavior ${1:behavior} = new MenuButtonBehavior($2);"},
		{"trigger": "I-MenuButtonBehaviorBase\tinit", "contents": "MenuButtonBehaviorBase ${1:base} = new MenuButtonBehaviorBase($2);"},
		{"trigger": "I-MenuButtonBuilder\tinit", "contents": "MenuButtonBuilder ${1:builder} = new MenuButtonBuilder($2);"},
		{"trigger": "I-MenuButtonSkin\tinit", "contents": "MenuButtonSkin ${1:skin} = new MenuButtonSkin($2);"},
		{"trigger": "I-MenuButtonSkinBase\tinit", "contents": "MenuButtonSkinBase ${1:base} = new MenuButtonSkinBase($2);"},
		{"trigger": "I-MenuComponent\tinit", "contents": "MenuComponent ${1:component} = new MenuComponent($2);"},
		{"trigger": "I-MenuComponentPeer\tinit", "contents": "MenuComponentPeer ${1:peer} = new MenuComponentPeer($2);"},
		{"trigger": "I-MenuContainer\tinit", "contents": "MenuContainer ${1:container} = new MenuContainer($2);"},
		{"trigger": "I-MenuDelegate\tinit", "contents": "MenuDelegate ${1:delegate} = new MenuDelegate($2);"},
		{"trigger": "I-MenuDragMouseEvent\tinit", "contents": "MenuDragMouseEvent ${1:event} = new MenuDragMouseEvent($2);"},
		{"trigger": "I-MenuDragMouseListener\tinit", "contents": "MenuDragMouseListener ${1:listener} = new MenuDragMouseListener($2);"},
		{"trigger": "I-MenuElement\tinit", "contents": "MenuElement ${1:element} = new MenuElement($2);"},
		{"trigger": "I-MenuEvent\tinit", "contents": "MenuEvent ${1:event} = new MenuEvent($2);"},
		{"trigger": "I-MenuItem\tinit", "contents": "MenuItem ${1:item} = new MenuItem($2);"},
		{"trigger": "I-MenuItemBase\tinit", "contents": "MenuItemBase ${1:base} = new MenuItemBase($2);"},
		{"trigger": "I-MenuItemBuilder\tinit", "contents": "MenuItemBuilder ${1:builder} = new MenuItemBuilder($2);"},
		{"trigger": "I-MenuItemDelegate\tinit", "contents": "MenuItemDelegate ${1:delegate} = new MenuItemDelegate($2);"},
		{"trigger": "I-MenuItemPainter\tinit", "contents": "MenuItemPainter ${1:painter} = new MenuItemPainter($2);"},
		{"trigger": "I-MenuItemPeer\tinit", "contents": "MenuItemPeer ${1:peer} = new MenuItemPeer($2);"},
		{"trigger": "I-MenuItemUI\tinit", "contents": "MenuItemUI ${1:menuitemui} = new MenuItemUI($2);"},
		{"trigger": "I-MenuKeyEvent\tinit", "contents": "MenuKeyEvent ${1:event} = new MenuKeyEvent($2);"},
		{"trigger": "I-MenuKeyListener\tinit", "contents": "MenuKeyListener ${1:listener} = new MenuKeyListener($2);"},
		{"trigger": "I-MenuListener\tinit", "contents": "MenuListener ${1:listener} = new MenuListener($2);"},
		{"trigger": "I-MenuPainter\tinit", "contents": "MenuPainter ${1:painter} = new MenuPainter($2);"},
		{"trigger": "I-MenuPeer\tinit", "contents": "MenuPeer ${1:peer} = new MenuPeer($2);"},
		{"trigger": "I-MenuSelectionManager\tinit", "contents": "MenuSelectionManager ${1:manager} = new MenuSelectionManager($2);"},
		{"trigger": "I-MenuShortcut\tinit", "contents": "MenuShortcut ${1:shortcut} = new MenuShortcut($2);"},
		{"trigger": "I-Merge\tinit", "contents": "Merge ${1:merge} = new Merge($2);"},
		{"trigger": "I-MergeCollation\tinit", "contents": "MergeCollation ${1:collation} = new MergeCollation($2);"},
		{"trigger": "I-Mesh\tinit", "contents": "Mesh ${1:mesh} = new Mesh($2);"},
		{"trigger": "I-MeshTempState\tinit", "contents": "MeshTempState ${1:state} = new MeshTempState($2);"},
		{"trigger": "I-MeshUtil\tinit", "contents": "MeshUtil ${1:util} = new MeshUtil($2);"},
		{"trigger": "I-MeshVertex\tinit", "contents": "MeshVertex ${1:vertex} = new MeshVertex($2);"},
		{"trigger": "I-MeshView\tinit", "contents": "MeshView ${1:view} = new MeshView($2);"},
		{"trigger": "I-Message\tinit", "contents": "Message ${1:message} = new Message($2);"},
		{"trigger": "I-MessageContext\tinit", "contents": "MessageContext ${1:context} = new MessageContext($2);"},
		{"trigger": "I-MessageDigest\tinit", "contents": "MessageDigest ${1:digest} = new MessageDigest($2);"},
		{"trigger": "I-MessageDigestAlgorithm\tinit", "contents": "MessageDigestAlgorithm ${1:algorithm} = new MessageDigestAlgorithm($2);"},
		{"trigger": "I-MessageDigestSpi\tinit", "contents": "MessageDigestSpi ${1:spi} = new MessageDigestSpi($2);"},
		{"trigger": "I-MessageFactory\tinit", "contents": "MessageFactory ${1:factory} = new MessageFactory($2);"},
		{"trigger": "I-MessageFormat\tinit", "contents": "MessageFormat ${1:format} = new MessageFormat($2);"},
		{"trigger": "I-MessageFormatter\tinit", "contents": "MessageFormatter ${1:formatter} = new MessageFormatter($2);"},
		{"trigger": "I-MessageHandler\tinit", "contents": "MessageHandler ${1:handler} = new MessageHandler($2);"},
		{"trigger": "I-MessageProp\tinit", "contents": "MessageProp ${1:prop} = new MessageProp($2);"},
		{"trigger": "I-Messager\tinit", "contents": "Messager ${1:messager} = new Messager($2);"},
		{"trigger": "I-Messages\tinit", "contents": "Messages ${1:messages} = new Messages($2);"},
		{"trigger": "I-MetaData\tinit", "contents": "MetaData ${1:data} = new MetaData($2);"},
		{"trigger": "I-MetaEventListener\tinit", "contents": "MetaEventListener ${1:listener} = new MetaEventListener($2);"},
		{"trigger": "I-MetaMessage\tinit", "contents": "MetaMessage ${1:message} = new MetaMessage($2);"},
		{"trigger": "I-Metacity\tinit", "contents": "Metacity ${1:metacity} = new Metacity($2);"},
		{"trigger": "I-MetadataListener\tinit", "contents": "MetadataListener ${1:listener} = new MetadataListener($2);"},
		{"trigger": "I-MetadataParser\tinit", "contents": "MetadataParser ${1:parser} = new MetadataParser($2);"},
		{"trigger": "I-MetadataParserImpl\tinit", "contents": "MetadataParserImpl ${1:impl} = new MetadataParserImpl($2);"},
		{"trigger": "I-MetalBorders\tinit", "contents": "MetalBorders ${1:borders} = new MetalBorders($2);"},
		{"trigger": "I-MetalBumps\tinit", "contents": "MetalBumps ${1:bumps} = new MetalBumps($2);"},
		{"trigger": "I-MetalButtonUI\tinit", "contents": "MetalButtonUI ${1:metalbuttonui} = new MetalButtonUI($2);"},
		{"trigger": "I-MetalCheckBoxIcon\tinit", "contents": "MetalCheckBoxIcon ${1:icon} = new MetalCheckBoxIcon($2);"},
		{"trigger": "I-MetalCheckBoxUI\tinit", "contents": "MetalCheckBoxUI ${1:metalcheckboxui} = new MetalCheckBoxUI($2);"},
		{"trigger": "I-MetalComboBoxButton\tinit", "contents": "MetalComboBoxButton ${1:button} = new MetalComboBoxButton($2);"},
		{"trigger": "I-MetalComboBoxEditor\tinit", "contents": "MetalComboBoxEditor ${1:editor} = new MetalComboBoxEditor($2);"},
		{"trigger": "I-MetalComboBoxIcon\tinit", "contents": "MetalComboBoxIcon ${1:icon} = new MetalComboBoxIcon($2);"},
		{"trigger": "I-MetalComboBoxUI\tinit", "contents": "MetalComboBoxUI ${1:metalcomboboxui} = new MetalComboBoxUI($2);"},
		{"trigger": "I-MetalDesktopIconUI\tinit", "contents": "MetalDesktopIconUI ${1:metaldesktopiconui} = new MetalDesktopIconUI($2);"},
		{"trigger": "I-MetalFileChooserUI\tinit", "contents": "MetalFileChooserUI ${1:metalfilechooserui} = new MetalFileChooserUI($2);"},
		{"trigger": "I-MetalFontDesktopProperty\tinit", "contents": "MetalFontDesktopProperty ${1:property} = new MetalFontDesktopProperty($2);"},
		{"trigger": "I-MetalHighContrastTheme\tinit", "contents": "MetalHighContrastTheme ${1:theme} = new MetalHighContrastTheme($2);"},
		{"trigger": "I-MetalIconFactory\tinit", "contents": "MetalIconFactory ${1:factory} = new MetalIconFactory($2);"},
		{"trigger": "I-MetalInternalFrameTitlePane\tinit", "contents": "MetalInternalFrameTitlePane ${1:pane} = new MetalInternalFrameTitlePane($2);"},
		{"trigger": "I-MetalInternalFrameUI\tinit", "contents": "MetalInternalFrameUI ${1:metalinternalframeui} = new MetalInternalFrameUI($2);"},
		{"trigger": "I-MetalLabelUI\tinit", "contents": "MetalLabelUI ${1:metallabelui} = new MetalLabelUI($2);"},
		{"trigger": "I-MetalLookAndFeel\tinit", "contents": "MetalLookAndFeel ${1:feel} = new MetalLookAndFeel($2);"},
		{"trigger": "I-MetalMenuBarUI\tinit", "contents": "MetalMenuBarUI ${1:metalmenubarui} = new MetalMenuBarUI($2);"},
		{"trigger": "I-MetalPopupMenuSeparatorUI\tinit", "contents": "MetalPopupMenuSeparatorUI ${1:metalpopupmenuseparatorui} = new MetalPopupMenuSeparatorUI($2);"},
		{"trigger": "I-MetalProgressBarUI\tinit", "contents": "MetalProgressBarUI ${1:metalprogressbarui} = new MetalProgressBarUI($2);"},
		{"trigger": "I-MetalRadioButtonUI\tinit", "contents": "MetalRadioButtonUI ${1:metalradiobuttonui} = new MetalRadioButtonUI($2);"},
		{"trigger": "I-MetalRootPaneUI\tinit", "contents": "MetalRootPaneUI ${1:metalrootpaneui} = new MetalRootPaneUI($2);"},
		{"trigger": "I-MetalScrollBarUI\tinit", "contents": "MetalScrollBarUI ${1:metalscrollbarui} = new MetalScrollBarUI($2);"},
		{"trigger": "I-MetalScrollButton\tinit", "contents": "MetalScrollButton ${1:button} = new MetalScrollButton($2);"},
		{"trigger": "I-MetalScrollPaneUI\tinit", "contents": "MetalScrollPaneUI ${1:metalscrollpaneui} = new MetalScrollPaneUI($2);"},
		{"trigger": "I-MetalSeparatorUI\tinit", "contents": "MetalSeparatorUI ${1:metalseparatorui} = new MetalSeparatorUI($2);"},
		{"trigger": "I-MetalSliderUI\tinit", "contents": "MetalSliderUI ${1:metalsliderui} = new MetalSliderUI($2);"},
		{"trigger": "I-MetalSplitPaneDivider\tinit", "contents": "MetalSplitPaneDivider ${1:divider} = new MetalSplitPaneDivider($2);"},
		{"trigger": "I-MetalSplitPaneUI\tinit", "contents": "MetalSplitPaneUI ${1:metalsplitpaneui} = new MetalSplitPaneUI($2);"},
		{"trigger": "I-MetalTabbedPaneUI\tinit", "contents": "MetalTabbedPaneUI ${1:metaltabbedpaneui} = new MetalTabbedPaneUI($2);"},
		{"trigger": "I-MetalTextFieldUI\tinit", "contents": "MetalTextFieldUI ${1:metaltextfieldui} = new MetalTextFieldUI($2);"},
		{"trigger": "I-MetalTheme\tinit", "contents": "MetalTheme ${1:theme} = new MetalTheme($2);"},
		{"trigger": "I-MetalTitlePane\tinit", "contents": "MetalTitlePane ${1:pane} = new MetalTitlePane($2);"},
		{"trigger": "I-MetalToggleButtonUI\tinit", "contents": "MetalToggleButtonUI ${1:metaltogglebuttonui} = new MetalToggleButtonUI($2);"},
		{"trigger": "I-MetalToolBarUI\tinit", "contents": "MetalToolBarUI ${1:metaltoolbarui} = new MetalToolBarUI($2);"},
		{"trigger": "I-MetalToolTipUI\tinit", "contents": "MetalToolTipUI ${1:metaltooltipui} = new MetalToolTipUI($2);"},
		{"trigger": "I-MetalTreeUI\tinit", "contents": "MetalTreeUI ${1:metaltreeui} = new MetalTreeUI($2);"},
		{"trigger": "I-MetalUtils\tinit", "contents": "MetalUtils ${1:utils} = new MetalUtils($2);"},
		{"trigger": "I-Method\tinit", "contents": "Method ${1:method} = new Method($2);"},
		{"trigger": "I-MethodDescriptor\tinit", "contents": "MethodDescriptor ${1:descriptor} = new MethodDescriptor($2);"},
		{"trigger": "I-MethodDoc\tinit", "contents": "MethodDoc ${1:doc} = new MethodDoc($2);"},
		{"trigger": "I-MethodGen\tinit", "contents": "MethodGen ${1:gen} = new MethodGen($2);"},
		{"trigger": "I-MethodGenerator\tinit", "contents": "MethodGenerator ${1:generator} = new MethodGenerator($2);"},
		{"trigger": "I-MethodHTML\tinit", "contents": "MethodHTML ${1:methodhtml} = new MethodHTML($2);"},
		{"trigger": "I-MethodHandle\tinit", "contents": "MethodHandle ${1:handle} = new MethodHandle($2);"},
		{"trigger": "I-MethodHandleImpl\tinit", "contents": "MethodHandleImpl ${1:impl} = new MethodHandleImpl($2);"},
		{"trigger": "I-MethodHandleInfo\tinit", "contents": "MethodHandleInfo ${1:info} = new MethodHandleInfo($2);"},
		{"trigger": "I-MethodHandleNatives\tinit", "contents": "MethodHandleNatives ${1:natives} = new MethodHandleNatives($2);"},
		{"trigger": "I-MethodHandleProxies\tinit", "contents": "MethodHandleProxies ${1:proxies} = new MethodHandleProxies($2);"},
		{"trigger": "I-MethodHandleStatics\tinit", "contents": "MethodHandleStatics ${1:statics} = new MethodHandleStatics($2);"},
		{"trigger": "I-MethodHandles\tinit", "contents": "MethodHandles ${1:handles} = new MethodHandles($2);"},
		{"trigger": "I-MethodInvocationTree\tinit", "contents": "MethodInvocationTree ${1:tree} = new MethodInvocationTree($2);"},
		{"trigger": "I-MethodObserver\tinit", "contents": "MethodObserver ${1:observer} = new MethodObserver($2);"},
		{"trigger": "I-MethodRef\tinit", "contents": "MethodRef ${1:ref} = new MethodRef($2);"},
		{"trigger": "I-MethodTree\tinit", "contents": "MethodTree ${1:tree} = new MethodTree($2);"},
		{"trigger": "I-MethodType\tinit", "contents": "MethodType ${1:type} = new MethodType($2);"},
		{"trigger": "I-MethodTypeForm\tinit", "contents": "MethodTypeForm ${1:form} = new MethodTypeForm($2);"},
		{"trigger": "I-Metrics\tinit", "contents": "Metrics ${1:metrics} = new Metrics($2);"},
		{"trigger": "I-MgmtData\tinit", "contents": "MgmtData ${1:data} = new MgmtData($2);"},
		{"trigger": "I-MidiChannel\tinit", "contents": "MidiChannel ${1:channel} = new MidiChannel($2);"},
		{"trigger": "I-MidiDevice\tinit", "contents": "MidiDevice ${1:device} = new MidiDevice($2);"},
		{"trigger": "I-MidiDeviceProvider\tinit", "contents": "MidiDeviceProvider ${1:provider} = new MidiDeviceProvider($2);"},
		{"trigger": "I-MidiDeviceReceiver\tinit", "contents": "MidiDeviceReceiver ${1:receiver} = new MidiDeviceReceiver($2);"},
		{"trigger": "I-MidiDeviceTransmitter\tinit", "contents": "MidiDeviceTransmitter ${1:transmitter} = new MidiDeviceTransmitter($2);"},
		{"trigger": "I-MidiEvent\tinit", "contents": "MidiEvent ${1:event} = new MidiEvent($2);"},
		{"trigger": "I-MidiFileFormat\tinit", "contents": "MidiFileFormat ${1:format} = new MidiFileFormat($2);"},
		{"trigger": "I-MidiFileReader\tinit", "contents": "MidiFileReader ${1:reader} = new MidiFileReader($2);"},
		{"trigger": "I-MidiFileWriter\tinit", "contents": "MidiFileWriter ${1:writer} = new MidiFileWriter($2);"},
		{"trigger": "I-MidiMessage\tinit", "contents": "MidiMessage ${1:message} = new MidiMessage($2);"},
		{"trigger": "I-MidiSystem\tinit", "contents": "MidiSystem ${1:system} = new MidiSystem($2);"},
		{"trigger": "I-MidiUnavailableException\tinit", "contents": "MidiUnavailableException ${1:exception} = new MidiUnavailableException($2);"},
		{"trigger": "I-MimeHeader\tinit", "contents": "MimeHeader ${1:header} = new MimeHeader($2);"},
		{"trigger": "I-MimeHeaders\tinit", "contents": "MimeHeaders ${1:headers} = new MimeHeaders($2);"},
		{"trigger": "I-MimeType\tinit", "contents": "MimeType ${1:type} = new MimeType($2);"},
		{"trigger": "I-MimeTypeParameterList\tinit", "contents": "MimeTypeParameterList ${1:list} = new MimeTypeParameterList($2);"},
		{"trigger": "I-MimeTypeParseException\tinit", "contents": "MimeTypeParseException ${1:exception} = new MimeTypeParseException($2);"},
		{"trigger": "I-MinguoChronology\tinit", "contents": "MinguoChronology ${1:chronology} = new MinguoChronology($2);"},
		{"trigger": "I-MinguoDate\tinit", "contents": "MinguoDate ${1:date} = new MinguoDate($2);"},
		{"trigger": "I-MinguoEra\tinit", "contents": "MinguoEra ${1:era} = new MinguoEra($2);"},
		{"trigger": "I-MinimalHTMLWriter\tinit", "contents": "MinimalHTMLWriter ${1:writer} = new MinimalHTMLWriter($2);"},
		{"trigger": "I-Minus\tinit", "contents": "Minus ${1:minus} = new Minus($2);"},
		{"trigger": "I-MirroredTypeException\tinit", "contents": "MirroredTypeException ${1:exception} = new MirroredTypeException($2);"},
		{"trigger": "I-MirroredTypesException\tinit", "contents": "MirroredTypesException ${1:exception} = new MirroredTypesException($2);"},
		{"trigger": "I-MissingFormatArgumentException\tinit", "contents": "MissingFormatArgumentException ${1:exception} = new MissingFormatArgumentException($2);"},
		{"trigger": "I-MissingFormatWidthException\tinit", "contents": "MissingFormatWidthException ${1:exception} = new MissingFormatWidthException($2);"},
		{"trigger": "I-MissingOptArgException\tinit", "contents": "MissingOptArgException ${1:exception} = new MissingOptArgException($2);"},
		{"trigger": "I-MissingResourceException\tinit", "contents": "MissingResourceException ${1:exception} = new MissingResourceException($2);"},
		{"trigger": "I-MissingResourceFailureException\tinit", "contents": "MissingResourceFailureException ${1:exception} = new MissingResourceFailureException($2);"},
		{"trigger": "I-MixedContentModel\tinit", "contents": "MixedContentModel ${1:model} = new MixedContentModel($2);"},
		{"trigger": "I-Mixer\tinit", "contents": "Mixer ${1:mixer} = new Mixer($2);"},
		{"trigger": "I-MixerProvider\tinit", "contents": "MixerProvider ${1:provider} = new MixerProvider($2);"},
		{"trigger": "I-Mnemonic\tinit", "contents": "Mnemonic ${1:mnemonic} = new Mnemonic($2);"},
		{"trigger": "I-MnemonicBuilder\tinit", "contents": "MnemonicBuilder ${1:builder} = new MnemonicBuilder($2);"},
		{"trigger": "I-MockAttributeSet\tinit", "contents": "MockAttributeSet ${1:set} = new MockAttributeSet($2);"},
		{"trigger": "I-Mod\tinit", "contents": "Mod ${1:mod} = new Mod($2);"},
		{"trigger": "I-ModalEventFilter\tinit", "contents": "ModalEventFilter ${1:filter} = new ModalEventFilter($2);"},
		{"trigger": "I-Modality\tinit", "contents": "Modality ${1:modality} = new Modality($2);"},
		{"trigger": "I-Mode\tinit", "contents": "Mode ${1:mode} = new Mode($2);"},
		{"trigger": "I-ModelMBean\tinit", "contents": "ModelMBean ${1:bean} = new ModelMBean($2);"},
		{"trigger": "I-ModelMBeanAttributeInfo\tinit", "contents": "ModelMBeanAttributeInfo ${1:info} = new ModelMBeanAttributeInfo($2);"},
		{"trigger": "I-ModelMBeanConstructorInfo\tinit", "contents": "ModelMBeanConstructorInfo ${1:info} = new ModelMBeanConstructorInfo($2);"},
		{"trigger": "I-ModelMBeanInfo\tinit", "contents": "ModelMBeanInfo ${1:info} = new ModelMBeanInfo($2);"},
		{"trigger": "I-ModelMBeanInfoSupport\tinit", "contents": "ModelMBeanInfoSupport ${1:support} = new ModelMBeanInfoSupport($2);"},
		{"trigger": "I-ModelMBeanNotificationBroadcaster\tinit", "contents": "ModelMBeanNotificationBroadcaster ${1:broadcaster} = new ModelMBeanNotificationBroadcaster($2);"},
		{"trigger": "I-ModelMBeanNotificationInfo\tinit", "contents": "ModelMBeanNotificationInfo ${1:info} = new ModelMBeanNotificationInfo($2);"},
		{"trigger": "I-ModelMBeanOperationInfo\tinit", "contents": "ModelMBeanOperationInfo ${1:info} = new ModelMBeanOperationInfo($2);"},
		{"trigger": "I-ModifiableClassLoaderRepository\tinit", "contents": "ModifiableClassLoaderRepository ${1:repository} = new ModifiableClassLoaderRepository($2);"},
		{"trigger": "I-ModifiableObservableListBase\tinit", "contents": "ModifiableObservableListBase ${1:base} = new ModifiableObservableListBase($2);"},
		{"trigger": "I-ModificationItem\tinit", "contents": "ModificationItem ${1:item} = new ModificationItem($2);"},
		{"trigger": "I-Modifier\tinit", "contents": "Modifier ${1:modifier} = new Modifier($2);"},
		{"trigger": "I-ModifiersTree\tinit", "contents": "ModifiersTree ${1:tree} = new ModifiersTree($2);"},
		{"trigger": "I-Monitor\tinit", "contents": "Monitor ${1:monitor} = new Monitor($2);"},
		{"trigger": "I-MonitorInfo\tinit", "contents": "MonitorInfo ${1:info} = new MonitorInfo($2);"},
		{"trigger": "I-MonitorMBean\tinit", "contents": "MonitorMBean ${1:bean} = new MonitorMBean($2);"},
		{"trigger": "I-MonitorNotification\tinit", "contents": "MonitorNotification ${1:notification} = new MonitorNotification($2);"},
		{"trigger": "I-MonitorSettingException\tinit", "contents": "MonitorSettingException ${1:exception} = new MonitorSettingException($2);"},
		{"trigger": "I-MonitoredAttribute\tinit", "contents": "MonitoredAttribute ${1:attribute} = new MonitoredAttribute($2);"},
		{"trigger": "I-MonitoredAttributeBase\tinit", "contents": "MonitoredAttributeBase ${1:base} = new MonitoredAttributeBase($2);"},
		{"trigger": "I-MonitoredAttributeInfo\tinit", "contents": "MonitoredAttributeInfo ${1:info} = new MonitoredAttributeInfo($2);"},
		{"trigger": "I-MonitoredAttributeInfoFactory\tinit", "contents": "MonitoredAttributeInfoFactory ${1:factory} = new MonitoredAttributeInfoFactory($2);"},
		{"trigger": "I-MonitoredObject\tinit", "contents": "MonitoredObject ${1:object} = new MonitoredObject($2);"},
		{"trigger": "I-MonitoredObjectFactory\tinit", "contents": "MonitoredObjectFactory ${1:factory} = new MonitoredObjectFactory($2);"},
		{"trigger": "I-MonitoringConstants\tinit", "contents": "MonitoringConstants ${1:constants} = new MonitoringConstants($2);"},
		{"trigger": "I-MonitoringFactories\tinit", "contents": "MonitoringFactories ${1:factories} = new MonitoringFactories($2);"},
		{"trigger": "I-MonitoringManager\tinit", "contents": "MonitoringManager ${1:manager} = new MonitoringManager($2);"},
		{"trigger": "I-MonitoringManagerFactory\tinit", "contents": "MonitoringManagerFactory ${1:factory} = new MonitoringManagerFactory($2);"},
		{"trigger": "I-MonocleApplication\tinit", "contents": "MonocleApplication ${1:application} = new MonocleApplication($2);"},
		{"trigger": "I-MonocleClipboardDelegate\tinit", "contents": "MonocleClipboardDelegate ${1:delegate} = new MonocleClipboardDelegate($2);"},
		{"trigger": "I-MonocleCursor\tinit", "contents": "MonocleCursor ${1:cursor} = new MonocleCursor($2);"},
		{"trigger": "I-MonocleDnDClipboard\tinit", "contents": "MonocleDnDClipboard ${1:clipboard} = new MonocleDnDClipboard($2);"},
		{"trigger": "I-MonocleGLContext\tinit", "contents": "MonocleGLContext ${1:context} = new MonocleGLContext($2);"},
		{"trigger": "I-MonocleGLDrawable\tinit", "contents": "MonocleGLDrawable ${1:drawable} = new MonocleGLDrawable($2);"},
		{"trigger": "I-MonocleGLFactory\tinit", "contents": "MonocleGLFactory ${1:factory} = new MonocleGLFactory($2);"},
		{"trigger": "I-MonocleGLPixelFormat\tinit", "contents": "MonocleGLPixelFormat ${1:format} = new MonocleGLPixelFormat($2);"},
		{"trigger": "I-MonoclePixels\tinit", "contents": "MonoclePixels ${1:pixels} = new MonoclePixels($2);"},
		{"trigger": "I-MonoclePlatformFactory\tinit", "contents": "MonoclePlatformFactory ${1:factory} = new MonoclePlatformFactory($2);"},
		{"trigger": "I-MonocleRobot\tinit", "contents": "MonocleRobot ${1:robot} = new MonocleRobot($2);"},
		{"trigger": "I-MonocleSettings\tinit", "contents": "MonocleSettings ${1:settings} = new MonocleSettings($2);"},
		{"trigger": "I-MonocleSystemClipboard\tinit", "contents": "MonocleSystemClipboard ${1:clipboard} = new MonocleSystemClipboard($2);"},
		{"trigger": "I-MonocleTimer\tinit", "contents": "MonocleTimer ${1:timer} = new MonocleTimer($2);"},
		{"trigger": "I-MonocleTrace\tinit", "contents": "MonocleTrace ${1:trace} = new MonocleTrace($2);"},
		{"trigger": "I-MonocleView\tinit", "contents": "MonocleView ${1:view} = new MonocleView($2);"},
		{"trigger": "I-MonocleWindow\tinit", "contents": "MonocleWindow ${1:window} = new MonocleWindow($2);"},
		{"trigger": "I-MonocleWindowManager\tinit", "contents": "MonocleWindowManager ${1:manager} = new MonocleWindowManager($2);"},
		{"trigger": "I-Month\tinit", "contents": "Month ${1:month} = new Month($2);"},
		{"trigger": "I-MonthDV\tinit", "contents": "MonthDV ${1:monthdv} = new MonthDV($2);"},
		{"trigger": "I-MonthDay\tinit", "contents": "MonthDay ${1:day} = new MonthDay($2);"},
		{"trigger": "I-MonthDayDV\tinit", "contents": "MonthDayDV ${1:monthdaydv} = new MonthDayDV($2);"},
		{"trigger": "I-MotifBorders\tinit", "contents": "MotifBorders ${1:borders} = new MotifBorders($2);"},
		{"trigger": "I-MotifButtonListener\tinit", "contents": "MotifButtonListener ${1:listener} = new MotifButtonListener($2);"},
		{"trigger": "I-MotifButtonUI\tinit", "contents": "MotifButtonUI ${1:motifbuttonui} = new MotifButtonUI($2);"},
		{"trigger": "I-MotifCheckBoxMenuItemUI\tinit", "contents": "MotifCheckBoxMenuItemUI ${1:motifcheckboxmenuitemui} = new MotifCheckBoxMenuItemUI($2);"},
		{"trigger": "I-MotifCheckBoxUI\tinit", "contents": "MotifCheckBoxUI ${1:motifcheckboxui} = new MotifCheckBoxUI($2);"},
		{"trigger": "I-MotifComboBoxUI\tinit", "contents": "MotifComboBoxUI ${1:motifcomboboxui} = new MotifComboBoxUI($2);"},
		{"trigger": "I-MotifDesktopIconUI\tinit", "contents": "MotifDesktopIconUI ${1:motifdesktopiconui} = new MotifDesktopIconUI($2);"},
		{"trigger": "I-MotifDesktopPaneUI\tinit", "contents": "MotifDesktopPaneUI ${1:motifdesktoppaneui} = new MotifDesktopPaneUI($2);"},
		{"trigger": "I-MotifEditorPaneUI\tinit", "contents": "MotifEditorPaneUI ${1:motifeditorpaneui} = new MotifEditorPaneUI($2);"},
		{"trigger": "I-MotifFileChooserUI\tinit", "contents": "MotifFileChooserUI ${1:motiffilechooserui} = new MotifFileChooserUI($2);"},
		{"trigger": "I-MotifGraphicsUtils\tinit", "contents": "MotifGraphicsUtils ${1:utils} = new MotifGraphicsUtils($2);"},
		{"trigger": "I-MotifIconFactory\tinit", "contents": "MotifIconFactory ${1:factory} = new MotifIconFactory($2);"},
		{"trigger": "I-MotifInternalFrameTitlePane\tinit", "contents": "MotifInternalFrameTitlePane ${1:pane} = new MotifInternalFrameTitlePane($2);"},
		{"trigger": "I-MotifInternalFrameUI\tinit", "contents": "MotifInternalFrameUI ${1:motifinternalframeui} = new MotifInternalFrameUI($2);"},
		{"trigger": "I-MotifLabelUI\tinit", "contents": "MotifLabelUI ${1:motiflabelui} = new MotifLabelUI($2);"},
		{"trigger": "I-MotifLookAndFeel\tinit", "contents": "MotifLookAndFeel ${1:feel} = new MotifLookAndFeel($2);"},
		{"trigger": "I-MotifMenuBarUI\tinit", "contents": "MotifMenuBarUI ${1:motifmenubarui} = new MotifMenuBarUI($2);"},
		{"trigger": "I-MotifMenuItemUI\tinit", "contents": "MotifMenuItemUI ${1:motifmenuitemui} = new MotifMenuItemUI($2);"},
		{"trigger": "I-MotifMenuMouseListener\tinit", "contents": "MotifMenuMouseListener ${1:listener} = new MotifMenuMouseListener($2);"},
		{"trigger": "I-MotifMenuMouseMotionListener\tinit", "contents": "MotifMenuMouseMotionListener ${1:listener} = new MotifMenuMouseMotionListener($2);"},
		{"trigger": "I-MotifMenuUI\tinit", "contents": "MotifMenuUI ${1:motifmenuui} = new MotifMenuUI($2);"},
		{"trigger": "I-MotifOptionPaneUI\tinit", "contents": "MotifOptionPaneUI ${1:motifoptionpaneui} = new MotifOptionPaneUI($2);"},
		{"trigger": "I-MotifPasswordFieldUI\tinit", "contents": "MotifPasswordFieldUI ${1:motifpasswordfieldui} = new MotifPasswordFieldUI($2);"},
		{"trigger": "I-MotifPopupMenuSeparatorUI\tinit", "contents": "MotifPopupMenuSeparatorUI ${1:motifpopupmenuseparatorui} = new MotifPopupMenuSeparatorUI($2);"},
		{"trigger": "I-MotifPopupMenuUI\tinit", "contents": "MotifPopupMenuUI ${1:motifpopupmenuui} = new MotifPopupMenuUI($2);"},
		{"trigger": "I-MotifProgressBarUI\tinit", "contents": "MotifProgressBarUI ${1:motifprogressbarui} = new MotifProgressBarUI($2);"},
		{"trigger": "I-MotifRadioButtonMenuItemUI\tinit", "contents": "MotifRadioButtonMenuItemUI ${1:motifradiobuttonmenuitemui} = new MotifRadioButtonMenuItemUI($2);"},
		{"trigger": "I-MotifRadioButtonUI\tinit", "contents": "MotifRadioButtonUI ${1:motifradiobuttonui} = new MotifRadioButtonUI($2);"},
		{"trigger": "I-MotifScrollBarButton\tinit", "contents": "MotifScrollBarButton ${1:button} = new MotifScrollBarButton($2);"},
		{"trigger": "I-MotifScrollBarUI\tinit", "contents": "MotifScrollBarUI ${1:motifscrollbarui} = new MotifScrollBarUI($2);"},
		{"trigger": "I-MotifScrollPaneUI\tinit", "contents": "MotifScrollPaneUI ${1:motifscrollpaneui} = new MotifScrollPaneUI($2);"},
		{"trigger": "I-MotifSeparatorUI\tinit", "contents": "MotifSeparatorUI ${1:motifseparatorui} = new MotifSeparatorUI($2);"},
		{"trigger": "I-MotifSliderUI\tinit", "contents": "MotifSliderUI ${1:motifsliderui} = new MotifSliderUI($2);"},
		{"trigger": "I-MotifSplitPaneDivider\tinit", "contents": "MotifSplitPaneDivider ${1:divider} = new MotifSplitPaneDivider($2);"},
		{"trigger": "I-MotifSplitPaneUI\tinit", "contents": "MotifSplitPaneUI ${1:motifsplitpaneui} = new MotifSplitPaneUI($2);"},
		{"trigger": "I-MotifTabbedPaneUI\tinit", "contents": "MotifTabbedPaneUI ${1:motiftabbedpaneui} = new MotifTabbedPaneUI($2);"},
		{"trigger": "I-MotifTextAreaUI\tinit", "contents": "MotifTextAreaUI ${1:motiftextareaui} = new MotifTextAreaUI($2);"},
		{"trigger": "I-MotifTextFieldUI\tinit", "contents": "MotifTextFieldUI ${1:motiftextfieldui} = new MotifTextFieldUI($2);"},
		{"trigger": "I-MotifTextPaneUI\tinit", "contents": "MotifTextPaneUI ${1:motiftextpaneui} = new MotifTextPaneUI($2);"},
		{"trigger": "I-MotifTextUI\tinit", "contents": "MotifTextUI ${1:motiftextui} = new MotifTextUI($2);"},
		{"trigger": "I-MotifToggleButtonUI\tinit", "contents": "MotifToggleButtonUI ${1:motiftogglebuttonui} = new MotifToggleButtonUI($2);"},
		{"trigger": "I-MotifTreeCellRenderer\tinit", "contents": "MotifTreeCellRenderer ${1:renderer} = new MotifTreeCellRenderer($2);"},
		{"trigger": "I-MotifTreeUI\tinit", "contents": "MotifTreeUI ${1:motiftreeui} = new MotifTreeUI($2);"},
		{"trigger": "I-MotionBlur\tinit", "contents": "MotionBlur ${1:blur} = new MotionBlur($2);"},
		{"trigger": "I-MotionBlurBuilder\tinit", "contents": "MotionBlurBuilder ${1:builder} = new MotionBlurBuilder($2);"},
		{"trigger": "I-MotionBlurState\tinit", "contents": "MotionBlurState ${1:state} = new MotionBlurState($2);"},
		{"trigger": "I-MouseAdapter\tinit", "contents": "MouseAdapter ${1:adapter} = new MouseAdapter($2);"},
		{"trigger": "I-MouseButton\tinit", "contents": "MouseButton ${1:button} = new MouseButton($2);"},
		{"trigger": "I-MouseDragEvent\tinit", "contents": "MouseDragEvent ${1:event} = new MouseDragEvent($2);"},
		{"trigger": "I-MouseDragGestureRecognizer\tinit", "contents": "MouseDragGestureRecognizer ${1:recognizer} = new MouseDragGestureRecognizer($2);"},
		{"trigger": "I-MouseEvent\tinit", "contents": "MouseEvent ${1:event} = new MouseEvent($2);"},
		{"trigger": "I-MouseEventImpl\tinit", "contents": "MouseEventImpl ${1:impl} = new MouseEventImpl($2);"},
		{"trigger": "I-MouseInfo\tinit", "contents": "MouseInfo ${1:info} = new MouseInfo($2);"},
		{"trigger": "I-MouseInfoPeer\tinit", "contents": "MouseInfoPeer ${1:peer} = new MouseInfoPeer($2);"},
		{"trigger": "I-MouseInput\tinit", "contents": "MouseInput ${1:input} = new MouseInput($2);"},
		{"trigger": "I-MouseInputAdapter\tinit", "contents": "MouseInputAdapter ${1:adapter} = new MouseInputAdapter($2);"},
		{"trigger": "I-MouseInputListener\tinit", "contents": "MouseInputListener ${1:listener} = new MouseInputListener($2);"},
		{"trigger": "I-MouseInputSynthesizer\tinit", "contents": "MouseInputSynthesizer ${1:synthesizer} = new MouseInputSynthesizer($2);"},
		{"trigger": "I-MouseListener\tinit", "contents": "MouseListener ${1:listener} = new MouseListener($2);"},
		{"trigger": "I-MouseMotionAdapter\tinit", "contents": "MouseMotionAdapter ${1:adapter} = new MouseMotionAdapter($2);"},
		{"trigger": "I-MouseMotionListener\tinit", "contents": "MouseMotionListener ${1:listener} = new MouseMotionListener($2);"},
		{"trigger": "I-MouseState\tinit", "contents": "MouseState ${1:state} = new MouseState($2);"},
		{"trigger": "I-MouseWheelEvent\tinit", "contents": "MouseWheelEvent ${1:event} = new MouseWheelEvent($2);"},
		{"trigger": "I-MouseWheelListener\tinit", "contents": "MouseWheelListener ${1:listener} = new MouseWheelListener($2);"},
		{"trigger": "I-MoveTo\tinit", "contents": "MoveTo ${1:to} = new MoveTo($2);"},
		{"trigger": "I-MoveToBuilder\tinit", "contents": "MoveToBuilder ${1:builder} = new MoveToBuilder($2);"},
		{"trigger": "I-MsgKey\tinit", "contents": "MsgKey ${1:key} = new MsgKey($2);"},
		{"trigger": "I-Mult\tinit", "contents": "Mult ${1:mult} = new Mult($2);"},
		{"trigger": "I-MultiButtonUI\tinit", "contents": "MultiButtonUI ${1:multibuttonui} = new MultiButtonUI($2);"},
		{"trigger": "I-MultiColorChooserUI\tinit", "contents": "MultiColorChooserUI ${1:multicolorchooserui} = new MultiColorChooserUI($2);"},
		{"trigger": "I-MultiComboBoxUI\tinit", "contents": "MultiComboBoxUI ${1:multicomboboxui} = new MultiComboBoxUI($2);"},
		{"trigger": "I-MultiDOM\tinit", "contents": "MultiDOM ${1:multidom} = new MultiDOM($2);"},
		{"trigger": "I-MultiDesktopIconUI\tinit", "contents": "MultiDesktopIconUI ${1:multidesktopiconui} = new MultiDesktopIconUI($2);"},
		{"trigger": "I-MultiDesktopPaneUI\tinit", "contents": "MultiDesktopPaneUI ${1:multidesktoppaneui} = new MultiDesktopPaneUI($2);"},
		{"trigger": "I-MultiDoc\tinit", "contents": "MultiDoc ${1:doc} = new MultiDoc($2);"},
		{"trigger": "I-MultiDocPrintJob\tinit", "contents": "MultiDocPrintJob ${1:job} = new MultiDocPrintJob($2);"},
		{"trigger": "I-MultiDocPrintService\tinit", "contents": "MultiDocPrintService ${1:service} = new MultiDocPrintService($2);"},
		{"trigger": "I-MultiFileChooserUI\tinit", "contents": "MultiFileChooserUI ${1:multifilechooserui} = new MultiFileChooserUI($2);"},
		{"trigger": "I-MultiHashtable\tinit", "contents": "MultiHashtable ${1:hashtable} = new MultiHashtable($2);"},
		{"trigger": "I-MultiInternalFrameUI\tinit", "contents": "MultiInternalFrameUI ${1:multiinternalframeui} = new MultiInternalFrameUI($2);"},
		{"trigger": "I-MultiLabelUI\tinit", "contents": "MultiLabelUI ${1:multilabelui} = new MultiLabelUI($2);"},
		{"trigger": "I-MultiListUI\tinit", "contents": "MultiListUI ${1:multilistui} = new MultiListUI($2);"},
		{"trigger": "I-MultiLookAndFeel\tinit", "contents": "MultiLookAndFeel ${1:feel} = new MultiLookAndFeel($2);"},
		{"trigger": "I-MultiMenuBarUI\tinit", "contents": "MultiMenuBarUI ${1:multimenubarui} = new MultiMenuBarUI($2);"},
		{"trigger": "I-MultiMenuItemUI\tinit", "contents": "MultiMenuItemUI ${1:multimenuitemui} = new MultiMenuItemUI($2);"},
		{"trigger": "I-MultiOptionPaneUI\tinit", "contents": "MultiOptionPaneUI ${1:multioptionpaneui} = new MultiOptionPaneUI($2);"},
		{"trigger": "I-MultiPanelUI\tinit", "contents": "MultiPanelUI ${1:multipanelui} = new MultiPanelUI($2);"},
		{"trigger": "I-MultiPixelPackedSampleModel\tinit", "contents": "MultiPixelPackedSampleModel ${1:model} = new MultiPixelPackedSampleModel($2);"},
		{"trigger": "I-MultiPopupMenuUI\tinit", "contents": "MultiPopupMenuUI ${1:multipopupmenuui} = new MultiPopupMenuUI($2);"},
		{"trigger": "I-MultiProgressBarUI\tinit", "contents": "MultiProgressBarUI ${1:multiprogressbarui} = new MultiProgressBarUI($2);"},
		{"trigger": "I-MultiRootPaneUI\tinit", "contents": "MultiRootPaneUI ${1:multirootpaneui} = new MultiRootPaneUI($2);"},
		{"trigger": "I-MultiScrollBarUI\tinit", "contents": "MultiScrollBarUI ${1:multiscrollbarui} = new MultiScrollBarUI($2);"},
		{"trigger": "I-MultiScrollPaneUI\tinit", "contents": "MultiScrollPaneUI ${1:multiscrollpaneui} = new MultiScrollPaneUI($2);"},
		{"trigger": "I-MultiSeparatorUI\tinit", "contents": "MultiSeparatorUI ${1:multiseparatorui} = new MultiSeparatorUI($2);"},
		{"trigger": "I-MultiSliderUI\tinit", "contents": "MultiSliderUI ${1:multisliderui} = new MultiSliderUI($2);"},
		{"trigger": "I-MultiSpinnerUI\tinit", "contents": "MultiSpinnerUI ${1:multispinnerui} = new MultiSpinnerUI($2);"},
		{"trigger": "I-MultiSplitPaneUI\tinit", "contents": "MultiSplitPaneUI ${1:multisplitpaneui} = new MultiSplitPaneUI($2);"},
		{"trigger": "I-MultiTabbedPaneUI\tinit", "contents": "MultiTabbedPaneUI ${1:multitabbedpaneui} = new MultiTabbedPaneUI($2);"},
		{"trigger": "I-MultiTableHeaderUI\tinit", "contents": "MultiTableHeaderUI ${1:multitableheaderui} = new MultiTableHeaderUI($2);"},
		{"trigger": "I-MultiTableUI\tinit", "contents": "MultiTableUI ${1:multitableui} = new MultiTableUI($2);"},
		{"trigger": "I-MultiTextUI\tinit", "contents": "MultiTextUI ${1:multitextui} = new MultiTextUI($2);"},
		{"trigger": "I-MultiTexture\tinit", "contents": "MultiTexture ${1:texture} = new MultiTexture($2);"},
		{"trigger": "I-MultiToolBarUI\tinit", "contents": "MultiToolBarUI ${1:multitoolbarui} = new MultiToolBarUI($2);"},
		{"trigger": "I-MultiToolTipUI\tinit", "contents": "MultiToolTipUI ${1:multitooltipui} = new MultiToolTipUI($2);"},
		{"trigger": "I-MultiTreeUI\tinit", "contents": "MultiTreeUI ${1:multitreeui} = new MultiTreeUI($2);"},
		{"trigger": "I-MultiUIDefaults\tinit", "contents": "MultiUIDefaults ${1:defaults} = new MultiUIDefaults($2);"},
		{"trigger": "I-MultiValuedNodeHeapIterator\tinit", "contents": "MultiValuedNodeHeapIterator ${1:iterator} = new MultiValuedNodeHeapIterator($2);"},
		{"trigger": "I-MultiViewportUI\tinit", "contents": "MultiViewportUI ${1:multiviewportui} = new MultiViewportUI($2);"},
		{"trigger": "I-MulticastChannel\tinit", "contents": "MulticastChannel ${1:channel} = new MulticastChannel($2);"},
		{"trigger": "I-MulticastSocket\tinit", "contents": "MulticastSocket ${1:socket} = new MulticastSocket($2);"},
		{"trigger": "I-MultipleComponentProfileHelper\tinit", "contents": "MultipleComponentProfileHelper ${1:helper} = new MultipleComponentProfileHelper($2);"},
		{"trigger": "I-MultipleComponentProfileHolder\tinit", "contents": "MultipleComponentProfileHolder ${1:holder} = new MultipleComponentProfileHolder($2);"},
		{"trigger": "I-MultipleDocumentHandling\tinit", "contents": "MultipleDocumentHandling ${1:handling} = new MultipleDocumentHandling($2);"},
		{"trigger": "I-MultipleGradientContext\tinit", "contents": "MultipleGradientContext ${1:context} = new MultipleGradientContext($2);"},
		{"trigger": "I-MultipleGradientPaint\tinit", "contents": "MultipleGradientPaint ${1:paint} = new MultipleGradientPaint($2);"},
		{"trigger": "I-MultipleGradientPaintContext\tinit", "contents": "MultipleGradientPaintContext ${1:context} = new MultipleGradientPaintContext($2);"},
		{"trigger": "I-MultipleMaster\tinit", "contents": "MultipleMaster ${1:master} = new MultipleMaster($2);"},
		{"trigger": "I-MultipleNodeCounter\tinit", "contents": "MultipleNodeCounter ${1:counter} = new MultipleNodeCounter($2);"},
		{"trigger": "I-MultiplePropertyChangeListenerHandler\tinit", "contents": "MultiplePropertyChangeListenerHandler ${1:handler} = new MultiplePropertyChangeListenerHandler($2);"},
		{"trigger": "I-MultipleScopeNamespaceSupport\tinit", "contents": "MultipleScopeNamespaceSupport ${1:support} = new MultipleScopeNamespaceSupport($2);"},
		{"trigger": "I-MultipleSelectionModel\tinit", "contents": "MultipleSelectionModel ${1:model} = new MultipleSelectionModel($2);"},
		{"trigger": "I-MultipleSelectionModelBase\tinit", "contents": "MultipleSelectionModelBase ${1:base} = new MultipleSelectionModelBase($2);"},
		{"trigger": "I-MultipleSelectionModelBuilder\tinit", "contents": "MultipleSelectionModelBuilder ${1:builder} = new MultipleSelectionModelBuilder($2);"},
		{"trigger": "I-MutableAttrListImpl\tinit", "contents": "MutableAttrListImpl ${1:impl} = new MutableAttrListImpl($2);"},
		{"trigger": "I-MutableAttributeSet\tinit", "contents": "MutableAttributeSet ${1:set} = new MutableAttributeSet($2);"},
		{"trigger": "I-MutableBigInteger\tinit", "contents": "MutableBigInteger ${1:integer} = new MutableBigInteger($2);"},
		{"trigger": "I-MutableCallSite\tinit", "contents": "MutableCallSite ${1:site} = new MutableCallSite($2);"},
		{"trigger": "I-MutableComboBoxModel\tinit", "contents": "MutableComboBoxModel ${1:model} = new MutableComboBoxModel($2);"},
		{"trigger": "I-MutableTreeNode\tinit", "contents": "MutableTreeNode ${1:node} = new MutableTreeNode($2);"},
		{"trigger": "I-MutationEvent\tinit", "contents": "MutationEvent ${1:event} = new MutationEvent($2);"},
		{"trigger": "I-MutationEventImpl\tinit", "contents": "MutationEventImpl ${1:impl} = new MutationEventImpl($2);"},
		{"trigger": "I-MuxingAttributeSet\tinit", "contents": "MuxingAttributeSet ${1:set} = new MuxingAttributeSet($2);"},
		{"trigger": "I-NClob\tinit", "contents": "NClob ${1:clob} = new NClob($2);"},
		{"trigger": "I-NEW\tinit", "contents": "NEW ${1:new} = new NEW($2);"},
		{"trigger": "I-NEWARRAY\tinit", "contents": "NEWARRAY ${1:newarray} = new NEWARRAY($2);"},
		{"trigger": "I-NGAmbientLight\tinit", "contents": "NGAmbientLight ${1:light} = new NGAmbientLight($2);"},
		{"trigger": "I-NGArc\tinit", "contents": "NGArc ${1:arc} = new NGArc($2);"},
		{"trigger": "I-NGBox\tinit", "contents": "NGBox ${1:box} = new NGBox($2);"},
		{"trigger": "I-NGCamera\tinit", "contents": "NGCamera ${1:camera} = new NGCamera($2);"},
		{"trigger": "I-NGCanvas\tinit", "contents": "NGCanvas ${1:canvas} = new NGCanvas($2);"},
		{"trigger": "I-NGCircle\tinit", "contents": "NGCircle ${1:circle} = new NGCircle($2);"},
		{"trigger": "I-NGCubicCurve\tinit", "contents": "NGCubicCurve ${1:curve} = new NGCubicCurve($2);"},
		{"trigger": "I-NGCylinder\tinit", "contents": "NGCylinder ${1:cylinder} = new NGCylinder($2);"},
		{"trigger": "I-NGDefaultCamera\tinit", "contents": "NGDefaultCamera ${1:camera} = new NGDefaultCamera($2);"},
		{"trigger": "I-NGEllipse\tinit", "contents": "NGEllipse ${1:ellipse} = new NGEllipse($2);"},
		{"trigger": "I-NGExternalNode\tinit", "contents": "NGExternalNode ${1:node} = new NGExternalNode($2);"},
		{"trigger": "I-NGGroup\tinit", "contents": "NGGroup ${1:group} = new NGGroup($2);"},
		{"trigger": "I-NGImageView\tinit", "contents": "NGImageView ${1:view} = new NGImageView($2);"},
		{"trigger": "I-NGLightBase\tinit", "contents": "NGLightBase ${1:base} = new NGLightBase($2);"},
		{"trigger": "I-NGLine\tinit", "contents": "NGLine ${1:line} = new NGLine($2);"},
		{"trigger": "I-NGMediaView\tinit", "contents": "NGMediaView ${1:view} = new NGMediaView($2);"},
		{"trigger": "I-NGMeshView\tinit", "contents": "NGMeshView ${1:view} = new NGMeshView($2);"},
		{"trigger": "I-NGNode\tinit", "contents": "NGNode ${1:node} = new NGNode($2);"},
		{"trigger": "I-NGParallelCamera\tinit", "contents": "NGParallelCamera ${1:camera} = new NGParallelCamera($2);"},
		{"trigger": "I-NGPath\tinit", "contents": "NGPath ${1:path} = new NGPath($2);"},
		{"trigger": "I-NGPerspectiveCamera\tinit", "contents": "NGPerspectiveCamera ${1:camera} = new NGPerspectiveCamera($2);"},
		{"trigger": "I-NGPhongMaterial\tinit", "contents": "NGPhongMaterial ${1:material} = new NGPhongMaterial($2);"},
		{"trigger": "I-NGPointLight\tinit", "contents": "NGPointLight ${1:light} = new NGPointLight($2);"},
		{"trigger": "I-NGPolygon\tinit", "contents": "NGPolygon ${1:polygon} = new NGPolygon($2);"},
		{"trigger": "I-NGPolyline\tinit", "contents": "NGPolyline ${1:polyline} = new NGPolyline($2);"},
		{"trigger": "I-NGQuadCurve\tinit", "contents": "NGQuadCurve ${1:curve} = new NGQuadCurve($2);"},
		{"trigger": "I-NGRectangle\tinit", "contents": "NGRectangle ${1:rectangle} = new NGRectangle($2);"},
		{"trigger": "I-NGRegion\tinit", "contents": "NGRegion ${1:region} = new NGRegion($2);"},
		{"trigger": "I-NGSVGPath\tinit", "contents": "NGSVGPath ${1:path} = new NGSVGPath($2);"},
		{"trigger": "I-NGShape\tinit", "contents": "NGShape ${1:shape} = new NGShape($2);"},
		{"trigger": "I-NGShape3D\tinit", "contents": "NGShape3D ${1:ngshape3d} = new NGShape3D($2);"},
		{"trigger": "I-NGSphere\tinit", "contents": "NGSphere ${1:sphere} = new NGSphere($2);"},
		{"trigger": "I-NGSubScene\tinit", "contents": "NGSubScene ${1:scene} = new NGSubScene($2);"},
		{"trigger": "I-NGText\tinit", "contents": "NGText ${1:text} = new NGText($2);"},
		{"trigger": "I-NGTriangleMesh\tinit", "contents": "NGTriangleMesh ${1:mesh} = new NGTriangleMesh($2);"},
		{"trigger": "I-NGWebView\tinit", "contents": "NGWebView ${1:view} = new NGWebView($2);"},
		{"trigger": "I-NMTOKENDatatypeValidator\tinit", "contents": "NMTOKENDatatypeValidator ${1:validator} = new NMTOKENDatatypeValidator($2);"},
		{"trigger": "I-NON_EXISTENT\tinit", "contents": "NON_EXISTENT ${1:non} = new NON_EXISTENT($2);"},
		{"trigger": "I-NOP\tinit", "contents": "NOP ${1:nop} = new NOP($2);"},
		{"trigger": "I-NOTATIONDatatypeValidator\tinit", "contents": "NOTATIONDatatypeValidator ${1:validator} = new NOTATIONDatatypeValidator($2);"},
		{"trigger": "I-NO_IMPLEMENT\tinit", "contents": "NO_IMPLEMENT ${1:no} = new NO_IMPLEMENT($2);"},
		{"trigger": "I-NO_MEMORY\tinit", "contents": "NO_MEMORY ${1:no} = new NO_MEMORY($2);"},
		{"trigger": "I-NO_PERMISSION\tinit", "contents": "NO_PERMISSION ${1:no} = new NO_PERMISSION($2);"},
		{"trigger": "I-NO_RESOURCES\tinit", "contents": "NO_RESOURCES ${1:no} = new NO_RESOURCES($2);"},
		{"trigger": "I-NO_RESPONSE\tinit", "contents": "NO_RESPONSE ${1:no} = new NO_RESPONSE($2);"},
		{"trigger": "I-NSInfo\tinit", "contents": "NSInfo ${1:info} = new NSInfo($2);"},
		{"trigger": "I-NTDomainPrincipal\tinit", "contents": "NTDomainPrincipal ${1:principal} = new NTDomainPrincipal($2);"},
		{"trigger": "I-NTLoginModule\tinit", "contents": "NTLoginModule ${1:module} = new NTLoginModule($2);"},
		{"trigger": "I-NTNumericCredential\tinit", "contents": "NTNumericCredential ${1:credential} = new NTNumericCredential($2);"},
		{"trigger": "I-NTSid\tinit", "contents": "NTSid ${1:sid} = new NTSid($2);"},
		{"trigger": "I-NTSidDomainPrincipal\tinit", "contents": "NTSidDomainPrincipal ${1:principal} = new NTSidDomainPrincipal($2);"},
		{"trigger": "I-NTSidGroupPrincipal\tinit", "contents": "NTSidGroupPrincipal ${1:principal} = new NTSidGroupPrincipal($2);"},
		{"trigger": "I-NTSidPrimaryGroupPrincipal\tinit", "contents": "NTSidPrimaryGroupPrincipal ${1:principal} = new NTSidPrimaryGroupPrincipal($2);"},
		{"trigger": "I-NTSidUserPrincipal\tinit", "contents": "NTSidUserPrincipal ${1:principal} = new NTSidUserPrincipal($2);"},
		{"trigger": "I-NTSystem\tinit", "contents": "NTSystem ${1:system} = new NTSystem($2);"},
		{"trigger": "I-NTUserPrincipal\tinit", "contents": "NTUserPrincipal ${1:principal} = new NTUserPrincipal($2);"},
		{"trigger": "I-NULL3DPipeline\tinit", "contents": "NULL3DPipeline ${1:pipeline} = new NULL3DPipeline($2);"},
		{"trigger": "I-NVList\tinit", "contents": "NVList ${1:list} = new NVList($2);"},
		{"trigger": "I-Name\tinit", "contents": "Name ${1:name} = new Name($2);"},
		{"trigger": "I-NameAlreadyBound\tinit", "contents": "NameAlreadyBound ${1:bound} = new NameAlreadyBound($2);"},
		{"trigger": "I-NameAlreadyBoundException\tinit", "contents": "NameAlreadyBoundException ${1:exception} = new NameAlreadyBoundException($2);"},
		{"trigger": "I-NameAlreadyBoundHelper\tinit", "contents": "NameAlreadyBoundHelper ${1:helper} = new NameAlreadyBoundHelper($2);"},
		{"trigger": "I-NameAlreadyBoundHolder\tinit", "contents": "NameAlreadyBoundHolder ${1:holder} = new NameAlreadyBoundHolder($2);"},
		{"trigger": "I-NameBase\tinit", "contents": "NameBase ${1:base} = new NameBase($2);"},
		{"trigger": "I-NameCall\tinit", "contents": "NameCall ${1:call} = new NameCall($2);"},
		{"trigger": "I-NameCallback\tinit", "contents": "NameCallback ${1:callback} = new NameCallback($2);"},
		{"trigger": "I-NameClassPair\tinit", "contents": "NameClassPair ${1:pair} = new NameClassPair($2);"},
		{"trigger": "I-NameComponent\tinit", "contents": "NameComponent ${1:component} = new NameComponent($2);"},
		{"trigger": "I-NameComponentHelper\tinit", "contents": "NameComponentHelper ${1:helper} = new NameComponentHelper($2);"},
		{"trigger": "I-NameComponentHolder\tinit", "contents": "NameComponentHolder ${1:holder} = new NameComponentHolder($2);"},
		{"trigger": "I-NameDynAnyPair\tinit", "contents": "NameDynAnyPair ${1:pair} = new NameDynAnyPair($2);"},
		{"trigger": "I-NameDynAnyPairHelper\tinit", "contents": "NameDynAnyPairHelper ${1:helper} = new NameDynAnyPairHelper($2);"},
		{"trigger": "I-NameDynAnyPairSeqHelper\tinit", "contents": "NameDynAnyPairSeqHelper ${1:helper} = new NameDynAnyPairSeqHelper($2);"},
		{"trigger": "I-NameGenerator\tinit", "contents": "NameGenerator ${1:generator} = new NameGenerator($2);"},
		{"trigger": "I-NameHelper\tinit", "contents": "NameHelper ${1:helper} = new NameHelper($2);"},
		{"trigger": "I-NameHolder\tinit", "contents": "NameHolder ${1:holder} = new NameHolder($2);"},
		{"trigger": "I-NameImpl\tinit", "contents": "NameImpl ${1:impl} = new NameImpl($2);"},
		{"trigger": "I-NameList\tinit", "contents": "NameList ${1:list} = new NameList($2);"},
		{"trigger": "I-NameNotFoundException\tinit", "contents": "NameNotFoundException ${1:exception} = new NameNotFoundException($2);"},
		{"trigger": "I-NameParser\tinit", "contents": "NameParser ${1:parser} = new NameParser($2);"},
		{"trigger": "I-NameSpace\tinit", "contents": "NameSpace ${1:space} = new NameSpace($2);"},
		{"trigger": "I-NameSpaceSymbTable\tinit", "contents": "NameSpaceSymbTable ${1:table} = new NameSpaceSymbTable($2);"},
		{"trigger": "I-NameValuePair\tinit", "contents": "NameValuePair ${1:pair} = new NameValuePair($2);"},
		{"trigger": "I-NameValuePairHelper\tinit", "contents": "NameValuePairHelper ${1:helper} = new NameValuePairHelper($2);"},
		{"trigger": "I-NameValuePairSeqHelper\tinit", "contents": "NameValuePairSeqHelper ${1:helper} = new NameValuePairSeqHelper($2);"},
		{"trigger": "I-NamedAndTyped\tinit", "contents": "NamedAndTyped ${1:typed} = new NamedAndTyped($2);"},
		{"trigger": "I-NamedArg\tinit", "contents": "NamedArg ${1:arg} = new NamedArg($2);"},
		{"trigger": "I-NamedMethodGenerator\tinit", "contents": "NamedMethodGenerator ${1:generator} = new NamedMethodGenerator($2);"},
		{"trigger": "I-NamedNodeMap\tinit", "contents": "NamedNodeMap ${1:map} = new NamedNodeMap($2);"},
		{"trigger": "I-NamedNodeMapImpl\tinit", "contents": "NamedNodeMapImpl ${1:impl} = new NamedNodeMapImpl($2);"},
		{"trigger": "I-NamedObject\tinit", "contents": "NamedObject ${1:object} = new NamedObject($2);"},
		{"trigger": "I-NamedValue\tinit", "contents": "NamedValue ${1:value} = new NamedValue($2);"},
		{"trigger": "I-NamedWeakReference\tinit", "contents": "NamedWeakReference ${1:reference} = new NamedWeakReference($2);"},
		{"trigger": "I-Namespace\tinit", "contents": "Namespace ${1:namespace} = new Namespace($2);"},
		{"trigger": "I-NamespaceAlias\tinit", "contents": "NamespaceAlias ${1:alias} = new NamespaceAlias($2);"},
		{"trigger": "I-NamespaceChangeListener\tinit", "contents": "NamespaceChangeListener ${1:listener} = new NamespaceChangeListener($2);"},
		{"trigger": "I-NamespaceContext\tinit", "contents": "NamespaceContext ${1:context} = new NamespaceContext($2);"},
		{"trigger": "I-NamespaceContextWrapper\tinit", "contents": "NamespaceContextWrapper ${1:wrapper} = new NamespaceContextWrapper($2);"},
		{"trigger": "I-NamespaceMappings\tinit", "contents": "NamespaceMappings ${1:mappings} = new NamespaceMappings($2);"},
		{"trigger": "I-NamespaceSupport\tinit", "contents": "NamespaceSupport ${1:support} = new NamespaceSupport($2);"},
		{"trigger": "I-NamespaceUriCall\tinit", "contents": "NamespaceUriCall ${1:call} = new NamespaceUriCall($2);"},
		{"trigger": "I-Namespaces\tinit", "contents": "Namespaces ${1:namespaces} = new Namespaces($2);"},
		{"trigger": "I-Naming\tinit", "contents": "Naming ${1:naming} = new Naming($2);"},
		{"trigger": "I-NamingContext\tinit", "contents": "NamingContext ${1:context} = new NamingContext($2);"},
		{"trigger": "I-NamingContextExt\tinit", "contents": "NamingContextExt ${1:ext} = new NamingContextExt($2);"},
		{"trigger": "I-NamingContextExtHelper\tinit", "contents": "NamingContextExtHelper ${1:helper} = new NamingContextExtHelper($2);"},
		{"trigger": "I-NamingContextExtHolder\tinit", "contents": "NamingContextExtHolder ${1:holder} = new NamingContextExtHolder($2);"},
		{"trigger": "I-NamingContextExtOperations\tinit", "contents": "NamingContextExtOperations ${1:operations} = new NamingContextExtOperations($2);"},
		{"trigger": "I-NamingContextExtPOA\tinit", "contents": "NamingContextExtPOA ${1:namingcontextextpoa} = new NamingContextExtPOA($2);"},
		{"trigger": "I-NamingContextHelper\tinit", "contents": "NamingContextHelper ${1:helper} = new NamingContextHelper($2);"},
		{"trigger": "I-NamingContextHolder\tinit", "contents": "NamingContextHolder ${1:holder} = new NamingContextHolder($2);"},
		{"trigger": "I-NamingContextOperations\tinit", "contents": "NamingContextOperations ${1:operations} = new NamingContextOperations($2);"},
		{"trigger": "I-NamingContextPOA\tinit", "contents": "NamingContextPOA ${1:namingcontextpoa} = new NamingContextPOA($2);"},
		{"trigger": "I-NamingEnumeration\tinit", "contents": "NamingEnumeration ${1:enumeration} = new NamingEnumeration($2);"},
		{"trigger": "I-NamingEvent\tinit", "contents": "NamingEvent ${1:event} = new NamingEvent($2);"},
		{"trigger": "I-NamingException\tinit", "contents": "NamingException ${1:exception} = new NamingException($2);"},
		{"trigger": "I-NamingExceptionEvent\tinit", "contents": "NamingExceptionEvent ${1:event} = new NamingExceptionEvent($2);"},
		{"trigger": "I-NamingListener\tinit", "contents": "NamingListener ${1:listener} = new NamingListener($2);"},
		{"trigger": "I-NamingManager\tinit", "contents": "NamingManager ${1:manager} = new NamingManager($2);"},
		{"trigger": "I-NamingSecurityException\tinit", "contents": "NamingSecurityException ${1:exception} = new NamingSecurityException($2);"},
		{"trigger": "I-Native\tinit", "contents": "Native ${1:native} = new Native($2);"},
		{"trigger": "I-NativeAudioClip\tinit", "contents": "NativeAudioClip ${1:clip} = new NativeAudioClip($2);"},
		{"trigger": "I-NativeAudioEqualizer\tinit", "contents": "NativeAudioEqualizer ${1:equalizer} = new NativeAudioEqualizer($2);"},
		{"trigger": "I-NativeAudioSpectrum\tinit", "contents": "NativeAudioSpectrum ${1:spectrum} = new NativeAudioSpectrum($2);"},
		{"trigger": "I-NativeCursor\tinit", "contents": "NativeCursor ${1:cursor} = new NativeCursor($2);"},
		{"trigger": "I-NativeCursors\tinit", "contents": "NativeCursors ${1:cursors} = new NativeCursors($2);"},
		{"trigger": "I-NativeEqualizerBand\tinit", "contents": "NativeEqualizerBand ${1:band} = new NativeEqualizerBand($2);"},
		{"trigger": "I-NativeLibLoader\tinit", "contents": "NativeLibLoader ${1:loader} = new NativeLibLoader($2);"},
		{"trigger": "I-NativeMedia\tinit", "contents": "NativeMedia ${1:media} = new NativeMedia($2);"},
		{"trigger": "I-NativeMediaAudioClip\tinit", "contents": "NativeMediaAudioClip ${1:clip} = new NativeMediaAudioClip($2);"},
		{"trigger": "I-NativeMediaAudioClipPlayer\tinit", "contents": "NativeMediaAudioClipPlayer ${1:player} = new NativeMediaAudioClipPlayer($2);"},
		{"trigger": "I-NativeMediaManager\tinit", "contents": "NativeMediaManager ${1:manager} = new NativeMediaManager($2);"},
		{"trigger": "I-NativeMediaPlayer\tinit", "contents": "NativeMediaPlayer ${1:player} = new NativeMediaPlayer($2);"},
		{"trigger": "I-NativePiscesRasterizer\tinit", "contents": "NativePiscesRasterizer ${1:rasterizer} = new NativePiscesRasterizer($2);"},
		{"trigger": "I-NativePlatform\tinit", "contents": "NativePlatform ${1:platform} = new NativePlatform($2);"},
		{"trigger": "I-NativePlatformFactory\tinit", "contents": "NativePlatformFactory ${1:factory} = new NativePlatformFactory($2);"},
		{"trigger": "I-NativeScreen\tinit", "contents": "NativeScreen ${1:screen} = new NativeScreen($2);"},
		{"trigger": "I-NativeVideoBuffer\tinit", "contents": "NativeVideoBuffer ${1:buffer} = new NativeVideoBuffer($2);"},
		{"trigger": "I-NavigableMap\tinit", "contents": "NavigableMap ${1:map} = new NavigableMap($2);"},
		{"trigger": "I-NavigableSet\tinit", "contents": "NavigableSet ${1:set} = new NavigableSet($2);"},
		{"trigger": "I-NavigationFilter\tinit", "contents": "NavigationFilter ${1:filter} = new NavigationFilter($2);"},
		{"trigger": "I-NearbyPointsTouchFilter\tinit", "contents": "NearbyPointsTouchFilter ${1:filter} = new NearbyPointsTouchFilter($2);"},
		{"trigger": "I-Neg\tinit", "contents": "Neg ${1:neg} = new Neg($2);"},
		{"trigger": "I-NegativeArraySizeException\tinit", "contents": "NegativeArraySizeException ${1:exception} = new NegativeArraySizeException($2);"},
		{"trigger": "I-NestedTableColumnHeader\tinit", "contents": "NestedTableColumnHeader ${1:header} = new NestedTableColumnHeader($2);"},
		{"trigger": "I-NestingKind\tinit", "contents": "NestingKind ${1:kind} = new NestingKind($2);"},
		{"trigger": "I-NetMaskImpl\tinit", "contents": "NetMaskImpl ${1:impl} = new NetMaskImpl($2);"},
		{"trigger": "I-NetPermission\tinit", "contents": "NetPermission ${1:permission} = new NetPermission($2);"},
		{"trigger": "I-NetworkChannel\tinit", "contents": "NetworkChannel ${1:channel} = new NetworkChannel($2);"},
		{"trigger": "I-NetworkContext\tinit", "contents": "NetworkContext ${1:context} = new NetworkContext($2);"},
		{"trigger": "I-NetworkInterface\tinit", "contents": "NetworkInterface ${1:interface} = new NetworkInterface($2);"},
		{"trigger": "I-NewArrayTree\tinit", "contents": "NewArrayTree ${1:tree} = new NewArrayTree($2);"},
		{"trigger": "I-NewClassTree\tinit", "contents": "NewClassTree ${1:tree} = new NewClassTree($2);"},
		{"trigger": "I-NewFrameEvent\tinit", "contents": "NewFrameEvent ${1:event} = new NewFrameEvent($2);"},
		{"trigger": "I-NewInstance\tinit", "contents": "NewInstance ${1:instance} = new NewInstance($2);"},
		{"trigger": "I-NimbusDefaults\tinit", "contents": "NimbusDefaults ${1:defaults} = new NimbusDefaults($2);"},
		{"trigger": "I-NimbusIcon\tinit", "contents": "NimbusIcon ${1:icon} = new NimbusIcon($2);"},
		{"trigger": "I-NimbusLookAndFeel\tinit", "contents": "NimbusLookAndFeel ${1:feel} = new NimbusLookAndFeel($2);"},
		{"trigger": "I-NimbusStyle\tinit", "contents": "NimbusStyle ${1:style} = new NimbusStyle($2);"},
		{"trigger": "I-NoCallStackClassLoader\tinit", "contents": "NoCallStackClassLoader ${1:loader} = new NoCallStackClassLoader($2);"},
		{"trigger": "I-NoClassDefFoundError\tinit", "contents": "NoClassDefFoundError ${1:error} = new NoClassDefFoundError($2);"},
		{"trigger": "I-NoConnectionPendingException\tinit", "contents": "NoConnectionPendingException ${1:exception} = new NoConnectionPendingException($2);"},
		{"trigger": "I-NoContext\tinit", "contents": "NoContext ${1:context} = new NoContext($2);"},
		{"trigger": "I-NoContextHelper\tinit", "contents": "NoContextHelper ${1:helper} = new NoContextHelper($2);"},
		{"trigger": "I-NoFramesView\tinit", "contents": "NoFramesView ${1:view} = new NoFramesView($2);"},
		{"trigger": "I-NoInitialContextException\tinit", "contents": "NoInitialContextException ${1:exception} = new NoInitialContextException($2);"},
		{"trigger": "I-NoPermissionException\tinit", "contents": "NoPermissionException ${1:exception} = new NoPermissionException($2);"},
		{"trigger": "I-NoRouteToHostException\tinit", "contents": "NoRouteToHostException ${1:exception} = new NoRouteToHostException($2);"},
		{"trigger": "I-NoServant\tinit", "contents": "NoServant ${1:servant} = new NoServant($2);"},
		{"trigger": "I-NoServantHelper\tinit", "contents": "NoServantHelper ${1:helper} = new NoServantHelper($2);"},
		{"trigger": "I-NoSuchAlgorithmException\tinit", "contents": "NoSuchAlgorithmException ${1:exception} = new NoSuchAlgorithmException($2);"},
		{"trigger": "I-NoSuchAttributeException\tinit", "contents": "NoSuchAttributeException ${1:exception} = new NoSuchAttributeException($2);"},
		{"trigger": "I-NoSuchElementException\tinit", "contents": "NoSuchElementException ${1:exception} = new NoSuchElementException($2);"},
		{"trigger": "I-NoSuchEndPoint\tinit", "contents": "NoSuchEndPoint ${1:point} = new NoSuchEndPoint($2);"},
		{"trigger": "I-NoSuchEndPointHelper\tinit", "contents": "NoSuchEndPointHelper ${1:helper} = new NoSuchEndPointHelper($2);"},
		{"trigger": "I-NoSuchEndPointHolder\tinit", "contents": "NoSuchEndPointHolder ${1:holder} = new NoSuchEndPointHolder($2);"},
		{"trigger": "I-NoSuchFieldError\tinit", "contents": "NoSuchFieldError ${1:error} = new NoSuchFieldError($2);"},
		{"trigger": "I-NoSuchFieldException\tinit", "contents": "NoSuchFieldException ${1:exception} = new NoSuchFieldException($2);"},
		{"trigger": "I-NoSuchFileException\tinit", "contents": "NoSuchFileException ${1:exception} = new NoSuchFileException($2);"},
		{"trigger": "I-NoSuchMechanismException\tinit", "contents": "NoSuchMechanismException ${1:exception} = new NoSuchMechanismException($2);"},
		{"trigger": "I-NoSuchMethodError\tinit", "contents": "NoSuchMethodError ${1:error} = new NoSuchMethodError($2);"},
		{"trigger": "I-NoSuchMethodException\tinit", "contents": "NoSuchMethodException ${1:exception} = new NoSuchMethodException($2);"},
		{"trigger": "I-NoSuchObjectException\tinit", "contents": "NoSuchObjectException ${1:exception} = new NoSuchObjectException($2);"},
		{"trigger": "I-NoSuchProviderException\tinit", "contents": "NoSuchProviderException ${1:exception} = new NoSuchProviderException($2);"},
		{"trigger": "I-NoSuchThreadPoolException\tinit", "contents": "NoSuchThreadPoolException ${1:exception} = new NoSuchThreadPoolException($2);"},
		{"trigger": "I-NoSuchWorkQueueException\tinit", "contents": "NoSuchWorkQueueException ${1:exception} = new NoSuchWorkQueueException($2);"},
		{"trigger": "I-NoType\tinit", "contents": "NoType ${1:type} = new NoType($2);"},
		{"trigger": "I-Node\tinit", "contents": "Node ${1:node} = new Node($2);"},
		{"trigger": "I-NodeBuilder\tinit", "contents": "NodeBuilder ${1:builder} = new NodeBuilder($2);"},
		{"trigger": "I-NodeChangeEvent\tinit", "contents": "NodeChangeEvent ${1:event} = new NodeChangeEvent($2);"},
		{"trigger": "I-NodeChangeListener\tinit", "contents": "NodeChangeListener ${1:listener} = new NodeChangeListener($2);"},
		{"trigger": "I-NodeConsumer\tinit", "contents": "NodeConsumer ${1:consumer} = new NodeConsumer($2);"},
		{"trigger": "I-NodeCounter\tinit", "contents": "NodeCounter ${1:counter} = new NodeCounter($2);"},
		{"trigger": "I-NodeCounterGenerator\tinit", "contents": "NodeCounterGenerator ${1:generator} = new NodeCounterGenerator($2);"},
		{"trigger": "I-NodeEffectInput\tinit", "contents": "NodeEffectInput ${1:input} = new NodeEffectInput($2);"},
		{"trigger": "I-NodeEventDispatcher\tinit", "contents": "NodeEventDispatcher ${1:dispatcher} = new NodeEventDispatcher($2);"},
		{"trigger": "I-NodeFilter\tinit", "contents": "NodeFilter ${1:filter} = new NodeFilter($2);"},
		{"trigger": "I-NodeFilterImpl\tinit", "contents": "NodeFilterImpl ${1:impl} = new NodeFilterImpl($2);"},
		{"trigger": "I-NodeHelper\tinit", "contents": "NodeHelper ${1:helper} = new NodeHelper($2);"},
		{"trigger": "I-NodeImpl\tinit", "contents": "NodeImpl ${1:impl} = new NodeImpl($2);"},
		{"trigger": "I-NodeInfo\tinit", "contents": "NodeInfo ${1:info} = new NodeInfo($2);"},
		{"trigger": "I-NodeIterator\tinit", "contents": "NodeIterator ${1:iterator} = new NodeIterator($2);"},
		{"trigger": "I-NodeIteratorBase\tinit", "contents": "NodeIteratorBase ${1:base} = new NodeIteratorBase($2);"},
		{"trigger": "I-NodeIteratorImpl\tinit", "contents": "NodeIteratorImpl ${1:impl} = new NodeIteratorImpl($2);"},
		{"trigger": "I-NodeList\tinit", "contents": "NodeList ${1:list} = new NodeList($2);"},
		{"trigger": "I-NodeListCache\tinit", "contents": "NodeListCache ${1:cache} = new NodeListCache($2);"},
		{"trigger": "I-NodeListImpl\tinit", "contents": "NodeListImpl ${1:impl} = new NodeListImpl($2);"},
		{"trigger": "I-NodeLocator\tinit", "contents": "NodeLocator ${1:locator} = new NodeLocator($2);"},
		{"trigger": "I-NodeOrientation\tinit", "contents": "NodeOrientation ${1:orientation} = new NodeOrientation($2);"},
		{"trigger": "I-NodePath\tinit", "contents": "NodePath ${1:path} = new NodePath($2);"},
		{"trigger": "I-NodeSequence\tinit", "contents": "NodeSequence ${1:sequence} = new NodeSequence($2);"},
		{"trigger": "I-NodeSet\tinit", "contents": "NodeSet ${1:set} = new NodeSet($2);"},
		{"trigger": "I-NodeSetDTM\tinit", "contents": "NodeSetDTM ${1:nodesetdtm} = new NodeSetDTM($2);"},
		{"trigger": "I-NodeSetData\tinit", "contents": "NodeSetData ${1:data} = new NodeSetData($2);"},
		{"trigger": "I-NodeSetType\tinit", "contents": "NodeSetType ${1:type} = new NodeSetType($2);"},
		{"trigger": "I-NodeSortRecord\tinit", "contents": "NodeSortRecord ${1:record} = new NodeSortRecord($2);"},
		{"trigger": "I-NodeSortRecordFactGenerator\tinit", "contents": "NodeSortRecordFactGenerator ${1:generator} = new NodeSortRecordFactGenerator($2);"},
		{"trigger": "I-NodeSortRecordFactory\tinit", "contents": "NodeSortRecordFactory ${1:factory} = new NodeSortRecordFactory($2);"},
		{"trigger": "I-NodeSortRecordGenerator\tinit", "contents": "NodeSortRecordGenerator ${1:generator} = new NodeSortRecordGenerator($2);"},
		{"trigger": "I-NodeTest\tinit", "contents": "NodeTest ${1:test} = new NodeTest($2);"},
		{"trigger": "I-NodeTestFilter\tinit", "contents": "NodeTestFilter ${1:filter} = new NodeTestFilter($2);"},
		{"trigger": "I-NodeType\tinit", "contents": "NodeType ${1:type} = new NodeType($2);"},
		{"trigger": "I-NodeVector\tinit", "contents": "NodeVector ${1:vector} = new NodeVector($2);"},
		{"trigger": "I-Nodes\tinit", "contents": "Nodes ${1:nodes} = new Nodes($2);"},
		{"trigger": "I-NonInvertibleTransformException\tinit", "contents": "NonInvertibleTransformException ${1:exception} = new NonInvertibleTransformException($2);"},
		{"trigger": "I-NonIterableChange\tinit", "contents": "NonIterableChange ${1:change} = new NonIterableChange($2);"},
		{"trigger": "I-NonReadableChannelException\tinit", "contents": "NonReadableChannelException ${1:exception} = new NonReadableChannelException($2);"},
		{"trigger": "I-NonValidatingConfiguration\tinit", "contents": "NonValidatingConfiguration ${1:configuration} = new NonValidatingConfiguration($2);"},
		{"trigger": "I-NonWritableChannelException\tinit", "contents": "NonWritableChannelException ${1:exception} = new NonWritableChannelException($2);"},
		{"trigger": "I-NoninvertibleTransformException\tinit", "contents": "NoninvertibleTransformException ${1:exception} = new NoninvertibleTransformException($2);"},
		{"trigger": "I-NormalizedStringAdapter\tinit", "contents": "NormalizedStringAdapter ${1:adapter} = new NormalizedStringAdapter($2);"},
		{"trigger": "I-Normalizer\tinit", "contents": "Normalizer ${1:normalizer} = new Normalizer($2);"},
		{"trigger": "I-NotActiveException\tinit", "contents": "NotActiveException ${1:exception} = new NotActiveException($2);"},
		{"trigger": "I-NotBoundException\tinit", "contents": "NotBoundException ${1:exception} = new NotBoundException($2);"},
		{"trigger": "I-NotCall\tinit", "contents": "NotCall ${1:call} = new NotCall($2);"},
		{"trigger": "I-NotCompliantMBeanException\tinit", "contents": "NotCompliantMBeanException ${1:exception} = new NotCompliantMBeanException($2);"},
		{"trigger": "I-NotContextException\tinit", "contents": "NotContextException ${1:exception} = new NotContextException($2);"},
		{"trigger": "I-NotDirectoryException\tinit", "contents": "NotDirectoryException ${1:exception} = new NotDirectoryException($2);"},
		{"trigger": "I-NotEmpty\tinit", "contents": "NotEmpty ${1:empty} = new NotEmpty($2);"},
		{"trigger": "I-NotEmptyHelper\tinit", "contents": "NotEmptyHelper ${1:helper} = new NotEmptyHelper($2);"},
		{"trigger": "I-NotEmptyHolder\tinit", "contents": "NotEmptyHolder ${1:holder} = new NotEmptyHolder($2);"},
		{"trigger": "I-NotEquals\tinit", "contents": "NotEquals ${1:equals} = new NotEquals($2);"},
		{"trigger": "I-NotFound\tinit", "contents": "NotFound ${1:found} = new NotFound($2);"},
		{"trigger": "I-NotFoundHelper\tinit", "contents": "NotFoundHelper ${1:helper} = new NotFoundHelper($2);"},
		{"trigger": "I-NotFoundHolder\tinit", "contents": "NotFoundHolder ${1:holder} = new NotFoundHolder($2);"},
		{"trigger": "I-NotFoundReason\tinit", "contents": "NotFoundReason ${1:reason} = new NotFoundReason($2);"},
		{"trigger": "I-NotFoundReasonHelper\tinit", "contents": "NotFoundReasonHelper ${1:helper} = new NotFoundReasonHelper($2);"},
		{"trigger": "I-NotFoundReasonHolder\tinit", "contents": "NotFoundReasonHolder ${1:holder} = new NotFoundReasonHolder($2);"},
		{"trigger": "I-NotIdentifiableEvent\tinit", "contents": "NotIdentifiableEvent ${1:event} = new NotIdentifiableEvent($2);"},
		{"trigger": "I-NotIdentifiableEventImpl\tinit", "contents": "NotIdentifiableEventImpl ${1:impl} = new NotIdentifiableEventImpl($2);"},
		{"trigger": "I-NotLinkException\tinit", "contents": "NotLinkException ${1:exception} = new NotLinkException($2);"},
		{"trigger": "I-NotOwnerException\tinit", "contents": "NotOwnerException ${1:exception} = new NotOwnerException($2);"},
		{"trigger": "I-NotQueryExp\tinit", "contents": "NotQueryExp ${1:exp} = new NotQueryExp($2);"},
		{"trigger": "I-NotSerializableException\tinit", "contents": "NotSerializableException ${1:exception} = new NotSerializableException($2);"},
		{"trigger": "I-NotYetBoundException\tinit", "contents": "NotYetBoundException ${1:exception} = new NotYetBoundException($2);"},
		{"trigger": "I-NotYetConnectedException\tinit", "contents": "NotYetConnectedException ${1:exception} = new NotYetConnectedException($2);"},
		{"trigger": "I-Notation\tinit", "contents": "Notation ${1:notation} = new Notation($2);"},
		{"trigger": "I-NotationDeclaration\tinit", "contents": "NotationDeclaration ${1:declaration} = new NotationDeclaration($2);"},
		{"trigger": "I-NotationImpl\tinit", "contents": "NotationImpl ${1:impl} = new NotationImpl($2);"},
		{"trigger": "I-Notification\tinit", "contents": "Notification ${1:notification} = new Notification($2);"},
		{"trigger": "I-NotificationAccessController\tinit", "contents": "NotificationAccessController ${1:controller} = new NotificationAccessController($2);"},
		{"trigger": "I-NotificationBroadcaster\tinit", "contents": "NotificationBroadcaster ${1:broadcaster} = new NotificationBroadcaster($2);"},
		{"trigger": "I-NotificationBroadcasterSupport\tinit", "contents": "NotificationBroadcasterSupport ${1:support} = new NotificationBroadcasterSupport($2);"},
		{"trigger": "I-NotificationBuffer\tinit", "contents": "NotificationBuffer ${1:buffer} = new NotificationBuffer($2);"},
		{"trigger": "I-NotificationBufferFilter\tinit", "contents": "NotificationBufferFilter ${1:filter} = new NotificationBufferFilter($2);"},
		{"trigger": "I-NotificationEmitter\tinit", "contents": "NotificationEmitter ${1:emitter} = new NotificationEmitter($2);"},
		{"trigger": "I-NotificationFilter\tinit", "contents": "NotificationFilter ${1:filter} = new NotificationFilter($2);"},
		{"trigger": "I-NotificationFilterSupport\tinit", "contents": "NotificationFilterSupport ${1:support} = new NotificationFilterSupport($2);"},
		{"trigger": "I-NotificationListener\tinit", "contents": "NotificationListener ${1:listener} = new NotificationListener($2);"},
		{"trigger": "I-NotificationResult\tinit", "contents": "NotificationResult ${1:result} = new NotificationResult($2);"},
		{"trigger": "I-NpapiEvent\tinit", "contents": "NpapiEvent ${1:event} = new NpapiEvent($2);"},
		{"trigger": "I-NthIterator\tinit", "contents": "NthIterator ${1:iterator} = new NthIterator($2);"},
		{"trigger": "I-NullCursor\tinit", "contents": "NullCursor ${1:cursor} = new NullCursor($2);"},
		{"trigger": "I-NullPointerException\tinit", "contents": "NullPointerException ${1:exception} = new NullPointerException($2);"},
		{"trigger": "I-NullServant\tinit", "contents": "NullServant ${1:servant} = new NullServant($2);"},
		{"trigger": "I-NullType\tinit", "contents": "NullType ${1:type} = new NullType($2);"},
		{"trigger": "I-Number\tinit", "contents": "Number ${1:number} = new Number($2);"},
		{"trigger": "I-NumberAxis\tinit", "contents": "NumberAxis ${1:axis} = new NumberAxis($2);"},
		{"trigger": "I-NumberAxisBuilder\tinit", "contents": "NumberAxisBuilder ${1:builder} = new NumberAxisBuilder($2);"},
		{"trigger": "I-NumberBinding\tinit", "contents": "NumberBinding ${1:binding} = new NumberBinding($2);"},
		{"trigger": "I-NumberCall\tinit", "contents": "NumberCall ${1:call} = new NumberCall($2);"},
		{"trigger": "I-NumberExpression\tinit", "contents": "NumberExpression ${1:expression} = new NumberExpression($2);"},
		{"trigger": "I-NumberExpressionBase\tinit", "contents": "NumberExpressionBase ${1:base} = new NumberExpressionBase($2);"},
		{"trigger": "I-NumberFormat\tinit", "contents": "NumberFormat ${1:format} = new NumberFormat($2);"},
		{"trigger": "I-NumberFormatException\tinit", "contents": "NumberFormatException ${1:exception} = new NumberFormatException($2);"},
		{"trigger": "I-NumberFormatProvider\tinit", "contents": "NumberFormatProvider ${1:provider} = new NumberFormatProvider($2);"},
		{"trigger": "I-NumberFormatter\tinit", "contents": "NumberFormatter ${1:formatter} = new NumberFormatter($2);"},
		{"trigger": "I-NumberOfDocuments\tinit", "contents": "NumberOfDocuments ${1:documents} = new NumberOfDocuments($2);"},
		{"trigger": "I-NumberOfInterveningJobs\tinit", "contents": "NumberOfInterveningJobs ${1:jobs} = new NumberOfInterveningJobs($2);"},
		{"trigger": "I-NumberStringConverter\tinit", "contents": "NumberStringConverter ${1:converter} = new NumberStringConverter($2);"},
		{"trigger": "I-NumberTangentInterpolator\tinit", "contents": "NumberTangentInterpolator ${1:interpolator} = new NumberTangentInterpolator($2);"},
		{"trigger": "I-NumberType\tinit", "contents": "NumberType ${1:type} = new NumberType($2);"},
		{"trigger": "I-NumberUp\tinit", "contents": "NumberUp ${1:up} = new NumberUp($2);"},
		{"trigger": "I-NumberUpSupported\tinit", "contents": "NumberUpSupported ${1:supported} = new NumberUpSupported($2);"},
		{"trigger": "I-NumericShaper\tinit", "contents": "NumericShaper ${1:shaper} = new NumericShaper($2);"},
		{"trigger": "I-NumericValueExp\tinit", "contents": "NumericValueExp ${1:exp} = new NumericValueExp($2);"},
		{"trigger": "I-OADefault\tinit", "contents": "OADefault ${1:default} = new OADefault($2);"},
		{"trigger": "I-OADestroyed\tinit", "contents": "OADestroyed ${1:destroyed} = new OADestroyed($2);"},
		{"trigger": "I-OAInvocationInfo\tinit", "contents": "OAInvocationInfo ${1:info} = new OAInvocationInfo($2);"},
		{"trigger": "I-OASISXMLCatalogReader\tinit", "contents": "OASISXMLCatalogReader ${1:reader} = new OASISXMLCatalogReader($2);"},
		{"trigger": "I-OBJECT_NOT_EXIST\tinit", "contents": "OBJECT_NOT_EXIST ${1:object} = new OBJECT_NOT_EXIST($2);"},
		{"trigger": "I-OBJ_ADAPTER\tinit", "contents": "OBJ_ADAPTER ${1:obj} = new OBJ_ADAPTER($2);"},
		{"trigger": "I-OMAPCursor\tinit", "contents": "OMAPCursor ${1:cursor} = new OMAPCursor($2);"},
		{"trigger": "I-OMAPPlatform\tinit", "contents": "OMAPPlatform ${1:platform} = new OMAPPlatform($2);"},
		{"trigger": "I-OMAPPlatformFactory\tinit", "contents": "OMAPPlatformFactory ${1:factory} = new OMAPPlatformFactory($2);"},
		{"trigger": "I-OMAPScreen\tinit", "contents": "OMAPScreen ${1:screen} = new OMAPScreen($2);"},
		{"trigger": "I-OMAPX11Platform\tinit", "contents": "OMAPX11Platform ${1:platform} = new OMAPX11Platform($2);"},
		{"trigger": "I-OMAPX11PlatformFactory\tinit", "contents": "OMAPX11PlatformFactory ${1:factory} = new OMAPX11PlatformFactory($2);"},
		{"trigger": "I-OMGVMCID\tinit", "contents": "OMGVMCID ${1:omgvmcid} = new OMGVMCID($2);"},
		{"trigger": "I-ORB\tinit", "contents": "ORB ${1:orb} = new ORB($2);"},
		{"trigger": "I-ORBAlreadyRegistered\tinit", "contents": "ORBAlreadyRegistered ${1:registered} = new ORBAlreadyRegistered($2);"},
		{"trigger": "I-ORBAlreadyRegisteredHelper\tinit", "contents": "ORBAlreadyRegisteredHelper ${1:helper} = new ORBAlreadyRegisteredHelper($2);"},
		{"trigger": "I-ORBAlreadyRegisteredHolder\tinit", "contents": "ORBAlreadyRegisteredHolder ${1:holder} = new ORBAlreadyRegisteredHolder($2);"},
		{"trigger": "I-ORBConfigurator\tinit", "contents": "ORBConfigurator ${1:configurator} = new ORBConfigurator($2);"},
		{"trigger": "I-ORBData\tinit", "contents": "ORBData ${1:data} = new ORBData($2);"},
		{"trigger": "I-ORBIdHelper\tinit", "contents": "ORBIdHelper ${1:helper} = new ORBIdHelper($2);"},
		{"trigger": "I-ORBInitInfo\tinit", "contents": "ORBInitInfo ${1:info} = new ORBInitInfo($2);"},
		{"trigger": "I-ORBInitInfoExt\tinit", "contents": "ORBInitInfoExt ${1:ext} = new ORBInitInfoExt($2);"},
		{"trigger": "I-ORBInitInfoOperations\tinit", "contents": "ORBInitInfoOperations ${1:operations} = new ORBInitInfoOperations($2);"},
		{"trigger": "I-ORBInitializer\tinit", "contents": "ORBInitializer ${1:initializer} = new ORBInitializer($2);"},
		{"trigger": "I-ORBInitializerOperations\tinit", "contents": "ORBInitializerOperations ${1:operations} = new ORBInitializerOperations($2);"},
		{"trigger": "I-ORBPortInfo\tinit", "contents": "ORBPortInfo ${1:info} = new ORBPortInfo($2);"},
		{"trigger": "I-ORBPortInfoHelper\tinit", "contents": "ORBPortInfoHelper ${1:helper} = new ORBPortInfoHelper($2);"},
		{"trigger": "I-ORBPortInfoHolder\tinit", "contents": "ORBPortInfoHolder ${1:holder} = new ORBPortInfoHolder($2);"},
		{"trigger": "I-ORBPortInfoListHelper\tinit", "contents": "ORBPortInfoListHelper ${1:helper} = new ORBPortInfoListHelper($2);"},
		{"trigger": "I-ORBPortInfoListHolder\tinit", "contents": "ORBPortInfoListHolder ${1:holder} = new ORBPortInfoListHolder($2);"},
		{"trigger": "I-ORBSocketFactory\tinit", "contents": "ORBSocketFactory ${1:factory} = new ORBSocketFactory($2);"},
		{"trigger": "I-ORBTypeComponent\tinit", "contents": "ORBTypeComponent ${1:component} = new ORBTypeComponent($2);"},
		{"trigger": "I-ORBVersion\tinit", "contents": "ORBVersion ${1:version} = new ORBVersion($2);"},
		{"trigger": "I-ORBVersionFactory\tinit", "contents": "ORBVersionFactory ${1:factory} = new ORBVersionFactory($2);"},
		{"trigger": "I-ORBVersionServiceContext\tinit", "contents": "ORBVersionServiceContext ${1:context} = new ORBVersionServiceContext($2);"},
		{"trigger": "I-ORBidHelper\tinit", "contents": "ORBidHelper ${1:helper} = new ORBidHelper($2);"},
		{"trigger": "I-ORBidListHelper\tinit", "contents": "ORBidListHelper ${1:helper} = new ORBidListHelper($2);"},
		{"trigger": "I-ORBidListHolder\tinit", "contents": "ORBidListHolder ${1:holder} = new ORBidListHolder($2);"},
		{"trigger": "I-OS\tinit", "contents": "OS ${1:os} = new OS($2);"},
		{"trigger": "I-OSFreetype\tinit", "contents": "OSFreetype ${1:freetype} = new OSFreetype($2);"},
		{"trigger": "I-OSPango\tinit", "contents": "OSPango ${1:pango} = new OSPango($2);"},
		{"trigger": "I-OSXMedia\tinit", "contents": "OSXMedia ${1:media} = new OSXMedia($2);"},
		{"trigger": "I-OSXMediaPlayer\tinit", "contents": "OSXMediaPlayer ${1:player} = new OSXMediaPlayer($2);"},
		{"trigger": "I-OSXPlatform\tinit", "contents": "OSXPlatform ${1:platform} = new OSXPlatform($2);"},
		{"trigger": "I-ObjDoubleConsumer\tinit", "contents": "ObjDoubleConsumer ${1:consumer} = new ObjDoubleConsumer($2);"},
		{"trigger": "I-ObjID\tinit", "contents": "ObjID ${1:objid} = new ObjID($2);"},
		{"trigger": "I-ObjIntConsumer\tinit", "contents": "ObjIntConsumer ${1:consumer} = new ObjIntConsumer($2);"},
		{"trigger": "I-ObjLongConsumer\tinit", "contents": "ObjLongConsumer ${1:consumer} = new ObjLongConsumer($2);"},
		{"trigger": "I-Object\tinit", "contents": "Object ${1:object} = new Object($2);"},
		{"trigger": "I-ObjectAdapter\tinit", "contents": "ObjectAdapter ${1:adapter} = new ObjectAdapter($2);"},
		{"trigger": "I-ObjectAdapterBase\tinit", "contents": "ObjectAdapterBase ${1:base} = new ObjectAdapterBase($2);"},
		{"trigger": "I-ObjectAdapterFactory\tinit", "contents": "ObjectAdapterFactory ${1:factory} = new ObjectAdapterFactory($2);"},
		{"trigger": "I-ObjectAdapterId\tinit", "contents": "ObjectAdapterId ${1:id} = new ObjectAdapterId($2);"},
		{"trigger": "I-ObjectAlreadyActive\tinit", "contents": "ObjectAlreadyActive ${1:active} = new ObjectAlreadyActive($2);"},
		{"trigger": "I-ObjectAlreadyActiveHelper\tinit", "contents": "ObjectAlreadyActiveHelper ${1:helper} = new ObjectAlreadyActiveHelper($2);"},
		{"trigger": "I-ObjectBinding\tinit", "contents": "ObjectBinding ${1:binding} = new ObjectBinding($2);"},
		{"trigger": "I-ObjectChangeListener\tinit", "contents": "ObjectChangeListener ${1:listener} = new ObjectChangeListener($2);"},
		{"trigger": "I-ObjectConstant\tinit", "contents": "ObjectConstant ${1:constant} = new ObjectConstant($2);"},
		{"trigger": "I-ObjectContainer\tinit", "contents": "ObjectContainer ${1:container} = new ObjectContainer($2);"},
		{"trigger": "I-ObjectCopier\tinit", "contents": "ObjectCopier ${1:copier} = new ObjectCopier($2);"},
		{"trigger": "I-ObjectCopierFactory\tinit", "contents": "ObjectCopierFactory ${1:factory} = new ObjectCopierFactory($2);"},
		{"trigger": "I-ObjectExpression\tinit", "contents": "ObjectExpression ${1:expression} = new ObjectExpression($2);"},
		{"trigger": "I-ObjectFactory\tinit", "contents": "ObjectFactory ${1:factory} = new ObjectFactory($2);"},
		{"trigger": "I-ObjectFactoryBuilder\tinit", "contents": "ObjectFactoryBuilder ${1:builder} = new ObjectFactoryBuilder($2);"},
		{"trigger": "I-ObjectHelper\tinit", "contents": "ObjectHelper ${1:helper} = new ObjectHelper($2);"},
		{"trigger": "I-ObjectHolder\tinit", "contents": "ObjectHolder ${1:holder} = new ObjectHolder($2);"},
		{"trigger": "I-ObjectId\tinit", "contents": "ObjectId ${1:id} = new ObjectId($2);"},
		{"trigger": "I-ObjectIdHelper\tinit", "contents": "ObjectIdHelper ${1:helper} = new ObjectIdHelper($2);"},
		{"trigger": "I-ObjectImpl\tinit", "contents": "ObjectImpl ${1:impl} = new ObjectImpl($2);"},
		{"trigger": "I-ObjectInput\tinit", "contents": "ObjectInput ${1:input} = new ObjectInput($2);"},
		{"trigger": "I-ObjectInputStream\tinit", "contents": "ObjectInputStream ${1:stream} = new ObjectInputStream($2);"},
		{"trigger": "I-ObjectInputStreamWithLoader\tinit", "contents": "ObjectInputStreamWithLoader ${1:loader} = new ObjectInputStreamWithLoader($2);"},
		{"trigger": "I-ObjectInputValidation\tinit", "contents": "ObjectInputValidation ${1:validation} = new ObjectInputValidation($2);"},
		{"trigger": "I-ObjectInstance\tinit", "contents": "ObjectInstance ${1:instance} = new ObjectInstance($2);"},
		{"trigger": "I-ObjectKey\tinit", "contents": "ObjectKey ${1:key} = new ObjectKey($2);"},
		{"trigger": "I-ObjectKeyFactory\tinit", "contents": "ObjectKeyFactory ${1:factory} = new ObjectKeyFactory($2);"},
		{"trigger": "I-ObjectKeyTemplate\tinit", "contents": "ObjectKeyTemplate ${1:template} = new ObjectKeyTemplate($2);"},
		{"trigger": "I-ObjectList\tinit", "contents": "ObjectList ${1:list} = new ObjectList($2);"},
		{"trigger": "I-ObjectListImpl\tinit", "contents": "ObjectListImpl ${1:impl} = new ObjectListImpl($2);"},
		{"trigger": "I-ObjectName\tinit", "contents": "ObjectName ${1:name} = new ObjectName($2);"},
		{"trigger": "I-ObjectNotActive\tinit", "contents": "ObjectNotActive ${1:active} = new ObjectNotActive($2);"},
		{"trigger": "I-ObjectNotActiveHelper\tinit", "contents": "ObjectNotActiveHelper ${1:helper} = new ObjectNotActiveHelper($2);"},
		{"trigger": "I-ObjectOutput\tinit", "contents": "ObjectOutput ${1:output} = new ObjectOutput($2);"},
		{"trigger": "I-ObjectOutputStream\tinit", "contents": "ObjectOutputStream ${1:stream} = new ObjectOutputStream($2);"},
		{"trigger": "I-ObjectPool\tinit", "contents": "ObjectPool ${1:pool} = new ObjectPool($2);"},
		{"trigger": "I-ObjectProperty\tinit", "contents": "ObjectProperty ${1:property} = new ObjectProperty($2);"},
		{"trigger": "I-ObjectPropertyBase\tinit", "contents": "ObjectPropertyBase ${1:base} = new ObjectPropertyBase($2);"},
		{"trigger": "I-ObjectReferenceFactory\tinit", "contents": "ObjectReferenceFactory ${1:factory} = new ObjectReferenceFactory($2);"},
		{"trigger": "I-ObjectReferenceFactoryHelper\tinit", "contents": "ObjectReferenceFactoryHelper ${1:helper} = new ObjectReferenceFactoryHelper($2);"},
		{"trigger": "I-ObjectReferenceFactoryHolder\tinit", "contents": "ObjectReferenceFactoryHolder ${1:holder} = new ObjectReferenceFactoryHolder($2);"},
		{"trigger": "I-ObjectReferenceTemplate\tinit", "contents": "ObjectReferenceTemplate ${1:template} = new ObjectReferenceTemplate($2);"},
		{"trigger": "I-ObjectReferenceTemplateHelper\tinit", "contents": "ObjectReferenceTemplateHelper ${1:helper} = new ObjectReferenceTemplateHelper($2);"},
		{"trigger": "I-ObjectReferenceTemplateHolder\tinit", "contents": "ObjectReferenceTemplateHolder ${1:holder} = new ObjectReferenceTemplateHolder($2);"},
		{"trigger": "I-ObjectReferenceTemplateSeqHelper\tinit", "contents": "ObjectReferenceTemplateSeqHelper ${1:helper} = new ObjectReferenceTemplateSeqHelper($2);"},
		{"trigger": "I-ObjectReferenceTemplateSeqHolder\tinit", "contents": "ObjectReferenceTemplateSeqHolder ${1:holder} = new ObjectReferenceTemplateSeqHolder($2);"},
		{"trigger": "I-ObjectStack\tinit", "contents": "ObjectStack ${1:stack} = new ObjectStack($2);"},
		{"trigger": "I-ObjectStreamClass\tinit", "contents": "ObjectStreamClass ${1:class} = new ObjectStreamClass($2);"},
		{"trigger": "I-ObjectStreamConstants\tinit", "contents": "ObjectStreamConstants ${1:constants} = new ObjectStreamConstants($2);"},
		{"trigger": "I-ObjectStreamException\tinit", "contents": "ObjectStreamException ${1:exception} = new ObjectStreamException($2);"},
		{"trigger": "I-ObjectStreamField\tinit", "contents": "ObjectStreamField ${1:field} = new ObjectStreamField($2);"},
		{"trigger": "I-ObjectType\tinit", "contents": "ObjectType ${1:type} = new ObjectType($2);"},
		{"trigger": "I-ObjectVector\tinit", "contents": "ObjectVector ${1:vector} = new ObjectVector($2);"},
		{"trigger": "I-ObjectView\tinit", "contents": "ObjectView ${1:view} = new ObjectView($2);"},
		{"trigger": "I-Objects\tinit", "contents": "Objects ${1:objects} = new Objects($2);"},
		{"trigger": "I-Observable\tinit", "contents": "Observable ${1:observable} = new Observable($2);"},
		{"trigger": "I-ObservableArray\tinit", "contents": "ObservableArray ${1:array} = new ObservableArray($2);"},
		{"trigger": "I-ObservableArrayBase\tinit", "contents": "ObservableArrayBase ${1:base} = new ObservableArrayBase($2);"},
		{"trigger": "I-ObservableBooleanValue\tinit", "contents": "ObservableBooleanValue ${1:value} = new ObservableBooleanValue($2);"},
		{"trigger": "I-ObservableDoubleValue\tinit", "contents": "ObservableDoubleValue ${1:value} = new ObservableDoubleValue($2);"},
		{"trigger": "I-ObservableFaceArray\tinit", "contents": "ObservableFaceArray ${1:array} = new ObservableFaceArray($2);"},
		{"trigger": "I-ObservableFaceArrayImpl\tinit", "contents": "ObservableFaceArrayImpl ${1:impl} = new ObservableFaceArrayImpl($2);"},
		{"trigger": "I-ObservableFloatArray\tinit", "contents": "ObservableFloatArray ${1:array} = new ObservableFloatArray($2);"},
		{"trigger": "I-ObservableFloatArrayImpl\tinit", "contents": "ObservableFloatArrayImpl ${1:impl} = new ObservableFloatArrayImpl($2);"},
		{"trigger": "I-ObservableFloatValue\tinit", "contents": "ObservableFloatValue ${1:value} = new ObservableFloatValue($2);"},
		{"trigger": "I-ObservableIntegerArray\tinit", "contents": "ObservableIntegerArray ${1:array} = new ObservableIntegerArray($2);"},
		{"trigger": "I-ObservableIntegerArrayImpl\tinit", "contents": "ObservableIntegerArrayImpl ${1:impl} = new ObservableIntegerArrayImpl($2);"},
		{"trigger": "I-ObservableIntegerValue\tinit", "contents": "ObservableIntegerValue ${1:value} = new ObservableIntegerValue($2);"},
		{"trigger": "I-ObservableList\tinit", "contents": "ObservableList ${1:list} = new ObservableList($2);"},
		{"trigger": "I-ObservableListBase\tinit", "contents": "ObservableListBase ${1:base} = new ObservableListBase($2);"},
		{"trigger": "I-ObservableListValue\tinit", "contents": "ObservableListValue ${1:value} = new ObservableListValue($2);"},
		{"trigger": "I-ObservableListWrapper\tinit", "contents": "ObservableListWrapper ${1:wrapper} = new ObservableListWrapper($2);"},
		{"trigger": "I-ObservableLongValue\tinit", "contents": "ObservableLongValue ${1:value} = new ObservableLongValue($2);"},
		{"trigger": "I-ObservableMap\tinit", "contents": "ObservableMap ${1:map} = new ObservableMap($2);"},
		{"trigger": "I-ObservableMapValue\tinit", "contents": "ObservableMapValue ${1:value} = new ObservableMapValue($2);"},
		{"trigger": "I-ObservableMapWrapper\tinit", "contents": "ObservableMapWrapper ${1:wrapper} = new ObservableMapWrapper($2);"},
		{"trigger": "I-ObservableNumberValue\tinit", "contents": "ObservableNumberValue ${1:value} = new ObservableNumberValue($2);"},
		{"trigger": "I-ObservableObjectValue\tinit", "contents": "ObservableObjectValue ${1:value} = new ObservableObjectValue($2);"},
		{"trigger": "I-ObservableSequentialListWrapper\tinit", "contents": "ObservableSequentialListWrapper ${1:wrapper} = new ObservableSequentialListWrapper($2);"},
		{"trigger": "I-ObservableSet\tinit", "contents": "ObservableSet ${1:set} = new ObservableSet($2);"},
		{"trigger": "I-ObservableSetValue\tinit", "contents": "ObservableSetValue ${1:value} = new ObservableSetValue($2);"},
		{"trigger": "I-ObservableSetWrapper\tinit", "contents": "ObservableSetWrapper ${1:wrapper} = new ObservableSetWrapper($2);"},
		{"trigger": "I-ObservableStringValue\tinit", "contents": "ObservableStringValue ${1:value} = new ObservableStringValue($2);"},
		{"trigger": "I-ObservableValue\tinit", "contents": "ObservableValue ${1:value} = new ObservableValue($2);"},
		{"trigger": "I-ObservableValueBase\tinit", "contents": "ObservableValueBase ${1:base} = new ObservableValueBase($2);"},
		{"trigger": "I-Observer\tinit", "contents": "Observer ${1:observer} = new Observer($2);"},
		{"trigger": "I-OceanTheme\tinit", "contents": "OceanTheme ${1:theme} = new OceanTheme($2);"},
		{"trigger": "I-OctetSeqHelper\tinit", "contents": "OctetSeqHelper ${1:helper} = new OctetSeqHelper($2);"},
		{"trigger": "I-OctetSeqHolder\tinit", "contents": "OctetSeqHolder ${1:holder} = new OctetSeqHolder($2);"},
		{"trigger": "I-OctetStreamData\tinit", "contents": "OctetStreamData ${1:data} = new OctetStreamData($2);"},
		{"trigger": "I-Offset\tinit", "contents": "Offset ${1:offset} = new Offset($2);"},
		{"trigger": "I-OffsetDateTime\tinit", "contents": "OffsetDateTime ${1:time} = new OffsetDateTime($2);"},
		{"trigger": "I-OffsetTime\tinit", "contents": "OffsetTime ${1:time} = new OffsetTime($2);"},
		{"trigger": "I-Oid\tinit", "contents": "Oid ${1:oid} = new Oid($2);"},
		{"trigger": "I-OneStepIterator\tinit", "contents": "OneStepIterator ${1:iterator} = new OneStepIterator($2);"},
		{"trigger": "I-OneStepIteratorForward\tinit", "contents": "OneStepIteratorForward ${1:forward} = new OneStepIteratorForward($2);"},
		{"trigger": "I-Op\tinit", "contents": "Op ${1:op} = new Op($2);"},
		{"trigger": "I-OpCodes\tinit", "contents": "OpCodes ${1:codes} = new OpCodes($2);"},
		{"trigger": "I-OpMap\tinit", "contents": "OpMap ${1:map} = new OpMap($2);"},
		{"trigger": "I-OpMapVector\tinit", "contents": "OpMapVector ${1:vector} = new OpMapVector($2);"},
		{"trigger": "I-OpenDataException\tinit", "contents": "OpenDataException ${1:exception} = new OpenDataException($2);"},
		{"trigger": "I-OpenMBeanAttributeInfo\tinit", "contents": "OpenMBeanAttributeInfo ${1:info} = new OpenMBeanAttributeInfo($2);"},
		{"trigger": "I-OpenMBeanAttributeInfoSupport\tinit", "contents": "OpenMBeanAttributeInfoSupport ${1:support} = new OpenMBeanAttributeInfoSupport($2);"},
		{"trigger": "I-OpenMBeanConstructorInfo\tinit", "contents": "OpenMBeanConstructorInfo ${1:info} = new OpenMBeanConstructorInfo($2);"},
		{"trigger": "I-OpenMBeanConstructorInfoSupport\tinit", "contents": "OpenMBeanConstructorInfoSupport ${1:support} = new OpenMBeanConstructorInfoSupport($2);"},
		{"trigger": "I-OpenMBeanInfo\tinit", "contents": "OpenMBeanInfo ${1:info} = new OpenMBeanInfo($2);"},
		{"trigger": "I-OpenMBeanInfoSupport\tinit", "contents": "OpenMBeanInfoSupport ${1:support} = new OpenMBeanInfoSupport($2);"},
		{"trigger": "I-OpenMBeanOperationInfo\tinit", "contents": "OpenMBeanOperationInfo ${1:info} = new OpenMBeanOperationInfo($2);"},
		{"trigger": "I-OpenMBeanOperationInfoSupport\tinit", "contents": "OpenMBeanOperationInfoSupport ${1:support} = new OpenMBeanOperationInfoSupport($2);"},
		{"trigger": "I-OpenMBeanParameterInfo\tinit", "contents": "OpenMBeanParameterInfo ${1:info} = new OpenMBeanParameterInfo($2);"},
		{"trigger": "I-OpenMBeanParameterInfoSupport\tinit", "contents": "OpenMBeanParameterInfoSupport ${1:support} = new OpenMBeanParameterInfoSupport($2);"},
		{"trigger": "I-OpenOption\tinit", "contents": "OpenOption ${1:option} = new OpenOption($2);"},
		{"trigger": "I-OpenPiscesPrismUtils\tinit", "contents": "OpenPiscesPrismUtils ${1:utils} = new OpenPiscesPrismUtils($2);"},
		{"trigger": "I-OpenPiscesRasterizer\tinit", "contents": "OpenPiscesRasterizer ${1:rasterizer} = new OpenPiscesRasterizer($2);"},
		{"trigger": "I-OpenType\tinit", "contents": "OpenType ${1:type} = new OpenType($2);"},
		{"trigger": "I-OpenTypeGlyphMapper\tinit", "contents": "OpenTypeGlyphMapper ${1:mapper} = new OpenTypeGlyphMapper($2);"},
		{"trigger": "I-OperatingSystemMXBean\tinit", "contents": "OperatingSystemMXBean ${1:bean} = new OperatingSystemMXBean($2);"},
		{"trigger": "I-Operation\tinit", "contents": "Operation ${1:operation} = new Operation($2);"},
		{"trigger": "I-OperationFactory\tinit", "contents": "OperationFactory ${1:factory} = new OperationFactory($2);"},
		{"trigger": "I-OperationNotSupportedException\tinit", "contents": "OperationNotSupportedException ${1:exception} = new OperationNotSupportedException($2);"},
		{"trigger": "I-OperationsException\tinit", "contents": "OperationsException ${1:exception} = new OperationsException($2);"},
		{"trigger": "I-Operator\tinit", "contents": "Operator ${1:operator} = new Operator($2);"},
		{"trigger": "I-Operators\tinit", "contents": "Operators ${1:operators} = new Operators($2);"},
		{"trigger": "I-Option\tinit", "contents": "Option ${1:option} = new Option($2);"},
		{"trigger": "I-OptionChecker\tinit", "contents": "OptionChecker ${1:checker} = new OptionChecker($2);"},
		{"trigger": "I-OptionComboBoxModel\tinit", "contents": "OptionComboBoxModel ${1:model} = new OptionComboBoxModel($2);"},
		{"trigger": "I-OptionListModel\tinit", "contents": "OptionListModel ${1:model} = new OptionListModel($2);"},
		{"trigger": "I-OptionPaneMessageAreaOptionPaneLabelPainter\tinit", "contents": "OptionPaneMessageAreaOptionPaneLabelPainter ${1:painter} = new OptionPaneMessageAreaOptionPaneLabelPainter($2);"},
		{"trigger": "I-OptionPaneMessageAreaPainter\tinit", "contents": "OptionPaneMessageAreaPainter ${1:painter} = new OptionPaneMessageAreaPainter($2);"},
		{"trigger": "I-OptionPanePainter\tinit", "contents": "OptionPanePainter ${1:painter} = new OptionPanePainter($2);"},
		{"trigger": "I-OptionPaneUI\tinit", "contents": "OptionPaneUI ${1:optionpaneui} = new OptionPaneUI($2);"},
		{"trigger": "I-Optional\tinit", "contents": "Optional ${1:optional} = new Optional($2);"},
		{"trigger": "I-OptionalBoolean\tinit", "contents": "OptionalBoolean ${1:boolean} = new OptionalBoolean($2);"},
		{"trigger": "I-OptionalDataException\tinit", "contents": "OptionalDataException ${1:exception} = new OptionalDataException($2);"},
		{"trigger": "I-OptionalDouble\tinit", "contents": "OptionalDouble ${1:double} = new OptionalDouble($2);"},
		{"trigger": "I-OptionalInt\tinit", "contents": "OptionalInt ${1:int} = new OptionalInt($2);"},
		{"trigger": "I-OptionalLong\tinit", "contents": "OptionalLong ${1:long} = new OptionalLong($2);"},
		{"trigger": "I-Or\tinit", "contents": "Or ${1:or} = new Or($2);"},
		{"trigger": "I-OrQueryExp\tinit", "contents": "OrQueryExp ${1:exp} = new OrQueryExp($2);"},
		{"trigger": "I-OrderClassLoaders\tinit", "contents": "OrderClassLoaders ${1:loaders} = new OrderClassLoaders($2);"},
		{"trigger": "I-Orientation\tinit", "contents": "Orientation ${1:orientation} = new Orientation($2);"},
		{"trigger": "I-OrientationRequested\tinit", "contents": "OrientationRequested ${1:requested} = new OrientationRequested($2);"},
		{"trigger": "I-OrientedKeyBinding\tinit", "contents": "OrientedKeyBinding ${1:binding} = new OrientedKeyBinding($2);"},
		{"trigger": "I-Otherwise\tinit", "contents": "Otherwise ${1:otherwise} = new Otherwise($2);"},
		{"trigger": "I-OutOfMemoryError\tinit", "contents": "OutOfMemoryError ${1:error} = new OutOfMemoryError($2);"},
		{"trigger": "I-OuterGlowEffect\tinit", "contents": "OuterGlowEffect ${1:effect} = new OuterGlowEffect($2);"},
		{"trigger": "I-OutlineableChunkEnd\tinit", "contents": "OutlineableChunkEnd ${1:end} = new OutlineableChunkEnd($2);"},
		{"trigger": "I-OutlineableChunkStart\tinit", "contents": "OutlineableChunkStart ${1:start} = new OutlineableChunkStart($2);"},
		{"trigger": "I-Output\tinit", "contents": "Output ${1:output} = new Output($2);"},
		{"trigger": "I-OutputBuffer\tinit", "contents": "OutputBuffer ${1:buffer} = new OutputBuffer($2);"},
		{"trigger": "I-OutputDeviceAssigned\tinit", "contents": "OutputDeviceAssigned ${1:assigned} = new OutputDeviceAssigned($2);"},
		{"trigger": "I-OutputFormat\tinit", "contents": "OutputFormat ${1:format} = new OutputFormat($2);"},
		{"trigger": "I-OutputKeys\tinit", "contents": "OutputKeys ${1:keys} = new OutputKeys($2);"},
		{"trigger": "I-OutputPropertiesFactory\tinit", "contents": "OutputPropertiesFactory ${1:factory} = new OutputPropertiesFactory($2);"},
		{"trigger": "I-OutputPropertyUtils\tinit", "contents": "OutputPropertyUtils ${1:utils} = new OutputPropertyUtils($2);"},
		{"trigger": "I-OutputSettings\tinit", "contents": "OutputSettings ${1:settings} = new OutputSettings($2);"},
		{"trigger": "I-OutputStream\tinit", "contents": "OutputStream ${1:stream} = new OutputStream($2);"},
		{"trigger": "I-OutputStreamImageOutputStreamSpi\tinit", "contents": "OutputStreamImageOutputStreamSpi ${1:spi} = new OutputStreamImageOutputStreamSpi($2);"},
		{"trigger": "I-OutputStreamWriter\tinit", "contents": "OutputStreamWriter ${1:writer} = new OutputStreamWriter($2);"},
		{"trigger": "I-OverlappingFileLockException\tinit", "contents": "OverlappingFileLockException ${1:exception} = new OverlappingFileLockException($2);"},
		{"trigger": "I-OverlayLayout\tinit", "contents": "OverlayLayout ${1:layout} = new OverlayLayout($2);"},
		{"trigger": "I-OverlayWarning\tinit", "contents": "OverlayWarning ${1:warning} = new OverlayWarning($2);"},
		{"trigger": "I-Override\tinit", "contents": "Override ${1:override} = new Override($2);"},
		{"trigger": "I-OverrunStyle\tinit", "contents": "OverrunStyle ${1:style} = new OverrunStyle($2);"},
		{"trigger": "I-Owner\tinit", "contents": "Owner ${1:owner} = new Owner($2);"},
		{"trigger": "I-OwnerImpl\tinit", "contents": "OwnerImpl ${1:impl} = new OwnerImpl($2);"},
		{"trigger": "I-PDLOverrideSupported\tinit", "contents": "PDLOverrideSupported ${1:supported} = new PDLOverrideSupported($2);"},
		{"trigger": "I-PERSIST_STORE\tinit", "contents": "PERSIST_STORE ${1:persist} = new PERSIST_STORE($2);"},
		{"trigger": "I-PGFont\tinit", "contents": "PGFont ${1:font} = new PGFont($2);"},
		{"trigger": "I-PGPData\tinit", "contents": "PGPData ${1:data} = new PGPData($2);"},
		{"trigger": "I-PIHandler\tinit", "contents": "PIHandler ${1:handler} = new PIHandler($2);"},
		{"trigger": "I-PKCS12Attribute\tinit", "contents": "PKCS12Attribute ${1:attribute} = new PKCS12Attribute($2);"},
		{"trigger": "I-PKCS8EncodedKeySpec\tinit", "contents": "PKCS8EncodedKeySpec ${1:spec} = new PKCS8EncodedKeySpec($2);"},
		{"trigger": "I-PKIXBuilderParameters\tinit", "contents": "PKIXBuilderParameters ${1:parameters} = new PKIXBuilderParameters($2);"},
		{"trigger": "I-PKIXCertPathBuilderResult\tinit", "contents": "PKIXCertPathBuilderResult ${1:result} = new PKIXCertPathBuilderResult($2);"},
		{"trigger": "I-PKIXCertPathChecker\tinit", "contents": "PKIXCertPathChecker ${1:checker} = new PKIXCertPathChecker($2);"},
		{"trigger": "I-PKIXCertPathValidatorResult\tinit", "contents": "PKIXCertPathValidatorResult ${1:result} = new PKIXCertPathValidatorResult($2);"},
		{"trigger": "I-PKIXParameters\tinit", "contents": "PKIXParameters ${1:parameters} = new PKIXParameters($2);"},
		{"trigger": "I-PKIXReason\tinit", "contents": "PKIXReason ${1:reason} = new PKIXReason($2);"},
		{"trigger": "I-PKIXRevocationChecker\tinit", "contents": "PKIXRevocationChecker ${1:checker} = new PKIXRevocationChecker($2);"},
		{"trigger": "I-PMGClass\tinit", "contents": "PMGClass ${1:class} = new PMGClass($2);"},
		{"trigger": "I-PNGDescriptor\tinit", "contents": "PNGDescriptor ${1:descriptor} = new PNGDescriptor($2);"},
		{"trigger": "I-PNGIDATChunkInputStream\tinit", "contents": "PNGIDATChunkInputStream ${1:stream} = new PNGIDATChunkInputStream($2);"},
		{"trigger": "I-PNGImageLoaderFactory\tinit", "contents": "PNGImageLoaderFactory ${1:factory} = new PNGImageLoaderFactory($2);"},
		{"trigger": "I-PNGImageReader\tinit", "contents": "PNGImageReader ${1:reader} = new PNGImageReader($2);"},
		{"trigger": "I-PNGImageReaderSpi\tinit", "contents": "PNGImageReaderSpi ${1:spi} = new PNGImageReaderSpi($2);"},
		{"trigger": "I-PNGImageWriter\tinit", "contents": "PNGImageWriter ${1:writer} = new PNGImageWriter($2);"},
		{"trigger": "I-PNGImageWriterSpi\tinit", "contents": "PNGImageWriterSpi ${1:spi} = new PNGImageWriterSpi($2);"},
		{"trigger": "I-PNGMetadata\tinit", "contents": "PNGMetadata ${1:metadata} = new PNGMetadata($2);"},
		{"trigger": "I-PNGMetadataFormat\tinit", "contents": "PNGMetadataFormat ${1:format} = new PNGMetadataFormat($2);"},
		{"trigger": "I-PNGMetadataFormatResources\tinit", "contents": "PNGMetadataFormatResources ${1:resources} = new PNGMetadataFormatResources($2);"},
		{"trigger": "I-POA\tinit", "contents": "POA ${1:poa} = new POA($2);"},
		{"trigger": "I-POAHelper\tinit", "contents": "POAHelper ${1:helper} = new POAHelper($2);"},
		{"trigger": "I-POAManager\tinit", "contents": "POAManager ${1:manager} = new POAManager($2);"},
		{"trigger": "I-POAManagerOperations\tinit", "contents": "POAManagerOperations ${1:operations} = new POAManagerOperations($2);"},
		{"trigger": "I-POANameHelper\tinit", "contents": "POANameHelper ${1:helper} = new POANameHelper($2);"},
		{"trigger": "I-POANameHolder\tinit", "contents": "POANameHolder ${1:holder} = new POANameHolder($2);"},
		{"trigger": "I-POAOperations\tinit", "contents": "POAOperations ${1:operations} = new POAOperations($2);"},
		{"trigger": "I-POP\tinit", "contents": "POP ${1:pop} = new POP($2);"},
		{"trigger": "I-PPSDrawable\tinit", "contents": "PPSDrawable ${1:drawable} = new PPSDrawable($2);"},
		{"trigger": "I-PPSEffectPeer\tinit", "contents": "PPSEffectPeer ${1:peer} = new PPSEffectPeer($2);"},
		{"trigger": "I-PPSOneSamplerPeer\tinit", "contents": "PPSOneSamplerPeer ${1:peer} = new PPSOneSamplerPeer($2);"},
		{"trigger": "I-PPSRenderer\tinit", "contents": "PPSRenderer ${1:renderer} = new PPSRenderer($2);"},
		{"trigger": "I-PPSTwoSamplerPeer\tinit", "contents": "PPSTwoSamplerPeer ${1:peer} = new PPSTwoSamplerPeer($2);"},
		{"trigger": "I-PPSZeroSamplerPeer\tinit", "contents": "PPSZeroSamplerPeer ${1:peer} = new PPSZeroSamplerPeer($2);"},
		{"trigger": "I-PPStoPSWDisplacementMapPeer\tinit", "contents": "PPStoPSWDisplacementMapPeer ${1:peer} = new PPStoPSWDisplacementMapPeer($2);"},
		{"trigger": "I-PRIVATE_MEMBER\tinit", "contents": "PRIVATE_MEMBER ${1:private} = new PRIVATE_MEMBER($2);"},
		{"trigger": "I-PSSParameterSpec\tinit", "contents": "PSSParameterSpec ${1:spec} = new PSSParameterSpec($2);"},
		{"trigger": "I-PSVIAttrNSImpl\tinit", "contents": "PSVIAttrNSImpl ${1:impl} = new PSVIAttrNSImpl($2);"},
		{"trigger": "I-PSVIDOMImplementationImpl\tinit", "contents": "PSVIDOMImplementationImpl ${1:impl} = new PSVIDOMImplementationImpl($2);"},
		{"trigger": "I-PSVIDocumentImpl\tinit", "contents": "PSVIDocumentImpl ${1:impl} = new PSVIDocumentImpl($2);"},
		{"trigger": "I-PSVIElementNSImpl\tinit", "contents": "PSVIElementNSImpl ${1:impl} = new PSVIElementNSImpl($2);"},
		{"trigger": "I-PSVIProvider\tinit", "contents": "PSVIProvider ${1:provider} = new PSVIProvider($2);"},
		{"trigger": "I-PSWDrawable\tinit", "contents": "PSWDrawable ${1:drawable} = new PSWDrawable($2);"},
		{"trigger": "I-PSWRenderer\tinit", "contents": "PSWRenderer ${1:renderer} = new PSWRenderer($2);"},
		{"trigger": "I-PUBLIC_MEMBER\tinit", "contents": "PUBLIC_MEMBER ${1:public} = new PUBLIC_MEMBER($2);"},
		{"trigger": "I-PUSH\tinit", "contents": "PUSH ${1:push} = new PUSH($2);"},
		{"trigger": "I-PUTFIELD\tinit", "contents": "PUTFIELD ${1:putfield} = new PUTFIELD($2);"},
		{"trigger": "I-PUTSTATIC\tinit", "contents": "PUTSTATIC ${1:putstatic} = new PUTSTATIC($2);"},
		{"trigger": "I-Package\tinit", "contents": "Package ${1:package} = new Package($2);"},
		{"trigger": "I-PackageDoc\tinit", "contents": "PackageDoc ${1:doc} = new PackageDoc($2);"},
		{"trigger": "I-PackageElement\tinit", "contents": "PackageElement ${1:element} = new PackageElement($2);"},
		{"trigger": "I-PackedColorModel\tinit", "contents": "PackedColorModel ${1:model} = new PackedColorModel($2);"},
		{"trigger": "I-PageAttributes\tinit", "contents": "PageAttributes ${1:attributes} = new PageAttributes($2);"},
		{"trigger": "I-PageCache\tinit", "contents": "PageCache ${1:cache} = new PageCache($2);"},
		{"trigger": "I-PageFormat\tinit", "contents": "PageFormat ${1:format} = new PageFormat($2);"},
		{"trigger": "I-PageLayout\tinit", "contents": "PageLayout ${1:layout} = new PageLayout($2);"},
		{"trigger": "I-PageOrientation\tinit", "contents": "PageOrientation ${1:orientation} = new PageOrientation($2);"},
		{"trigger": "I-PageRange\tinit", "contents": "PageRange ${1:range} = new PageRange($2);"},
		{"trigger": "I-PageRanges\tinit", "contents": "PageRanges ${1:ranges} = new PageRanges($2);"},
		{"trigger": "I-Pageable\tinit", "contents": "Pageable ${1:pageable} = new Pageable($2);"},
		{"trigger": "I-PagedResultsControl\tinit", "contents": "PagedResultsControl ${1:control} = new PagedResultsControl($2);"},
		{"trigger": "I-PagedResultsResponseControl\tinit", "contents": "PagedResultsResponseControl ${1:control} = new PagedResultsResponseControl($2);"},
		{"trigger": "I-PagesPerMinute\tinit", "contents": "PagesPerMinute ${1:minute} = new PagesPerMinute($2);"},
		{"trigger": "I-PagesPerMinuteColor\tinit", "contents": "PagesPerMinuteColor ${1:color} = new PagesPerMinuteColor($2);"},
		{"trigger": "I-Pagination\tinit", "contents": "Pagination ${1:pagination} = new Pagination($2);"},
		{"trigger": "I-PaginationBehavior\tinit", "contents": "PaginationBehavior ${1:behavior} = new PaginationBehavior($2);"},
		{"trigger": "I-PaginationBuilder\tinit", "contents": "PaginationBuilder ${1:builder} = new PaginationBuilder($2);"},
		{"trigger": "I-PaginationSkin\tinit", "contents": "PaginationSkin ${1:skin} = new PaginationSkin($2);"},
		{"trigger": "I-Paint\tinit", "contents": "Paint ${1:paint} = new Paint($2);"},
		{"trigger": "I-PaintCollector\tinit", "contents": "PaintCollector ${1:collector} = new PaintCollector($2);"},
		{"trigger": "I-PaintContext\tinit", "contents": "PaintContext ${1:context} = new PaintContext($2);"},
		{"trigger": "I-PaintConverter\tinit", "contents": "PaintConverter ${1:converter} = new PaintConverter($2);"},
		{"trigger": "I-PaintEvent\tinit", "contents": "PaintEvent ${1:event} = new PaintEvent($2);"},
		{"trigger": "I-PaintHelper\tinit", "contents": "PaintHelper ${1:helper} = new PaintHelper($2);"},
		{"trigger": "I-PaintRenderJob\tinit", "contents": "PaintRenderJob ${1:job} = new PaintRenderJob($2);"},
		{"trigger": "I-PaintUtil\tinit", "contents": "PaintUtil ${1:util} = new PaintUtil($2);"},
		{"trigger": "I-Painter\tinit", "contents": "Painter ${1:painter} = new Painter($2);"},
		{"trigger": "I-Pair\tinit", "contents": "Pair ${1:pair} = new Pair($2);"},
		{"trigger": "I-PaletteBuilder\tinit", "contents": "PaletteBuilder ${1:builder} = new PaletteBuilder($2);"},
		{"trigger": "I-Pane\tinit", "contents": "Pane ${1:pane} = new Pane($2);"},
		{"trigger": "I-PaneBuilder\tinit", "contents": "PaneBuilder ${1:builder} = new PaneBuilder($2);"},
		{"trigger": "I-Panel\tinit", "contents": "Panel ${1:panel} = new Panel($2);"},
		{"trigger": "I-PanelPeer\tinit", "contents": "PanelPeer ${1:peer} = new PanelPeer($2);"},
		{"trigger": "I-PanelUI\tinit", "contents": "PanelUI ${1:panelui} = new PanelUI($2);"},
		{"trigger": "I-PangoFonts\tinit", "contents": "PangoFonts ${1:fonts} = new PangoFonts($2);"},
		{"trigger": "I-PangoGlyphLayout\tinit", "contents": "PangoGlyphLayout ${1:layout} = new PangoGlyphLayout($2);"},
		{"trigger": "I-PangoGlyphString\tinit", "contents": "PangoGlyphString ${1:string} = new PangoGlyphString($2);"},
		{"trigger": "I-Paper\tinit", "contents": "Paper ${1:paper} = new Paper($2);"},
		{"trigger": "I-PaperSource\tinit", "contents": "PaperSource ${1:source} = new PaperSource($2);"},
		{"trigger": "I-ParagraphView\tinit", "contents": "ParagraphView ${1:view} = new ParagraphView($2);"},
		{"trigger": "I-ParallelCamera\tinit", "contents": "ParallelCamera ${1:camera} = new ParallelCamera($2);"},
		{"trigger": "I-ParallelTransition\tinit", "contents": "ParallelTransition ${1:transition} = new ParallelTransition($2);"},
		{"trigger": "I-ParallelTransitionBuilder\tinit", "contents": "ParallelTransitionBuilder ${1:builder} = new ParallelTransitionBuilder($2);"},
		{"trigger": "I-Param\tinit", "contents": "Param ${1:param} = new Param($2);"},
		{"trigger": "I-ParamTag\tinit", "contents": "ParamTag ${1:tag} = new ParamTag($2);"},
		{"trigger": "I-ParamTree\tinit", "contents": "ParamTree ${1:tree} = new ParamTree($2);"},
		{"trigger": "I-Parameter\tinit", "contents": "Parameter ${1:parameter} = new Parameter($2);"},
		{"trigger": "I-ParameterBlock\tinit", "contents": "ParameterBlock ${1:block} = new ParameterBlock($2);"},
		{"trigger": "I-ParameterDescriptor\tinit", "contents": "ParameterDescriptor ${1:descriptor} = new ParameterDescriptor($2);"},
		{"trigger": "I-ParameterMetaData\tinit", "contents": "ParameterMetaData ${1:data} = new ParameterMetaData($2);"},
		{"trigger": "I-ParameterMode\tinit", "contents": "ParameterMode ${1:mode} = new ParameterMode($2);"},
		{"trigger": "I-ParameterModeHelper\tinit", "contents": "ParameterModeHelper ${1:helper} = new ParameterModeHelper($2);"},
		{"trigger": "I-ParameterModeHolder\tinit", "contents": "ParameterModeHolder ${1:holder} = new ParameterModeHolder($2);"},
		{"trigger": "I-ParameterRef\tinit", "contents": "ParameterRef ${1:ref} = new ParameterRef($2);"},
		{"trigger": "I-Parameterizable\tinit", "contents": "Parameterizable ${1:parameterizable} = new Parameterizable($2);"},
		{"trigger": "I-ParameterizedType\tinit", "contents": "ParameterizedType ${1:type} = new ParameterizedType($2);"},
		{"trigger": "I-ParameterizedTypeTree\tinit", "contents": "ParameterizedTypeTree ${1:tree} = new ParameterizedTypeTree($2);"},
		{"trigger": "I-ParametersImpl\tinit", "contents": "ParametersImpl ${1:impl} = new ParametersImpl($2);"},
		{"trigger": "I-Parent\tinit", "contents": "Parent ${1:parent} = new Parent($2);"},
		{"trigger": "I-ParentBuilder\tinit", "contents": "ParentBuilder ${1:builder} = new ParentBuilder($2);"},
		{"trigger": "I-ParentLocationPath\tinit", "contents": "ParentLocationPath ${1:path} = new ParentLocationPath($2);"},
		{"trigger": "I-ParentNode\tinit", "contents": "ParentNode ${1:node} = new ParentNode($2);"},
		{"trigger": "I-ParentPattern\tinit", "contents": "ParentPattern ${1:pattern} = new ParentPattern($2);"},
		{"trigger": "I-ParentTraversalEngine\tinit", "contents": "ParentTraversalEngine ${1:engine} = new ParentTraversalEngine($2);"},
		{"trigger": "I-ParenthesizedTree\tinit", "contents": "ParenthesizedTree ${1:tree} = new ParenthesizedTree($2);"},
		{"trigger": "I-ParseConversionEvent\tinit", "contents": "ParseConversionEvent ${1:event} = new ParseConversionEvent($2);"},
		{"trigger": "I-ParseConversionEventImpl\tinit", "contents": "ParseConversionEventImpl ${1:impl} = new ParseConversionEventImpl($2);"},
		{"trigger": "I-ParseError\tinit", "contents": "ParseError ${1:error} = new ParseError($2);"},
		{"trigger": "I-ParseException\tinit", "contents": "ParseException ${1:exception} = new ParseException($2);"},
		{"trigger": "I-ParsePosition\tinit", "contents": "ParsePosition ${1:position} = new ParsePosition($2);"},
		{"trigger": "I-ParseTraceElement\tinit", "contents": "ParseTraceElement ${1:element} = new ParseTraceElement($2);"},
		{"trigger": "I-Parsed\tinit", "contents": "Parsed ${1:parsed} = new Parsed($2);"},
		{"trigger": "I-ParsedSynthStyle\tinit", "contents": "ParsedSynthStyle ${1:style} = new ParsedSynthStyle($2);"},
		{"trigger": "I-ParsedValue\tinit", "contents": "ParsedValue ${1:value} = new ParsedValue($2);"},
		{"trigger": "I-ParsedValueImpl\tinit", "contents": "ParsedValueImpl ${1:impl} = new ParsedValueImpl($2);"},
		{"trigger": "I-Parser\tinit", "contents": "Parser ${1:parser} = new Parser($2);"},
		{"trigger": "I-ParserAdapter\tinit", "contents": "ParserAdapter ${1:adapter} = new ParserAdapter($2);"},
		{"trigger": "I-ParserConfigurationException\tinit", "contents": "ParserConfigurationException ${1:exception} = new ParserConfigurationException($2);"},
		{"trigger": "I-ParserConfigurationSettings\tinit", "contents": "ParserConfigurationSettings ${1:settings} = new ParserConfigurationSettings($2);"},
		{"trigger": "I-ParserConstants\tinit", "contents": "ParserConstants ${1:constants} = new ParserConstants($2);"},
		{"trigger": "I-ParserData\tinit", "contents": "ParserData ${1:data} = new ParserData($2);"},
		{"trigger": "I-ParserDataFactory\tinit", "contents": "ParserDataFactory ${1:factory} = new ParserDataFactory($2);"},
		{"trigger": "I-ParserDelegator\tinit", "contents": "ParserDelegator ${1:delegator} = new ParserDelegator($2);"},
		{"trigger": "I-ParserFactory\tinit", "contents": "ParserFactory ${1:factory} = new ParserFactory($2);"},
		{"trigger": "I-ParserForXMLSchema\tinit", "contents": "ParserForXMLSchema ${1:schema} = new ParserForXMLSchema($2);"},
		{"trigger": "I-ParserImplBase\tinit", "contents": "ParserImplBase ${1:base} = new ParserImplBase($2);"},
		{"trigger": "I-ParserImplTableBase\tinit", "contents": "ParserImplTableBase ${1:base} = new ParserImplTableBase($2);"},
		{"trigger": "I-ParserTokenManager\tinit", "contents": "ParserTokenManager ${1:manager} = new ParserTokenManager($2);"},
		{"trigger": "I-ParserTreeConstants\tinit", "contents": "ParserTreeConstants ${1:constants} = new ParserTreeConstants($2);"},
		{"trigger": "I-PartialResultException\tinit", "contents": "PartialResultException ${1:exception} = new PartialResultException($2);"},
		{"trigger": "I-PartiallyOrderedSet\tinit", "contents": "PartiallyOrderedSet ${1:set} = new PartiallyOrderedSet($2);"},
		{"trigger": "I-PasswordAuthentication\tinit", "contents": "PasswordAuthentication ${1:authentication} = new PasswordAuthentication($2);"},
		{"trigger": "I-PasswordCallback\tinit", "contents": "PasswordCallback ${1:callback} = new PasswordCallback($2);"},
		{"trigger": "I-PasswordField\tinit", "contents": "PasswordField ${1:field} = new PasswordField($2);"},
		{"trigger": "I-PasswordFieldBehavior\tinit", "contents": "PasswordFieldBehavior ${1:behavior} = new PasswordFieldBehavior($2);"},
		{"trigger": "I-PasswordFieldBuilder\tinit", "contents": "PasswordFieldBuilder ${1:builder} = new PasswordFieldBuilder($2);"},
		{"trigger": "I-PasswordFieldPainter\tinit", "contents": "PasswordFieldPainter ${1:painter} = new PasswordFieldPainter($2);"},
		{"trigger": "I-PasswordView\tinit", "contents": "PasswordView ${1:view} = new PasswordView($2);"},
		{"trigger": "I-Pasteboard\tinit", "contents": "Pasteboard ${1:pasteboard} = new Pasteboard($2);"},
		{"trigger": "I-PasteboardImpl\tinit", "contents": "PasteboardImpl ${1:impl} = new PasteboardImpl($2);"},
		{"trigger": "I-Patch\tinit", "contents": "Patch ${1:patch} = new Patch($2);"},
		{"trigger": "I-Path\tinit", "contents": "Path ${1:path} = new Path($2);"},
		{"trigger": "I-Path2D\tinit", "contents": "Path2D ${1:path2d} = new Path2D($2);"},
		{"trigger": "I-PathBuilder\tinit", "contents": "PathBuilder ${1:builder} = new PathBuilder($2);"},
		{"trigger": "I-PathComponent\tinit", "contents": "PathComponent ${1:component} = new PathComponent($2);"},
		{"trigger": "I-PathConsumer2D\tinit", "contents": "PathConsumer2D ${1:pathconsumer2d} = new PathConsumer2D($2);"},
		{"trigger": "I-PathElement\tinit", "contents": "PathElement ${1:element} = new PathElement($2);"},
		{"trigger": "I-PathElementBuilder\tinit", "contents": "PathElementBuilder ${1:builder} = new PathElementBuilder($2);"},
		{"trigger": "I-PathIterator\tinit", "contents": "PathIterator ${1:iterator} = new PathIterator($2);"},
		{"trigger": "I-PathIteratorHelper\tinit", "contents": "PathIteratorHelper ${1:helper} = new PathIteratorHelper($2);"},
		{"trigger": "I-PathMatcher\tinit", "contents": "PathMatcher ${1:matcher} = new PathMatcher($2);"},
		{"trigger": "I-PathTransition\tinit", "contents": "PathTransition ${1:transition} = new PathTransition($2);"},
		{"trigger": "I-PathTransitionBuilder\tinit", "contents": "PathTransitionBuilder ${1:builder} = new PathTransitionBuilder($2);"},
		{"trigger": "I-PathUtils\tinit", "contents": "PathUtils ${1:utils} = new PathUtils($2);"},
		{"trigger": "I-Paths\tinit", "contents": "Paths ${1:paths} = new Paths($2);"},
		{"trigger": "I-Pattern\tinit", "contents": "Pattern ${1:pattern} = new Pattern($2);"},
		{"trigger": "I-PatternEntry\tinit", "contents": "PatternEntry ${1:entry} = new PatternEntry($2);"},
		{"trigger": "I-PatternSyntaxException\tinit", "contents": "PatternSyntaxException ${1:exception} = new PatternSyntaxException($2);"},
		{"trigger": "I-PauseTransition\tinit", "contents": "PauseTransition ${1:transition} = new PauseTransition($2);"},
		{"trigger": "I-PauseTransitionBuilder\tinit", "contents": "PauseTransitionBuilder ${1:builder} = new PauseTransitionBuilder($2);"},
		{"trigger": "I-PerInterface\tinit", "contents": "PerInterface ${1:interface} = new PerInterface($2);"},
		{"trigger": "I-PercentageStringConverter\tinit", "contents": "PercentageStringConverter ${1:converter} = new PercentageStringConverter($2);"},
		{"trigger": "I-PerfLogger\tinit", "contents": "PerfLogger ${1:logger} = new PerfLogger($2);"},
		{"trigger": "I-PerformanceTracker\tinit", "contents": "PerformanceTracker ${1:tracker} = new PerformanceTracker($2);"},
		{"trigger": "I-PerformanceTrackerHelper\tinit", "contents": "PerformanceTrackerHelper ${1:helper} = new PerformanceTrackerHelper($2);"},
		{"trigger": "I-PerformanceTrackerImpl\tinit", "contents": "PerformanceTrackerImpl ${1:impl} = new PerformanceTrackerImpl($2);"},
		{"trigger": "I-Period\tinit", "contents": "Period ${1:period} = new Period($2);"},
		{"trigger": "I-Permission\tinit", "contents": "Permission ${1:permission} = new Permission($2);"},
		{"trigger": "I-PermissionCollection\tinit", "contents": "PermissionCollection ${1:collection} = new PermissionCollection($2);"},
		{"trigger": "I-PermissionImpl\tinit", "contents": "PermissionImpl ${1:impl} = new PermissionImpl($2);"},
		{"trigger": "I-Permissions\tinit", "contents": "Permissions ${1:permissions} = new Permissions($2);"},
		{"trigger": "I-PersistenceDelegate\tinit", "contents": "PersistenceDelegate ${1:delegate} = new PersistenceDelegate($2);"},
		{"trigger": "I-PersistentMBean\tinit", "contents": "PersistentMBean ${1:bean} = new PersistentMBean($2);"},
		{"trigger": "I-PerspectiveCamera\tinit", "contents": "PerspectiveCamera ${1:camera} = new PerspectiveCamera($2);"},
		{"trigger": "I-PerspectiveCameraBuilder\tinit", "contents": "PerspectiveCameraBuilder ${1:builder} = new PerspectiveCameraBuilder($2);"},
		{"trigger": "I-PerspectiveTransform\tinit", "contents": "PerspectiveTransform ${1:transform} = new PerspectiveTransform($2);"},
		{"trigger": "I-PerspectiveTransformBuilder\tinit", "contents": "PerspectiveTransformBuilder ${1:builder} = new PerspectiveTransformBuilder($2);"},
		{"trigger": "I-PerspectiveTransformState\tinit", "contents": "PerspectiveTransformState ${1:state} = new PerspectiveTransformState($2);"},
		{"trigger": "I-PhantomReference\tinit", "contents": "PhantomReference ${1:reference} = new PhantomReference($2);"},
		{"trigger": "I-Phaser\tinit", "contents": "Phaser ${1:phaser} = new Phaser($2);"},
		{"trigger": "I-PhongLighting\tinit", "contents": "PhongLighting ${1:lighting} = new PhongLighting($2);"},
		{"trigger": "I-PhongMaterial\tinit", "contents": "PhongMaterial ${1:material} = new PhongMaterial($2);"},
		{"trigger": "I-PickRay\tinit", "contents": "PickRay ${1:ray} = new PickRay($2);"},
		{"trigger": "I-PickResult\tinit", "contents": "PickResult ${1:result} = new PickResult($2);"},
		{"trigger": "I-PickResultChooser\tinit", "contents": "PickResultChooser ${1:chooser} = new PickResultChooser($2);"},
		{"trigger": "I-PieChart\tinit", "contents": "PieChart ${1:chart} = new PieChart($2);"},
		{"trigger": "I-PieChartBuilder\tinit", "contents": "PieChartBuilder ${1:builder} = new PieChartBuilder($2);"},
		{"trigger": "I-Pipe\tinit", "contents": "Pipe ${1:pipe} = new Pipe($2);"},
		{"trigger": "I-PipedInputStream\tinit", "contents": "PipedInputStream ${1:stream} = new PipedInputStream($2);"},
		{"trigger": "I-PipedOutputStream\tinit", "contents": "PipedOutputStream ${1:stream} = new PipedOutputStream($2);"},
		{"trigger": "I-PipedReader\tinit", "contents": "PipedReader ${1:reader} = new PipedReader($2);"},
		{"trigger": "I-PipedWriter\tinit", "contents": "PipedWriter ${1:writer} = new PipedWriter($2);"},
		{"trigger": "I-PipelineHelper\tinit", "contents": "PipelineHelper ${1:helper} = new PipelineHelper($2);"},
		{"trigger": "I-PiscesRenderer\tinit", "contents": "PiscesRenderer ${1:renderer} = new PiscesRenderer($2);"},
		{"trigger": "I-PixelAccessor\tinit", "contents": "PixelAccessor ${1:accessor} = new PixelAccessor($2);"},
		{"trigger": "I-PixelConverter\tinit", "contents": "PixelConverter ${1:converter} = new PixelConverter($2);"},
		{"trigger": "I-PixelFormat\tinit", "contents": "PixelFormat ${1:format} = new PixelFormat($2);"},
		{"trigger": "I-PixelGetter\tinit", "contents": "PixelGetter ${1:getter} = new PixelGetter($2);"},
		{"trigger": "I-PixelGrabber\tinit", "contents": "PixelGrabber ${1:grabber} = new PixelGrabber($2);"},
		{"trigger": "I-PixelInterleavedSampleModel\tinit", "contents": "PixelInterleavedSampleModel ${1:model} = new PixelInterleavedSampleModel($2);"},
		{"trigger": "I-PixelReader\tinit", "contents": "PixelReader ${1:reader} = new PixelReader($2);"},
		{"trigger": "I-PixelSetter\tinit", "contents": "PixelSetter ${1:setter} = new PixelSetter($2);"},
		{"trigger": "I-PixelSource\tinit", "contents": "PixelSource ${1:source} = new PixelSource($2);"},
		{"trigger": "I-PixelUtils\tinit", "contents": "PixelUtils ${1:utils} = new PixelUtils($2);"},
		{"trigger": "I-PixelWriter\tinit", "contents": "PixelWriter ${1:writer} = new PixelWriter($2);"},
		{"trigger": "I-Pixels\tinit", "contents": "Pixels ${1:pixels} = new Pixels($2);"},
		{"trigger": "I-PlainDocument\tinit", "contents": "PlainDocument ${1:document} = new PlainDocument($2);"},
		{"trigger": "I-PlainSocketImpl\tinit", "contents": "PlainSocketImpl ${1:impl} = new PlainSocketImpl($2);"},
		{"trigger": "I-PlainView\tinit", "contents": "PlainView ${1:view} = new PlainView($2);"},
		{"trigger": "I-Platform\tinit", "contents": "Platform ${1:platform} = new Platform($2);"},
		{"trigger": "I-PlatformComponent\tinit", "contents": "PlatformComponent ${1:component} = new PlatformComponent($2);"},
		{"trigger": "I-PlatformFactory\tinit", "contents": "PlatformFactory ${1:factory} = new PlatformFactory($2);"},
		{"trigger": "I-PlatformImage\tinit", "contents": "PlatformImage ${1:image} = new PlatformImage($2);"},
		{"trigger": "I-PlatformImpl\tinit", "contents": "PlatformImpl ${1:impl} = new PlatformImpl($2);"},
		{"trigger": "I-PlatformLoggingMXBean\tinit", "contents": "PlatformLoggingMXBean ${1:bean} = new PlatformLoggingMXBean($2);"},
		{"trigger": "I-PlatformManagedObject\tinit", "contents": "PlatformManagedObject ${1:object} = new PlatformManagedObject($2);"},
		{"trigger": "I-PlatformManager\tinit", "contents": "PlatformManager ${1:manager} = new PlatformManager($2);"},
		{"trigger": "I-PlatformUtil\tinit", "contents": "PlatformUtil ${1:util} = new PlatformUtil($2);"},
		{"trigger": "I-PlayerEvent\tinit", "contents": "PlayerEvent ${1:event} = new PlayerEvent($2);"},
		{"trigger": "I-PlayerStateEvent\tinit", "contents": "PlayerStateEvent ${1:event} = new PlayerStateEvent($2);"},
		{"trigger": "I-PlayerStateListener\tinit", "contents": "PlayerStateListener ${1:listener} = new PlayerStateListener($2);"},
		{"trigger": "I-PlayerTimeListener\tinit", "contents": "PlayerTimeListener ${1:listener} = new PlayerTimeListener($2);"},
		{"trigger": "I-Plugin\tinit", "contents": "Plugin ${1:plugin} = new Plugin($2);"},
		{"trigger": "I-PluginHandler\tinit", "contents": "PluginHandler ${1:handler} = new PluginHandler($2);"},
		{"trigger": "I-PluginListener\tinit", "contents": "PluginListener ${1:listener} = new PluginListener($2);"},
		{"trigger": "I-PluginManager\tinit", "contents": "PluginManager ${1:manager} = new PluginManager($2);"},
		{"trigger": "I-Plus\tinit", "contents": "Plus ${1:plus} = new Plus($2);"},
		{"trigger": "I-Point\tinit", "contents": "Point ${1:point} = new Point($2);"},
		{"trigger": "I-Point2D\tinit", "contents": "Point2D ${1:point2d} = new Point2D($2);"},
		{"trigger": "I-Point2DBuilder\tinit", "contents": "Point2DBuilder ${1:builder} = new Point2DBuilder($2);"},
		{"trigger": "I-Point3D\tinit", "contents": "Point3D ${1:point3d} = new Point3D($2);"},
		{"trigger": "I-Point3DBuilder\tinit", "contents": "Point3DBuilder ${1:builder} = new Point3DBuilder($2);"},
		{"trigger": "I-PointLight\tinit", "contents": "PointLight ${1:light} = new PointLight($2);"},
		{"trigger": "I-PointerInfo\tinit", "contents": "PointerInfo ${1:info} = new PointerInfo($2);"},
		{"trigger": "I-Policy\tinit", "contents": "Policy ${1:policy} = new Policy($2);"},
		{"trigger": "I-PolicyClient\tinit", "contents": "PolicyClient ${1:client} = new PolicyClient($2);"},
		{"trigger": "I-PolicyError\tinit", "contents": "PolicyError ${1:error} = new PolicyError($2);"},
		{"trigger": "I-PolicyErrorCodeHelper\tinit", "contents": "PolicyErrorCodeHelper ${1:helper} = new PolicyErrorCodeHelper($2);"},
		{"trigger": "I-PolicyErrorHelper\tinit", "contents": "PolicyErrorHelper ${1:helper} = new PolicyErrorHelper($2);"},
		{"trigger": "I-PolicyErrorHolder\tinit", "contents": "PolicyErrorHolder ${1:holder} = new PolicyErrorHolder($2);"},
		{"trigger": "I-PolicyFactory\tinit", "contents": "PolicyFactory ${1:factory} = new PolicyFactory($2);"},
		{"trigger": "I-PolicyFactoryOperations\tinit", "contents": "PolicyFactoryOperations ${1:operations} = new PolicyFactoryOperations($2);"},
		{"trigger": "I-PolicyFile\tinit", "contents": "PolicyFile ${1:file} = new PolicyFile($2);"},
		{"trigger": "I-PolicyHelper\tinit", "contents": "PolicyHelper ${1:helper} = new PolicyHelper($2);"},
		{"trigger": "I-PolicyHolder\tinit", "contents": "PolicyHolder ${1:holder} = new PolicyHolder($2);"},
		{"trigger": "I-PolicyListHelper\tinit", "contents": "PolicyListHelper ${1:helper} = new PolicyListHelper($2);"},
		{"trigger": "I-PolicyListHolder\tinit", "contents": "PolicyListHolder ${1:holder} = new PolicyListHolder($2);"},
		{"trigger": "I-PolicyNode\tinit", "contents": "PolicyNode ${1:node} = new PolicyNode($2);"},
		{"trigger": "I-PolicyOperations\tinit", "contents": "PolicyOperations ${1:operations} = new PolicyOperations($2);"},
		{"trigger": "I-PolicyQualifierInfo\tinit", "contents": "PolicyQualifierInfo ${1:info} = new PolicyQualifierInfo($2);"},
		{"trigger": "I-PolicySpi\tinit", "contents": "PolicySpi ${1:spi} = new PolicySpi($2);"},
		{"trigger": "I-PolicyTypeHelper\tinit", "contents": "PolicyTypeHelper ${1:helper} = new PolicyTypeHelper($2);"},
		{"trigger": "I-Polygon\tinit", "contents": "Polygon ${1:polygon} = new Polygon($2);"},
		{"trigger": "I-PolygonBuilder\tinit", "contents": "PolygonBuilder ${1:builder} = new PolygonBuilder($2);"},
		{"trigger": "I-Polyline\tinit", "contents": "Polyline ${1:polyline} = new Polyline($2);"},
		{"trigger": "I-PolylineBuilder\tinit", "contents": "PolylineBuilder ${1:builder} = new PolylineBuilder($2);"},
		{"trigger": "I-PoolFilterable\tinit", "contents": "PoolFilterable ${1:filterable} = new PoolFilterable($2);"},
		{"trigger": "I-PooledConnection\tinit", "contents": "PooledConnection ${1:connection} = new PooledConnection($2);"},
		{"trigger": "I-PopInstruction\tinit", "contents": "PopInstruction ${1:instruction} = new PopInstruction($2);"},
		{"trigger": "I-Popup\tinit", "contents": "Popup ${1:popup} = new Popup($2);"},
		{"trigger": "I-PopupBuilder\tinit", "contents": "PopupBuilder ${1:builder} = new PopupBuilder($2);"},
		{"trigger": "I-PopupControl\tinit", "contents": "PopupControl ${1:control} = new PopupControl($2);"},
		{"trigger": "I-PopupControlBuilder\tinit", "contents": "PopupControlBuilder ${1:builder} = new PopupControlBuilder($2);"},
		{"trigger": "I-PopupFactory\tinit", "contents": "PopupFactory ${1:factory} = new PopupFactory($2);"},
		{"trigger": "I-PopupFeatures\tinit", "contents": "PopupFeatures ${1:features} = new PopupFeatures($2);"},
		{"trigger": "I-PopupMenu\tinit", "contents": "PopupMenu ${1:menu} = new PopupMenu($2);"},
		{"trigger": "I-PopupMenuEvent\tinit", "contents": "PopupMenuEvent ${1:event} = new PopupMenuEvent($2);"},
		{"trigger": "I-PopupMenuImpl\tinit", "contents": "PopupMenuImpl ${1:impl} = new PopupMenuImpl($2);"},
		{"trigger": "I-PopupMenuListener\tinit", "contents": "PopupMenuListener ${1:listener} = new PopupMenuListener($2);"},
		{"trigger": "I-PopupMenuPainter\tinit", "contents": "PopupMenuPainter ${1:painter} = new PopupMenuPainter($2);"},
		{"trigger": "I-PopupMenuPeer\tinit", "contents": "PopupMenuPeer ${1:peer} = new PopupMenuPeer($2);"},
		{"trigger": "I-PopupMenuSeparatorPainter\tinit", "contents": "PopupMenuSeparatorPainter ${1:painter} = new PopupMenuSeparatorPainter($2);"},
		{"trigger": "I-PopupMenuUI\tinit", "contents": "PopupMenuUI ${1:popupmenuui} = new PopupMenuUI($2);"},
		{"trigger": "I-PopupWindow\tinit", "contents": "PopupWindow ${1:window} = new PopupWindow($2);"},
		{"trigger": "I-PopupWindowBuilder\tinit", "contents": "PopupWindowBuilder ${1:builder} = new PopupWindowBuilder($2);"},
		{"trigger": "I-PopupWindowPeerListener\tinit", "contents": "PopupWindowPeerListener ${1:listener} = new PopupWindowPeerListener($2);"},
		{"trigger": "I-Port\tinit", "contents": "Port ${1:port} = new Port($2);"},
		{"trigger": "I-PortInfo\tinit", "contents": "PortInfo ${1:info} = new PortInfo($2);"},
		{"trigger": "I-PortUnreachableException\tinit", "contents": "PortUnreachableException ${1:exception} = new PortUnreachableException($2);"},
		{"trigger": "I-PortableRemoteObject\tinit", "contents": "PortableRemoteObject ${1:object} = new PortableRemoteObject($2);"},
		{"trigger": "I-PortableRemoteObjectDelegate\tinit", "contents": "PortableRemoteObjectDelegate ${1:delegate} = new PortableRemoteObjectDelegate($2);"},
		{"trigger": "I-Pos\tinit", "contents": "Pos ${1:pos} = new Pos($2);"},
		{"trigger": "I-Position\tinit", "contents": "Position ${1:position} = new Position($2);"},
		{"trigger": "I-PositionCall\tinit", "contents": "PositionCall ${1:call} = new PositionCall($2);"},
		{"trigger": "I-PosixFileAttributeView\tinit", "contents": "PosixFileAttributeView ${1:view} = new PosixFileAttributeView($2);"},
		{"trigger": "I-PosixFileAttributes\tinit", "contents": "PosixFileAttributes ${1:attributes} = new PosixFileAttributes($2);"},
		{"trigger": "I-PosixFilePermission\tinit", "contents": "PosixFilePermission ${1:permission} = new PosixFilePermission($2);"},
		{"trigger": "I-PosixFilePermissions\tinit", "contents": "PosixFilePermissions ${1:permissions} = new PosixFilePermissions($2);"},
		{"trigger": "I-PostConstruct\tinit", "contents": "PostConstruct ${1:construct} = new PostConstruct($2);"},
		{"trigger": "I-PrCropPeer\tinit", "contents": "PrCropPeer ${1:peer} = new PrCropPeer($2);"},
		{"trigger": "I-PrDrawable\tinit", "contents": "PrDrawable ${1:drawable} = new PrDrawable($2);"},
		{"trigger": "I-PrEffectHelper\tinit", "contents": "PrEffectHelper ${1:helper} = new PrEffectHelper($2);"},
		{"trigger": "I-PrFilterContext\tinit", "contents": "PrFilterContext ${1:context} = new PrFilterContext($2);"},
		{"trigger": "I-PrFloodPeer\tinit", "contents": "PrFloodPeer ${1:peer} = new PrFloodPeer($2);"},
		{"trigger": "I-PrImage\tinit", "contents": "PrImage ${1:image} = new PrImage($2);"},
		{"trigger": "I-PrMergePeer\tinit", "contents": "PrMergePeer ${1:peer} = new PrMergePeer($2);"},
		{"trigger": "I-PrReflectionPeer\tinit", "contents": "PrReflectionPeer ${1:peer} = new PrReflectionPeer($2);"},
		{"trigger": "I-PrRenderInfo\tinit", "contents": "PrRenderInfo ${1:info} = new PrRenderInfo($2);"},
		{"trigger": "I-PrRenderer\tinit", "contents": "PrRenderer ${1:renderer} = new PrRenderer($2);"},
		{"trigger": "I-PrTexture\tinit", "contents": "PrTexture ${1:texture} = new PrTexture($2);"},
		{"trigger": "I-PreDestroy\tinit", "contents": "PreDestroy ${1:destroy} = new PreDestroy($2);"},
		{"trigger": "I-PrecisionDecimalDV\tinit", "contents": "PrecisionDecimalDV ${1:precisiondecimaldv} = new PrecisionDecimalDV($2);"},
		{"trigger": "I-PredefinedMeshManager\tinit", "contents": "PredefinedMeshManager ${1:manager} = new PredefinedMeshManager($2);"},
		{"trigger": "I-Predicate\tinit", "contents": "Predicate ${1:predicate} = new Predicate($2);"},
		{"trigger": "I-PredicatedNodeTest\tinit", "contents": "PredicatedNodeTest ${1:test} = new PredicatedNodeTest($2);"},
		{"trigger": "I-PreferenceChangeEvent\tinit", "contents": "PreferenceChangeEvent ${1:event} = new PreferenceChangeEvent($2);"},
		{"trigger": "I-PreferenceChangeListener\tinit", "contents": "PreferenceChangeListener ${1:listener} = new PreferenceChangeListener($2);"},
		{"trigger": "I-Preferences\tinit", "contents": "Preferences ${1:preferences} = new Preferences($2);"},
		{"trigger": "I-PreferencesFactory\tinit", "contents": "PreferencesFactory ${1:factory} = new PreferencesFactory($2);"},
		{"trigger": "I-PrefixResolver\tinit", "contents": "PrefixResolver ${1:resolver} = new PrefixResolver($2);"},
		{"trigger": "I-PrefixResolverDefault\tinit", "contents": "PrefixResolverDefault ${1:default} = new PrefixResolverDefault($2);"},
		{"trigger": "I-Preloader\tinit", "contents": "Preloader ${1:preloader} = new Preloader($2);"},
		{"trigger": "I-PreparedStatement\tinit", "contents": "PreparedStatement ${1:statement} = new PreparedStatement($2);"},
		{"trigger": "I-Presentable\tinit", "contents": "Presentable ${1:presentable} = new Presentable($2);"},
		{"trigger": "I-PresentableState\tinit", "contents": "PresentableState ${1:state} = new PresentableState($2);"},
		{"trigger": "I-PresentationDefaults\tinit", "contents": "PresentationDefaults ${1:defaults} = new PresentationDefaults($2);"},
		{"trigger": "I-PresentationDirection\tinit", "contents": "PresentationDirection ${1:direction} = new PresentationDirection($2);"},
		{"trigger": "I-PresentationManager\tinit", "contents": "PresentationManager ${1:manager} = new PresentationManager($2);"},
		{"trigger": "I-PresentingPainter\tinit", "contents": "PresentingPainter ${1:painter} = new PresentingPainter($2);"},
		{"trigger": "I-PrimitiveIterator\tinit", "contents": "PrimitiveIterator ${1:iterator} = new PrimitiveIterator($2);"},
		{"trigger": "I-PrimitiveType\tinit", "contents": "PrimitiveType ${1:type} = new PrimitiveType($2);"},
		{"trigger": "I-PrimitiveTypeTree\tinit", "contents": "PrimitiveTypeTree ${1:tree} = new PrimitiveTypeTree($2);"},
		{"trigger": "I-Principal\tinit", "contents": "Principal ${1:principal} = new Principal($2);"},
		{"trigger": "I-PrincipalComparator\tinit", "contents": "PrincipalComparator ${1:comparator} = new PrincipalComparator($2);"},
		{"trigger": "I-PrincipalHolder\tinit", "contents": "PrincipalHolder ${1:holder} = new PrincipalHolder($2);"},
		{"trigger": "I-PrincipalImpl\tinit", "contents": "PrincipalImpl ${1:impl} = new PrincipalImpl($2);"},
		{"trigger": "I-PrintColor\tinit", "contents": "PrintColor ${1:color} = new PrintColor($2);"},
		{"trigger": "I-PrintConversionEvent\tinit", "contents": "PrintConversionEvent ${1:event} = new PrintConversionEvent($2);"},
		{"trigger": "I-PrintConversionEventImpl\tinit", "contents": "PrintConversionEventImpl ${1:impl} = new PrintConversionEventImpl($2);"},
		{"trigger": "I-PrintEvent\tinit", "contents": "PrintEvent ${1:event} = new PrintEvent($2);"},
		{"trigger": "I-PrintException\tinit", "contents": "PrintException ${1:exception} = new PrintException($2);"},
		{"trigger": "I-PrintGraphics\tinit", "contents": "PrintGraphics ${1:graphics} = new PrintGraphics($2);"},
		{"trigger": "I-PrintHelper\tinit", "contents": "PrintHelper ${1:helper} = new PrintHelper($2);"},
		{"trigger": "I-PrintJob\tinit", "contents": "PrintJob ${1:job} = new PrintJob($2);"},
		{"trigger": "I-PrintJobAdapter\tinit", "contents": "PrintJobAdapter ${1:adapter} = new PrintJobAdapter($2);"},
		{"trigger": "I-PrintJobAttribute\tinit", "contents": "PrintJobAttribute ${1:attribute} = new PrintJobAttribute($2);"},
		{"trigger": "I-PrintJobAttributeEvent\tinit", "contents": "PrintJobAttributeEvent ${1:event} = new PrintJobAttributeEvent($2);"},
		{"trigger": "I-PrintJobAttributeListener\tinit", "contents": "PrintJobAttributeListener ${1:listener} = new PrintJobAttributeListener($2);"},
		{"trigger": "I-PrintJobAttributeSet\tinit", "contents": "PrintJobAttributeSet ${1:set} = new PrintJobAttributeSet($2);"},
		{"trigger": "I-PrintJobEvent\tinit", "contents": "PrintJobEvent ${1:event} = new PrintJobEvent($2);"},
		{"trigger": "I-PrintJobListener\tinit", "contents": "PrintJobListener ${1:listener} = new PrintJobListener($2);"},
		{"trigger": "I-PrintLogger\tinit", "contents": "PrintLogger ${1:logger} = new PrintLogger($2);"},
		{"trigger": "I-PrintPipeline\tinit", "contents": "PrintPipeline ${1:pipeline} = new PrintPipeline($2);"},
		{"trigger": "I-PrintQuality\tinit", "contents": "PrintQuality ${1:quality} = new PrintQuality($2);"},
		{"trigger": "I-PrintRequestAttribute\tinit", "contents": "PrintRequestAttribute ${1:attribute} = new PrintRequestAttribute($2);"},
		{"trigger": "I-PrintRequestAttributeSet\tinit", "contents": "PrintRequestAttributeSet ${1:set} = new PrintRequestAttributeSet($2);"},
		{"trigger": "I-PrintResolution\tinit", "contents": "PrintResolution ${1:resolution} = new PrintResolution($2);"},
		{"trigger": "I-PrintService\tinit", "contents": "PrintService ${1:service} = new PrintService($2);"},
		{"trigger": "I-PrintServiceAttribute\tinit", "contents": "PrintServiceAttribute ${1:attribute} = new PrintServiceAttribute($2);"},
		{"trigger": "I-PrintServiceAttributeEvent\tinit", "contents": "PrintServiceAttributeEvent ${1:event} = new PrintServiceAttributeEvent($2);"},
		{"trigger": "I-PrintServiceAttributeListener\tinit", "contents": "PrintServiceAttributeListener ${1:listener} = new PrintServiceAttributeListener($2);"},
		{"trigger": "I-PrintServiceAttributeSet\tinit", "contents": "PrintServiceAttributeSet ${1:set} = new PrintServiceAttributeSet($2);"},
		{"trigger": "I-PrintServiceLookup\tinit", "contents": "PrintServiceLookup ${1:lookup} = new PrintServiceLookup($2);"},
		{"trigger": "I-PrintSides\tinit", "contents": "PrintSides ${1:sides} = new PrintSides($2);"},
		{"trigger": "I-PrintStream\tinit", "contents": "PrintStream ${1:stream} = new PrintStream($2);"},
		{"trigger": "I-PrintWriter\tinit", "contents": "PrintWriter ${1:writer} = new PrintWriter($2);"},
		{"trigger": "I-Printable\tinit", "contents": "Printable ${1:printable} = new Printable($2);"},
		{"trigger": "I-Printer\tinit", "contents": "Printer ${1:printer} = new Printer($2);"},
		{"trigger": "I-PrinterAbortException\tinit", "contents": "PrinterAbortException ${1:exception} = new PrinterAbortException($2);"},
		{"trigger": "I-PrinterAttributes\tinit", "contents": "PrinterAttributes ${1:attributes} = new PrinterAttributes($2);"},
		{"trigger": "I-PrinterException\tinit", "contents": "PrinterException ${1:exception} = new PrinterException($2);"},
		{"trigger": "I-PrinterGraphics\tinit", "contents": "PrinterGraphics ${1:graphics} = new PrinterGraphics($2);"},
		{"trigger": "I-PrinterIOException\tinit", "contents": "PrinterIOException ${1:exception} = new PrinterIOException($2);"},
		{"trigger": "I-PrinterImpl\tinit", "contents": "PrinterImpl ${1:impl} = new PrinterImpl($2);"},
		{"trigger": "I-PrinterInfo\tinit", "contents": "PrinterInfo ${1:info} = new PrinterInfo($2);"},
		{"trigger": "I-PrinterIsAcceptingJobs\tinit", "contents": "PrinterIsAcceptingJobs ${1:jobs} = new PrinterIsAcceptingJobs($2);"},
		{"trigger": "I-PrinterJob\tinit", "contents": "PrinterJob ${1:job} = new PrinterJob($2);"},
		{"trigger": "I-PrinterJobImpl\tinit", "contents": "PrinterJobImpl ${1:impl} = new PrinterJobImpl($2);"},
		{"trigger": "I-PrinterLocation\tinit", "contents": "PrinterLocation ${1:location} = new PrinterLocation($2);"},
		{"trigger": "I-PrinterMakeAndModel\tinit", "contents": "PrinterMakeAndModel ${1:model} = new PrinterMakeAndModel($2);"},
		{"trigger": "I-PrinterMessageFromOperator\tinit", "contents": "PrinterMessageFromOperator ${1:operator} = new PrinterMessageFromOperator($2);"},
		{"trigger": "I-PrinterMoreInfo\tinit", "contents": "PrinterMoreInfo ${1:info} = new PrinterMoreInfo($2);"},
		{"trigger": "I-PrinterMoreInfoManufacturer\tinit", "contents": "PrinterMoreInfoManufacturer ${1:manufacturer} = new PrinterMoreInfoManufacturer($2);"},
		{"trigger": "I-PrinterName\tinit", "contents": "PrinterName ${1:name} = new PrinterName($2);"},
		{"trigger": "I-PrinterResolution\tinit", "contents": "PrinterResolution ${1:resolution} = new PrinterResolution($2);"},
		{"trigger": "I-PrinterState\tinit", "contents": "PrinterState ${1:state} = new PrinterState($2);"},
		{"trigger": "I-PrinterStateReason\tinit", "contents": "PrinterStateReason ${1:reason} = new PrinterStateReason($2);"},
		{"trigger": "I-PrinterStateReasons\tinit", "contents": "PrinterStateReasons ${1:reasons} = new PrinterStateReasons($2);"},
		{"trigger": "I-PrinterURI\tinit", "contents": "PrinterURI ${1:printeruri} = new PrinterURI($2);"},
		{"trigger": "I-Priority\tinit", "contents": "Priority ${1:priority} = new Priority($2);"},
		{"trigger": "I-PriorityBlockingQueue\tinit", "contents": "PriorityBlockingQueue ${1:queue} = new PriorityBlockingQueue($2);"},
		{"trigger": "I-PriorityQueue\tinit", "contents": "PriorityQueue<${1:String}> ${2:queue} = new PriorityQueue<>();"},
		{"trigger": "I-PrismCompositeFontResource\tinit", "contents": "PrismCompositeFontResource ${1:resource} = new PrismCompositeFontResource($2);"},
		{"trigger": "I-PrismFont\tinit", "contents": "PrismFont ${1:font} = new PrismFont($2);"},
		{"trigger": "I-PrismFontFactory\tinit", "contents": "PrismFontFactory ${1:factory} = new PrismFontFactory($2);"},
		{"trigger": "I-PrismFontFile\tinit", "contents": "PrismFontFile ${1:file} = new PrismFontFile($2);"},
		{"trigger": "I-PrismFontLoader\tinit", "contents": "PrismFontLoader ${1:loader} = new PrismFontLoader($2);"},
		{"trigger": "I-PrismFontStrike\tinit", "contents": "PrismFontStrike ${1:strike} = new PrismFontStrike($2);"},
		{"trigger": "I-PrismFontUtils\tinit", "contents": "PrismFontUtils ${1:utils} = new PrismFontUtils($2);"},
		{"trigger": "I-PrismGraphicsManager\tinit", "contents": "PrismGraphicsManager ${1:manager} = new PrismGraphicsManager($2);"},
		{"trigger": "I-PrismImage\tinit", "contents": "PrismImage ${1:image} = new PrismImage($2);"},
		{"trigger": "I-PrismInvoker\tinit", "contents": "PrismInvoker ${1:invoker} = new PrismInvoker($2);"},
		{"trigger": "I-PrismMediaFrameHandler\tinit", "contents": "PrismMediaFrameHandler ${1:handler} = new PrismMediaFrameHandler($2);"},
		{"trigger": "I-PrismMetrics\tinit", "contents": "PrismMetrics ${1:metrics} = new PrismMetrics($2);"},
		{"trigger": "I-PrismPrintGraphics\tinit", "contents": "PrismPrintGraphics ${1:graphics} = new PrismPrintGraphics($2);"},
		{"trigger": "I-PrismPrintPipeline\tinit", "contents": "PrismPrintPipeline ${1:pipeline} = new PrismPrintPipeline($2);"},
		{"trigger": "I-PrismRenderer\tinit", "contents": "PrismRenderer ${1:renderer} = new PrismRenderer($2);"},
		{"trigger": "I-PrismSettings\tinit", "contents": "PrismSettings ${1:settings} = new PrismSettings($2);"},
		{"trigger": "I-PrismTextLayout\tinit", "contents": "PrismTextLayout ${1:layout} = new PrismTextLayout($2);"},
		{"trigger": "I-PrismTextLayoutFactory\tinit", "contents": "PrismTextLayoutFactory ${1:factory} = new PrismTextLayoutFactory($2);"},
		{"trigger": "I-PrismTrace\tinit", "contents": "PrismTrace ${1:trace} = new PrismTrace($2);"},
		{"trigger": "I-PrivateClassLoader\tinit", "contents": "PrivateClassLoader ${1:loader} = new PrivateClassLoader($2);"},
		{"trigger": "I-PrivateCredentialPermission\tinit", "contents": "PrivateCredentialPermission ${1:permission} = new PrivateCredentialPermission($2);"},
		{"trigger": "I-PrivateKey\tinit", "contents": "PrivateKey ${1:key} = new PrivateKey($2);"},
		{"trigger": "I-PrivateKeyResolver\tinit", "contents": "PrivateKeyResolver ${1:resolver} = new PrivateKeyResolver($2);"},
		{"trigger": "I-PrivateMLet\tinit", "contents": "PrivateMLet ${1:let} = new PrivateMLet($2);"},
		{"trigger": "I-PrivilegedAction\tinit", "contents": "PrivilegedAction ${1:action} = new PrivilegedAction($2);"},
		{"trigger": "I-PrivilegedActionException\tinit", "contents": "PrivilegedActionException ${1:exception} = new PrivilegedActionException($2);"},
		{"trigger": "I-PrivilegedExceptionAction\tinit", "contents": "PrivilegedExceptionAction ${1:action} = new PrivilegedExceptionAction($2);"},
		{"trigger": "I-Process\tinit", "contents": "Process ${1:process} = new Process($2);"},
		{"trigger": "I-ProcessBuilder\tinit", "contents": "ProcessBuilder ${1:builder} = new ProcessBuilder($2);"},
		{"trigger": "I-ProcessEnvironment\tinit", "contents": "ProcessEnvironment ${1:environment} = new ProcessEnvironment($2);"},
		{"trigger": "I-ProcessImpl\tinit", "contents": "ProcessImpl ${1:impl} = new ProcessImpl($2);"},
		{"trigger": "I-ProcessingEnvironment\tinit", "contents": "ProcessingEnvironment ${1:environment} = new ProcessingEnvironment($2);"},
		{"trigger": "I-ProcessingInstruction\tinit", "contents": "ProcessingInstruction ${1:instruction} = new ProcessingInstruction($2);"},
		{"trigger": "I-ProcessingInstructionImpl\tinit", "contents": "ProcessingInstructionImpl ${1:impl} = new ProcessingInstructionImpl($2);"},
		{"trigger": "I-ProcessingInstructionPattern\tinit", "contents": "ProcessingInstructionPattern ${1:pattern} = new ProcessingInstructionPattern($2);"},
		{"trigger": "I-Processor\tinit", "contents": "Processor ${1:processor} = new Processor($2);"},
		{"trigger": "I-ProcessorVersion\tinit", "contents": "ProcessorVersion ${1:version} = new ProcessorVersion($2);"},
		{"trigger": "I-ProfileDataException\tinit", "contents": "ProfileDataException ${1:exception} = new ProfileDataException($2);"},
		{"trigger": "I-ProfileIdHelper\tinit", "contents": "ProfileIdHelper ${1:helper} = new ProfileIdHelper($2);"},
		{"trigger": "I-ProgramElementDoc\tinit", "contents": "ProgramElementDoc ${1:doc} = new ProgramElementDoc($2);"},
		{"trigger": "I-ProgressBar\tinit", "contents": "ProgressBar ${1:bar} = new ProgressBar($2);"},
		{"trigger": "I-ProgressBarBuilder\tinit", "contents": "ProgressBarBuilder ${1:builder} = new ProgressBarBuilder($2);"},
		{"trigger": "I-ProgressBarFinishedState\tinit", "contents": "ProgressBarFinishedState ${1:state} = new ProgressBarFinishedState($2);"},
		{"trigger": "I-ProgressBarIndeterminateState\tinit", "contents": "ProgressBarIndeterminateState ${1:state} = new ProgressBarIndeterminateState($2);"},
		{"trigger": "I-ProgressBarPainter\tinit", "contents": "ProgressBarPainter ${1:painter} = new ProgressBarPainter($2);"},
		{"trigger": "I-ProgressBarSkin\tinit", "contents": "ProgressBarSkin ${1:skin} = new ProgressBarSkin($2);"},
		{"trigger": "I-ProgressBarTableCell\tinit", "contents": "ProgressBarTableCell ${1:cell} = new ProgressBarTableCell($2);"},
		{"trigger": "I-ProgressBarTreeTableCell\tinit", "contents": "ProgressBarTreeTableCell ${1:cell} = new ProgressBarTreeTableCell($2);"},
		{"trigger": "I-ProgressBarUI\tinit", "contents": "ProgressBarUI ${1:progressbarui} = new ProgressBarUI($2);"},
		{"trigger": "I-ProgressIndicator\tinit", "contents": "ProgressIndicator ${1:indicator} = new ProgressIndicator($2);"},
		{"trigger": "I-ProgressIndicatorBuilder\tinit", "contents": "ProgressIndicatorBuilder ${1:builder} = new ProgressIndicatorBuilder($2);"},
		{"trigger": "I-ProgressIndicatorSkin\tinit", "contents": "ProgressIndicatorSkin ${1:skin} = new ProgressIndicatorSkin($2);"},
		{"trigger": "I-ProgressMonitor\tinit", "contents": "ProgressMonitor ${1:monitor} = new ProgressMonitor($2);"},
		{"trigger": "I-ProgressMonitorInputStream\tinit", "contents": "ProgressMonitorInputStream ${1:stream} = new ProgressMonitorInputStream($2);"},
		{"trigger": "I-PromptData\tinit", "contents": "PromptData ${1:data} = new PromptData($2);"},
		{"trigger": "I-Properties\tinit", "contents": "Properties ${1:properties} = new Properties($2);"},
		{"trigger": "I-Property\tinit", "contents": "Property ${1:property} = new Property($2);"},
		{"trigger": "I-PropertyChangeEvent\tinit", "contents": "PropertyChangeEvent ${1:event} = new PropertyChangeEvent($2);"},
		{"trigger": "I-PropertyChangeListener\tinit", "contents": "PropertyChangeListener ${1:listener} = new PropertyChangeListener($2);"},
		{"trigger": "I-PropertyChangeListenerProxy\tinit", "contents": "PropertyChangeListenerProxy ${1:proxy} = new PropertyChangeListenerProxy($2);"},
		{"trigger": "I-PropertyChangeSupport\tinit", "contents": "PropertyChangeSupport ${1:support} = new PropertyChangeSupport($2);"},
		{"trigger": "I-PropertyDescriptor\tinit", "contents": "PropertyDescriptor ${1:descriptor} = new PropertyDescriptor($2);"},
		{"trigger": "I-PropertyEditor\tinit", "contents": "PropertyEditor ${1:editor} = new PropertyEditor($2);"},
		{"trigger": "I-PropertyEditorManager\tinit", "contents": "PropertyEditorManager ${1:manager} = new PropertyEditorManager($2);"},
		{"trigger": "I-PropertyEditorSupport\tinit", "contents": "PropertyEditorSupport ${1:support} = new PropertyEditorSupport($2);"},
		{"trigger": "I-PropertyException\tinit", "contents": "PropertyException ${1:exception} = new PropertyException($2);"},
		{"trigger": "I-PropertyHelper\tinit", "contents": "PropertyHelper ${1:helper} = new PropertyHelper($2);"},
		{"trigger": "I-PropertyManager\tinit", "contents": "PropertyManager ${1:manager} = new PropertyManager($2);"},
		{"trigger": "I-PropertyNotFoundException\tinit", "contents": "PropertyNotFoundException ${1:exception} = new PropertyNotFoundException($2);"},
		{"trigger": "I-PropertyParser\tinit", "contents": "PropertyParser ${1:parser} = new PropertyParser($2);"},
		{"trigger": "I-PropertyPermission\tinit", "contents": "PropertyPermission ${1:permission} = new PropertyPermission($2);"},
		{"trigger": "I-PropertyReference\tinit", "contents": "PropertyReference ${1:reference} = new PropertyReference($2);"},
		{"trigger": "I-PropertyResourceBundle\tinit", "contents": "PropertyResourceBundle ${1:bundle} = new PropertyResourceBundle($2);"},
		{"trigger": "I-PropertyState\tinit", "contents": "PropertyState ${1:state} = new PropertyState($2);"},
		{"trigger": "I-PropertyValueFactory\tinit", "contents": "PropertyValueFactory ${1:factory} = new PropertyValueFactory($2);"},
		{"trigger": "I-PropertyValueFactoryBuilder\tinit", "contents": "PropertyValueFactoryBuilder ${1:builder} = new PropertyValueFactoryBuilder($2);"},
		{"trigger": "I-PropertyVetoException\tinit", "contents": "PropertyVetoException ${1:exception} = new PropertyVetoException($2);"},
		{"trigger": "I-ProtectionDomain\tinit", "contents": "ProtectionDomain ${1:domain} = new ProtectionDomain($2);"},
		{"trigger": "I-ProtocolException\tinit", "contents": "ProtocolException ${1:exception} = new ProtocolException($2);"},
		{"trigger": "I-ProtocolFamily\tinit", "contents": "ProtocolFamily ${1:family} = new ProtocolFamily($2);"},
		{"trigger": "I-Provider\tinit", "contents": "Provider ${1:provider} = new Provider($2);"},
		{"trigger": "I-ProviderException\tinit", "contents": "ProviderException ${1:exception} = new ProviderException($2);"},
		{"trigger": "I-ProviderMismatchException\tinit", "contents": "ProviderMismatchException ${1:exception} = new ProviderMismatchException($2);"},
		{"trigger": "I-ProviderNotFoundException\tinit", "contents": "ProviderNotFoundException ${1:exception} = new ProviderNotFoundException($2);"},
		{"trigger": "I-Proxy\tinit", "contents": "Proxy ${1:proxy} = new Proxy($2);"},
		{"trigger": "I-ProxyBuilder\tinit", "contents": "ProxyBuilder ${1:builder} = new ProxyBuilder($2);"},
		{"trigger": "I-ProxyClassesDumper\tinit", "contents": "ProxyClassesDumper ${1:dumper} = new ProxyClassesDumper($2);"},
		{"trigger": "I-ProxyInputStream\tinit", "contents": "ProxyInputStream ${1:stream} = new ProxyInputStream($2);"},
		{"trigger": "I-ProxyRef\tinit", "contents": "ProxyRef ${1:ref} = new ProxyRef($2);"},
		{"trigger": "I-ProxySelector\tinit", "contents": "ProxySelector ${1:selector} = new ProxySelector($2);"},
		{"trigger": "I-PseudoClass\tinit", "contents": "PseudoClass ${1:class} = new PseudoClass($2);"},
		{"trigger": "I-PseudoClassImpl\tinit", "contents": "PseudoClassImpl ${1:impl} = new PseudoClassImpl($2);"},
		{"trigger": "I-PseudoClassState\tinit", "contents": "PseudoClassState ${1:state} = new PseudoClassState($2);"},
		{"trigger": "I-PseudoColumnUsage\tinit", "contents": "PseudoColumnUsage ${1:usage} = new PseudoColumnUsage($2);"},
		{"trigger": "I-PsuedoNames\tinit", "contents": "PsuedoNames ${1:names} = new PsuedoNames($2);"},
		{"trigger": "I-PublicId\tinit", "contents": "PublicId ${1:id} = new PublicId($2);"},
		{"trigger": "I-PublicKey\tinit", "contents": "PublicKey ${1:key} = new PublicKey($2);"},
		{"trigger": "I-PublicSuffixes\tinit", "contents": "PublicSuffixes ${1:suffixes} = new PublicSuffixes($2);"},
		{"trigger": "I-PulseLogger\tinit", "contents": "PulseLogger ${1:logger} = new PulseLogger($2);"},
		{"trigger": "I-PulseReceiver\tinit", "contents": "PulseReceiver ${1:receiver} = new PulseReceiver($2);"},
		{"trigger": "I-PushInstruction\tinit", "contents": "PushInstruction ${1:instruction} = new PushInstruction($2);"},
		{"trigger": "I-PushbackInputStream\tinit", "contents": "PushbackInputStream ${1:stream} = new PushbackInputStream($2);"},
		{"trigger": "I-PushbackReader\tinit", "contents": "PushbackReader ${1:reader} = new PushbackReader($2);"},
		{"trigger": "I-PushbroomScaler\tinit", "contents": "PushbroomScaler ${1:scaler} = new PushbroomScaler($2);"},
		{"trigger": "I-QName\tinit", "contents": "QName ${1:name} = new QName($2);"},
		{"trigger": "I-QNameDV\tinit", "contents": "QNameDV ${1:qnamedv} = new QNameDV($2);"},
		{"trigger": "I-QuadCurve\tinit", "contents": "QuadCurve ${1:curve} = new QuadCurve($2);"},
		{"trigger": "I-QuadCurve2D\tinit", "contents": "QuadCurve2D ${1:quadcurve2d} = new QuadCurve2D($2);"},
		{"trigger": "I-QuadCurveBuilder\tinit", "contents": "QuadCurveBuilder ${1:builder} = new QuadCurveBuilder($2);"},
		{"trigger": "I-QuadCurveTo\tinit", "contents": "QuadCurveTo ${1:to} = new QuadCurveTo($2);"},
		{"trigger": "I-QuadCurveToBuilder\tinit", "contents": "QuadCurveToBuilder ${1:builder} = new QuadCurveToBuilder($2);"},
		{"trigger": "I-QuadIterator\tinit", "contents": "QuadIterator ${1:iterator} = new QuadIterator($2);"},
		{"trigger": "I-QualifiedAttributeValueExp\tinit", "contents": "QualifiedAttributeValueExp ${1:exp} = new QualifiedAttributeValueExp($2);"},
		{"trigger": "I-QualifiedNameable\tinit", "contents": "QualifiedNameable ${1:nameable} = new QualifiedNameable($2);"},
		{"trigger": "I-QuantumClipboard\tinit", "contents": "QuantumClipboard ${1:clipboard} = new QuantumClipboard($2);"},
		{"trigger": "I-QuantumRenderer\tinit", "contents": "QuantumRenderer ${1:renderer} = new QuantumRenderer($2);"},
		{"trigger": "I-QuantumToolkit\tinit", "contents": "QuantumToolkit ${1:toolkit} = new QuantumToolkit($2);"},
		{"trigger": "I-Quat4f\tinit", "contents": "Quat4f ${1:quat4f} = new Quat4f($2);"},
		{"trigger": "I-Query\tinit", "contents": "Query ${1:query} = new Query($2);"},
		{"trigger": "I-QueryEval\tinit", "contents": "QueryEval ${1:eval} = new QueryEval($2);"},
		{"trigger": "I-QueryExp\tinit", "contents": "QueryExp ${1:exp} = new QueryExp($2);"},
		{"trigger": "I-Queue\tinit", "contents": "Queue ${1:queue} = new Queue($2);"},
		{"trigger": "I-QueuedJobCount\tinit", "contents": "QueuedJobCount ${1:count} = new QueuedJobCount($2);"},
		{"trigger": "I-QueuedPixelSource\tinit", "contents": "QueuedPixelSource ${1:source} = new QueuedPixelSource($2);"},
		{"trigger": "I-Quo\tinit", "contents": "Quo ${1:quo} = new Quo($2);"},
		{"trigger": "I-RAFImageInputStreamSpi\tinit", "contents": "RAFImageInputStreamSpi ${1:spi} = new RAFImageInputStreamSpi($2);"},
		{"trigger": "I-RAFImageOutputStreamSpi\tinit", "contents": "RAFImageOutputStreamSpi ${1:spi} = new RAFImageOutputStreamSpi($2);"},
		{"trigger": "I-RBCollationTables\tinit", "contents": "RBCollationTables ${1:tables} = new RBCollationTables($2);"},
		{"trigger": "I-RBTableBuilder\tinit", "contents": "RBTableBuilder ${1:builder} = new RBTableBuilder($2);"},
		{"trigger": "I-RE\tinit", "contents": "RE ${1:re} = new RE($2);"},
		{"trigger": "I-REBIND\tinit", "contents": "REBIND ${1:rebind} = new REBIND($2);"},
		{"trigger": "I-RECT\tinit", "contents": "RECT ${1:rect} = new RECT($2);"},
		{"trigger": "I-RECompiler\tinit", "contents": "RECompiler ${1:compiler} = new RECompiler($2);"},
		{"trigger": "I-REDebugCompiler\tinit", "contents": "REDebugCompiler ${1:compiler} = new REDebugCompiler($2);"},
		{"trigger": "I-REProgram\tinit", "contents": "REProgram ${1:program} = new REProgram($2);"},
		{"trigger": "I-REQUEST_PROCESSING_POLICY_ID\tinit", "contents": "REQUEST_PROCESSING_POLICY_ID ${1:request} = new REQUEST_PROCESSING_POLICY_ID($2);"},
		{"trigger": "I-RESyntaxException\tinit", "contents": "RESyntaxException ${1:exception} = new RESyntaxException($2);"},
		{"trigger": "I-RET\tinit", "contents": "RET ${1:ret} = new RET($2);"},
		{"trigger": "I-RETURN\tinit", "contents": "RETURN ${1:return} = new RETURN($2);"},
		{"trigger": "I-RETest\tinit", "contents": "RETest ${1:test} = new RETest($2);"},
		{"trigger": "I-REUtil\tinit", "contents": "REUtil ${1:util} = new REUtil($2);"},
		{"trigger": "I-RFC2253Parser\tinit", "contents": "RFC2253Parser ${1:parser} = new RFC2253Parser($2);"},
		{"trigger": "I-RGBColor\tinit", "contents": "RGBColor ${1:color} = new RGBColor($2);"},
		{"trigger": "I-RGBColorImpl\tinit", "contents": "RGBColorImpl ${1:impl} = new RGBColorImpl($2);"},
		{"trigger": "I-RGBImageFilter\tinit", "contents": "RGBImageFilter ${1:filter} = new RGBImageFilter($2);"},
		{"trigger": "I-RMIClassLoader\tinit", "contents": "RMIClassLoader ${1:loader} = new RMIClassLoader($2);"},
		{"trigger": "I-RMIClassLoaderSpi\tinit", "contents": "RMIClassLoaderSpi ${1:spi} = new RMIClassLoaderSpi($2);"},
		{"trigger": "I-RMIClientSocketFactory\tinit", "contents": "RMIClientSocketFactory ${1:factory} = new RMIClientSocketFactory($2);"},
		{"trigger": "I-RMIConnection\tinit", "contents": "RMIConnection ${1:connection} = new RMIConnection($2);"},
		{"trigger": "I-RMIConnectionImpl\tinit", "contents": "RMIConnectionImpl ${1:impl} = new RMIConnectionImpl($2);"},
		{"trigger": "I-RMIConnectionImpl_Stub\tinit", "contents": "RMIConnectionImpl_Stub ${1:stub} = new RMIConnectionImpl_Stub($2);"},
		{"trigger": "I-RMIConnector\tinit", "contents": "RMIConnector ${1:connector} = new RMIConnector($2);"},
		{"trigger": "I-RMIConnectorServer\tinit", "contents": "RMIConnectorServer ${1:server} = new RMIConnectorServer($2);"},
		{"trigger": "I-RMICustomMaxStreamFormat\tinit", "contents": "RMICustomMaxStreamFormat ${1:format} = new RMICustomMaxStreamFormat($2);"},
		{"trigger": "I-RMIExporter\tinit", "contents": "RMIExporter ${1:exporter} = new RMIExporter($2);"},
		{"trigger": "I-RMIFailureHandler\tinit", "contents": "RMIFailureHandler ${1:handler} = new RMIFailureHandler($2);"},
		{"trigger": "I-RMIIIOPServerImpl\tinit", "contents": "RMIIIOPServerImpl ${1:impl} = new RMIIIOPServerImpl($2);"},
		{"trigger": "I-RMIJRMPServerImpl\tinit", "contents": "RMIJRMPServerImpl ${1:impl} = new RMIJRMPServerImpl($2);"},
		{"trigger": "I-RMISecurityException\tinit", "contents": "RMISecurityException ${1:exception} = new RMISecurityException($2);"},
		{"trigger": "I-RMISecurityManager\tinit", "contents": "RMISecurityManager ${1:manager} = new RMISecurityManager($2);"},
		{"trigger": "I-RMIServer\tinit", "contents": "RMIServer ${1:server} = new RMIServer($2);"},
		{"trigger": "I-RMIServerImpl\tinit", "contents": "RMIServerImpl ${1:impl} = new RMIServerImpl($2);"},
		{"trigger": "I-RMIServerImpl_Stub\tinit", "contents": "RMIServerImpl_Stub ${1:stub} = new RMIServerImpl_Stub($2);"},
		{"trigger": "I-RMIServerSocketFactory\tinit", "contents": "RMIServerSocketFactory ${1:factory} = new RMIServerSocketFactory($2);"},
		{"trigger": "I-RMISocketFactory\tinit", "contents": "RMISocketFactory ${1:factory} = new RMISocketFactory($2);"},
		{"trigger": "I-RSAKey\tinit", "contents": "RSAKey ${1:key} = new RSAKey($2);"},
		{"trigger": "I-RSAKeyGenParameterSpec\tinit", "contents": "RSAKeyGenParameterSpec ${1:spec} = new RSAKeyGenParameterSpec($2);"},
		{"trigger": "I-RSAKeyValue\tinit", "contents": "RSAKeyValue ${1:value} = new RSAKeyValue($2);"},
		{"trigger": "I-RSAKeyValueResolver\tinit", "contents": "RSAKeyValueResolver ${1:resolver} = new RSAKeyValueResolver($2);"},
		{"trigger": "I-RSAMultiPrimePrivateCrtKey\tinit", "contents": "RSAMultiPrimePrivateCrtKey ${1:key} = new RSAMultiPrimePrivateCrtKey($2);"},
		{"trigger": "I-RSAMultiPrimePrivateCrtKeySpec\tinit", "contents": "RSAMultiPrimePrivateCrtKeySpec ${1:spec} = new RSAMultiPrimePrivateCrtKeySpec($2);"},
		{"trigger": "I-RSAOtherPrimeInfo\tinit", "contents": "RSAOtherPrimeInfo ${1:info} = new RSAOtherPrimeInfo($2);"},
		{"trigger": "I-RSAPrivateCrtKey\tinit", "contents": "RSAPrivateCrtKey ${1:key} = new RSAPrivateCrtKey($2);"},
		{"trigger": "I-RSAPrivateCrtKeySpec\tinit", "contents": "RSAPrivateCrtKeySpec ${1:spec} = new RSAPrivateCrtKeySpec($2);"},
		{"trigger": "I-RSAPrivateKey\tinit", "contents": "RSAPrivateKey ${1:key} = new RSAPrivateKey($2);"},
		{"trigger": "I-RSAPrivateKeySpec\tinit", "contents": "RSAPrivateKeySpec ${1:spec} = new RSAPrivateKeySpec($2);"},
		{"trigger": "I-RSAPublicKey\tinit", "contents": "RSAPublicKey ${1:key} = new RSAPublicKey($2);"},
		{"trigger": "I-RSAPublicKeySpec\tinit", "contents": "RSAPublicKeySpec ${1:spec} = new RSAPublicKeySpec($2);"},
		{"trigger": "I-RTFAttribute\tinit", "contents": "RTFAttribute ${1:attribute} = new RTFAttribute($2);"},
		{"trigger": "I-RTFAttributes\tinit", "contents": "RTFAttributes ${1:attributes} = new RTFAttributes($2);"},
		{"trigger": "I-RTFEditorKit\tinit", "contents": "RTFEditorKit ${1:kit} = new RTFEditorKit($2);"},
		{"trigger": "I-RTFGenerator\tinit", "contents": "RTFGenerator ${1:generator} = new RTFGenerator($2);"},
		{"trigger": "I-RTFIterator\tinit", "contents": "RTFIterator ${1:iterator} = new RTFIterator($2);"},
		{"trigger": "I-RTFParser\tinit", "contents": "RTFParser ${1:parser} = new RTFParser($2);"},
		{"trigger": "I-RTFReader\tinit", "contents": "RTFReader ${1:reader} = new RTFReader($2);"},
		{"trigger": "I-RTImage\tinit", "contents": "RTImage ${1:image} = new RTImage($2);"},
		{"trigger": "I-RTTexture\tinit", "contents": "RTTexture ${1:texture} = new RTTexture($2);"},
		{"trigger": "I-RadialGradient\tinit", "contents": "RadialGradient ${1:gradient} = new RadialGradient($2);"},
		{"trigger": "I-RadialGradientBuilder\tinit", "contents": "RadialGradientBuilder ${1:builder} = new RadialGradientBuilder($2);"},
		{"trigger": "I-RadialGradientContext\tinit", "contents": "RadialGradientContext ${1:context} = new RadialGradientContext($2);"},
		{"trigger": "I-RadialGradientPaint\tinit", "contents": "RadialGradientPaint ${1:paint} = new RadialGradientPaint($2);"},
		{"trigger": "I-RadialGradientPaintContext\tinit", "contents": "RadialGradientPaintContext ${1:context} = new RadialGradientPaintContext($2);"},
		{"trigger": "I-RadioButton\tinit", "contents": "RadioButton ${1:button} = new RadioButton($2);"},
		{"trigger": "I-RadioButtonBuilder\tinit", "contents": "RadioButtonBuilder ${1:builder} = new RadioButtonBuilder($2);"},
		{"trigger": "I-RadioButtonMenuItemPainter\tinit", "contents": "RadioButtonMenuItemPainter ${1:painter} = new RadioButtonMenuItemPainter($2);"},
		{"trigger": "I-RadioButtonPainter\tinit", "contents": "RadioButtonPainter ${1:painter} = new RadioButtonPainter($2);"},
		{"trigger": "I-RadioButtonSkin\tinit", "contents": "RadioButtonSkin ${1:skin} = new RadioButtonSkin($2);"},
		{"trigger": "I-RadioMenuItem\tinit", "contents": "RadioMenuItem ${1:item} = new RadioMenuItem($2);"},
		{"trigger": "I-RadioMenuItemBase\tinit", "contents": "RadioMenuItemBase ${1:base} = new RadioMenuItemBase($2);"},
		{"trigger": "I-RadioMenuItemBuilder\tinit", "contents": "RadioMenuItemBuilder ${1:builder} = new RadioMenuItemBuilder($2);"},
		{"trigger": "I-Random\tinit", "contents": "Random ${1:random} = new Random($2);"},
		{"trigger": "I-RandomAccess\tinit", "contents": "RandomAccess ${1:access} = new RandomAccess($2);"},
		{"trigger": "I-RandomAccessFile\tinit", "contents": "RandomAccessFile ${1:file} = new RandomAccessFile($2);"},
		{"trigger": "I-Range\tinit", "contents": "Range ${1:range} = new Range($2);"},
		{"trigger": "I-RangeException\tinit", "contents": "RangeException ${1:exception} = new RangeException($2);"},
		{"trigger": "I-RangeExceptionImpl\tinit", "contents": "RangeExceptionImpl ${1:impl} = new RangeExceptionImpl($2);"},
		{"trigger": "I-RangeImpl\tinit", "contents": "RangeImpl ${1:impl} = new RangeImpl($2);"},
		{"trigger": "I-RangeToken\tinit", "contents": "RangeToken ${1:token} = new RangeToken($2);"},
		{"trigger": "I-Raster\tinit", "contents": "Raster ${1:raster} = new Raster($2);"},
		{"trigger": "I-RasterFormatException\tinit", "contents": "RasterFormatException ${1:exception} = new RasterFormatException($2);"},
		{"trigger": "I-RasterOp\tinit", "contents": "RasterOp ${1:op} = new RasterOp($2);"},
		{"trigger": "I-RawCharacterHandler\tinit", "contents": "RawCharacterHandler ${1:handler} = new RawCharacterHandler($2);"},
		{"trigger": "I-Rdn\tinit", "contents": "Rdn ${1:rdn} = new Rdn($2);"},
		{"trigger": "I-ReadOnlyBooleanProperty\tinit", "contents": "ReadOnlyBooleanProperty ${1:property} = new ReadOnlyBooleanProperty($2);"},
		{"trigger": "I-ReadOnlyBooleanPropertyBase\tinit", "contents": "ReadOnlyBooleanPropertyBase ${1:base} = new ReadOnlyBooleanPropertyBase($2);"},
		{"trigger": "I-ReadOnlyBooleanWrapper\tinit", "contents": "ReadOnlyBooleanWrapper ${1:wrapper} = new ReadOnlyBooleanWrapper($2);"},
		{"trigger": "I-ReadOnlyBufferException\tinit", "contents": "ReadOnlyBufferException ${1:exception} = new ReadOnlyBufferException($2);"},
		{"trigger": "I-ReadOnlyDoubleProperty\tinit", "contents": "ReadOnlyDoubleProperty ${1:property} = new ReadOnlyDoubleProperty($2);"},
		{"trigger": "I-ReadOnlyDoublePropertyBase\tinit", "contents": "ReadOnlyDoublePropertyBase ${1:base} = new ReadOnlyDoublePropertyBase($2);"},
		{"trigger": "I-ReadOnlyDoubleWrapper\tinit", "contents": "ReadOnlyDoubleWrapper ${1:wrapper} = new ReadOnlyDoubleWrapper($2);"},
		{"trigger": "I-ReadOnlyFileSystemException\tinit", "contents": "ReadOnlyFileSystemException ${1:exception} = new ReadOnlyFileSystemException($2);"},
		{"trigger": "I-ReadOnlyFloatProperty\tinit", "contents": "ReadOnlyFloatProperty ${1:property} = new ReadOnlyFloatProperty($2);"},
		{"trigger": "I-ReadOnlyFloatPropertyBase\tinit", "contents": "ReadOnlyFloatPropertyBase ${1:base} = new ReadOnlyFloatPropertyBase($2);"},
		{"trigger": "I-ReadOnlyFloatWrapper\tinit", "contents": "ReadOnlyFloatWrapper ${1:wrapper} = new ReadOnlyFloatWrapper($2);"},
		{"trigger": "I-ReadOnlyGrammarPool\tinit", "contents": "ReadOnlyGrammarPool ${1:pool} = new ReadOnlyGrammarPool($2);"},
		{"trigger": "I-ReadOnlyIntegerProperty\tinit", "contents": "ReadOnlyIntegerProperty ${1:property} = new ReadOnlyIntegerProperty($2);"},
		{"trigger": "I-ReadOnlyIntegerPropertyBase\tinit", "contents": "ReadOnlyIntegerPropertyBase ${1:base} = new ReadOnlyIntegerPropertyBase($2);"},
		{"trigger": "I-ReadOnlyIntegerWrapper\tinit", "contents": "ReadOnlyIntegerWrapper ${1:wrapper} = new ReadOnlyIntegerWrapper($2);"},
		{"trigger": "I-ReadOnlyJavaBeanBooleanProperty\tinit", "contents": "ReadOnlyJavaBeanBooleanProperty ${1:property} = new ReadOnlyJavaBeanBooleanProperty($2);"},
		{"trigger": "I-ReadOnlyJavaBeanBooleanPropertyBuilder\tinit", "contents": "ReadOnlyJavaBeanBooleanPropertyBuilder ${1:builder} = new ReadOnlyJavaBeanBooleanPropertyBuilder($2);"},
		{"trigger": "I-ReadOnlyJavaBeanDoubleProperty\tinit", "contents": "ReadOnlyJavaBeanDoubleProperty ${1:property} = new ReadOnlyJavaBeanDoubleProperty($2);"},
		{"trigger": "I-ReadOnlyJavaBeanDoublePropertyBuilder\tinit", "contents": "ReadOnlyJavaBeanDoublePropertyBuilder ${1:builder} = new ReadOnlyJavaBeanDoublePropertyBuilder($2);"},
		{"trigger": "I-ReadOnlyJavaBeanFloatProperty\tinit", "contents": "ReadOnlyJavaBeanFloatProperty ${1:property} = new ReadOnlyJavaBeanFloatProperty($2);"},
		{"trigger": "I-ReadOnlyJavaBeanFloatPropertyBuilder\tinit", "contents": "ReadOnlyJavaBeanFloatPropertyBuilder ${1:builder} = new ReadOnlyJavaBeanFloatPropertyBuilder($2);"},
		{"trigger": "I-ReadOnlyJavaBeanIntegerProperty\tinit", "contents": "ReadOnlyJavaBeanIntegerProperty ${1:property} = new ReadOnlyJavaBeanIntegerProperty($2);"},
		{"trigger": "I-ReadOnlyJavaBeanIntegerPropertyBuilder\tinit", "contents": "ReadOnlyJavaBeanIntegerPropertyBuilder ${1:builder} = new ReadOnlyJavaBeanIntegerPropertyBuilder($2);"},
		{"trigger": "I-ReadOnlyJavaBeanLongProperty\tinit", "contents": "ReadOnlyJavaBeanLongProperty ${1:property} = new ReadOnlyJavaBeanLongProperty($2);"},
		{"trigger": "I-ReadOnlyJavaBeanLongPropertyBuilder\tinit", "contents": "ReadOnlyJavaBeanLongPropertyBuilder ${1:builder} = new ReadOnlyJavaBeanLongPropertyBuilder($2);"},
		{"trigger": "I-ReadOnlyJavaBeanObjectProperty\tinit", "contents": "ReadOnlyJavaBeanObjectProperty ${1:property} = new ReadOnlyJavaBeanObjectProperty($2);"},
		{"trigger": "I-ReadOnlyJavaBeanObjectPropertyBuilder\tinit", "contents": "ReadOnlyJavaBeanObjectPropertyBuilder ${1:builder} = new ReadOnlyJavaBeanObjectPropertyBuilder($2);"},
		{"trigger": "I-ReadOnlyJavaBeanProperty\tinit", "contents": "ReadOnlyJavaBeanProperty ${1:property} = new ReadOnlyJavaBeanProperty($2);"},
		{"trigger": "I-ReadOnlyJavaBeanPropertyBuilderHelper\tinit", "contents": "ReadOnlyJavaBeanPropertyBuilderHelper ${1:helper} = new ReadOnlyJavaBeanPropertyBuilderHelper($2);"},
		{"trigger": "I-ReadOnlyJavaBeanStringProperty\tinit", "contents": "ReadOnlyJavaBeanStringProperty ${1:property} = new ReadOnlyJavaBeanStringProperty($2);"},
		{"trigger": "I-ReadOnlyJavaBeanStringPropertyBuilder\tinit", "contents": "ReadOnlyJavaBeanStringPropertyBuilder ${1:builder} = new ReadOnlyJavaBeanStringPropertyBuilder($2);"},
		{"trigger": "I-ReadOnlyListProperty\tinit", "contents": "ReadOnlyListProperty ${1:property} = new ReadOnlyListProperty($2);"},
		{"trigger": "I-ReadOnlyListPropertyBase\tinit", "contents": "ReadOnlyListPropertyBase ${1:base} = new ReadOnlyListPropertyBase($2);"},
		{"trigger": "I-ReadOnlyListWrapper\tinit", "contents": "ReadOnlyListWrapper ${1:wrapper} = new ReadOnlyListWrapper($2);"},
		{"trigger": "I-ReadOnlyLongProperty\tinit", "contents": "ReadOnlyLongProperty ${1:property} = new ReadOnlyLongProperty($2);"},
		{"trigger": "I-ReadOnlyLongPropertyBase\tinit", "contents": "ReadOnlyLongPropertyBase ${1:base} = new ReadOnlyLongPropertyBase($2);"},
		{"trigger": "I-ReadOnlyLongWrapper\tinit", "contents": "ReadOnlyLongWrapper ${1:wrapper} = new ReadOnlyLongWrapper($2);"},
		{"trigger": "I-ReadOnlyMapProperty\tinit", "contents": "ReadOnlyMapProperty ${1:property} = new ReadOnlyMapProperty($2);"},
		{"trigger": "I-ReadOnlyMapPropertyBase\tinit", "contents": "ReadOnlyMapPropertyBase ${1:base} = new ReadOnlyMapPropertyBase($2);"},
		{"trigger": "I-ReadOnlyMapWrapper\tinit", "contents": "ReadOnlyMapWrapper ${1:wrapper} = new ReadOnlyMapWrapper($2);"},
		{"trigger": "I-ReadOnlyObjectProperty\tinit", "contents": "ReadOnlyObjectProperty ${1:property} = new ReadOnlyObjectProperty($2);"},
		{"trigger": "I-ReadOnlyObjectPropertyBase\tinit", "contents": "ReadOnlyObjectPropertyBase ${1:base} = new ReadOnlyObjectPropertyBase($2);"},
		{"trigger": "I-ReadOnlyObjectWrapper\tinit", "contents": "ReadOnlyObjectWrapper ${1:wrapper} = new ReadOnlyObjectWrapper($2);"},
		{"trigger": "I-ReadOnlyProperty\tinit", "contents": "ReadOnlyProperty ${1:property} = new ReadOnlyProperty($2);"},
		{"trigger": "I-ReadOnlyPropertyDescriptor\tinit", "contents": "ReadOnlyPropertyDescriptor ${1:descriptor} = new ReadOnlyPropertyDescriptor($2);"},
		{"trigger": "I-ReadOnlySetProperty\tinit", "contents": "ReadOnlySetProperty ${1:property} = new ReadOnlySetProperty($2);"},
		{"trigger": "I-ReadOnlySetPropertyBase\tinit", "contents": "ReadOnlySetPropertyBase ${1:base} = new ReadOnlySetPropertyBase($2);"},
		{"trigger": "I-ReadOnlySetWrapper\tinit", "contents": "ReadOnlySetWrapper ${1:wrapper} = new ReadOnlySetWrapper($2);"},
		{"trigger": "I-ReadOnlyStringProperty\tinit", "contents": "ReadOnlyStringProperty ${1:property} = new ReadOnlyStringProperty($2);"},
		{"trigger": "I-ReadOnlyStringPropertyBase\tinit", "contents": "ReadOnlyStringPropertyBase ${1:base} = new ReadOnlyStringPropertyBase($2);"},
		{"trigger": "I-ReadOnlyStringWrapper\tinit", "contents": "ReadOnlyStringWrapper ${1:wrapper} = new ReadOnlyStringWrapper($2);"},
		{"trigger": "I-ReadOnlyUnbackedObservableList\tinit", "contents": "ReadOnlyUnbackedObservableList ${1:list} = new ReadOnlyUnbackedObservableList($2);"},
		{"trigger": "I-ReadPendingException\tinit", "contents": "ReadPendingException ${1:exception} = new ReadPendingException($2);"},
		{"trigger": "I-ReadTimeouts\tinit", "contents": "ReadTimeouts ${1:timeouts} = new ReadTimeouts($2);"},
		{"trigger": "I-ReadTimeoutsFactory\tinit", "contents": "ReadTimeoutsFactory ${1:factory} = new ReadTimeoutsFactory($2);"},
		{"trigger": "I-ReadWriteLock\tinit", "contents": "ReadWriteLock ${1:lock} = new ReadWriteLock($2);"},
		{"trigger": "I-Readable\tinit", "contents": "Readable ${1:readable} = new Readable($2);"},
		{"trigger": "I-ReadableByteChannel\tinit", "contents": "ReadableByteChannel ${1:channel} = new ReadableByteChannel($2);"},
		{"trigger": "I-ReadbackGraphics\tinit", "contents": "ReadbackGraphics ${1:graphics} = new ReadbackGraphics($2);"},
		{"trigger": "I-ReadbackRenderTarget\tinit", "contents": "ReadbackRenderTarget ${1:target} = new ReadbackRenderTarget($2);"},
		{"trigger": "I-Reader\tinit", "contents": "Reader ${1:reader} = new Reader($2);"},
		{"trigger": "I-ReaderCharacterIterator\tinit", "contents": "ReaderCharacterIterator ${1:iterator} = new ReaderCharacterIterator($2);"},
		{"trigger": "I-ReaderUtil\tinit", "contents": "ReaderUtil ${1:util} = new ReaderUtil($2);"},
		{"trigger": "I-RealExpr\tinit", "contents": "RealExpr ${1:expr} = new RealExpr($2);"},
		{"trigger": "I-RealType\tinit", "contents": "RealType ${1:type} = new RealType($2);"},
		{"trigger": "I-RealmCallback\tinit", "contents": "RealmCallback ${1:callback} = new RealmCallback($2);"},
		{"trigger": "I-RealmChoiceCallback\tinit", "contents": "RealmChoiceCallback ${1:callback} = new RealmChoiceCallback($2);"},
		{"trigger": "I-Receiver\tinit", "contents": "Receiver ${1:receiver} = new Receiver($2);"},
		{"trigger": "I-Recognizer\tinit", "contents": "Recognizer ${1:recognizer} = new Recognizer($2);"},
		{"trigger": "I-Rect\tinit", "contents": "Rect ${1:rect} = new Rect($2);"},
		{"trigger": "I-RectBounds\tinit", "contents": "RectBounds ${1:bounds} = new RectBounds($2);"},
		{"trigger": "I-RectImpl\tinit", "contents": "RectImpl ${1:impl} = new RectImpl($2);"},
		{"trigger": "I-RectIterator\tinit", "contents": "RectIterator ${1:iterator} = new RectIterator($2);"},
		{"trigger": "I-RectShadowGraphics\tinit", "contents": "RectShadowGraphics ${1:graphics} = new RectShadowGraphics($2);"},
		{"trigger": "I-Rectangle\tinit", "contents": "Rectangle ${1:rectangle} = new Rectangle($2);"},
		{"trigger": "I-Rectangle2D\tinit", "contents": "Rectangle2D ${1:rectangle2d} = new Rectangle2D($2);"},
		{"trigger": "I-Rectangle2DBuilder\tinit", "contents": "Rectangle2DBuilder ${1:builder} = new Rectangle2DBuilder($2);"},
		{"trigger": "I-RectangleBuilder\tinit", "contents": "RectangleBuilder ${1:builder} = new RectangleBuilder($2);"},
		{"trigger": "I-RectanglePacker\tinit", "contents": "RectanglePacker ${1:packer} = new RectanglePacker($2);"},
		{"trigger": "I-RectangularShape\tinit", "contents": "RectangularShape ${1:shape} = new RectangularShape($2);"},
		{"trigger": "I-RecursiveAction\tinit", "contents": "RecursiveAction ${1:action} = new RecursiveAction($2);"},
		{"trigger": "I-RecursiveTask\tinit", "contents": "RecursiveTask ${1:task} = new RecursiveTask($2);"},
		{"trigger": "I-RedirectedEvent\tinit", "contents": "RedirectedEvent ${1:event} = new RedirectedEvent($2);"},
		{"trigger": "I-ReduceOps\tinit", "contents": "ReduceOps ${1:ops} = new ReduceOps($2);"},
		{"trigger": "I-ReentrantLock\tinit", "contents": "ReentrantLock ${1:lock} = new ReentrantLock($2);"},
		{"trigger": "I-ReentrantReadWriteLock\tinit", "contents": "ReentrantReadWriteLock ${1:lock} = new ReentrantReadWriteLock($2);"},
		{"trigger": "I-Ref\tinit", "contents": "Ref ${1:ref} = new Ref($2);"},
		{"trigger": "I-RefAddr\tinit", "contents": "RefAddr ${1:addr} = new RefAddr($2);"},
		{"trigger": "I-Reference\tinit", "contents": "Reference ${1:reference} = new Reference($2);"},
		{"trigger": "I-ReferenceData\tinit", "contents": "ReferenceData ${1:data} = new ReferenceData($2);"},
		{"trigger": "I-ReferenceList\tinit", "contents": "ReferenceList ${1:list} = new ReferenceList($2);"},
		{"trigger": "I-ReferenceNodeSetData\tinit", "contents": "ReferenceNodeSetData ${1:data} = new ReferenceNodeSetData($2);"},
		{"trigger": "I-ReferenceNotInitializedException\tinit", "contents": "ReferenceNotInitializedException ${1:exception} = new ReferenceNotInitializedException($2);"},
		{"trigger": "I-ReferenceOctetStreamData\tinit", "contents": "ReferenceOctetStreamData ${1:data} = new ReferenceOctetStreamData($2);"},
		{"trigger": "I-ReferencePipeline\tinit", "contents": "ReferencePipeline ${1:pipeline} = new ReferencePipeline($2);"},
		{"trigger": "I-ReferenceQueue\tinit", "contents": "ReferenceQueue ${1:queue} = new ReferenceQueue($2);"},
		{"trigger": "I-ReferenceSubTreeData\tinit", "contents": "ReferenceSubTreeData ${1:data} = new ReferenceSubTreeData($2);"},
		{"trigger": "I-ReferenceTree\tinit", "contents": "ReferenceTree ${1:tree} = new ReferenceTree($2);"},
		{"trigger": "I-ReferenceType\tinit", "contents": "ReferenceType ${1:type} = new ReferenceType($2);"},
		{"trigger": "I-ReferenceUriSchemesSupported\tinit", "contents": "ReferenceUriSchemesSupported ${1:supported} = new ReferenceUriSchemesSupported($2);"},
		{"trigger": "I-Referenceable\tinit", "contents": "Referenceable ${1:referenceable} = new Referenceable($2);"},
		{"trigger": "I-ReferralException\tinit", "contents": "ReferralException ${1:exception} = new ReferralException($2);"},
		{"trigger": "I-ReflectAccess\tinit", "contents": "ReflectAccess ${1:access} = new ReflectAccess($2);"},
		{"trigger": "I-ReflectPermission\tinit", "contents": "ReflectPermission ${1:permission} = new ReflectPermission($2);"},
		{"trigger": "I-Reflection\tinit", "contents": "Reflection ${1:reflection} = new Reflection($2);"},
		{"trigger": "I-ReflectionBuilder\tinit", "contents": "ReflectionBuilder ${1:builder} = new ReflectionBuilder($2);"},
		{"trigger": "I-ReflectionException\tinit", "contents": "ReflectionException ${1:exception} = new ReflectionException($2);"},
		{"trigger": "I-ReflectiveCopyException\tinit", "contents": "ReflectiveCopyException ${1:exception} = new ReflectiveCopyException($2);"},
		{"trigger": "I-ReflectiveOperationException\tinit", "contents": "ReflectiveOperationException ${1:exception} = new ReflectiveOperationException($2);"},
		{"trigger": "I-RefreshFailedException\tinit", "contents": "RefreshFailedException ${1:exception} = new RefreshFailedException($2);"},
		{"trigger": "I-Refreshable\tinit", "contents": "Refreshable ${1:refreshable} = new Refreshable($2);"},
		{"trigger": "I-RegexParser\tinit", "contents": "RegexParser ${1:parser} = new RegexParser($2);"},
		{"trigger": "I-Region\tinit", "contents": "Region ${1:region} = new Region($2);"},
		{"trigger": "I-RegionBuilder\tinit", "contents": "RegionBuilder ${1:builder} = new RegionBuilder($2);"},
		{"trigger": "I-RegionImageCache\tinit", "contents": "RegionImageCache ${1:cache} = new RegionImageCache($2);"},
		{"trigger": "I-RegisterableService\tinit", "contents": "RegisterableService ${1:service} = new RegisterableService($2);"},
		{"trigger": "I-Registry\tinit", "contents": "Registry ${1:registry} = new Registry($2);"},
		{"trigger": "I-RegistryHandler\tinit", "contents": "RegistryHandler ${1:handler} = new RegistryHandler($2);"},
		{"trigger": "I-RegularEnumSet\tinit", "contents": "RegularEnumSet ${1:set} = new RegularEnumSet($2);"},
		{"trigger": "I-RegularExpression\tinit", "contents": "RegularExpression ${1:expression} = new RegularExpression($2);"},
		{"trigger": "I-RejectedExecutionException\tinit", "contents": "RejectedExecutionException ${1:exception} = new RejectedExecutionException($2);"},
		{"trigger": "I-RejectedExecutionHandler\tinit", "contents": "RejectedExecutionHandler ${1:handler} = new RejectedExecutionHandler($2);"},
		{"trigger": "I-Relation\tinit", "contents": "Relation ${1:relation} = new Relation($2);"},
		{"trigger": "I-RelationException\tinit", "contents": "RelationException ${1:exception} = new RelationException($2);"},
		{"trigger": "I-RelationNotFoundException\tinit", "contents": "RelationNotFoundException ${1:exception} = new RelationNotFoundException($2);"},
		{"trigger": "I-RelationNotification\tinit", "contents": "RelationNotification ${1:notification} = new RelationNotification($2);"},
		{"trigger": "I-RelationService\tinit", "contents": "RelationService ${1:service} = new RelationService($2);"},
		{"trigger": "I-RelationServiceMBean\tinit", "contents": "RelationServiceMBean ${1:bean} = new RelationServiceMBean($2);"},
		{"trigger": "I-RelationServiceNotRegisteredException\tinit", "contents": "RelationServiceNotRegisteredException ${1:exception} = new RelationServiceNotRegisteredException($2);"},
		{"trigger": "I-RelationSupport\tinit", "contents": "RelationSupport ${1:support} = new RelationSupport($2);"},
		{"trigger": "I-RelationSupportMBean\tinit", "contents": "RelationSupportMBean ${1:bean} = new RelationSupportMBean($2);"},
		{"trigger": "I-RelationType\tinit", "contents": "RelationType ${1:type} = new RelationType($2);"},
		{"trigger": "I-RelationTypeNotFoundException\tinit", "contents": "RelationTypeNotFoundException ${1:exception} = new RelationTypeNotFoundException($2);"},
		{"trigger": "I-RelationTypeSupport\tinit", "contents": "RelationTypeSupport ${1:support} = new RelationTypeSupport($2);"},
		{"trigger": "I-RelationalExpr\tinit", "contents": "RelationalExpr ${1:expr} = new RelationalExpr($2);"},
		{"trigger": "I-RelativeLocationPath\tinit", "contents": "RelativeLocationPath ${1:path} = new RelativeLocationPath($2);"},
		{"trigger": "I-RelativePathPattern\tinit", "contents": "RelativePathPattern ${1:pattern} = new RelativePathPattern($2);"},
		{"trigger": "I-RemarshalException\tinit", "contents": "RemarshalException ${1:exception} = new RemarshalException($2);"},
		{"trigger": "I-Remote\tinit", "contents": "Remote ${1:remote} = new Remote($2);"},
		{"trigger": "I-RemoteCall\tinit", "contents": "RemoteCall ${1:call} = new RemoteCall($2);"},
		{"trigger": "I-RemoteException\tinit", "contents": "RemoteException ${1:exception} = new RemoteException($2);"},
		{"trigger": "I-RemoteObject\tinit", "contents": "RemoteObject ${1:object} = new RemoteObject($2);"},
		{"trigger": "I-RemoteObjectInvocationHandler\tinit", "contents": "RemoteObjectInvocationHandler ${1:handler} = new RemoteObjectInvocationHandler($2);"},
		{"trigger": "I-RemoteRef\tinit", "contents": "RemoteRef ${1:ref} = new RemoteRef($2);"},
		{"trigger": "I-RemoteServer\tinit", "contents": "RemoteServer ${1:server} = new RemoteServer($2);"},
		{"trigger": "I-RemoteStub\tinit", "contents": "RemoteStub ${1:stub} = new RemoteStub($2);"},
		{"trigger": "I-RenderContext\tinit", "contents": "RenderContext ${1:context} = new RenderContext($2);"},
		{"trigger": "I-RenderJob\tinit", "contents": "RenderJob ${1:job} = new RenderJob($2);"},
		{"trigger": "I-RenderMediaControls\tinit", "contents": "RenderMediaControls ${1:controls} = new RenderMediaControls($2);"},
		{"trigger": "I-RenderState\tinit", "contents": "RenderState ${1:state} = new RenderState($2);"},
		{"trigger": "I-RenderTarget\tinit", "contents": "RenderTarget ${1:target} = new RenderTarget($2);"},
		{"trigger": "I-RenderTheme\tinit", "contents": "RenderTheme ${1:theme} = new RenderTheme($2);"},
		{"trigger": "I-RenderThemeImpl\tinit", "contents": "RenderThemeImpl ${1:impl} = new RenderThemeImpl($2);"},
		{"trigger": "I-RenderableImage\tinit", "contents": "RenderableImage ${1:image} = new RenderableImage($2);"},
		{"trigger": "I-RenderableImageOp\tinit", "contents": "RenderableImageOp ${1:op} = new RenderableImageOp($2);"},
		{"trigger": "I-RenderableImageProducer\tinit", "contents": "RenderableImageProducer ${1:producer} = new RenderableImageProducer($2);"},
		{"trigger": "I-RenderedImage\tinit", "contents": "RenderedImage ${1:image} = new RenderedImage($2);"},
		{"trigger": "I-RenderedImageFactory\tinit", "contents": "RenderedImageFactory ${1:factory} = new RenderedImageFactory($2);"},
		{"trigger": "I-Renderer\tinit", "contents": "Renderer ${1:renderer} = new Renderer($2);"},
		{"trigger": "I-RendererBase\tinit", "contents": "RendererBase ${1:base} = new RendererBase($2);"},
		{"trigger": "I-RendererDelegate\tinit", "contents": "RendererDelegate ${1:delegate} = new RendererDelegate($2);"},
		{"trigger": "I-RendererFactory\tinit", "contents": "RendererFactory ${1:factory} = new RendererFactory($2);"},
		{"trigger": "I-RenderingHints\tinit", "contents": "RenderingHints ${1:hints} = new RenderingHints($2);"},
		{"trigger": "I-RepaintManager\tinit", "contents": "RepaintManager ${1:manager} = new RepaintManager($2);"},
		{"trigger": "I-RepeatStruct\tinit", "contents": "RepeatStruct ${1:struct} = new RepeatStruct($2);"},
		{"trigger": "I-RepeatStructConverter\tinit", "contents": "RepeatStructConverter ${1:converter} = new RepeatStructConverter($2);"},
		{"trigger": "I-Repeatable\tinit", "contents": "Repeatable ${1:repeatable} = new Repeatable($2);"},
		{"trigger": "I-ReplicateScaleFilter\tinit", "contents": "ReplicateScaleFilter ${1:filter} = new ReplicateScaleFilter($2);"},
		{"trigger": "I-Repository\tinit", "contents": "Repository ${1:repository} = new Repository($2);"},
		{"trigger": "I-RepositoryHelper\tinit", "contents": "RepositoryHelper ${1:helper} = new RepositoryHelper($2);"},
		{"trigger": "I-RepositoryHolder\tinit", "contents": "RepositoryHolder ${1:holder} = new RepositoryHolder($2);"},
		{"trigger": "I-RepositoryIdHelper\tinit", "contents": "RepositoryIdHelper ${1:helper} = new RepositoryIdHelper($2);"},
		{"trigger": "I-RepositoryOperations\tinit", "contents": "RepositoryOperations ${1:operations} = new RepositoryOperations($2);"},
		{"trigger": "I-Request\tinit", "contents": "Request ${1:request} = new Request($2);"},
		{"trigger": "I-RequestDispatcherDefault\tinit", "contents": "RequestDispatcherDefault ${1:default} = new RequestDispatcherDefault($2);"},
		{"trigger": "I-RequestDispatcherRegistry\tinit", "contents": "RequestDispatcherRegistry ${1:registry} = new RequestDispatcherRegistry($2);"},
		{"trigger": "I-RequestInfo\tinit", "contents": "RequestInfo ${1:info} = new RequestInfo($2);"},
		{"trigger": "I-RequestInfoExt\tinit", "contents": "RequestInfoExt ${1:ext} = new RequestInfoExt($2);"},
		{"trigger": "I-RequestInfoOperations\tinit", "contents": "RequestInfoOperations ${1:operations} = new RequestInfoOperations($2);"},
		{"trigger": "I-RequestPartitioningComponent\tinit", "contents": "RequestPartitioningComponent ${1:component} = new RequestPartitioningComponent($2);"},
		{"trigger": "I-RequestPartitioningPolicy\tinit", "contents": "RequestPartitioningPolicy ${1:policy} = new RequestPartitioningPolicy($2);"},
		{"trigger": "I-RequestProcessingPolicy\tinit", "contents": "RequestProcessingPolicy ${1:policy} = new RequestProcessingPolicy($2);"},
		{"trigger": "I-RequestProcessingPolicyOperations\tinit", "contents": "RequestProcessingPolicyOperations ${1:operations} = new RequestProcessingPolicyOperations($2);"},
		{"trigger": "I-RequestProcessingPolicyValue\tinit", "contents": "RequestProcessingPolicyValue ${1:value} = new RequestProcessingPolicyValue($2);"},
		{"trigger": "I-RequestWrapper\tinit", "contents": "RequestWrapper ${1:wrapper} = new RequestWrapper($2);"},
		{"trigger": "I-RequestingUserName\tinit", "contents": "RequestingUserName ${1:name} = new RequestingUserName($2);"},
		{"trigger": "I-RequiredModelMBean\tinit", "contents": "RequiredModelMBean ${1:bean} = new RequiredModelMBean($2);"},
		{"trigger": "I-RescaleOp\tinit", "contents": "RescaleOp ${1:op} = new RescaleOp($2);"},
		{"trigger": "I-ResizeFeaturesBase\tinit", "contents": "ResizeFeaturesBase ${1:base} = new ResizeFeaturesBase($2);"},
		{"trigger": "I-ResolutionSyntax\tinit", "contents": "ResolutionSyntax ${1:syntax} = new ResolutionSyntax($2);"},
		{"trigger": "I-ResolveResult\tinit", "contents": "ResolveResult ${1:result} = new ResolveResult($2);"},
		{"trigger": "I-Resolver\tinit", "contents": "Resolver ${1:resolver} = new Resolver($2);"},
		{"trigger": "I-ResolverAnonymous\tinit", "contents": "ResolverAnonymous ${1:anonymous} = new ResolverAnonymous($2);"},
		{"trigger": "I-ResolverDefault\tinit", "contents": "ResolverDefault ${1:default} = new ResolverDefault($2);"},
		{"trigger": "I-ResolverDirectHTTP\tinit", "contents": "ResolverDirectHTTP ${1:resolverdirecthttp} = new ResolverDirectHTTP($2);"},
		{"trigger": "I-ResolverFragment\tinit", "contents": "ResolverFragment ${1:fragment} = new ResolverFragment($2);"},
		{"trigger": "I-ResolverLocalFilesystem\tinit", "contents": "ResolverLocalFilesystem ${1:filesystem} = new ResolverLocalFilesystem($2);"},
		{"trigger": "I-ResolverStyle\tinit", "contents": "ResolverStyle ${1:style} = new ResolverStyle($2);"},
		{"trigger": "I-ResolverXPointer\tinit", "contents": "ResolverXPointer ${1:pointer} = new ResolverXPointer($2);"},
		{"trigger": "I-ResolvingParser\tinit", "contents": "ResolvingParser ${1:parser} = new ResolvingParser($2);"},
		{"trigger": "I-ResolvingXMLFilter\tinit", "contents": "ResolvingXMLFilter ${1:filter} = new ResolvingXMLFilter($2);"},
		{"trigger": "I-ResolvingXMLReader\tinit", "contents": "ResolvingXMLReader ${1:reader} = new ResolvingXMLReader($2);"},
		{"trigger": "I-Resource\tinit", "contents": "Resource ${1:resource} = new Resource($2);"},
		{"trigger": "I-ResourceBundle\tinit", "contents": "ResourceBundle ${1:bundle} = new ResourceBundle($2);"},
		{"trigger": "I-ResourceBundleControlProvider\tinit", "contents": "ResourceBundleControlProvider ${1:provider} = new ResourceBundleControlProvider($2);"},
		{"trigger": "I-ResourceFactory\tinit", "contents": "ResourceFactory ${1:factory} = new ResourceFactory($2);"},
		{"trigger": "I-ResourceFactoryListener\tinit", "contents": "ResourceFactoryListener ${1:listener} = new ResourceFactoryListener($2);"},
		{"trigger": "I-ResourceManager\tinit", "contents": "ResourceManager ${1:manager} = new ResourceManager($2);"},
		{"trigger": "I-ResourcePool\tinit", "contents": "ResourcePool ${1:pool} = new ResourcePool($2);"},
		{"trigger": "I-ResourceResolver\tinit", "contents": "ResourceResolver ${1:resolver} = new ResourceResolver($2);"},
		{"trigger": "I-ResourceResolverContext\tinit", "contents": "ResourceResolverContext ${1:context} = new ResourceResolverContext($2);"},
		{"trigger": "I-ResourceResolverException\tinit", "contents": "ResourceResolverException ${1:exception} = new ResourceResolverException($2);"},
		{"trigger": "I-ResourceResolverSpi\tinit", "contents": "ResourceResolverSpi ${1:spi} = new ResourceResolverSpi($2);"},
		{"trigger": "I-Resources\tinit", "contents": "Resources ${1:resources} = new Resources($2);"},
		{"trigger": "I-RespectBinding\tinit", "contents": "RespectBinding ${1:binding} = new RespectBinding($2);"},
		{"trigger": "I-RespectBindingFeature\tinit", "contents": "RespectBindingFeature ${1:feature} = new RespectBindingFeature($2);"},
		{"trigger": "I-Response\tinit", "contents": "Response ${1:response} = new Response($2);"},
		{"trigger": "I-ResponseCache\tinit", "contents": "ResponseCache ${1:cache} = new ResponseCache($2);"},
		{"trigger": "I-ResponseHandler\tinit", "contents": "ResponseHandler ${1:handler} = new ResponseHandler($2);"},
		{"trigger": "I-ResponseWrapper\tinit", "contents": "ResponseWrapper ${1:wrapper} = new ResponseWrapper($2);"},
		{"trigger": "I-Result\tinit", "contents": "Result ${1:result} = new Result($2);"},
		{"trigger": "I-ResultSet\tinit", "contents": "ResultSet ${1:set} = new ResultSet($2);"},
		{"trigger": "I-ResultSetMetaData\tinit", "contents": "ResultSetMetaData ${1:data} = new ResultSetMetaData($2);"},
		{"trigger": "I-ResultTreeType\tinit", "contents": "ResultTreeType ${1:type} = new ResultTreeType($2);"},
		{"trigger": "I-Retention\tinit", "contents": "Retention ${1:retention} = new Retention($2);"},
		{"trigger": "I-RetentionPolicy\tinit", "contents": "RetentionPolicy ${1:policy} = new RetentionPolicy($2);"},
		{"trigger": "I-RetrievalMethod\tinit", "contents": "RetrievalMethod ${1:method} = new RetrievalMethod($2);"},
		{"trigger": "I-RetrievalMethodResolver\tinit", "contents": "RetrievalMethodResolver ${1:resolver} = new RetrievalMethodResolver($2);"},
		{"trigger": "I-RetryType\tinit", "contents": "RetryType ${1:type} = new RetryType($2);"},
		{"trigger": "I-ReturnInstruction\tinit", "contents": "ReturnInstruction ${1:instruction} = new ReturnInstruction($2);"},
		{"trigger": "I-ReturnTree\tinit", "contents": "ReturnTree ${1:tree} = new ReturnTree($2);"},
		{"trigger": "I-ReturnaddressType\tinit", "contents": "ReturnaddressType ${1:type} = new ReturnaddressType($2);"},
		{"trigger": "I-RevalidationHandler\tinit", "contents": "RevalidationHandler ${1:handler} = new RevalidationHandler($2);"},
		{"trigger": "I-ReverbType\tinit", "contents": "ReverbType ${1:type} = new ReverbType($2);"},
		{"trigger": "I-ReverseAxesWalker\tinit", "contents": "ReverseAxesWalker ${1:walker} = new ReverseAxesWalker($2);"},
		{"trigger": "I-Rfc2253Parser\tinit", "contents": "Rfc2253Parser ${1:parser} = new Rfc2253Parser($2);"},
		{"trigger": "I-Robot\tinit", "contents": "Robot ${1:robot} = new Robot($2);"},
		{"trigger": "I-RobotPeer\tinit", "contents": "RobotPeer ${1:peer} = new RobotPeer($2);"},
		{"trigger": "I-Role\tinit", "contents": "Role ${1:role} = new Role($2);"},
		{"trigger": "I-RoleInfo\tinit", "contents": "RoleInfo ${1:info} = new RoleInfo($2);"},
		{"trigger": "I-RoleInfoNotFoundException\tinit", "contents": "RoleInfoNotFoundException ${1:exception} = new RoleInfoNotFoundException($2);"},
		{"trigger": "I-RoleList\tinit", "contents": "RoleList ${1:list} = new RoleList($2);"},
		{"trigger": "I-RoleNotFoundException\tinit", "contents": "RoleNotFoundException ${1:exception} = new RoleNotFoundException($2);"},
		{"trigger": "I-RoleResult\tinit", "contents": "RoleResult ${1:result} = new RoleResult($2);"},
		{"trigger": "I-RoleStatus\tinit", "contents": "RoleStatus ${1:status} = new RoleStatus($2);"},
		{"trigger": "I-RoleUnresolved\tinit", "contents": "RoleUnresolved ${1:unresolved} = new RoleUnresolved($2);"},
		{"trigger": "I-RoleUnresolvedList\tinit", "contents": "RoleUnresolvedList ${1:list} = new RoleUnresolvedList($2);"},
		{"trigger": "I-RootDoc\tinit", "contents": "RootDoc ${1:doc} = new RootDoc($2);"},
		{"trigger": "I-RootPaneContainer\tinit", "contents": "RootPaneContainer ${1:container} = new RootPaneContainer($2);"},
		{"trigger": "I-RootPaneUI\tinit", "contents": "RootPaneUI ${1:rootpaneui} = new RootPaneUI($2);"},
		{"trigger": "I-Rotate\tinit", "contents": "Rotate ${1:rotate} = new Rotate($2);"},
		{"trigger": "I-RotateBuilder\tinit", "contents": "RotateBuilder ${1:builder} = new RotateBuilder($2);"},
		{"trigger": "I-RotateEvent\tinit", "contents": "RotateEvent ${1:event} = new RotateEvent($2);"},
		{"trigger": "I-RotateGestureRecognizer\tinit", "contents": "RotateGestureRecognizer ${1:recognizer} = new RotateGestureRecognizer($2);"},
		{"trigger": "I-RotateTransition\tinit", "contents": "RotateTransition ${1:transition} = new RotateTransition($2);"},
		{"trigger": "I-RotateTransitionBuilder\tinit", "contents": "RotateTransitionBuilder ${1:builder} = new RotateTransitionBuilder($2);"},
		{"trigger": "I-RoughScaler\tinit", "contents": "RoughScaler ${1:scaler} = new RoughScaler($2);"},
		{"trigger": "I-RoundCall\tinit", "contents": "RoundCall ${1:call} = new RoundCall($2);"},
		{"trigger": "I-RoundEnvironment\tinit", "contents": "RoundEnvironment ${1:environment} = new RoundEnvironment($2);"},
		{"trigger": "I-RoundRectIterator\tinit", "contents": "RoundRectIterator ${1:iterator} = new RoundRectIterator($2);"},
		{"trigger": "I-RoundRectangle2D\tinit", "contents": "RoundRectangle2D ${1:roundrectangle2d} = new RoundRectangle2D($2);"},
		{"trigger": "I-RoundingMode\tinit", "contents": "RoundingMode ${1:mode} = new RoundingMode($2);"},
		{"trigger": "I-RowConstraints\tinit", "contents": "RowConstraints ${1:constraints} = new RowConstraints($2);"},
		{"trigger": "I-RowConstraintsBuilder\tinit", "contents": "RowConstraintsBuilder ${1:builder} = new RowConstraintsBuilder($2);"},
		{"trigger": "I-RowFilter\tinit", "contents": "RowFilter ${1:filter} = new RowFilter($2);"},
		{"trigger": "I-RowId\tinit", "contents": "RowId ${1:id} = new RowId($2);"},
		{"trigger": "I-RowIdLifetime\tinit", "contents": "RowIdLifetime ${1:lifetime} = new RowIdLifetime($2);"},
		{"trigger": "I-RowMapper\tinit", "contents": "RowMapper ${1:mapper} = new RowMapper($2);"},
		{"trigger": "I-RowSet\tinit", "contents": "RowSet ${1:set} = new RowSet($2);"},
		{"trigger": "I-RowSetEvent\tinit", "contents": "RowSetEvent ${1:event} = new RowSetEvent($2);"},
		{"trigger": "I-RowSetFactory\tinit", "contents": "RowSetFactory ${1:factory} = new RowSetFactory($2);"},
		{"trigger": "I-RowSetInternal\tinit", "contents": "RowSetInternal ${1:internal} = new RowSetInternal($2);"},
		{"trigger": "I-RowSetListener\tinit", "contents": "RowSetListener ${1:listener} = new RowSetListener($2);"},
		{"trigger": "I-RowSetMetaData\tinit", "contents": "RowSetMetaData ${1:data} = new RowSetMetaData($2);"},
		{"trigger": "I-RowSetMetaDataImpl\tinit", "contents": "RowSetMetaDataImpl ${1:impl} = new RowSetMetaDataImpl($2);"},
		{"trigger": "I-RowSetProvider\tinit", "contents": "RowSetProvider ${1:provider} = new RowSetProvider($2);"},
		{"trigger": "I-RowSetReader\tinit", "contents": "RowSetReader ${1:reader} = new RowSetReader($2);"},
		{"trigger": "I-RowSetWarning\tinit", "contents": "RowSetWarning ${1:warning} = new RowSetWarning($2);"},
		{"trigger": "I-RowSetWriter\tinit", "contents": "RowSetWriter ${1:writer} = new RowSetWriter($2);"},
		{"trigger": "I-RowSorter\tinit", "contents": "RowSorter ${1:sorter} = new RowSorter($2);"},
		{"trigger": "I-RowSorterEvent\tinit", "contents": "RowSorterEvent ${1:event} = new RowSorterEvent($2);"},
		{"trigger": "I-RowSorterListener\tinit", "contents": "RowSorterListener ${1:listener} = new RowSorterListener($2);"},
		{"trigger": "I-RtMethodGenerator\tinit", "contents": "RtMethodGenerator ${1:generator} = new RtMethodGenerator($2);"},
		{"trigger": "I-Rule\tinit", "contents": "Rule ${1:rule} = new Rule($2);"},
		{"trigger": "I-RuleBasedCollationKey\tinit", "contents": "RuleBasedCollationKey ${1:key} = new RuleBasedCollationKey($2);"},
		{"trigger": "I-RuleBasedCollator\tinit", "contents": "RuleBasedCollator ${1:collator} = new RuleBasedCollator($2);"},
		{"trigger": "I-RunTime\tinit", "contents": "RunTime ${1:time} = new RunTime($2);"},
		{"trigger": "I-RunTimeOperations\tinit", "contents": "RunTimeOperations ${1:operations} = new RunTimeOperations($2);"},
		{"trigger": "I-Runnable\tinit", "contents": "Runnable ${1:runnable} = new Runnable($2);"},
		{"trigger": "I-RunnableFuture\tinit", "contents": "RunnableFuture ${1:future} = new RunnableFuture($2);"},
		{"trigger": "I-RunnableProcessor\tinit", "contents": "RunnableProcessor ${1:processor} = new RunnableProcessor($2);"},
		{"trigger": "I-RunnableQueue\tinit", "contents": "RunnableQueue ${1:queue} = new RunnableQueue($2);"},
		{"trigger": "I-RunnableScheduledFuture\tinit", "contents": "RunnableScheduledFuture ${1:future} = new RunnableScheduledFuture($2);"},
		{"trigger": "I-Runtime\tinit", "contents": "Runtime ${1:runtime} = new Runtime($2);"},
		{"trigger": "I-RuntimeErrorException\tinit", "contents": "RuntimeErrorException ${1:exception} = new RuntimeErrorException($2);"},
		{"trigger": "I-RuntimeException\tinit", "contents": "RuntimeException ${1:exception} = new RuntimeException($2);"},
		{"trigger": "I-RuntimeMBeanException\tinit", "contents": "RuntimeMBeanException ${1:exception} = new RuntimeMBeanException($2);"},
		{"trigger": "I-RuntimeMXBean\tinit", "contents": "RuntimeMXBean ${1:bean} = new RuntimeMXBean($2);"},
		{"trigger": "I-RuntimeOperationsException\tinit", "contents": "RuntimeOperationsException ${1:exception} = new RuntimeOperationsException($2);"},
		{"trigger": "I-RuntimePermission\tinit", "contents": "RuntimePermission ${1:permission} = new RuntimePermission($2);"},
		{"trigger": "I-SAAJMetaFactory\tinit", "contents": "SAAJMetaFactory ${1:factory} = new SAAJMetaFactory($2);"},
		{"trigger": "I-SAAJResult\tinit", "contents": "SAAJResult ${1:result} = new SAAJResult($2);"},
		{"trigger": "I-SALOAD\tinit", "contents": "SALOAD ${1:saload} = new SALOAD($2);"},
		{"trigger": "I-SASTORE\tinit", "contents": "SASTORE ${1:sastore} = new SASTORE($2);"},
		{"trigger": "I-SAX2DOM\tinit", "contents": "SAX2DOM ${1:sax2dom} = new SAX2DOM($2);"},
		{"trigger": "I-SAX2DTM\tinit", "contents": "SAX2DTM ${1:sax2dtm} = new SAX2DTM($2);"},
		{"trigger": "I-SAX2RTFDTM\tinit", "contents": "SAX2RTFDTM ${1:sax2rtfdtm} = new SAX2RTFDTM($2);"},
		{"trigger": "I-SAX2StAXBaseWriter\tinit", "contents": "SAX2StAXBaseWriter ${1:writer} = new SAX2StAXBaseWriter($2);"},
		{"trigger": "I-SAX2StAXEventWriter\tinit", "contents": "SAX2StAXEventWriter ${1:writer} = new SAX2StAXEventWriter($2);"},
		{"trigger": "I-SAX2StAXStreamWriter\tinit", "contents": "SAX2StAXStreamWriter ${1:writer} = new SAX2StAXStreamWriter($2);"},
		{"trigger": "I-SAX2XNI\tinit", "contents": "SAX2XNI ${1:sax2xni} = new SAX2XNI($2);"},
		{"trigger": "I-SAXCatalogParser\tinit", "contents": "SAXCatalogParser ${1:parser} = new SAXCatalogParser($2);"},
		{"trigger": "I-SAXCatalogReader\tinit", "contents": "SAXCatalogReader ${1:reader} = new SAXCatalogReader($2);"},
		{"trigger": "I-SAXException\tinit", "contents": "SAXException ${1:exception} = new SAXException($2);"},
		{"trigger": "I-SAXImpl\tinit", "contents": "SAXImpl ${1:impl} = new SAXImpl($2);"},
		{"trigger": "I-SAXInputSource\tinit", "contents": "SAXInputSource ${1:source} = new SAXInputSource($2);"},
		{"trigger": "I-SAXLocatorWrapper\tinit", "contents": "SAXLocatorWrapper ${1:wrapper} = new SAXLocatorWrapper($2);"},
		{"trigger": "I-SAXMessageFormatter\tinit", "contents": "SAXMessageFormatter ${1:formatter} = new SAXMessageFormatter($2);"},
		{"trigger": "I-SAXNotRecognizedException\tinit", "contents": "SAXNotRecognizedException ${1:exception} = new SAXNotRecognizedException($2);"},
		{"trigger": "I-SAXNotSupportedException\tinit", "contents": "SAXNotSupportedException ${1:exception} = new SAXNotSupportedException($2);"},
		{"trigger": "I-SAXParseException\tinit", "contents": "SAXParseException ${1:exception} = new SAXParseException($2);"},
		{"trigger": "I-SAXParser\tinit", "contents": "SAXParser ${1:parser} = new SAXParser($2);"},
		{"trigger": "I-SAXParserFactory\tinit", "contents": "SAXParserFactory ${1:factory} = new SAXParserFactory($2);"},
		{"trigger": "I-SAXParserFactoryImpl\tinit", "contents": "SAXParserFactoryImpl ${1:impl} = new SAXParserFactoryImpl($2);"},
		{"trigger": "I-SAXParserHandler\tinit", "contents": "SAXParserHandler ${1:handler} = new SAXParserHandler($2);"},
		{"trigger": "I-SAXParserImpl\tinit", "contents": "SAXParserImpl ${1:impl} = new SAXParserImpl($2);"},
		{"trigger": "I-SAXResult\tinit", "contents": "SAXResult ${1:result} = new SAXResult($2);"},
		{"trigger": "I-SAXSource\tinit", "contents": "SAXSource ${1:source} = new SAXSource($2);"},
		{"trigger": "I-SAXSourceLocator\tinit", "contents": "SAXSourceLocator ${1:locator} = new SAXSourceLocator($2);"},
		{"trigger": "I-SAXTransformerFactory\tinit", "contents": "SAXTransformerFactory ${1:factory} = new SAXTransformerFactory($2);"},
		{"trigger": "I-SERVANT_RETENTION_POLICY_ID\tinit", "contents": "SERVANT_RETENTION_POLICY_ID ${1:servant} = new SERVANT_RETENTION_POLICY_ID($2);"},
		{"trigger": "I-SIPUSH\tinit", "contents": "SIPUSH ${1:sipush} = new SIPUSH($2);"},
		{"trigger": "I-SOAPBinding\tinit", "contents": "SOAPBinding ${1:binding} = new SOAPBinding($2);"},
		{"trigger": "I-SOAPBody\tinit", "contents": "SOAPBody ${1:body} = new SOAPBody($2);"},
		{"trigger": "I-SOAPBodyElement\tinit", "contents": "SOAPBodyElement ${1:element} = new SOAPBodyElement($2);"},
		{"trigger": "I-SOAPConnection\tinit", "contents": "SOAPConnection ${1:connection} = new SOAPConnection($2);"},
		{"trigger": "I-SOAPConnectionFactory\tinit", "contents": "SOAPConnectionFactory ${1:factory} = new SOAPConnectionFactory($2);"},
		{"trigger": "I-SOAPConstants\tinit", "contents": "SOAPConstants ${1:constants} = new SOAPConstants($2);"},
		{"trigger": "I-SOAPElement\tinit", "contents": "SOAPElement ${1:element} = new SOAPElement($2);"},
		{"trigger": "I-SOAPElementFactory\tinit", "contents": "SOAPElementFactory ${1:factory} = new SOAPElementFactory($2);"},
		{"trigger": "I-SOAPEnvelope\tinit", "contents": "SOAPEnvelope ${1:envelope} = new SOAPEnvelope($2);"},
		{"trigger": "I-SOAPException\tinit", "contents": "SOAPException ${1:exception} = new SOAPException($2);"},
		{"trigger": "I-SOAPFactory\tinit", "contents": "SOAPFactory ${1:factory} = new SOAPFactory($2);"},
		{"trigger": "I-SOAPFault\tinit", "contents": "SOAPFault ${1:fault} = new SOAPFault($2);"},
		{"trigger": "I-SOAPFaultElement\tinit", "contents": "SOAPFaultElement ${1:element} = new SOAPFaultElement($2);"},
		{"trigger": "I-SOAPFaultException\tinit", "contents": "SOAPFaultException ${1:exception} = new SOAPFaultException($2);"},
		{"trigger": "I-SOAPHandler\tinit", "contents": "SOAPHandler ${1:handler} = new SOAPHandler($2);"},
		{"trigger": "I-SOAPHeader\tinit", "contents": "SOAPHeader ${1:header} = new SOAPHeader($2);"},
		{"trigger": "I-SOAPHeaderElement\tinit", "contents": "SOAPHeaderElement ${1:element} = new SOAPHeaderElement($2);"},
		{"trigger": "I-SOAPMessage\tinit", "contents": "SOAPMessage ${1:message} = new SOAPMessage($2);"},
		{"trigger": "I-SOAPMessageContext\tinit", "contents": "SOAPMessageContext ${1:context} = new SOAPMessageContext($2);"},
		{"trigger": "I-SOAPPart\tinit", "contents": "SOAPPart ${1:part} = new SOAPPart($2);"},
		{"trigger": "I-SOFMarkerSegment\tinit", "contents": "SOFMarkerSegment ${1:segment} = new SOFMarkerSegment($2);"},
		{"trigger": "I-SOSMarkerSegment\tinit", "contents": "SOSMarkerSegment ${1:segment} = new SOSMarkerSegment($2);"},
		{"trigger": "I-SPKIData\tinit", "contents": "SPKIData ${1:data} = new SPKIData($2);"},
		{"trigger": "I-SQLClientInfoException\tinit", "contents": "SQLClientInfoException ${1:exception} = new SQLClientInfoException($2);"},
		{"trigger": "I-SQLData\tinit", "contents": "SQLData ${1:data} = new SQLData($2);"},
		{"trigger": "I-SQLDataException\tinit", "contents": "SQLDataException ${1:exception} = new SQLDataException($2);"},
		{"trigger": "I-SQLException\tinit", "contents": "SQLException ${1:exception} = new SQLException($2);"},
		{"trigger": "I-SQLFeatureNotSupportedException\tinit", "contents": "SQLFeatureNotSupportedException ${1:exception} = new SQLFeatureNotSupportedException($2);"},
		{"trigger": "I-SQLInput\tinit", "contents": "SQLInput ${1:input} = new SQLInput($2);"},
		{"trigger": "I-SQLInputImpl\tinit", "contents": "SQLInputImpl ${1:impl} = new SQLInputImpl($2);"},
		{"trigger": "I-SQLIntegrityConstraintViolationException\tinit", "contents": "SQLIntegrityConstraintViolationException ${1:exception} = new SQLIntegrityConstraintViolationException($2);"},
		{"trigger": "I-SQLInvalidAuthorizationSpecException\tinit", "contents": "SQLInvalidAuthorizationSpecException ${1:exception} = new SQLInvalidAuthorizationSpecException($2);"},
		{"trigger": "I-SQLNonTransientConnectionException\tinit", "contents": "SQLNonTransientConnectionException ${1:exception} = new SQLNonTransientConnectionException($2);"},
		{"trigger": "I-SQLNonTransientException\tinit", "contents": "SQLNonTransientException ${1:exception} = new SQLNonTransientException($2);"},
		{"trigger": "I-SQLOutput\tinit", "contents": "SQLOutput ${1:output} = new SQLOutput($2);"},
		{"trigger": "I-SQLOutputImpl\tinit", "contents": "SQLOutputImpl ${1:impl} = new SQLOutputImpl($2);"},
		{"trigger": "I-SQLPermission\tinit", "contents": "SQLPermission ${1:permission} = new SQLPermission($2);"},
		{"trigger": "I-SQLRecoverableException\tinit", "contents": "SQLRecoverableException ${1:exception} = new SQLRecoverableException($2);"},
		{"trigger": "I-SQLSyntaxErrorException\tinit", "contents": "SQLSyntaxErrorException ${1:exception} = new SQLSyntaxErrorException($2);"},
		{"trigger": "I-SQLTimeoutException\tinit", "contents": "SQLTimeoutException ${1:exception} = new SQLTimeoutException($2);"},
		{"trigger": "I-SQLTransactionRollbackException\tinit", "contents": "SQLTransactionRollbackException ${1:exception} = new SQLTransactionRollbackException($2);"},
		{"trigger": "I-SQLTransientConnectionException\tinit", "contents": "SQLTransientConnectionException ${1:exception} = new SQLTransientConnectionException($2);"},
		{"trigger": "I-SQLTransientException\tinit", "contents": "SQLTransientException ${1:exception} = new SQLTransientException($2);"},
		{"trigger": "I-SQLType\tinit", "contents": "SQLType ${1:type} = new SQLType($2);"},
		{"trigger": "I-SQLWarning\tinit", "contents": "SQLWarning ${1:warning} = new SQLWarning($2);"},
		{"trigger": "I-SQLXML\tinit", "contents": "SQLXML ${1:sqlxml} = new SQLXML($2);"},
		{"trigger": "I-SSEBoxBlurPeer\tinit", "contents": "SSEBoxBlurPeer ${1:peer} = new SSEBoxBlurPeer($2);"},
		{"trigger": "I-SSEBoxShadowPeer\tinit", "contents": "SSEBoxShadowPeer ${1:peer} = new SSEBoxShadowPeer($2);"},
		{"trigger": "I-SSEEffectPeer\tinit", "contents": "SSEEffectPeer ${1:peer} = new SSEEffectPeer($2);"},
		{"trigger": "I-SSELinearConvolvePeer\tinit", "contents": "SSELinearConvolvePeer ${1:peer} = new SSELinearConvolvePeer($2);"},
		{"trigger": "I-SSELinearConvolveShadowPeer\tinit", "contents": "SSELinearConvolveShadowPeer ${1:peer} = new SSELinearConvolveShadowPeer($2);"},
		{"trigger": "I-SSERendererDelegate\tinit", "contents": "SSERendererDelegate ${1:delegate} = new SSERendererDelegate($2);"},
		{"trigger": "I-SUCCESSFUL\tinit", "contents": "SUCCESSFUL ${1:successful} = new SUCCESSFUL($2);"},
		{"trigger": "I-SVGPath\tinit", "contents": "SVGPath ${1:path} = new SVGPath($2);"},
		{"trigger": "I-SVGPathBuilder\tinit", "contents": "SVGPathBuilder ${1:builder} = new SVGPathBuilder($2);"},
		{"trigger": "I-SWAP\tinit", "contents": "SWAP ${1:swap} = new SWAP($2);"},
		{"trigger": "I-SWArgbPreTexture\tinit", "contents": "SWArgbPreTexture ${1:texture} = new SWArgbPreTexture($2);"},
		{"trigger": "I-SWContext\tinit", "contents": "SWContext ${1:context} = new SWContext($2);"},
		{"trigger": "I-SWGraphics\tinit", "contents": "SWGraphics ${1:graphics} = new SWGraphics($2);"},
		{"trigger": "I-SWITCH\tinit", "contents": "SWITCH ${1:switch} = new SWITCH($2);"},
		{"trigger": "I-SWMaskTexture\tinit", "contents": "SWMaskTexture ${1:texture} = new SWMaskTexture($2);"},
		{"trigger": "I-SWPaint\tinit", "contents": "SWPaint ${1:paint} = new SWPaint($2);"},
		{"trigger": "I-SWPipeline\tinit", "contents": "SWPipeline ${1:pipeline} = new SWPipeline($2);"},
		{"trigger": "I-SWPresentable\tinit", "contents": "SWPresentable ${1:presentable} = new SWPresentable($2);"},
		{"trigger": "I-SWRTTexture\tinit", "contents": "SWRTTexture ${1:texture} = new SWRTTexture($2);"},
		{"trigger": "I-SWResourceFactory\tinit", "contents": "SWResourceFactory ${1:factory} = new SWResourceFactory($2);"},
		{"trigger": "I-SWTApplication\tinit", "contents": "SWTApplication ${1:application} = new SWTApplication($2);"},
		{"trigger": "I-SWTClipboard\tinit", "contents": "SWTClipboard ${1:clipboard} = new SWTClipboard($2);"},
		{"trigger": "I-SWTCursor\tinit", "contents": "SWTCursor ${1:cursor} = new SWTCursor($2);"},
		{"trigger": "I-SWTCursors\tinit", "contents": "SWTCursors ${1:cursors} = new SWTCursors($2);"},
		{"trigger": "I-SWTEvents\tinit", "contents": "SWTEvents ${1:events} = new SWTEvents($2);"},
		{"trigger": "I-SWTFXUtils\tinit", "contents": "SWTFXUtils ${1:utils} = new SWTFXUtils($2);"},
		{"trigger": "I-SWTMenuBarDelegate\tinit", "contents": "SWTMenuBarDelegate ${1:delegate} = new SWTMenuBarDelegate($2);"},
		{"trigger": "I-SWTMenuDelegate\tinit", "contents": "SWTMenuDelegate ${1:delegate} = new SWTMenuDelegate($2);"},
		{"trigger": "I-SWTPixels\tinit", "contents": "SWTPixels ${1:pixels} = new SWTPixels($2);"},
		{"trigger": "I-SWTRobot\tinit", "contents": "SWTRobot ${1:robot} = new SWTRobot($2);"},
		{"trigger": "I-SWTTimer\tinit", "contents": "SWTTimer ${1:timer} = new SWTTimer($2);"},
		{"trigger": "I-SWTView\tinit", "contents": "SWTView ${1:view} = new SWTView($2);"},
		{"trigger": "I-SWTWindow\tinit", "contents": "SWTWindow ${1:window} = new SWTWindow($2);"},
		{"trigger": "I-SWTexture\tinit", "contents": "SWTexture ${1:texture} = new SWTexture($2);"},
		{"trigger": "I-SWTexturePool\tinit", "contents": "SWTexturePool ${1:pool} = new SWTexturePool($2);"},
		{"trigger": "I-SWUtils\tinit", "contents": "SWUtils ${1:utils} = new SWUtils($2);"},
		{"trigger": "I-SYNC_WITH_TRANSPORT\tinit", "contents": "SYNC_WITH_TRANSPORT ${1:sync} = new SYNC_WITH_TRANSPORT($2);"},
		{"trigger": "I-SYSTEM_EXCEPTION\tinit", "contents": "SYSTEM_EXCEPTION ${1:system} = new SYSTEM_EXCEPTION($2);"},
		{"trigger": "I-SafeVarargs\tinit", "contents": "SafeVarargs ${1:varargs} = new SafeVarargs($2);"},
		{"trigger": "I-SampleModel\tinit", "contents": "SampleModel ${1:model} = new SampleModel($2);"},
		{"trigger": "I-Sasl\tinit", "contents": "Sasl ${1:sasl} = new Sasl($2);"},
		{"trigger": "I-SaslClient\tinit", "contents": "SaslClient ${1:client} = new SaslClient($2);"},
		{"trigger": "I-SaslClientFactory\tinit", "contents": "SaslClientFactory ${1:factory} = new SaslClientFactory($2);"},
		{"trigger": "I-SaslException\tinit", "contents": "SaslException ${1:exception} = new SaslException($2);"},
		{"trigger": "I-SaslServer\tinit", "contents": "SaslServer ${1:server} = new SaslServer($2);"},
		{"trigger": "I-SaslServerFactory\tinit", "contents": "SaslServerFactory ${1:factory} = new SaslServerFactory($2);"},
		{"trigger": "I-Savepoint\tinit", "contents": "Savepoint ${1:savepoint} = new Savepoint($2);"},
		{"trigger": "I-Scale\tinit", "contents": "Scale ${1:scale} = new Scale($2);"},
		{"trigger": "I-ScaleBuilder\tinit", "contents": "ScaleBuilder ${1:builder} = new ScaleBuilder($2);"},
		{"trigger": "I-ScaleTransition\tinit", "contents": "ScaleTransition ${1:transition} = new ScaleTransition($2);"},
		{"trigger": "I-ScaleTransitionBuilder\tinit", "contents": "ScaleTransitionBuilder ${1:builder} = new ScaleTransitionBuilder($2);"},
		{"trigger": "I-ScalerFactory\tinit", "contents": "ScalerFactory ${1:factory} = new ScalerFactory($2);"},
		{"trigger": "I-Scanner\tinit", "contents": "Scanner ${1:input} = new Scanner(${2:System.in});"},
		{"trigger": "I-ScatterChart\tinit", "contents": "ScatterChart ${1:chart} = new ScatterChart($2);"},
		{"trigger": "I-ScatterChartBuilder\tinit", "contents": "ScatterChartBuilder ${1:builder} = new ScatterChartBuilder($2);"},
		{"trigger": "I-ScatteringByteChannel\tinit", "contents": "ScatteringByteChannel ${1:channel} = new ScatteringByteChannel($2);"},
		{"trigger": "I-Scene\tinit", "contents": "Scene ${1:scene} = new Scene($2);"},
		{"trigger": "I-SceneAntialiasing\tinit", "contents": "SceneAntialiasing ${1:antialiasing} = new SceneAntialiasing($2);"},
		{"trigger": "I-SceneBuilder\tinit", "contents": "SceneBuilder ${1:builder} = new SceneBuilder($2);"},
		{"trigger": "I-SceneEventDispatcher\tinit", "contents": "SceneEventDispatcher ${1:dispatcher} = new SceneEventDispatcher($2);"},
		{"trigger": "I-SceneHelper\tinit", "contents": "SceneHelper ${1:helper} = new SceneHelper($2);"},
		{"trigger": "I-SceneState\tinit", "contents": "SceneState ${1:state} = new SceneState($2);"},
		{"trigger": "I-SceneTraversalEngine\tinit", "contents": "SceneTraversalEngine ${1:engine} = new SceneTraversalEngine($2);"},
		{"trigger": "I-SceneUtils\tinit", "contents": "SceneUtils ${1:utils} = new SceneUtils($2);"},
		{"trigger": "I-ScheduledExecutorService\tinit", "contents": "ScheduledExecutorService ${1:service} = new ScheduledExecutorService($2);"},
		{"trigger": "I-ScheduledFuture\tinit", "contents": "ScheduledFuture ${1:future} = new ScheduledFuture($2);"},
		{"trigger": "I-ScheduledService\tinit", "contents": "ScheduledService ${1:service} = new ScheduledService($2);"},
		{"trigger": "I-ScheduledThreadPoolExecutor\tinit", "contents": "ScheduledThreadPoolExecutor ${1:executor} = new ScheduledThreadPoolExecutor($2);"},
		{"trigger": "I-Schema\tinit", "contents": "Schema ${1:schema} = new Schema($2);"},
		{"trigger": "I-SchemaContentHandler\tinit", "contents": "SchemaContentHandler ${1:handler} = new SchemaContentHandler($2);"},
		{"trigger": "I-SchemaDOM\tinit", "contents": "SchemaDOM ${1:schemadom} = new SchemaDOM($2);"},
		{"trigger": "I-SchemaDOMImplementation\tinit", "contents": "SchemaDOMImplementation ${1:implementation} = new SchemaDOMImplementation($2);"},
		{"trigger": "I-SchemaDOMParser\tinit", "contents": "SchemaDOMParser ${1:parser} = new SchemaDOMParser($2);"},
		{"trigger": "I-SchemaDVFactory\tinit", "contents": "SchemaDVFactory ${1:factory} = new SchemaDVFactory($2);"},
		{"trigger": "I-SchemaDVFactoryImpl\tinit", "contents": "SchemaDVFactoryImpl ${1:impl} = new SchemaDVFactoryImpl($2);"},
		{"trigger": "I-SchemaDateTimeException\tinit", "contents": "SchemaDateTimeException ${1:exception} = new SchemaDateTimeException($2);"},
		{"trigger": "I-SchemaFactory\tinit", "contents": "SchemaFactory ${1:factory} = new SchemaFactory($2);"},
		{"trigger": "I-SchemaFactoryConfigurationError\tinit", "contents": "SchemaFactoryConfigurationError ${1:error} = new SchemaFactoryConfigurationError($2);"},
		{"trigger": "I-SchemaFactoryFinder\tinit", "contents": "SchemaFactoryFinder ${1:finder} = new SchemaFactoryFinder($2);"},
		{"trigger": "I-SchemaFactoryLoader\tinit", "contents": "SchemaFactoryLoader ${1:loader} = new SchemaFactoryLoader($2);"},
		{"trigger": "I-SchemaGrammar\tinit", "contents": "SchemaGrammar ${1:grammar} = new SchemaGrammar($2);"},
		{"trigger": "I-SchemaNamespaceSupport\tinit", "contents": "SchemaNamespaceSupport ${1:support} = new SchemaNamespaceSupport($2);"},
		{"trigger": "I-SchemaOutputResolver\tinit", "contents": "SchemaOutputResolver ${1:resolver} = new SchemaOutputResolver($2);"},
		{"trigger": "I-SchemaParsingConfig\tinit", "contents": "SchemaParsingConfig ${1:config} = new SchemaParsingConfig($2);"},
		{"trigger": "I-SchemaSymbols\tinit", "contents": "SchemaSymbols ${1:symbols} = new SchemaSymbols($2);"},
		{"trigger": "I-SchemaValidatorConfiguration\tinit", "contents": "SchemaValidatorConfiguration ${1:configuration} = new SchemaValidatorConfiguration($2);"},
		{"trigger": "I-SchemaViolationException\tinit", "contents": "SchemaViolationException ${1:exception} = new SchemaViolationException($2);"},
		{"trigger": "I-Scope\tinit", "contents": "Scope ${1:scope} = new Scope($2);"},
		{"trigger": "I-Screen\tinit", "contents": "Screen ${1:screen} = new Screen($2);"},
		{"trigger": "I-ScreenConfigurationAccessor\tinit", "contents": "ScreenConfigurationAccessor ${1:accessor} = new ScreenConfigurationAccessor($2);"},
		{"trigger": "I-ScreenHelper\tinit", "contents": "ScreenHelper ${1:helper} = new ScreenHelper($2);"},
		{"trigger": "I-ScriptContext\tinit", "contents": "ScriptContext ${1:context} = new ScriptContext($2);"},
		{"trigger": "I-ScriptEngine\tinit", "contents": "ScriptEngine ${1:engine} = new ScriptEngine($2);"},
		{"trigger": "I-ScriptEngineFactory\tinit", "contents": "ScriptEngineFactory ${1:factory} = new ScriptEngineFactory($2);"},
		{"trigger": "I-ScriptEngineManager\tinit", "contents": "ScriptEngineManager ${1:manager} = new ScriptEngineManager($2);"},
		{"trigger": "I-ScriptException\tinit", "contents": "ScriptException ${1:exception} = new ScriptException($2);"},
		{"trigger": "I-ScriptMapper\tinit", "contents": "ScriptMapper ${1:mapper} = new ScriptMapper($2);"},
		{"trigger": "I-ScrollBar\tinit", "contents": "ScrollBar ${1:bar} = new ScrollBar($2);"},
		{"trigger": "I-ScrollBarBehavior\tinit", "contents": "ScrollBarBehavior ${1:behavior} = new ScrollBarBehavior($2);"},
		{"trigger": "I-ScrollBarBuilder\tinit", "contents": "ScrollBarBuilder ${1:builder} = new ScrollBarBuilder($2);"},
		{"trigger": "I-ScrollBarButtonPainter\tinit", "contents": "ScrollBarButtonPainter ${1:painter} = new ScrollBarButtonPainter($2);"},
		{"trigger": "I-ScrollBarPainter\tinit", "contents": "ScrollBarPainter ${1:painter} = new ScrollBarPainter($2);"},
		{"trigger": "I-ScrollBarSkin\tinit", "contents": "ScrollBarSkin ${1:skin} = new ScrollBarSkin($2);"},
		{"trigger": "I-ScrollBarTheme\tinit", "contents": "ScrollBarTheme ${1:theme} = new ScrollBarTheme($2);"},
		{"trigger": "I-ScrollBarThemeImpl\tinit", "contents": "ScrollBarThemeImpl ${1:impl} = new ScrollBarThemeImpl($2);"},
		{"trigger": "I-ScrollBarThumbPainter\tinit", "contents": "ScrollBarThumbPainter ${1:painter} = new ScrollBarThumbPainter($2);"},
		{"trigger": "I-ScrollBarTrackPainter\tinit", "contents": "ScrollBarTrackPainter ${1:painter} = new ScrollBarTrackPainter($2);"},
		{"trigger": "I-ScrollBarUI\tinit", "contents": "ScrollBarUI ${1:scrollbarui} = new ScrollBarUI($2);"},
		{"trigger": "I-ScrollEvent\tinit", "contents": "ScrollEvent ${1:event} = new ScrollEvent($2);"},
		{"trigger": "I-ScrollGestureRecognizer\tinit", "contents": "ScrollGestureRecognizer ${1:recognizer} = new ScrollGestureRecognizer($2);"},
		{"trigger": "I-ScrollPane\tinit", "contents": "ScrollPane ${1:pane} = new ScrollPane($2);"},
		{"trigger": "I-ScrollPaneAdjustable\tinit", "contents": "ScrollPaneAdjustable ${1:adjustable} = new ScrollPaneAdjustable($2);"},
		{"trigger": "I-ScrollPaneBehavior\tinit", "contents": "ScrollPaneBehavior ${1:behavior} = new ScrollPaneBehavior($2);"},
		{"trigger": "I-ScrollPaneBuilder\tinit", "contents": "ScrollPaneBuilder ${1:builder} = new ScrollPaneBuilder($2);"},
		{"trigger": "I-ScrollPaneConstants\tinit", "contents": "ScrollPaneConstants ${1:constants} = new ScrollPaneConstants($2);"},
		{"trigger": "I-ScrollPaneLayout\tinit", "contents": "ScrollPaneLayout ${1:layout} = new ScrollPaneLayout($2);"},
		{"trigger": "I-ScrollPanePainter\tinit", "contents": "ScrollPanePainter ${1:painter} = new ScrollPanePainter($2);"},
		{"trigger": "I-ScrollPanePeer\tinit", "contents": "ScrollPanePeer ${1:peer} = new ScrollPanePeer($2);"},
		{"trigger": "I-ScrollPaneSkin\tinit", "contents": "ScrollPaneSkin ${1:skin} = new ScrollPaneSkin($2);"},
		{"trigger": "I-ScrollPaneUI\tinit", "contents": "ScrollPaneUI ${1:scrollpaneui} = new ScrollPaneUI($2);"},
		{"trigger": "I-ScrollToEvent\tinit", "contents": "ScrollToEvent ${1:event} = new ScrollToEvent($2);"},
		{"trigger": "I-Scrollable\tinit", "contents": "Scrollable ${1:scrollable} = new Scrollable($2);"},
		{"trigger": "I-Scrollbar\tinit", "contents": "Scrollbar ${1:scrollbar} = new Scrollbar($2);"},
		{"trigger": "I-ScrollbarPeer\tinit", "contents": "ScrollbarPeer ${1:peer} = new ScrollbarPeer($2);"},
		{"trigger": "I-SdpSocketImpl\tinit", "contents": "SdpSocketImpl ${1:impl} = new SdpSocketImpl($2);"},
		{"trigger": "I-SearchControls\tinit", "contents": "SearchControls ${1:controls} = new SearchControls($2);"},
		{"trigger": "I-SearchResult\tinit", "contents": "SearchResult ${1:result} = new SearchResult($2);"},
		{"trigger": "I-SecondaryLoop\tinit", "contents": "SecondaryLoop ${1:loop} = new SecondaryLoop($2);"},
		{"trigger": "I-SecretKeyResolver\tinit", "contents": "SecretKeyResolver ${1:resolver} = new SecretKeyResolver($2);"},
		{"trigger": "I-SecureCacheResponse\tinit", "contents": "SecureCacheResponse ${1:response} = new SecureCacheResponse($2);"},
		{"trigger": "I-SecureClassLoader\tinit", "contents": "SecureClassLoader ${1:loader} = new SecureClassLoader($2);"},
		{"trigger": "I-SecureClassLoaderRepository\tinit", "contents": "SecureClassLoaderRepository ${1:repository} = new SecureClassLoaderRepository($2);"},
		{"trigger": "I-SecureDirectoryStream\tinit", "contents": "SecureDirectoryStream ${1:stream} = new SecureDirectoryStream($2);"},
		{"trigger": "I-SecureRandom\tinit", "contents": "SecureRandom ${1:random} = new SecureRandom($2);"},
		{"trigger": "I-SecureRandomSpi\tinit", "contents": "SecureRandomSpi ${1:spi} = new SecureRandomSpi($2);"},
		{"trigger": "I-Security\tinit", "contents": "Security ${1:security} = new Security($2);"},
		{"trigger": "I-SecurityConfiguration\tinit", "contents": "SecurityConfiguration ${1:configuration} = new SecurityConfiguration($2);"},
		{"trigger": "I-SecurityException\tinit", "contents": "SecurityException ${1:exception} = new SecurityException($2);"},
		{"trigger": "I-SecurityManager\tinit", "contents": "SecurityManager ${1:manager} = new SecurityManager($2);"},
		{"trigger": "I-SecurityPermission\tinit", "contents": "SecurityPermission ${1:permission} = new SecurityPermission($2);"},
		{"trigger": "I-SecuritySupport\tinit", "contents": "SecuritySupport ${1:support} = new SecuritySupport($2);"},
		{"trigger": "I-SeeTag\tinit", "contents": "SeeTag ${1:tag} = new SeeTag($2);"},
		{"trigger": "I-SeeTree\tinit", "contents": "SeeTree ${1:tree} = new SeeTree($2);"},
		{"trigger": "I-SeekableByteChannel\tinit", "contents": "SeekableByteChannel ${1:channel} = new SeekableByteChannel($2);"},
		{"trigger": "I-Segment\tinit", "contents": "Segment ${1:segment} = new Segment($2);"},
		{"trigger": "I-SegmentCache\tinit", "contents": "SegmentCache ${1:cache} = new SegmentCache($2);"},
		{"trigger": "I-Select\tinit", "contents": "Select ${1:select} = new Select($2);"},
		{"trigger": "I-SelectBinding\tinit", "contents": "SelectBinding ${1:binding} = new SelectBinding($2);"},
		{"trigger": "I-SelectableChannel\tinit", "contents": "SelectableChannel ${1:channel} = new SelectableChannel($2);"},
		{"trigger": "I-SelectedCellsMap\tinit", "contents": "SelectedCellsMap ${1:map} = new SelectedCellsMap($2);"},
		{"trigger": "I-SelectionKey\tinit", "contents": "SelectionKey ${1:key} = new SelectionKey($2);"},
		{"trigger": "I-SelectionMode\tinit", "contents": "SelectionMode ${1:mode} = new SelectionMode($2);"},
		{"trigger": "I-SelectionModel\tinit", "contents": "SelectionModel ${1:model} = new SelectionModel($2);"},
		{"trigger": "I-Selector\tinit", "contents": "Selector ${1:selector} = new Selector($2);"},
		{"trigger": "I-SelectorPartitioning\tinit", "contents": "SelectorPartitioning ${1:partitioning} = new SelectorPartitioning($2);"},
		{"trigger": "I-SelectorProvider\tinit", "contents": "SelectorProvider ${1:provider} = new SelectorProvider($2);"},
		{"trigger": "I-SelfIteratorNoPredicate\tinit", "contents": "SelfIteratorNoPredicate ${1:predicate} = new SelfIteratorNoPredicate($2);"},
		{"trigger": "I-Semaphore\tinit", "contents": "Semaphore ${1:semaphore} = new Semaphore($2);"},
		{"trigger": "I-SendingContextServiceContext\tinit", "contents": "SendingContextServiceContext ${1:context} = new SendingContextServiceContext($2);"},
		{"trigger": "I-SentEvent\tinit", "contents": "SentEvent ${1:event} = new SentEvent($2);"},
		{"trigger": "I-Separator\tinit", "contents": "Separator ${1:separator} = new Separator($2);"},
		{"trigger": "I-SeparatorBuilder\tinit", "contents": "SeparatorBuilder ${1:builder} = new SeparatorBuilder($2);"},
		{"trigger": "I-SeparatorMenuItem\tinit", "contents": "SeparatorMenuItem ${1:item} = new SeparatorMenuItem($2);"},
		{"trigger": "I-SeparatorMenuItemBase\tinit", "contents": "SeparatorMenuItemBase ${1:base} = new SeparatorMenuItemBase($2);"},
		{"trigger": "I-SeparatorMenuItemBuilder\tinit", "contents": "SeparatorMenuItemBuilder ${1:builder} = new SeparatorMenuItemBuilder($2);"},
		{"trigger": "I-SeparatorPainter\tinit", "contents": "SeparatorPainter ${1:painter} = new SeparatorPainter($2);"},
		{"trigger": "I-SeparatorSkin\tinit", "contents": "SeparatorSkin ${1:skin} = new SeparatorSkin($2);"},
		{"trigger": "I-SeparatorUI\tinit", "contents": "SeparatorUI ${1:separatorui} = new SeparatorUI($2);"},
		{"trigger": "I-SepiaTone\tinit", "contents": "SepiaTone ${1:tone} = new SepiaTone($2);"},
		{"trigger": "I-SepiaToneBuilder\tinit", "contents": "SepiaToneBuilder ${1:builder} = new SepiaToneBuilder($2);"},
		{"trigger": "I-Sequence\tinit", "contents": "Sequence ${1:sequence} = new Sequence($2);"},
		{"trigger": "I-SequenceInputStream\tinit", "contents": "SequenceInputStream ${1:stream} = new SequenceInputStream($2);"},
		{"trigger": "I-SequencedEvent\tinit", "contents": "SequencedEvent ${1:event} = new SequencedEvent($2);"},
		{"trigger": "I-Sequencer\tinit", "contents": "Sequencer ${1:sequencer} = new Sequencer($2);"},
		{"trigger": "I-SequentialTransition\tinit", "contents": "SequentialTransition ${1:transition} = new SequentialTransition($2);"},
		{"trigger": "I-SequentialTransitionBuilder\tinit", "contents": "SequentialTransitionBuilder ${1:builder} = new SequentialTransitionBuilder($2);"},
		{"trigger": "I-Ser\tinit", "contents": "Ser ${1:ser} = new Ser($2);"},
		{"trigger": "I-SerialArray\tinit", "contents": "SerialArray ${1:array} = new SerialArray($2);"},
		{"trigger": "I-SerialBlob\tinit", "contents": "SerialBlob ${1:blob} = new SerialBlob($2);"},
		{"trigger": "I-SerialCallbackContext\tinit", "contents": "SerialCallbackContext ${1:context} = new SerialCallbackContext($2);"},
		{"trigger": "I-SerialClob\tinit", "contents": "SerialClob ${1:clob} = new SerialClob($2);"},
		{"trigger": "I-SerialDataTree\tinit", "contents": "SerialDataTree ${1:tree} = new SerialDataTree($2);"},
		{"trigger": "I-SerialDatalink\tinit", "contents": "SerialDatalink ${1:datalink} = new SerialDatalink($2);"},
		{"trigger": "I-SerialException\tinit", "contents": "SerialException ${1:exception} = new SerialException($2);"},
		{"trigger": "I-SerialFieldTag\tinit", "contents": "SerialFieldTag ${1:tag} = new SerialFieldTag($2);"},
		{"trigger": "I-SerialFieldTree\tinit", "contents": "SerialFieldTree ${1:tree} = new SerialFieldTree($2);"},
		{"trigger": "I-SerialJavaObject\tinit", "contents": "SerialJavaObject ${1:object} = new SerialJavaObject($2);"},
		{"trigger": "I-SerialRef\tinit", "contents": "SerialRef ${1:ref} = new SerialRef($2);"},
		{"trigger": "I-SerialStruct\tinit", "contents": "SerialStruct ${1:struct} = new SerialStruct($2);"},
		{"trigger": "I-SerialTree\tinit", "contents": "SerialTree ${1:tree} = new SerialTree($2);"},
		{"trigger": "I-Serializable\tinit", "contents": "Serializable ${1:serializable} = new Serializable($2);"},
		{"trigger": "I-SerializableLocatorImpl\tinit", "contents": "SerializableLocatorImpl ${1:impl} = new SerializableLocatorImpl($2);"},
		{"trigger": "I-SerializablePermission\tinit", "contents": "SerializablePermission ${1:permission} = new SerializablePermission($2);"},
		{"trigger": "I-SerializationHandler\tinit", "contents": "SerializationHandler ${1:handler} = new SerializationHandler($2);"},
		{"trigger": "I-SerializationTester\tinit", "contents": "SerializationTester ${1:tester} = new SerializationTester($2);"},
		{"trigger": "I-SerializedLambda\tinit", "contents": "SerializedLambda ${1:lambda} = new SerializedLambda($2);"},
		{"trigger": "I-Serializer\tinit", "contents": "Serializer ${1:serializer} = new Serializer($2);"},
		{"trigger": "I-SerializerBase\tinit", "contents": "SerializerBase ${1:base} = new SerializerBase($2);"},
		{"trigger": "I-SerializerConstants\tinit", "contents": "SerializerConstants ${1:constants} = new SerializerConstants($2);"},
		{"trigger": "I-SerializerFactory\tinit", "contents": "SerializerFactory ${1:factory} = new SerializerFactory($2);"},
		{"trigger": "I-SerializerFactoryImpl\tinit", "contents": "SerializerFactoryImpl ${1:impl} = new SerializerFactoryImpl($2);"},
		{"trigger": "I-SerializerMessages\tinit", "contents": "SerializerMessages ${1:messages} = new SerializerMessages($2);"},
		{"trigger": "I-SerializerMessages_sv\tinit", "contents": "SerializerMessages_sv ${1:sv} = new SerializerMessages_sv($2);"},
		{"trigger": "I-SerializerMessages_zh_CN\tinit", "contents": "SerializerMessages_zh_CN ${1:serializermessages} = new SerializerMessages_zh_CN($2);"},
		{"trigger": "I-SerializerMessages_zh_TW\tinit", "contents": "SerializerMessages_zh_TW ${1:serializermessages} = new SerializerMessages_zh_TW($2);"},
		{"trigger": "I-SerializerTrace\tinit", "contents": "SerializerTrace ${1:trace} = new SerializerTrace($2);"},
		{"trigger": "I-SerializerTraceWriter\tinit", "contents": "SerializerTraceWriter ${1:writer} = new SerializerTraceWriter($2);"},
		{"trigger": "I-Servant\tinit", "contents": "Servant ${1:servant} = new Servant($2);"},
		{"trigger": "I-ServantActivator\tinit", "contents": "ServantActivator ${1:activator} = new ServantActivator($2);"},
		{"trigger": "I-ServantActivatorHelper\tinit", "contents": "ServantActivatorHelper ${1:helper} = new ServantActivatorHelper($2);"},
		{"trigger": "I-ServantActivatorOperations\tinit", "contents": "ServantActivatorOperations ${1:operations} = new ServantActivatorOperations($2);"},
		{"trigger": "I-ServantActivatorPOA\tinit", "contents": "ServantActivatorPOA ${1:servantactivatorpoa} = new ServantActivatorPOA($2);"},
		{"trigger": "I-ServantAlreadyActive\tinit", "contents": "ServantAlreadyActive ${1:active} = new ServantAlreadyActive($2);"},
		{"trigger": "I-ServantAlreadyActiveHelper\tinit", "contents": "ServantAlreadyActiveHelper ${1:helper} = new ServantAlreadyActiveHelper($2);"},
		{"trigger": "I-ServantCachingPolicy\tinit", "contents": "ServantCachingPolicy ${1:policy} = new ServantCachingPolicy($2);"},
		{"trigger": "I-ServantLocator\tinit", "contents": "ServantLocator ${1:locator} = new ServantLocator($2);"},
		{"trigger": "I-ServantLocatorHelper\tinit", "contents": "ServantLocatorHelper ${1:helper} = new ServantLocatorHelper($2);"},
		{"trigger": "I-ServantLocatorOperations\tinit", "contents": "ServantLocatorOperations ${1:operations} = new ServantLocatorOperations($2);"},
		{"trigger": "I-ServantLocatorPOA\tinit", "contents": "ServantLocatorPOA ${1:servantlocatorpoa} = new ServantLocatorPOA($2);"},
		{"trigger": "I-ServantManager\tinit", "contents": "ServantManager ${1:manager} = new ServantManager($2);"},
		{"trigger": "I-ServantManagerOperations\tinit", "contents": "ServantManagerOperations ${1:operations} = new ServantManagerOperations($2);"},
		{"trigger": "I-ServantNotActive\tinit", "contents": "ServantNotActive ${1:active} = new ServantNotActive($2);"},
		{"trigger": "I-ServantNotActiveHelper\tinit", "contents": "ServantNotActiveHelper ${1:helper} = new ServantNotActiveHelper($2);"},
		{"trigger": "I-ServantObject\tinit", "contents": "ServantObject ${1:object} = new ServantObject($2);"},
		{"trigger": "I-ServantRetentionPolicy\tinit", "contents": "ServantRetentionPolicy ${1:policy} = new ServantRetentionPolicy($2);"},
		{"trigger": "I-ServantRetentionPolicyOperations\tinit", "contents": "ServantRetentionPolicyOperations ${1:operations} = new ServantRetentionPolicyOperations($2);"},
		{"trigger": "I-ServantRetentionPolicyValue\tinit", "contents": "ServantRetentionPolicyValue ${1:value} = new ServantRetentionPolicyValue($2);"},
		{"trigger": "I-Server\tinit", "contents": "Server ${1:server} = new Server($2);"},
		{"trigger": "I-ServerAlreadyActive\tinit", "contents": "ServerAlreadyActive ${1:active} = new ServerAlreadyActive($2);"},
		{"trigger": "I-ServerAlreadyActiveHelper\tinit", "contents": "ServerAlreadyActiveHelper ${1:helper} = new ServerAlreadyActiveHelper($2);"},
		{"trigger": "I-ServerAlreadyActiveHolder\tinit", "contents": "ServerAlreadyActiveHolder ${1:holder} = new ServerAlreadyActiveHolder($2);"},
		{"trigger": "I-ServerAlreadyInstalled\tinit", "contents": "ServerAlreadyInstalled ${1:installed} = new ServerAlreadyInstalled($2);"},
		{"trigger": "I-ServerAlreadyInstalledHelper\tinit", "contents": "ServerAlreadyInstalledHelper ${1:helper} = new ServerAlreadyInstalledHelper($2);"},
		{"trigger": "I-ServerAlreadyInstalledHolder\tinit", "contents": "ServerAlreadyInstalledHolder ${1:holder} = new ServerAlreadyInstalledHolder($2);"},
		{"trigger": "I-ServerAlreadyRegistered\tinit", "contents": "ServerAlreadyRegistered ${1:registered} = new ServerAlreadyRegistered($2);"},
		{"trigger": "I-ServerAlreadyRegisteredHelper\tinit", "contents": "ServerAlreadyRegisteredHelper ${1:helper} = new ServerAlreadyRegisteredHelper($2);"},
		{"trigger": "I-ServerAlreadyRegisteredHolder\tinit", "contents": "ServerAlreadyRegisteredHolder ${1:holder} = new ServerAlreadyRegisteredHolder($2);"},
		{"trigger": "I-ServerAlreadyUninstalled\tinit", "contents": "ServerAlreadyUninstalled ${1:uninstalled} = new ServerAlreadyUninstalled($2);"},
		{"trigger": "I-ServerAlreadyUninstalledHelper\tinit", "contents": "ServerAlreadyUninstalledHelper ${1:helper} = new ServerAlreadyUninstalledHelper($2);"},
		{"trigger": "I-ServerAlreadyUninstalledHolder\tinit", "contents": "ServerAlreadyUninstalledHolder ${1:holder} = new ServerAlreadyUninstalledHolder($2);"},
		{"trigger": "I-ServerCloneException\tinit", "contents": "ServerCloneException ${1:exception} = new ServerCloneException($2);"},
		{"trigger": "I-ServerCommunicatorAdmin\tinit", "contents": "ServerCommunicatorAdmin ${1:admin} = new ServerCommunicatorAdmin($2);"},
		{"trigger": "I-ServerDef\tinit", "contents": "ServerDef ${1:def} = new ServerDef($2);"},
		{"trigger": "I-ServerDefHelper\tinit", "contents": "ServerDefHelper ${1:helper} = new ServerDefHelper($2);"},
		{"trigger": "I-ServerDefHolder\tinit", "contents": "ServerDefHolder ${1:holder} = new ServerDefHolder($2);"},
		{"trigger": "I-ServerError\tinit", "contents": "ServerError ${1:error} = new ServerError($2);"},
		{"trigger": "I-ServerException\tinit", "contents": "ServerException ${1:exception} = new ServerException($2);"},
		{"trigger": "I-ServerHeldDown\tinit", "contents": "ServerHeldDown ${1:down} = new ServerHeldDown($2);"},
		{"trigger": "I-ServerHeldDownHelper\tinit", "contents": "ServerHeldDownHelper ${1:helper} = new ServerHeldDownHelper($2);"},
		{"trigger": "I-ServerHeldDownHolder\tinit", "contents": "ServerHeldDownHolder ${1:holder} = new ServerHeldDownHolder($2);"},
		{"trigger": "I-ServerHelper\tinit", "contents": "ServerHelper ${1:helper} = new ServerHelper($2);"},
		{"trigger": "I-ServerHolder\tinit", "contents": "ServerHolder ${1:holder} = new ServerHolder($2);"},
		{"trigger": "I-ServerIdHelper\tinit", "contents": "ServerIdHelper ${1:helper} = new ServerIdHelper($2);"},
		{"trigger": "I-ServerIdsHelper\tinit", "contents": "ServerIdsHelper ${1:helper} = new ServerIdsHelper($2);"},
		{"trigger": "I-ServerIdsHolder\tinit", "contents": "ServerIdsHolder ${1:holder} = new ServerIdsHolder($2);"},
		{"trigger": "I-ServerLocation\tinit", "contents": "ServerLocation ${1:location} = new ServerLocation($2);"},
		{"trigger": "I-ServerLocationHelper\tinit", "contents": "ServerLocationHelper ${1:helper} = new ServerLocationHelper($2);"},
		{"trigger": "I-ServerLocationHolder\tinit", "contents": "ServerLocationHolder ${1:holder} = new ServerLocationHolder($2);"},
		{"trigger": "I-ServerLocationPerORB\tinit", "contents": "ServerLocationPerORB ${1:serverlocationperorb} = new ServerLocationPerORB($2);"},
		{"trigger": "I-ServerLocationPerORBHelper\tinit", "contents": "ServerLocationPerORBHelper ${1:helper} = new ServerLocationPerORBHelper($2);"},
		{"trigger": "I-ServerLocationPerORBHolder\tinit", "contents": "ServerLocationPerORBHolder ${1:holder} = new ServerLocationPerORBHolder($2);"},
		{"trigger": "I-ServerManager\tinit", "contents": "ServerManager ${1:manager} = new ServerManager($2);"},
		{"trigger": "I-ServerManagerHelper\tinit", "contents": "ServerManagerHelper ${1:helper} = new ServerManagerHelper($2);"},
		{"trigger": "I-ServerManagerHolder\tinit", "contents": "ServerManagerHolder ${1:holder} = new ServerManagerHolder($2);"},
		{"trigger": "I-ServerManagerOperations\tinit", "contents": "ServerManagerOperations ${1:operations} = new ServerManagerOperations($2);"},
		{"trigger": "I-ServerNotActive\tinit", "contents": "ServerNotActive ${1:active} = new ServerNotActive($2);"},
		{"trigger": "I-ServerNotActiveException\tinit", "contents": "ServerNotActiveException ${1:exception} = new ServerNotActiveException($2);"},
		{"trigger": "I-ServerNotActiveHelper\tinit", "contents": "ServerNotActiveHelper ${1:helper} = new ServerNotActiveHelper($2);"},
		{"trigger": "I-ServerNotActiveHolder\tinit", "contents": "ServerNotActiveHolder ${1:holder} = new ServerNotActiveHolder($2);"},
		{"trigger": "I-ServerNotRegistered\tinit", "contents": "ServerNotRegistered ${1:registered} = new ServerNotRegistered($2);"},
		{"trigger": "I-ServerNotRegisteredHelper\tinit", "contents": "ServerNotRegisteredHelper ${1:helper} = new ServerNotRegisteredHelper($2);"},
		{"trigger": "I-ServerNotRegisteredHolder\tinit", "contents": "ServerNotRegisteredHolder ${1:holder} = new ServerNotRegisteredHolder($2);"},
		{"trigger": "I-ServerNotifForwarder\tinit", "contents": "ServerNotifForwarder ${1:forwarder} = new ServerNotifForwarder($2);"},
		{"trigger": "I-ServerOperations\tinit", "contents": "ServerOperations ${1:operations} = new ServerOperations($2);"},
		{"trigger": "I-ServerProvider\tinit", "contents": "ServerProvider ${1:provider} = new ServerProvider($2);"},
		{"trigger": "I-ServerRef\tinit", "contents": "ServerRef ${1:ref} = new ServerRef($2);"},
		{"trigger": "I-ServerRequest\tinit", "contents": "ServerRequest ${1:request} = new ServerRequest($2);"},
		{"trigger": "I-ServerRequestInfo\tinit", "contents": "ServerRequestInfo ${1:info} = new ServerRequestInfo($2);"},
		{"trigger": "I-ServerRequestInfoOperations\tinit", "contents": "ServerRequestInfoOperations ${1:operations} = new ServerRequestInfoOperations($2);"},
		{"trigger": "I-ServerRequestInterceptor\tinit", "contents": "ServerRequestInterceptor ${1:interceptor} = new ServerRequestInterceptor($2);"},
		{"trigger": "I-ServerRequestInterceptorOperations\tinit", "contents": "ServerRequestInterceptorOperations ${1:operations} = new ServerRequestInterceptorOperations($2);"},
		{"trigger": "I-ServerRuntimeException\tinit", "contents": "ServerRuntimeException ${1:exception} = new ServerRuntimeException($2);"},
		{"trigger": "I-ServerSocket\tinit", "contents": "ServerSocket ${1:socket} = new ServerSocket(${2:port});"},
		{"trigger": "I-ServerSocketChannel\tinit", "contents": "ServerSocketChannel ${1:channel} = new ServerSocketChannel($2);"},
		{"trigger": "I-Service\tinit", "contents": "Service ${1:service} = new Service($2);"},
		{"trigger": "I-ServiceConfigurationError\tinit", "contents": "ServiceConfigurationError ${1:error} = new ServiceConfigurationError($2);"},
		{"trigger": "I-ServiceContext\tinit", "contents": "ServiceContext ${1:context} = new ServiceContext($2);"},
		{"trigger": "I-ServiceContextData\tinit", "contents": "ServiceContextData ${1:data} = new ServiceContextData($2);"},
		{"trigger": "I-ServiceContextHelper\tinit", "contents": "ServiceContextHelper ${1:helper} = new ServiceContextHelper($2);"},
		{"trigger": "I-ServiceContextHolder\tinit", "contents": "ServiceContextHolder ${1:holder} = new ServiceContextHolder($2);"},
		{"trigger": "I-ServiceContextListHelper\tinit", "contents": "ServiceContextListHelper ${1:helper} = new ServiceContextListHelper($2);"},
		{"trigger": "I-ServiceContextListHolder\tinit", "contents": "ServiceContextListHolder ${1:holder} = new ServiceContextListHolder($2);"},
		{"trigger": "I-ServiceContextRegistry\tinit", "contents": "ServiceContextRegistry ${1:registry} = new ServiceContextRegistry($2);"},
		{"trigger": "I-ServiceContexts\tinit", "contents": "ServiceContexts ${1:contexts} = new ServiceContexts($2);"},
		{"trigger": "I-ServiceDelegate\tinit", "contents": "ServiceDelegate ${1:delegate} = new ServiceDelegate($2);"},
		{"trigger": "I-ServiceDetail\tinit", "contents": "ServiceDetail ${1:detail} = new ServiceDetail($2);"},
		{"trigger": "I-ServiceDetailHelper\tinit", "contents": "ServiceDetailHelper ${1:helper} = new ServiceDetailHelper($2);"},
		{"trigger": "I-ServiceIdHelper\tinit", "contents": "ServiceIdHelper ${1:helper} = new ServiceIdHelper($2);"},
		{"trigger": "I-ServiceInformation\tinit", "contents": "ServiceInformation ${1:information} = new ServiceInformation($2);"},
		{"trigger": "I-ServiceInformationHelper\tinit", "contents": "ServiceInformationHelper ${1:helper} = new ServiceInformationHelper($2);"},
		{"trigger": "I-ServiceInformationHolder\tinit", "contents": "ServiceInformationHolder ${1:holder} = new ServiceInformationHolder($2);"},
		{"trigger": "I-ServiceLoader\tinit", "contents": "ServiceLoader ${1:loader} = new ServiceLoader($2);"},
		{"trigger": "I-ServiceMode\tinit", "contents": "ServiceMode ${1:mode} = new ServiceMode($2);"},
		{"trigger": "I-ServiceName\tinit", "contents": "ServiceName ${1:name} = new ServiceName($2);"},
		{"trigger": "I-ServiceNotFoundException\tinit", "contents": "ServiceNotFoundException ${1:exception} = new ServiceNotFoundException($2);"},
		{"trigger": "I-ServicePermission\tinit", "contents": "ServicePermission ${1:permission} = new ServicePermission($2);"},
		{"trigger": "I-ServiceRegistry\tinit", "contents": "ServiceRegistry ${1:registry} = new ServiceRegistry($2);"},
		{"trigger": "I-ServiceUI\tinit", "contents": "ServiceUI ${1:serviceui} = new ServiceUI($2);"},
		{"trigger": "I-ServiceUIFactory\tinit", "contents": "ServiceUIFactory ${1:factory} = new ServiceUIFactory($2);"},
		{"trigger": "I-ServiceUnavailableException\tinit", "contents": "ServiceUnavailableException ${1:exception} = new ServiceUnavailableException($2);"},
		{"trigger": "I-Set\tinit", "contents": "Set<${1:String}> ${2:set} = new ${3:HashSet}<>($4);"},
		{"trigger": "I-SetAdapterChange\tinit", "contents": "SetAdapterChange ${1:change} = new SetAdapterChange($2);"},
		{"trigger": "I-SetBinding\tinit", "contents": "SetBinding ${1:binding} = new SetBinding($2);"},
		{"trigger": "I-SetChangeListener\tinit", "contents": "SetChangeListener ${1:listener} = new SetChangeListener($2);"},
		{"trigger": "I-SetExpression\tinit", "contents": "SetExpression ${1:expression} = new SetExpression($2);"},
		{"trigger": "I-SetExpressionHelper\tinit", "contents": "SetExpressionHelper ${1:helper} = new SetExpressionHelper($2);"},
		{"trigger": "I-SetListenerHelper\tinit", "contents": "SetListenerHelper ${1:helper} = new SetListenerHelper($2);"},
		{"trigger": "I-SetOfIntegerSyntax\tinit", "contents": "SetOfIntegerSyntax ${1:syntax} = new SetOfIntegerSyntax($2);"},
		{"trigger": "I-SetOverrideType\tinit", "contents": "SetOverrideType ${1:type} = new SetOverrideType($2);"},
		{"trigger": "I-SetOverrideTypeHelper\tinit", "contents": "SetOverrideTypeHelper ${1:helper} = new SetOverrideTypeHelper($2);"},
		{"trigger": "I-SetProperty\tinit", "contents": "SetProperty ${1:property} = new SetProperty($2);"},
		{"trigger": "I-SetPropertyBase\tinit", "contents": "SetPropertyBase ${1:base} = new SetPropertyBase($2);"},
		{"trigger": "I-Settings\tinit", "contents": "Settings ${1:settings} = new Settings($2);"},
		{"trigger": "I-Severity\tinit", "contents": "Severity ${1:severity} = new Severity($2);"},
		{"trigger": "I-Shader\tinit", "contents": "Shader ${1:shader} = new Shader($2);"},
		{"trigger": "I-ShaderFactory\tinit", "contents": "ShaderFactory ${1:factory} = new ShaderFactory($2);"},
		{"trigger": "I-ShaderGraphics\tinit", "contents": "ShaderGraphics ${1:graphics} = new ShaderGraphics($2);"},
		{"trigger": "I-ShaderSource\tinit", "contents": "ShaderSource ${1:source} = new ShaderSource($2);"},
		{"trigger": "I-Shadow\tinit", "contents": "Shadow ${1:shadow} = new Shadow($2);"},
		{"trigger": "I-ShadowBuilder\tinit", "contents": "ShadowBuilder ${1:builder} = new ShadowBuilder($2);"},
		{"trigger": "I-ShadowEffect\tinit", "contents": "ShadowEffect ${1:effect} = new ShadowEffect($2);"},
		{"trigger": "I-ShadowedSymbolTable\tinit", "contents": "ShadowedSymbolTable ${1:table} = new ShadowedSymbolTable($2);"},
		{"trigger": "I-Shape\tinit", "contents": "Shape ${1:shape} = new Shape($2);"},
		{"trigger": "I-Shape3D\tinit", "contents": "Shape3D ${1:shape3d} = new Shape3D($2);"},
		{"trigger": "I-ShapeBuilder\tinit", "contents": "ShapeBuilder ${1:builder} = new ShapeBuilder($2);"},
		{"trigger": "I-ShapeConverter\tinit", "contents": "ShapeConverter ${1:converter} = new ShapeConverter($2);"},
		{"trigger": "I-ShapeEvaluator\tinit", "contents": "ShapeEvaluator ${1:evaluator} = new ShapeEvaluator($2);"},
		{"trigger": "I-ShapeGraphicAttribute\tinit", "contents": "ShapeGraphicAttribute ${1:attribute} = new ShapeGraphicAttribute($2);"},
		{"trigger": "I-ShapePair\tinit", "contents": "ShapePair ${1:pair} = new ShapePair($2);"},
		{"trigger": "I-ShapeRasterizer\tinit", "contents": "ShapeRasterizer ${1:rasterizer} = new ShapeRasterizer($2);"},
		{"trigger": "I-ShapeRep\tinit", "contents": "ShapeRep ${1:rep} = new ShapeRep($2);"},
		{"trigger": "I-ShapeUtil\tinit", "contents": "ShapeUtil ${1:util} = new ShapeUtil($2);"},
		{"trigger": "I-SharedBuffer\tinit", "contents": "SharedBuffer ${1:buffer} = new SharedBuffer($2);"},
		{"trigger": "I-Shear\tinit", "contents": "Shear ${1:shear} = new Shear($2);"},
		{"trigger": "I-ShearBuilder\tinit", "contents": "ShearBuilder ${1:builder} = new ShearBuilder($2);"},
		{"trigger": "I-SheetCollate\tinit", "contents": "SheetCollate ${1:collate} = new SheetCollate($2);"},
		{"trigger": "I-Short\tinit", "contents": "Short ${1:short} = new Short($2);"},
		{"trigger": "I-ShortBuffer\tinit", "contents": "ShortBuffer ${1:buffer} = new ShortBuffer($2);"},
		{"trigger": "I-ShortHandPointer\tinit", "contents": "ShortHandPointer ${1:pointer} = new ShortHandPointer($2);"},
		{"trigger": "I-ShortHolder\tinit", "contents": "ShortHolder ${1:holder} = new ShortHolder($2);"},
		{"trigger": "I-ShortList\tinit", "contents": "ShortList ${1:list} = new ShortList($2);"},
		{"trigger": "I-ShortListImpl\tinit", "contents": "ShortListImpl ${1:impl} = new ShortListImpl($2);"},
		{"trigger": "I-ShortLookupTable\tinit", "contents": "ShortLookupTable ${1:table} = new ShortLookupTable($2);"},
		{"trigger": "I-ShortMessage\tinit", "contents": "ShortMessage ${1:message} = new ShortMessage($2);"},
		{"trigger": "I-ShortSeqHelper\tinit", "contents": "ShortSeqHelper ${1:helper} = new ShortSeqHelper($2);"},
		{"trigger": "I-ShortSeqHolder\tinit", "contents": "ShortSeqHolder ${1:holder} = new ShortSeqHolder($2);"},
		{"trigger": "I-ShortStringConverter\tinit", "contents": "ShortStringConverter ${1:converter} = new ShortStringConverter($2);"},
		{"trigger": "I-Shutdown\tinit", "contents": "Shutdown ${1:shutdown} = new Shutdown($2);"},
		{"trigger": "I-ShutdownChannelGroupException\tinit", "contents": "ShutdownChannelGroupException ${1:exception} = new ShutdownChannelGroupException($2);"},
		{"trigger": "I-Side\tinit", "contents": "Side ${1:side} = new Side($2);"},
		{"trigger": "I-Sides\tinit", "contents": "Sides ${1:sides} = new Sides($2);"},
		{"trigger": "I-SignStyle\tinit", "contents": "SignStyle ${1:style} = new SignStyle($2);"},
		{"trigger": "I-Signature\tinit", "contents": "Signature ${1:signature} = new Signature($2);"},
		{"trigger": "I-Signature11ElementProxy\tinit", "contents": "Signature11ElementProxy ${1:proxy} = new Signature11ElementProxy($2);"},
		{"trigger": "I-SignatureAlgorithm\tinit", "contents": "SignatureAlgorithm ${1:algorithm} = new SignatureAlgorithm($2);"},
		{"trigger": "I-SignatureAlgorithmSpi\tinit", "contents": "SignatureAlgorithmSpi ${1:spi} = new SignatureAlgorithmSpi($2);"},
		{"trigger": "I-SignatureBaseRSA\tinit", "contents": "SignatureBaseRSA ${1:signaturebasersa} = new SignatureBaseRSA($2);"},
		{"trigger": "I-SignatureDSA\tinit", "contents": "SignatureDSA ${1:signaturedsa} = new SignatureDSA($2);"},
		{"trigger": "I-SignatureECDSA\tinit", "contents": "SignatureECDSA ${1:signatureecdsa} = new SignatureECDSA($2);"},
		{"trigger": "I-SignatureElementProxy\tinit", "contents": "SignatureElementProxy ${1:proxy} = new SignatureElementProxy($2);"},
		{"trigger": "I-SignatureException\tinit", "contents": "SignatureException ${1:exception} = new SignatureException($2);"},
		{"trigger": "I-SignatureMethod\tinit", "contents": "SignatureMethod ${1:method} = new SignatureMethod($2);"},
		{"trigger": "I-SignatureMethodParameterSpec\tinit", "contents": "SignatureMethodParameterSpec ${1:spec} = new SignatureMethodParameterSpec($2);"},
		{"trigger": "I-SignatureProperties\tinit", "contents": "SignatureProperties ${1:properties} = new SignatureProperties($2);"},
		{"trigger": "I-SignatureProperty\tinit", "contents": "SignatureProperty ${1:property} = new SignatureProperty($2);"},
		{"trigger": "I-SignatureSpi\tinit", "contents": "SignatureSpi ${1:spi} = new SignatureSpi($2);"},
		{"trigger": "I-SignedInfo\tinit", "contents": "SignedInfo ${1:info} = new SignedInfo($2);"},
		{"trigger": "I-SignedMutableBigInteger\tinit", "contents": "SignedMutableBigInteger ${1:integer} = new SignedMutableBigInteger($2);"},
		{"trigger": "I-SignedObject\tinit", "contents": "SignedObject ${1:object} = new SignedObject($2);"},
		{"trigger": "I-Signer\tinit", "contents": "Signer ${1:signer} = new Signer($2);"},
		{"trigger": "I-SignerOutputStream\tinit", "contents": "SignerOutputStream ${1:stream} = new SignerOutputStream($2);"},
		{"trigger": "I-SimpleAttributeSet\tinit", "contents": "SimpleAttributeSet ${1:set} = new SimpleAttributeSet($2);"},
		{"trigger": "I-SimpleAttributeValue\tinit", "contents": "SimpleAttributeValue ${1:value} = new SimpleAttributeValue($2);"},
		{"trigger": "I-SimpleBeanInfo\tinit", "contents": "SimpleBeanInfo ${1:info} = new SimpleBeanInfo($2);"},
		{"trigger": "I-SimpleBindings\tinit", "contents": "SimpleBindings ${1:bindings} = new SimpleBindings($2);"},
		{"trigger": "I-SimpleBooleanProperty\tinit", "contents": "SimpleBooleanProperty ${1:property} = new SimpleBooleanProperty($2);"},
		{"trigger": "I-SimpleClipInterpolator\tinit", "contents": "SimpleClipInterpolator ${1:interpolator} = new SimpleClipInterpolator($2);"},
		{"trigger": "I-SimpleContentModel\tinit", "contents": "SimpleContentModel ${1:model} = new SimpleContentModel($2);"},
		{"trigger": "I-SimpleDateFormat\tinit", "contents": "SimpleDateFormat ${1:format} = new SimpleDateFormat($2);"},
		{"trigger": "I-SimpleDoc\tinit", "contents": "SimpleDoc ${1:doc} = new SimpleDoc($2);"},
		{"trigger": "I-SimpleDocTreeVisitor\tinit", "contents": "SimpleDocTreeVisitor ${1:visitor} = new SimpleDocTreeVisitor($2);"},
		{"trigger": "I-SimpleDoubleProperty\tinit", "contents": "SimpleDoubleProperty ${1:property} = new SimpleDoubleProperty($2);"},
		{"trigger": "I-SimpleFileVisitor\tinit", "contents": "SimpleFileVisitor ${1:visitor} = new SimpleFileVisitor($2);"},
		{"trigger": "I-SimpleFloatProperty\tinit", "contents": "SimpleFloatProperty ${1:property} = new SimpleFloatProperty($2);"},
		{"trigger": "I-SimpleFormatter\tinit", "contents": "SimpleFormatter ${1:formatter} = new SimpleFormatter($2);"},
		{"trigger": "I-SimpleIntegerProperty\tinit", "contents": "SimpleIntegerProperty ${1:property} = new SimpleIntegerProperty($2);"},
		{"trigger": "I-SimpleJavaFileObject\tinit", "contents": "SimpleJavaFileObject ${1:object} = new SimpleJavaFileObject($2);"},
		{"trigger": "I-SimpleListProperty\tinit", "contents": "SimpleListProperty ${1:property} = new SimpleListProperty($2);"},
		{"trigger": "I-SimpleLocator\tinit", "contents": "SimpleLocator ${1:locator} = new SimpleLocator($2);"},
		{"trigger": "I-SimpleLongProperty\tinit", "contents": "SimpleLongProperty ${1:property} = new SimpleLongProperty($2);"},
		{"trigger": "I-SimpleMapProperty\tinit", "contents": "SimpleMapProperty ${1:property} = new SimpleMapProperty($2);"},
		{"trigger": "I-SimpleMethodHandle\tinit", "contents": "SimpleMethodHandle ${1:handle} = new SimpleMethodHandle($2);"},
		{"trigger": "I-SimpleNode\tinit", "contents": "SimpleNode ${1:node} = new SimpleNode($2);"},
		{"trigger": "I-SimpleObjectProperty\tinit", "contents": "SimpleObjectProperty ${1:property} = new SimpleObjectProperty($2);"},
		{"trigger": "I-SimpleResultTreeImpl\tinit", "contents": "SimpleResultTreeImpl ${1:impl} = new SimpleResultTreeImpl($2);"},
		{"trigger": "I-SimpleScriptContext\tinit", "contents": "SimpleScriptContext ${1:context} = new SimpleScriptContext($2);"},
		{"trigger": "I-SimpleSelector\tinit", "contents": "SimpleSelector ${1:selector} = new SimpleSelector($2);"},
		{"trigger": "I-SimpleSetProperty\tinit", "contents": "SimpleSetProperty ${1:property} = new SimpleSetProperty($2);"},
		{"trigger": "I-SimpleSharedBufferInputStream\tinit", "contents": "SimpleSharedBufferInputStream ${1:stream} = new SimpleSharedBufferInputStream($2);"},
		{"trigger": "I-SimpleStringProperty\tinit", "contents": "SimpleStringProperty ${1:property} = new SimpleStringProperty($2);"},
		{"trigger": "I-SimpleStyleableBooleanProperty\tinit", "contents": "SimpleStyleableBooleanProperty ${1:property} = new SimpleStyleableBooleanProperty($2);"},
		{"trigger": "I-SimpleStyleableDoubleProperty\tinit", "contents": "SimpleStyleableDoubleProperty ${1:property} = new SimpleStyleableDoubleProperty($2);"},
		{"trigger": "I-SimpleStyleableFloatProperty\tinit", "contents": "SimpleStyleableFloatProperty ${1:property} = new SimpleStyleableFloatProperty($2);"},
		{"trigger": "I-SimpleStyleableIntegerProperty\tinit", "contents": "SimpleStyleableIntegerProperty ${1:property} = new SimpleStyleableIntegerProperty($2);"},
		{"trigger": "I-SimpleStyleableLongProperty\tinit", "contents": "SimpleStyleableLongProperty ${1:property} = new SimpleStyleableLongProperty($2);"},
		{"trigger": "I-SimpleStyleableObjectProperty\tinit", "contents": "SimpleStyleableObjectProperty ${1:property} = new SimpleStyleableObjectProperty($2);"},
		{"trigger": "I-SimpleStyleableStringProperty\tinit", "contents": "SimpleStyleableStringProperty ${1:property} = new SimpleStyleableStringProperty($2);"},
		{"trigger": "I-SimpleTimeZone\tinit", "contents": "SimpleTimeZone ${1:zone} = new SimpleTimeZone($2);"},
		{"trigger": "I-SimpleTreeVisitor\tinit", "contents": "SimpleTreeVisitor ${1:visitor} = new SimpleTreeVisitor($2);"},
		{"trigger": "I-SimpleType\tinit", "contents": "SimpleType ${1:type} = new SimpleType($2);"},
		{"trigger": "I-SimpleXMLSchema\tinit", "contents": "SimpleXMLSchema ${1:schema} = new SimpleXMLSchema($2);"},
		{"trigger": "I-SinceTree\tinit", "contents": "SinceTree ${1:tree} = new SinceTree($2);"},
		{"trigger": "I-SingleCertificateResolver\tinit", "contents": "SingleCertificateResolver ${1:resolver} = new SingleCertificateResolver($2);"},
		{"trigger": "I-SingleKeyResolver\tinit", "contents": "SingleKeyResolver ${1:resolver} = new SingleKeyResolver($2);"},
		{"trigger": "I-SingleLoopClipEnvelope\tinit", "contents": "SingleLoopClipEnvelope ${1:envelope} = new SingleLoopClipEnvelope($2);"},
		{"trigger": "I-SingleNodeCounter\tinit", "contents": "SingleNodeCounter ${1:counter} = new SingleNodeCounter($2);"},
		{"trigger": "I-SinglePixelPackedSampleModel\tinit", "contents": "SinglePixelPackedSampleModel ${1:model} = new SinglePixelPackedSampleModel($2);"},
		{"trigger": "I-SingleSelectionModel\tinit", "contents": "SingleSelectionModel ${1:model} = new SingleSelectionModel($2);"},
		{"trigger": "I-SingletonIterator\tinit", "contents": "SingletonIterator ${1:iterator} = new SingletonIterator($2);"},
		{"trigger": "I-SingularMatrixException\tinit", "contents": "SingularMatrixException ${1:exception} = new SingularMatrixException($2);"},
		{"trigger": "I-Sink\tinit", "contents": "Sink ${1:sink} = new Sink($2);"},
		{"trigger": "I-Size\tinit", "contents": "Size ${1:size} = new Size($2);"},
		{"trigger": "I-Size2DSyntax\tinit", "contents": "Size2DSyntax ${1:syntax} = new Size2DSyntax($2);"},
		{"trigger": "I-SizeConverter\tinit", "contents": "SizeConverter ${1:converter} = new SizeConverter($2);"},
		{"trigger": "I-SizeLimitExceededException\tinit", "contents": "SizeLimitExceededException ${1:exception} = new SizeLimitExceededException($2);"},
		{"trigger": "I-SizeLimitedList\tinit", "contents": "SizeLimitedList ${1:list} = new SizeLimitedList($2);"},
		{"trigger": "I-SizeRequirements\tinit", "contents": "SizeRequirements ${1:requirements} = new SizeRequirements($2);"},
		{"trigger": "I-SizeSequence\tinit", "contents": "SizeSequence ${1:sequence} = new SizeSequence($2);"},
		{"trigger": "I-SizeUnits\tinit", "contents": "SizeUnits ${1:units} = new SizeUnits($2);"},
		{"trigger": "I-Skeleton\tinit", "contents": "Skeleton ${1:skeleton} = new Skeleton($2);"},
		{"trigger": "I-SkeletonMismatchException\tinit", "contents": "SkeletonMismatchException ${1:exception} = new SkeletonMismatchException($2);"},
		{"trigger": "I-SkeletonNotFoundException\tinit", "contents": "SkeletonNotFoundException ${1:exception} = new SkeletonNotFoundException($2);"},
		{"trigger": "I-Skin\tinit", "contents": "Skin ${1:skin} = new Skin($2);"},
		{"trigger": "I-SkinBase\tinit", "contents": "SkinBase ${1:base} = new SkinBase($2);"},
		{"trigger": "I-Skinnable\tinit", "contents": "Skinnable ${1:skinnable} = new Skinnable($2);"},
		{"trigger": "I-SliceOps\tinit", "contents": "SliceOps ${1:ops} = new SliceOps($2);"},
		{"trigger": "I-SliceSequenceConverter\tinit", "contents": "SliceSequenceConverter ${1:converter} = new SliceSequenceConverter($2);"},
		{"trigger": "I-Slider\tinit", "contents": "Slider ${1:slider} = new Slider($2);"},
		{"trigger": "I-SliderArrowShapeState\tinit", "contents": "SliderArrowShapeState ${1:state} = new SliderArrowShapeState($2);"},
		{"trigger": "I-SliderBehavior\tinit", "contents": "SliderBehavior ${1:behavior} = new SliderBehavior($2);"},
		{"trigger": "I-SliderBuilder\tinit", "contents": "SliderBuilder ${1:builder} = new SliderBuilder($2);"},
		{"trigger": "I-SliderPainter\tinit", "contents": "SliderPainter ${1:painter} = new SliderPainter($2);"},
		{"trigger": "I-SliderSkin\tinit", "contents": "SliderSkin ${1:skin} = new SliderSkin($2);"},
		{"trigger": "I-SliderThumbArrowShapeState\tinit", "contents": "SliderThumbArrowShapeState ${1:state} = new SliderThumbArrowShapeState($2);"},
		{"trigger": "I-SliderThumbPainter\tinit", "contents": "SliderThumbPainter ${1:painter} = new SliderThumbPainter($2);"},
		{"trigger": "I-SliderTrackArrowShapeState\tinit", "contents": "SliderTrackArrowShapeState ${1:state} = new SliderTrackArrowShapeState($2);"},
		{"trigger": "I-SliderTrackPainter\tinit", "contents": "SliderTrackPainter ${1:painter} = new SliderTrackPainter($2);"},
		{"trigger": "I-SliderUI\tinit", "contents": "SliderUI ${1:sliderui} = new SliderUI($2);"},
		{"trigger": "I-SlidingSpinner\tinit", "contents": "SlidingSpinner ${1:spinner} = new SlidingSpinner($2);"},
		{"trigger": "I-SlotAllocator\tinit", "contents": "SlotAllocator ${1:allocator} = new SlotAllocator($2);"},
		{"trigger": "I-SmallMoveTouchFilter\tinit", "contents": "SmallMoveTouchFilter ${1:filter} = new SmallMoveTouchFilter($2);"},
		{"trigger": "I-SmartGridLayout\tinit", "contents": "SmartGridLayout ${1:layout} = new SmartGridLayout($2);"},
		{"trigger": "I-SmartTransformerFactoryImpl\tinit", "contents": "SmartTransformerFactoryImpl ${1:impl} = new SmartTransformerFactoryImpl($2);"},
		{"trigger": "I-SmoothMinifier\tinit", "contents": "SmoothMinifier ${1:minifier} = new SmoothMinifier($2);"},
		{"trigger": "I-SnapshotParameters\tinit", "contents": "SnapshotParameters ${1:parameters} = new SnapshotParameters($2);"},
		{"trigger": "I-SnapshotParametersBuilder\tinit", "contents": "SnapshotParametersBuilder ${1:builder} = new SnapshotParametersBuilder($2);"},
		{"trigger": "I-SnapshotResult\tinit", "contents": "SnapshotResult ${1:result} = new SnapshotResult($2);"},
		{"trigger": "I-SnmpAccessControlModel\tinit", "contents": "SnmpAccessControlModel ${1:model} = new SnmpAccessControlModel($2);"},
		{"trigger": "I-SnmpAccessControlSubSystem\tinit", "contents": "SnmpAccessControlSubSystem ${1:system} = new SnmpAccessControlSubSystem($2);"},
		{"trigger": "I-SnmpAckPdu\tinit", "contents": "SnmpAckPdu ${1:pdu} = new SnmpAckPdu($2);"},
		{"trigger": "I-SnmpAcl\tinit", "contents": "SnmpAcl ${1:acl} = new SnmpAcl($2);"},
		{"trigger": "I-SnmpAdaptorServer\tinit", "contents": "SnmpAdaptorServer ${1:server} = new SnmpAdaptorServer($2);"},
		{"trigger": "I-SnmpAdaptorServerMBean\tinit", "contents": "SnmpAdaptorServerMBean ${1:bean} = new SnmpAdaptorServerMBean($2);"},
		{"trigger": "I-SnmpBadSecurityLevelException\tinit", "contents": "SnmpBadSecurityLevelException ${1:exception} = new SnmpBadSecurityLevelException($2);"},
		{"trigger": "I-SnmpCounter\tinit", "contents": "SnmpCounter ${1:counter} = new SnmpCounter($2);"},
		{"trigger": "I-SnmpDataTypeEnums\tinit", "contents": "SnmpDataTypeEnums ${1:enums} = new SnmpDataTypeEnums($2);"},
		{"trigger": "I-SnmpDecryptedPdu\tinit", "contents": "SnmpDecryptedPdu ${1:pdu} = new SnmpDecryptedPdu($2);"},
		{"trigger": "I-SnmpDefinitions\tinit", "contents": "SnmpDefinitions ${1:definitions} = new SnmpDefinitions($2);"},
		{"trigger": "I-SnmpEngine\tinit", "contents": "SnmpEngine ${1:engine} = new SnmpEngine($2);"},
		{"trigger": "I-SnmpEngineFactory\tinit", "contents": "SnmpEngineFactory ${1:factory} = new SnmpEngineFactory($2);"},
		{"trigger": "I-SnmpEngineId\tinit", "contents": "SnmpEngineId ${1:id} = new SnmpEngineId($2);"},
		{"trigger": "I-SnmpEngineImpl\tinit", "contents": "SnmpEngineImpl ${1:impl} = new SnmpEngineImpl($2);"},
		{"trigger": "I-SnmpEngineParameters\tinit", "contents": "SnmpEngineParameters ${1:parameters} = new SnmpEngineParameters($2);"},
		{"trigger": "I-SnmpEntryOid\tinit", "contents": "SnmpEntryOid ${1:oid} = new SnmpEntryOid($2);"},
		{"trigger": "I-SnmpErrorHandlerAgent\tinit", "contents": "SnmpErrorHandlerAgent ${1:agent} = new SnmpErrorHandlerAgent($2);"},
		{"trigger": "I-SnmpGauge\tinit", "contents": "SnmpGauge ${1:gauge} = new SnmpGauge($2);"},
		{"trigger": "I-SnmpGenericMetaServer\tinit", "contents": "SnmpGenericMetaServer ${1:server} = new SnmpGenericMetaServer($2);"},
		{"trigger": "I-SnmpGenericObjectServer\tinit", "contents": "SnmpGenericObjectServer ${1:server} = new SnmpGenericObjectServer($2);"},
		{"trigger": "I-SnmpIncomingRequest\tinit", "contents": "SnmpIncomingRequest ${1:request} = new SnmpIncomingRequest($2);"},
		{"trigger": "I-SnmpIncomingResponse\tinit", "contents": "SnmpIncomingResponse ${1:response} = new SnmpIncomingResponse($2);"},
		{"trigger": "I-SnmpIndex\tinit", "contents": "SnmpIndex ${1:index} = new SnmpIndex($2);"},
		{"trigger": "I-SnmpInformHandler\tinit", "contents": "SnmpInformHandler ${1:handler} = new SnmpInformHandler($2);"},
		{"trigger": "I-SnmpInformRequest\tinit", "contents": "SnmpInformRequest ${1:request} = new SnmpInformRequest($2);"},
		{"trigger": "I-SnmpInt\tinit", "contents": "SnmpInt ${1:int} = new SnmpInt($2);"},
		{"trigger": "I-SnmpIpAddress\tinit", "contents": "SnmpIpAddress ${1:address} = new SnmpIpAddress($2);"},
		{"trigger": "I-SnmpLcd\tinit", "contents": "SnmpLcd ${1:lcd} = new SnmpLcd($2);"},
		{"trigger": "I-SnmpMessage\tinit", "contents": "SnmpMessage ${1:message} = new SnmpMessage($2);"},
		{"trigger": "I-SnmpMib\tinit", "contents": "SnmpMib ${1:mib} = new SnmpMib($2);"},
		{"trigger": "I-SnmpMibAgent\tinit", "contents": "SnmpMibAgent ${1:agent} = new SnmpMibAgent($2);"},
		{"trigger": "I-SnmpMibAgentMBean\tinit", "contents": "SnmpMibAgentMBean ${1:bean} = new SnmpMibAgentMBean($2);"},
		{"trigger": "I-SnmpMibEntry\tinit", "contents": "SnmpMibEntry ${1:entry} = new SnmpMibEntry($2);"},
		{"trigger": "I-SnmpMibGroup\tinit", "contents": "SnmpMibGroup ${1:group} = new SnmpMibGroup($2);"},
		{"trigger": "I-SnmpMibHandler\tinit", "contents": "SnmpMibHandler ${1:handler} = new SnmpMibHandler($2);"},
		{"trigger": "I-SnmpMibNode\tinit", "contents": "SnmpMibNode ${1:node} = new SnmpMibNode($2);"},
		{"trigger": "I-SnmpMibOid\tinit", "contents": "SnmpMibOid ${1:oid} = new SnmpMibOid($2);"},
		{"trigger": "I-SnmpMibRequest\tinit", "contents": "SnmpMibRequest ${1:request} = new SnmpMibRequest($2);"},
		{"trigger": "I-SnmpMibRequestImpl\tinit", "contents": "SnmpMibRequestImpl ${1:impl} = new SnmpMibRequestImpl($2);"},
		{"trigger": "I-SnmpMibSubRequest\tinit", "contents": "SnmpMibSubRequest ${1:request} = new SnmpMibSubRequest($2);"},
		{"trigger": "I-SnmpMibTable\tinit", "contents": "SnmpMibTable ${1:table} = new SnmpMibTable($2);"},
		{"trigger": "I-SnmpMibTree\tinit", "contents": "SnmpMibTree ${1:tree} = new SnmpMibTree($2);"},
		{"trigger": "I-SnmpModel\tinit", "contents": "SnmpModel ${1:model} = new SnmpModel($2);"},
		{"trigger": "I-SnmpModelLcd\tinit", "contents": "SnmpModelLcd ${1:lcd} = new SnmpModelLcd($2);"},
		{"trigger": "I-SnmpMsg\tinit", "contents": "SnmpMsg ${1:msg} = new SnmpMsg($2);"},
		{"trigger": "I-SnmpMsgProcessingModel\tinit", "contents": "SnmpMsgProcessingModel ${1:model} = new SnmpMsgProcessingModel($2);"},
		{"trigger": "I-SnmpMsgProcessingSubSystem\tinit", "contents": "SnmpMsgProcessingSubSystem ${1:system} = new SnmpMsgProcessingSubSystem($2);"},
		{"trigger": "I-SnmpMsgTranslator\tinit", "contents": "SnmpMsgTranslator ${1:translator} = new SnmpMsgTranslator($2);"},
		{"trigger": "I-SnmpNull\tinit", "contents": "SnmpNull ${1:null} = new SnmpNull($2);"},
		{"trigger": "I-SnmpOid\tinit", "contents": "SnmpOid ${1:oid} = new SnmpOid($2);"},
		{"trigger": "I-SnmpOidDatabase\tinit", "contents": "SnmpOidDatabase ${1:database} = new SnmpOidDatabase($2);"},
		{"trigger": "I-SnmpOidDatabaseSupport\tinit", "contents": "SnmpOidDatabaseSupport ${1:support} = new SnmpOidDatabaseSupport($2);"},
		{"trigger": "I-SnmpOidRecord\tinit", "contents": "SnmpOidRecord ${1:record} = new SnmpOidRecord($2);"},
		{"trigger": "I-SnmpOidTable\tinit", "contents": "SnmpOidTable ${1:table} = new SnmpOidTable($2);"},
		{"trigger": "I-SnmpOidTableSupport\tinit", "contents": "SnmpOidTableSupport ${1:support} = new SnmpOidTableSupport($2);"},
		{"trigger": "I-SnmpOpaque\tinit", "contents": "SnmpOpaque ${1:opaque} = new SnmpOpaque($2);"},
		{"trigger": "I-SnmpOutgoingRequest\tinit", "contents": "SnmpOutgoingRequest ${1:request} = new SnmpOutgoingRequest($2);"},
		{"trigger": "I-SnmpParameters\tinit", "contents": "SnmpParameters ${1:parameters} = new SnmpParameters($2);"},
		{"trigger": "I-SnmpParams\tinit", "contents": "SnmpParams ${1:params} = new SnmpParams($2);"},
		{"trigger": "I-SnmpPdu\tinit", "contents": "SnmpPdu ${1:pdu} = new SnmpPdu($2);"},
		{"trigger": "I-SnmpPduBulk\tinit", "contents": "SnmpPduBulk ${1:bulk} = new SnmpPduBulk($2);"},
		{"trigger": "I-SnmpPduBulkType\tinit", "contents": "SnmpPduBulkType ${1:type} = new SnmpPduBulkType($2);"},
		{"trigger": "I-SnmpPduFactory\tinit", "contents": "SnmpPduFactory ${1:factory} = new SnmpPduFactory($2);"},
		{"trigger": "I-SnmpPduFactoryBER\tinit", "contents": "SnmpPduFactoryBER ${1:snmppdufactoryber} = new SnmpPduFactoryBER($2);"},
		{"trigger": "I-SnmpPduPacket\tinit", "contents": "SnmpPduPacket ${1:packet} = new SnmpPduPacket($2);"},
		{"trigger": "I-SnmpPduRequest\tinit", "contents": "SnmpPduRequest ${1:request} = new SnmpPduRequest($2);"},
		{"trigger": "I-SnmpPduRequestType\tinit", "contents": "SnmpPduRequestType ${1:type} = new SnmpPduRequestType($2);"},
		{"trigger": "I-SnmpPduTrap\tinit", "contents": "SnmpPduTrap ${1:trap} = new SnmpPduTrap($2);"},
		{"trigger": "I-SnmpPeer\tinit", "contents": "SnmpPeer ${1:peer} = new SnmpPeer($2);"},
		{"trigger": "I-SnmpPermission\tinit", "contents": "SnmpPermission ${1:permission} = new SnmpPermission($2);"},
		{"trigger": "I-SnmpProperties\tinit", "contents": "SnmpProperties ${1:properties} = new SnmpProperties($2);"},
		{"trigger": "I-SnmpQManager\tinit", "contents": "SnmpQManager ${1:manager} = new SnmpQManager($2);"},
		{"trigger": "I-SnmpRequestCounter\tinit", "contents": "SnmpRequestCounter ${1:counter} = new SnmpRequestCounter($2);"},
		{"trigger": "I-SnmpRequestHandler\tinit", "contents": "SnmpRequestHandler ${1:handler} = new SnmpRequestHandler($2);"},
		{"trigger": "I-SnmpRequestTree\tinit", "contents": "SnmpRequestTree ${1:tree} = new SnmpRequestTree($2);"},
		{"trigger": "I-SnmpResponseHandler\tinit", "contents": "SnmpResponseHandler ${1:handler} = new SnmpResponseHandler($2);"},
		{"trigger": "I-SnmpScopedPduBulk\tinit", "contents": "SnmpScopedPduBulk ${1:bulk} = new SnmpScopedPduBulk($2);"},
		{"trigger": "I-SnmpScopedPduPacket\tinit", "contents": "SnmpScopedPduPacket ${1:packet} = new SnmpScopedPduPacket($2);"},
		{"trigger": "I-SnmpScopedPduRequest\tinit", "contents": "SnmpScopedPduRequest ${1:request} = new SnmpScopedPduRequest($2);"},
		{"trigger": "I-SnmpSecurityCache\tinit", "contents": "SnmpSecurityCache ${1:cache} = new SnmpSecurityCache($2);"},
		{"trigger": "I-SnmpSecurityException\tinit", "contents": "SnmpSecurityException ${1:exception} = new SnmpSecurityException($2);"},
		{"trigger": "I-SnmpSecurityModel\tinit", "contents": "SnmpSecurityModel ${1:model} = new SnmpSecurityModel($2);"},
		{"trigger": "I-SnmpSecurityParameters\tinit", "contents": "SnmpSecurityParameters ${1:parameters} = new SnmpSecurityParameters($2);"},
		{"trigger": "I-SnmpSecuritySubSystem\tinit", "contents": "SnmpSecuritySubSystem ${1:system} = new SnmpSecuritySubSystem($2);"},
		{"trigger": "I-SnmpSendServer\tinit", "contents": "SnmpSendServer ${1:server} = new SnmpSendServer($2);"},
		{"trigger": "I-SnmpSession\tinit", "contents": "SnmpSession ${1:session} = new SnmpSession($2);"},
		{"trigger": "I-SnmpSocket\tinit", "contents": "SnmpSocket ${1:socket} = new SnmpSocket($2);"},
		{"trigger": "I-SnmpStandardMetaServer\tinit", "contents": "SnmpStandardMetaServer ${1:server} = new SnmpStandardMetaServer($2);"},
		{"trigger": "I-SnmpStandardObjectServer\tinit", "contents": "SnmpStandardObjectServer ${1:server} = new SnmpStandardObjectServer($2);"},
		{"trigger": "I-SnmpStatusException\tinit", "contents": "SnmpStatusException ${1:exception} = new SnmpStatusException($2);"},
		{"trigger": "I-SnmpString\tinit", "contents": "SnmpString ${1:string} = new SnmpString($2);"},
		{"trigger": "I-SnmpStringFixed\tinit", "contents": "SnmpStringFixed ${1:fixed} = new SnmpStringFixed($2);"},
		{"trigger": "I-SnmpSubBulkRequestHandler\tinit", "contents": "SnmpSubBulkRequestHandler ${1:handler} = new SnmpSubBulkRequestHandler($2);"},
		{"trigger": "I-SnmpSubNextRequestHandler\tinit", "contents": "SnmpSubNextRequestHandler ${1:handler} = new SnmpSubNextRequestHandler($2);"},
		{"trigger": "I-SnmpSubRequestHandler\tinit", "contents": "SnmpSubRequestHandler ${1:handler} = new SnmpSubRequestHandler($2);"},
		{"trigger": "I-SnmpSubSystem\tinit", "contents": "SnmpSubSystem ${1:system} = new SnmpSubSystem($2);"},
		{"trigger": "I-SnmpTableCallbackHandler\tinit", "contents": "SnmpTableCallbackHandler ${1:handler} = new SnmpTableCallbackHandler($2);"},
		{"trigger": "I-SnmpTableEntryFactory\tinit", "contents": "SnmpTableEntryFactory ${1:factory} = new SnmpTableEntryFactory($2);"},
		{"trigger": "I-SnmpTableEntryNotification\tinit", "contents": "SnmpTableEntryNotification ${1:notification} = new SnmpTableEntryNotification($2);"},
		{"trigger": "I-SnmpTableSupport\tinit", "contents": "SnmpTableSupport ${1:support} = new SnmpTableSupport($2);"},
		{"trigger": "I-SnmpTimerServer\tinit", "contents": "SnmpTimerServer ${1:server} = new SnmpTimerServer($2);"},
		{"trigger": "I-SnmpTimeticks\tinit", "contents": "SnmpTimeticks ${1:timeticks} = new SnmpTimeticks($2);"},
		{"trigger": "I-SnmpTooBigException\tinit", "contents": "SnmpTooBigException ${1:exception} = new SnmpTooBigException($2);"},
		{"trigger": "I-SnmpTools\tinit", "contents": "SnmpTools ${1:tools} = new SnmpTools($2);"},
		{"trigger": "I-SnmpUnknownAccContrModelException\tinit", "contents": "SnmpUnknownAccContrModelException ${1:exception} = new SnmpUnknownAccContrModelException($2);"},
		{"trigger": "I-SnmpUnknownModelException\tinit", "contents": "SnmpUnknownModelException ${1:exception} = new SnmpUnknownModelException($2);"},
		{"trigger": "I-SnmpUnknownModelLcdException\tinit", "contents": "SnmpUnknownModelLcdException ${1:exception} = new SnmpUnknownModelLcdException($2);"},
		{"trigger": "I-SnmpUnknownMsgProcModelException\tinit", "contents": "SnmpUnknownMsgProcModelException ${1:exception} = new SnmpUnknownMsgProcModelException($2);"},
		{"trigger": "I-SnmpUnknownSecModelException\tinit", "contents": "SnmpUnknownSecModelException ${1:exception} = new SnmpUnknownSecModelException($2);"},
		{"trigger": "I-SnmpUnknownSubSystemException\tinit", "contents": "SnmpUnknownSubSystemException ${1:exception} = new SnmpUnknownSubSystemException($2);"},
		{"trigger": "I-SnmpUnsignedInt\tinit", "contents": "SnmpUnsignedInt ${1:int} = new SnmpUnsignedInt($2);"},
		{"trigger": "I-SnmpUserDataFactory\tinit", "contents": "SnmpUserDataFactory ${1:factory} = new SnmpUserDataFactory($2);"},
		{"trigger": "I-SnmpUsmKeyHandler\tinit", "contents": "SnmpUsmKeyHandler ${1:handler} = new SnmpUsmKeyHandler($2);"},
		{"trigger": "I-SnmpV3Message\tinit", "contents": "SnmpV3Message ${1:message} = new SnmpV3Message($2);"},
		{"trigger": "I-SnmpValue\tinit", "contents": "SnmpValue ${1:value} = new SnmpValue($2);"},
		{"trigger": "I-SnmpVarBind\tinit", "contents": "SnmpVarBind ${1:bind} = new SnmpVarBind($2);"},
		{"trigger": "I-SnmpVarBindList\tinit", "contents": "SnmpVarBindList ${1:list} = new SnmpVarBindList($2);"},
		{"trigger": "I-Socket\tinit", "contents": "Socket ${1:socket} = new Socket($2);"},
		{"trigger": "I-SocketAddress\tinit", "contents": "SocketAddress ${1:address} = new SocketAddress($2);"},
		{"trigger": "I-SocketChannel\tinit", "contents": "SocketChannel ${1:channel} = new SocketChannel($2);"},
		{"trigger": "I-SocketException\tinit", "contents": "SocketException ${1:exception} = new SocketException($2);"},
		{"trigger": "I-SocketHandler\tinit", "contents": "SocketHandler ${1:handler} = new SocketHandler($2);"},
		{"trigger": "I-SocketImpl\tinit", "contents": "SocketImpl ${1:impl} = new SocketImpl($2);"},
		{"trigger": "I-SocketImplFactory\tinit", "contents": "SocketImplFactory ${1:factory} = new SocketImplFactory($2);"},
		{"trigger": "I-SocketInfo\tinit", "contents": "SocketInfo ${1:info} = new SocketInfo($2);"},
		{"trigger": "I-SocketInputStream\tinit", "contents": "SocketInputStream ${1:stream} = new SocketInputStream($2);"},
		{"trigger": "I-SocketOption\tinit", "contents": "SocketOption ${1:option} = new SocketOption($2);"},
		{"trigger": "I-SocketOptions\tinit", "contents": "SocketOptions ${1:options} = new SocketOptions($2);"},
		{"trigger": "I-SocketOrChannelAcceptor\tinit", "contents": "SocketOrChannelAcceptor ${1:acceptor} = new SocketOrChannelAcceptor($2);"},
		{"trigger": "I-SocketOutputStream\tinit", "contents": "SocketOutputStream ${1:stream} = new SocketOutputStream($2);"},
		{"trigger": "I-SocketPermission\tinit", "contents": "SocketPermission ${1:permission} = new SocketPermission($2);"},
		{"trigger": "I-SocketSecrets\tinit", "contents": "SocketSecrets ${1:secrets} = new SocketSecrets($2);"},
		{"trigger": "I-SocketSecurityException\tinit", "contents": "SocketSecurityException ${1:exception} = new SocketSecurityException($2);"},
		{"trigger": "I-SocketStreamHandle\tinit", "contents": "SocketStreamHandle ${1:handle} = new SocketStreamHandle($2);"},
		{"trigger": "I-SocketTimeoutException\tinit", "contents": "SocketTimeoutException ${1:exception} = new SocketTimeoutException($2);"},
		{"trigger": "I-SocksConsts\tinit", "contents": "SocksConsts ${1:consts} = new SocksConsts($2);"},
		{"trigger": "I-SocksSocketImpl\tinit", "contents": "SocksSocketImpl ${1:impl} = new SocksSocketImpl($2);"},
		{"trigger": "I-SoftBevelBorder\tinit", "contents": "SoftBevelBorder ${1:border} = new SoftBevelBorder($2);"},
		{"trigger": "I-SoftReference\tinit", "contents": "SoftReference ${1:reference} = new SoftReference($2);"},
		{"trigger": "I-SoftReferenceGrammarPool\tinit", "contents": "SoftReferenceGrammarPool ${1:pool} = new SoftReferenceGrammarPool($2);"},
		{"trigger": "I-SoftwareCursor\tinit", "contents": "SoftwareCursor ${1:cursor} = new SoftwareCursor($2);"},
		{"trigger": "I-SoftwareKeyboard\tinit", "contents": "SoftwareKeyboard ${1:keyboard} = new SoftwareKeyboard($2);"},
		{"trigger": "I-SolarisLoginModule\tinit", "contents": "SolarisLoginModule ${1:module} = new SolarisLoginModule($2);"},
		{"trigger": "I-SolarisNumericGroupPrincipal\tinit", "contents": "SolarisNumericGroupPrincipal ${1:principal} = new SolarisNumericGroupPrincipal($2);"},
		{"trigger": "I-SolarisNumericUserPrincipal\tinit", "contents": "SolarisNumericUserPrincipal ${1:principal} = new SolarisNumericUserPrincipal($2);"},
		{"trigger": "I-SolarisPrincipal\tinit", "contents": "SolarisPrincipal ${1:principal} = new SolarisPrincipal($2);"},
		{"trigger": "I-SolarisSystem\tinit", "contents": "SolarisSystem ${1:system} = new SolarisSystem($2);"},
		{"trigger": "I-Sort\tinit", "contents": "Sort ${1:sort} = new Sort($2);"},
		{"trigger": "I-SortControl\tinit", "contents": "SortControl ${1:control} = new SortControl($2);"},
		{"trigger": "I-SortEvent\tinit", "contents": "SortEvent ${1:event} = new SortEvent($2);"},
		{"trigger": "I-SortHelper\tinit", "contents": "SortHelper ${1:helper} = new SortHelper($2);"},
		{"trigger": "I-SortKey\tinit", "contents": "SortKey ${1:key} = new SortKey($2);"},
		{"trigger": "I-SortOrder\tinit", "contents": "SortOrder ${1:order} = new SortOrder($2);"},
		{"trigger": "I-SortResponseControl\tinit", "contents": "SortResponseControl ${1:control} = new SortResponseControl($2);"},
		{"trigger": "I-SortSettings\tinit", "contents": "SortSettings ${1:settings} = new SortSettings($2);"},
		{"trigger": "I-SortableList\tinit", "contents": "SortableList ${1:list} = new SortableList($2);"},
		{"trigger": "I-SortedList\tinit", "contents": "SortedList ${1:list} = new SortedList($2);"},
		{"trigger": "I-SortedMap\tinit", "contents": "SortedMap ${1:map} = new SortedMap($2);"},
		{"trigger": "I-SortedOps\tinit", "contents": "SortedOps ${1:ops} = new SortedOps($2);"},
		{"trigger": "I-SortedSet\tinit", "contents": "SortedSet ${1:set} = new SortedSet($2);"},
		{"trigger": "I-SortingFocusTraversalPolicy\tinit", "contents": "SortingFocusTraversalPolicy ${1:policy} = new SortingFocusTraversalPolicy($2);"},
		{"trigger": "I-SortingIterator\tinit", "contents": "SortingIterator ${1:iterator} = new SortingIterator($2);"},
		{"trigger": "I-Soundbank\tinit", "contents": "Soundbank ${1:soundbank} = new Soundbank($2);"},
		{"trigger": "I-SoundbankReader\tinit", "contents": "SoundbankReader ${1:reader} = new SoundbankReader($2);"},
		{"trigger": "I-SoundbankResource\tinit", "contents": "SoundbankResource ${1:resource} = new SoundbankResource($2);"},
		{"trigger": "I-Source\tinit", "contents": "Source ${1:source} = new Source($2);"},
		{"trigger": "I-SourceAdapterChange\tinit", "contents": "SourceAdapterChange ${1:change} = new SourceAdapterChange($2);"},
		{"trigger": "I-SourceDataLine\tinit", "contents": "SourceDataLine ${1:line} = new SourceDataLine($2);"},
		{"trigger": "I-SourceFile\tinit", "contents": "SourceFile ${1:file} = new SourceFile($2);"},
		{"trigger": "I-SourceLoader\tinit", "contents": "SourceLoader ${1:loader} = new SourceLoader($2);"},
		{"trigger": "I-SourceLocator\tinit", "contents": "SourceLocator ${1:locator} = new SourceLocator($2);"},
		{"trigger": "I-SourcePosition\tinit", "contents": "SourcePosition ${1:position} = new SourcePosition($2);"},
		{"trigger": "I-SourcePositions\tinit", "contents": "SourcePositions ${1:positions} = new SourcePositions($2);"},
		{"trigger": "I-SourceTree\tinit", "contents": "SourceTree ${1:tree} = new SourceTree($2);"},
		{"trigger": "I-SourceTreeManager\tinit", "contents": "SourceTreeManager ${1:manager} = new SourceTreeManager($2);"},
		{"trigger": "I-SourceVersion\tinit", "contents": "SourceVersion ${1:version} = new SourceVersion($2);"},
		{"trigger": "I-Sphere\tinit", "contents": "Sphere ${1:sphere} = new Sphere($2);"},
		{"trigger": "I-SpinedBuffer\tinit", "contents": "SpinedBuffer ${1:buffer} = new SpinedBuffer($2);"},
		{"trigger": "I-Spinner\tinit", "contents": "Spinner ${1:spinner} = new Spinner($2);"},
		{"trigger": "I-SpinnerBehavior\tinit", "contents": "SpinnerBehavior ${1:behavior} = new SpinnerBehavior($2);"},
		{"trigger": "I-SpinnerDateModel\tinit", "contents": "SpinnerDateModel ${1:model} = new SpinnerDateModel($2);"},
		{"trigger": "I-SpinnerListModel\tinit", "contents": "SpinnerListModel ${1:model} = new SpinnerListModel($2);"},
		{"trigger": "I-SpinnerModel\tinit", "contents": "SpinnerModel ${1:model} = new SpinnerModel($2);"},
		{"trigger": "I-SpinnerNextButtonPainter\tinit", "contents": "SpinnerNextButtonPainter ${1:painter} = new SpinnerNextButtonPainter($2);"},
		{"trigger": "I-SpinnerNumberModel\tinit", "contents": "SpinnerNumberModel ${1:model} = new SpinnerNumberModel($2);"},
		{"trigger": "I-SpinnerPainter\tinit", "contents": "SpinnerPainter ${1:painter} = new SpinnerPainter($2);"},
		{"trigger": "I-SpinnerPanelSpinnerFormattedTextFieldPainter\tinit", "contents": "SpinnerPanelSpinnerFormattedTextFieldPainter ${1:painter} = new SpinnerPanelSpinnerFormattedTextFieldPainter($2);"},
		{"trigger": "I-SpinnerPreviousButtonPainter\tinit", "contents": "SpinnerPreviousButtonPainter ${1:painter} = new SpinnerPreviousButtonPainter($2);"},
		{"trigger": "I-SpinnerSkin\tinit", "contents": "SpinnerSkin ${1:skin} = new SpinnerSkin($2);"},
		{"trigger": "I-SpinnerUI\tinit", "contents": "SpinnerUI ${1:spinnerui} = new SpinnerUI($2);"},
		{"trigger": "I-SpinnerValueFactory\tinit", "contents": "SpinnerValueFactory ${1:factory} = new SpinnerValueFactory($2);"},
		{"trigger": "I-SplashScreen\tinit", "contents": "SplashScreen ${1:screen} = new SplashScreen($2);"},
		{"trigger": "I-SplineInterpolator\tinit", "contents": "SplineInterpolator ${1:interpolator} = new SplineInterpolator($2);"},
		{"trigger": "I-SplitMenuButton\tinit", "contents": "SplitMenuButton ${1:button} = new SplitMenuButton($2);"},
		{"trigger": "I-SplitMenuButtonBehavior\tinit", "contents": "SplitMenuButtonBehavior ${1:behavior} = new SplitMenuButtonBehavior($2);"},
		{"trigger": "I-SplitMenuButtonBuilder\tinit", "contents": "SplitMenuButtonBuilder ${1:builder} = new SplitMenuButtonBuilder($2);"},
		{"trigger": "I-SplitMenuButtonSkin\tinit", "contents": "SplitMenuButtonSkin ${1:skin} = new SplitMenuButtonSkin($2);"},
		{"trigger": "I-SplitPane\tinit", "contents": "SplitPane ${1:pane} = new SplitPane($2);"},
		{"trigger": "I-SplitPaneBuilder\tinit", "contents": "SplitPaneBuilder ${1:builder} = new SplitPaneBuilder($2);"},
		{"trigger": "I-SplitPaneDividerPainter\tinit", "contents": "SplitPaneDividerPainter ${1:painter} = new SplitPaneDividerPainter($2);"},
		{"trigger": "I-SplitPaneDividerVerticalState\tinit", "contents": "SplitPaneDividerVerticalState ${1:state} = new SplitPaneDividerVerticalState($2);"},
		{"trigger": "I-SplitPanePainter\tinit", "contents": "SplitPanePainter ${1:painter} = new SplitPanePainter($2);"},
		{"trigger": "I-SplitPaneSkin\tinit", "contents": "SplitPaneSkin ${1:skin} = new SplitPaneSkin($2);"},
		{"trigger": "I-SplitPaneUI\tinit", "contents": "SplitPaneUI ${1:splitpaneui} = new SplitPaneUI($2);"},
		{"trigger": "I-SplitPaneVerticalState\tinit", "contents": "SplitPaneVerticalState ${1:state} = new SplitPaneVerticalState($2);"},
		{"trigger": "I-Spliterator\tinit", "contents": "Spliterator ${1:spliterator} = new Spliterator($2);"},
		{"trigger": "I-Spliterators\tinit", "contents": "Spliterators ${1:spliterators} = new Spliterators($2);"},
		{"trigger": "I-SplittableRandom\tinit", "contents": "SplittableRandom ${1:random} = new SplittableRandom($2);"},
		{"trigger": "I-SpotLight\tinit", "contents": "SpotLight ${1:light} = new SpotLight($2);"},
		{"trigger": "I-Spring\tinit", "contents": "Spring ${1:spring} = new Spring($2);"},
		{"trigger": "I-SpringLayout\tinit", "contents": "SpringLayout ${1:layout} = new SpringLayout($2);"},
		{"trigger": "I-SslRMIClientSocketFactory\tinit", "contents": "SslRMIClientSocketFactory ${1:factory} = new SslRMIClientSocketFactory($2);"},
		{"trigger": "I-SslRMIServerSocketFactory\tinit", "contents": "SslRMIServerSocketFactory ${1:factory} = new SslRMIServerSocketFactory($2);"},
		{"trigger": "I-StAXEvent2SAX\tinit", "contents": "StAXEvent2SAX ${1:staxevent2sax} = new StAXEvent2SAX($2);"},
		{"trigger": "I-StAXInputSource\tinit", "contents": "StAXInputSource ${1:source} = new StAXInputSource($2);"},
		{"trigger": "I-StAXLocationWrapper\tinit", "contents": "StAXLocationWrapper ${1:wrapper} = new StAXLocationWrapper($2);"},
		{"trigger": "I-StAXResult\tinit", "contents": "StAXResult ${1:result} = new StAXResult($2);"},
		{"trigger": "I-StAXSchemaParser\tinit", "contents": "StAXSchemaParser ${1:parser} = new StAXSchemaParser($2);"},
		{"trigger": "I-StAXSource\tinit", "contents": "StAXSource ${1:source} = new StAXSource($2);"},
		{"trigger": "I-StAXStream2SAX\tinit", "contents": "StAXStream2SAX ${1:staxstream2sax} = new StAXStream2SAX($2);"},
		{"trigger": "I-StAXValidatorHelper\tinit", "contents": "StAXValidatorHelper ${1:helper} = new StAXValidatorHelper($2);"},
		{"trigger": "I-Stable\tinit", "contents": "Stable ${1:stable} = new Stable($2);"},
		{"trigger": "I-Stack\tinit", "contents": "Stack<${1:String}> ${2:stack} = new Stack<>();"},
		{"trigger": "I-StackConsumer\tinit", "contents": "StackConsumer ${1:consumer} = new StackConsumer($2);"},
		{"trigger": "I-StackInstruction\tinit", "contents": "StackInstruction ${1:instruction} = new StackInstruction($2);"},
		{"trigger": "I-StackMap\tinit", "contents": "StackMap ${1:map} = new StackMap($2);"},
		{"trigger": "I-StackMapEntry\tinit", "contents": "StackMapEntry ${1:entry} = new StackMapEntry($2);"},
		{"trigger": "I-StackMapType\tinit", "contents": "StackMapType ${1:type} = new StackMapType($2);"},
		{"trigger": "I-StackOverflowError\tinit", "contents": "StackOverflowError ${1:error} = new StackOverflowError($2);"},
		{"trigger": "I-StackPane\tinit", "contents": "StackPane ${1:pane} = new StackPane($2);"},
		{"trigger": "I-StackPaneBuilder\tinit", "contents": "StackPaneBuilder ${1:builder} = new StackPaneBuilder($2);"},
		{"trigger": "I-StackProducer\tinit", "contents": "StackProducer ${1:producer} = new StackProducer($2);"},
		{"trigger": "I-StackTraceElement\tinit", "contents": "StackTraceElement ${1:element} = new StackTraceElement($2);"},
		{"trigger": "I-StackedAreaChart\tinit", "contents": "StackedAreaChart ${1:chart} = new StackedAreaChart($2);"},
		{"trigger": "I-StackedAreaChartBuilder\tinit", "contents": "StackedAreaChartBuilder ${1:builder} = new StackedAreaChartBuilder($2);"},
		{"trigger": "I-StackedBarChart\tinit", "contents": "StackedBarChart ${1:chart} = new StackedBarChart($2);"},
		{"trigger": "I-StackedBarChartBuilder\tinit", "contents": "StackedBarChartBuilder ${1:builder} = new StackedBarChartBuilder($2);"},
		{"trigger": "I-Stage\tinit", "contents": "Stage ${1:stage} = new Stage($2);"},
		{"trigger": "I-StageBuilder\tinit", "contents": "StageBuilder ${1:builder} = new StageBuilder($2);"},
		{"trigger": "I-StageHelper\tinit", "contents": "StageHelper ${1:helper} = new StageHelper($2);"},
		{"trigger": "I-StagePeerListener\tinit", "contents": "StagePeerListener ${1:listener} = new StagePeerListener($2);"},
		{"trigger": "I-StageStyle\tinit", "contents": "StageStyle ${1:style} = new StageStyle($2);"},
		{"trigger": "I-StampedLock\tinit", "contents": "StampedLock ${1:lock} = new StampedLock($2);"},
		{"trigger": "I-StandardCharsets\tinit", "contents": "StandardCharsets ${1:charsets} = new StandardCharsets($2);"},
		{"trigger": "I-StandardCopyOption\tinit", "contents": "StandardCopyOption ${1:option} = new StandardCopyOption($2);"},
		{"trigger": "I-StandardCursorFrame\tinit", "contents": "StandardCursorFrame ${1:frame} = new StandardCursorFrame($2);"},
		{"trigger": "I-StandardEmitterMBean\tinit", "contents": "StandardEmitterMBean ${1:bean} = new StandardEmitterMBean($2);"},
		{"trigger": "I-StandardJavaFileManager\tinit", "contents": "StandardJavaFileManager ${1:manager} = new StandardJavaFileManager($2);"},
		{"trigger": "I-StandardLocation\tinit", "contents": "StandardLocation ${1:location} = new StandardLocation($2);"},
		{"trigger": "I-StandardMBean\tinit", "contents": "StandardMBean ${1:bean} = new StandardMBean($2);"},
		{"trigger": "I-StandardMBeanIntrospector\tinit", "contents": "StandardMBeanIntrospector ${1:introspector} = new StandardMBeanIntrospector($2);"},
		{"trigger": "I-StandardMBeanSupport\tinit", "contents": "StandardMBeanSupport ${1:support} = new StandardMBeanSupport($2);"},
		{"trigger": "I-StandardMetadataFormat\tinit", "contents": "StandardMetadataFormat ${1:format} = new StandardMetadataFormat($2);"},
		{"trigger": "I-StandardMetadataFormatResources\tinit", "contents": "StandardMetadataFormatResources ${1:resources} = new StandardMetadataFormatResources($2);"},
		{"trigger": "I-StandardOpenOption\tinit", "contents": "StandardOpenOption ${1:option} = new StandardOpenOption($2);"},
		{"trigger": "I-StandardParserConfiguration\tinit", "contents": "StandardParserConfiguration ${1:configuration} = new StandardParserConfiguration($2);"},
		{"trigger": "I-StandardProtocolFamily\tinit", "contents": "StandardProtocolFamily ${1:family} = new StandardProtocolFamily($2);"},
		{"trigger": "I-StandardSocketOptions\tinit", "contents": "StandardSocketOptions ${1:options} = new StandardSocketOptions($2);"},
		{"trigger": "I-StandardWatchEventKinds\tinit", "contents": "StandardWatchEventKinds ${1:kinds} = new StandardWatchEventKinds($2);"},
		{"trigger": "I-StartDocument\tinit", "contents": "StartDocument ${1:document} = new StartDocument($2);"},
		{"trigger": "I-StartElement\tinit", "contents": "StartElement ${1:element} = new StartElement($2);"},
		{"trigger": "I-StartElementTree\tinit", "contents": "StartElementTree ${1:tree} = new StartElementTree($2);"},
		{"trigger": "I-StartTlsRequest\tinit", "contents": "StartTlsRequest ${1:request} = new StartTlsRequest($2);"},
		{"trigger": "I-StartTlsResponse\tinit", "contents": "StartTlsResponse ${1:response} = new StartTlsResponse($2);"},
		{"trigger": "I-StartsWithCall\tinit", "contents": "StartsWithCall ${1:call} = new StartsWithCall($2);"},
		{"trigger": "I-State\tinit", "contents": "State ${1:state} = new State($2);"},
		{"trigger": "I-StateEdit\tinit", "contents": "StateEdit ${1:edit} = new StateEdit($2);"},
		{"trigger": "I-StateEditable\tinit", "contents": "StateEditable ${1:editable} = new StateEditable($2);"},
		{"trigger": "I-StateEngine\tinit", "contents": "StateEngine ${1:engine} = new StateEngine($2);"},
		{"trigger": "I-StateEngineFactory\tinit", "contents": "StateEngineFactory ${1:factory} = new StateEngineFactory($2);"},
		{"trigger": "I-StateFactory\tinit", "contents": "StateFactory ${1:factory} = new StateFactory($2);"},
		{"trigger": "I-StateImpl\tinit", "contents": "StateImpl ${1:impl} = new StateImpl($2);"},
		{"trigger": "I-StateInvariantError\tinit", "contents": "StateInvariantError ${1:error} = new StateInvariantError($2);"},
		{"trigger": "I-Statement\tinit", "contents": "Statement ${1:statement} = new Statement($2);"},
		{"trigger": "I-StatementEvent\tinit", "contents": "StatementEvent ${1:event} = new StatementEvent($2);"},
		{"trigger": "I-StatementEventListener\tinit", "contents": "StatementEventListener ${1:listener} = new StatementEventListener($2);"},
		{"trigger": "I-StatementTree\tinit", "contents": "StatementTree ${1:tree} = new StatementTree($2);"},
		{"trigger": "I-StatisticMonitoredAttribute\tinit", "contents": "StatisticMonitoredAttribute ${1:attribute} = new StatisticMonitoredAttribute($2);"},
		{"trigger": "I-StatisticsAccumulator\tinit", "contents": "StatisticsAccumulator ${1:accumulator} = new StatisticsAccumulator($2);"},
		{"trigger": "I-Status\tinit", "contents": "Status ${1:status} = new Status($2);"},
		{"trigger": "I-Step\tinit", "contents": "Step ${1:step} = new Step($2);"},
		{"trigger": "I-StepIterator\tinit", "contents": "StepIterator ${1:iterator} = new StepIterator($2);"},
		{"trigger": "I-StepPattern\tinit", "contents": "StepPattern ${1:pattern} = new StepPattern($2);"},
		{"trigger": "I-Stop\tinit", "contents": "Stop ${1:stop} = new Stop($2);"},
		{"trigger": "I-StopBuilder\tinit", "contents": "StopBuilder ${1:builder} = new StopBuilder($2);"},
		{"trigger": "I-StopConverter\tinit", "contents": "StopConverter ${1:converter} = new StopConverter($2);"},
		{"trigger": "I-StopParseException\tinit", "contents": "StopParseException ${1:exception} = new StopParseException($2);"},
		{"trigger": "I-StorageResolver\tinit", "contents": "StorageResolver ${1:resolver} = new StorageResolver($2);"},
		{"trigger": "I-StorageResolverException\tinit", "contents": "StorageResolverException ${1:exception} = new StorageResolverException($2);"},
		{"trigger": "I-StorageResolverSpi\tinit", "contents": "StorageResolverSpi ${1:spi} = new StorageResolverSpi($2);"},
		{"trigger": "I-StoreInstruction\tinit", "contents": "StoreInstruction ${1:instruction} = new StoreInstruction($2);"},
		{"trigger": "I-Stream\tinit", "contents": "Stream ${1:stream} = new Stream($2);"},
		{"trigger": "I-StreamCharacterIterator\tinit", "contents": "StreamCharacterIterator ${1:iterator} = new StreamCharacterIterator($2);"},
		{"trigger": "I-StreamCloser\tinit", "contents": "StreamCloser ${1:closer} = new StreamCloser($2);"},
		{"trigger": "I-StreamCorruptedException\tinit", "contents": "StreamCorruptedException ${1:exception} = new StreamCorruptedException($2);"},
		{"trigger": "I-StreamFilter\tinit", "contents": "StreamFilter ${1:filter} = new StreamFilter($2);"},
		{"trigger": "I-StreamFinalizer\tinit", "contents": "StreamFinalizer ${1:finalizer} = new StreamFinalizer($2);"},
		{"trigger": "I-StreamHandler\tinit", "contents": "StreamHandler ${1:handler} = new StreamHandler($2);"},
		{"trigger": "I-StreamOpFlag\tinit", "contents": "StreamOpFlag ${1:flag} = new StreamOpFlag($2);"},
		{"trigger": "I-StreamPrintService\tinit", "contents": "StreamPrintService ${1:service} = new StreamPrintService($2);"},
		{"trigger": "I-StreamPrintServiceFactory\tinit", "contents": "StreamPrintServiceFactory ${1:factory} = new StreamPrintServiceFactory($2);"},
		{"trigger": "I-StreamReaderDelegate\tinit", "contents": "StreamReaderDelegate ${1:delegate} = new StreamReaderDelegate($2);"},
		{"trigger": "I-StreamResult\tinit", "contents": "StreamResult ${1:result} = new StreamResult($2);"},
		{"trigger": "I-StreamShape\tinit", "contents": "StreamShape ${1:shape} = new StreamShape($2);"},
		{"trigger": "I-StreamSource\tinit", "contents": "StreamSource ${1:source} = new StreamSource($2);"},
		{"trigger": "I-StreamSpliterators\tinit", "contents": "StreamSpliterators ${1:spliterators} = new StreamSpliterators($2);"},
		{"trigger": "I-StreamSupport\tinit", "contents": "StreamSupport ${1:support} = new StreamSupport($2);"},
		{"trigger": "I-StreamTokenizer\tinit", "contents": "StreamTokenizer ${1:tokenizer} = new StreamTokenizer($2);"},
		{"trigger": "I-StreamValidatorHelper\tinit", "contents": "StreamValidatorHelper ${1:helper} = new StreamValidatorHelper($2);"},
		{"trigger": "I-Streamable\tinit", "contents": "Streamable ${1:streamable} = new Streamable($2);"},
		{"trigger": "I-StreamableValue\tinit", "contents": "StreamableValue ${1:value} = new StreamableValue($2);"},
		{"trigger": "I-Streams\tinit", "contents": "Streams ${1:streams} = new Streams($2);"},
		{"trigger": "I-StrictMath\tinit", "contents": "StrictMath ${1:math} = new StrictMath($2);"},
		{"trigger": "I-String\tinit", "contents": "String ${1:string} = new String($2);"},
		{"trigger": "I-StringArrayWrapper\tinit", "contents": "StringArrayWrapper ${1:wrapper} = new StringArrayWrapper($2);"},
		{"trigger": "I-StringBinding\tinit", "contents": "StringBinding ${1:binding} = new StringBinding($2);"},
		{"trigger": "I-StringBuffer\tinit", "contents": "StringBuffer ${1:buffer} = new StringBuffer($2);"},
		{"trigger": "I-StringBufferInputStream\tinit", "contents": "StringBufferInputStream ${1:stream} = new StringBufferInputStream($2);"},
		{"trigger": "I-StringBufferPool\tinit", "contents": "StringBufferPool ${1:pool} = new StringBufferPool($2);"},
		{"trigger": "I-StringBuilder\tinit", "contents": "StringBuilder ${1:builder} = new StringBuilder($2);"},
		{"trigger": "I-StringCall\tinit", "contents": "StringCall ${1:call} = new StringCall($2);"},
		{"trigger": "I-StringCase\tinit", "contents": "StringCase ${1:case} = new StringCase($2);"},
		{"trigger": "I-StringCharBuffer\tinit", "contents": "StringCharBuffer ${1:buffer} = new StringCharBuffer($2);"},
		{"trigger": "I-StringCharacterIterator\tinit", "contents": "StringCharacterIterator ${1:iterator} = new StringCharacterIterator($2);"},
		{"trigger": "I-StringCoding\tinit", "contents": "StringCoding ${1:coding} = new StringCoding($2);"},
		{"trigger": "I-StringComparable\tinit", "contents": "StringComparable ${1:comparable} = new StringComparable($2);"},
		{"trigger": "I-StringConstant\tinit", "contents": "StringConstant ${1:constant} = new StringConstant($2);"},
		{"trigger": "I-StringContent\tinit", "contents": "StringContent ${1:content} = new StringContent($2);"},
		{"trigger": "I-StringConverter\tinit", "contents": "StringConverter ${1:converter} = new StringConverter($2);"},
		{"trigger": "I-StringDV\tinit", "contents": "StringDV ${1:stringdv} = new StringDV($2);"},
		{"trigger": "I-StringDatatypeValidator\tinit", "contents": "StringDatatypeValidator ${1:validator} = new StringDatatypeValidator($2);"},
		{"trigger": "I-StringExpression\tinit", "contents": "StringExpression ${1:expression} = new StringExpression($2);"},
		{"trigger": "I-StringFormatter\tinit", "contents": "StringFormatter ${1:formatter} = new StringFormatter($2);"},
		{"trigger": "I-StringHolder\tinit", "contents": "StringHolder ${1:holder} = new StringHolder($2);"},
		{"trigger": "I-StringIndexOutOfBoundsException\tinit", "contents": "StringIndexOutOfBoundsException ${1:exception} = new StringIndexOutOfBoundsException($2);"},
		{"trigger": "I-StringJoiner\tinit", "contents": "StringJoiner ${1:joiner} = new StringJoiner($2);"},
		{"trigger": "I-StringLengthCall\tinit", "contents": "StringLengthCall ${1:call} = new StringLengthCall($2);"},
		{"trigger": "I-StringList\tinit", "contents": "StringList ${1:list} = new StringList($2);"},
		{"trigger": "I-StringListImpl\tinit", "contents": "StringListImpl ${1:impl} = new StringListImpl($2);"},
		{"trigger": "I-StringMonitor\tinit", "contents": "StringMonitor ${1:monitor} = new StringMonitor($2);"},
		{"trigger": "I-StringMonitorMBean\tinit", "contents": "StringMonitorMBean ${1:bean} = new StringMonitorMBean($2);"},
		{"trigger": "I-StringMonitoredAttributeBase\tinit", "contents": "StringMonitoredAttributeBase ${1:base} = new StringMonitoredAttributeBase($2);"},
		{"trigger": "I-StringNameHelper\tinit", "contents": "StringNameHelper ${1:helper} = new StringNameHelper($2);"},
		{"trigger": "I-StringOutputBuffer\tinit", "contents": "StringOutputBuffer ${1:buffer} = new StringOutputBuffer($2);"},
		{"trigger": "I-StringPair\tinit", "contents": "StringPair ${1:pair} = new StringPair($2);"},
		{"trigger": "I-StringProperty\tinit", "contents": "StringProperty ${1:property} = new StringProperty($2);"},
		{"trigger": "I-StringPropertyBase\tinit", "contents": "StringPropertyBase ${1:base} = new StringPropertyBase($2);"},
		{"trigger": "I-StringReader\tinit", "contents": "StringReader ${1:reader} = new StringReader($2);"},
		{"trigger": "I-StringRefAddr\tinit", "contents": "StringRefAddr ${1:addr} = new StringRefAddr($2);"},
		{"trigger": "I-StringSelection\tinit", "contents": "StringSelection ${1:selection} = new StringSelection($2);"},
		{"trigger": "I-StringSeqHelper\tinit", "contents": "StringSeqHelper ${1:helper} = new StringSeqHelper($2);"},
		{"trigger": "I-StringSeqHolder\tinit", "contents": "StringSeqHolder ${1:holder} = new StringSeqHolder($2);"},
		{"trigger": "I-StringStack\tinit", "contents": "StringStack ${1:stack} = new StringStack($2);"},
		{"trigger": "I-StringStore\tinit", "contents": "StringStore ${1:store} = new StringStore($2);"},
		{"trigger": "I-StringToIntTable\tinit", "contents": "StringToIntTable ${1:table} = new StringToIntTable($2);"},
		{"trigger": "I-StringToStringTable\tinit", "contents": "StringToStringTable ${1:table} = new StringToStringTable($2);"},
		{"trigger": "I-StringToStringTableVector\tinit", "contents": "StringToStringTableVector ${1:vector} = new StringToStringTableVector($2);"},
		{"trigger": "I-StringTokenizer\tinit", "contents": "StringTokenizer ${1:tokenizer} = new StringTokenizer($2);"},
		{"trigger": "I-StringType\tinit", "contents": "StringType ${1:type} = new StringType($2);"},
		{"trigger": "I-StringValueExp\tinit", "contents": "StringValueExp ${1:exp} = new StringValueExp($2);"},
		{"trigger": "I-StringValueHandler\tinit", "contents": "StringValueHandler ${1:handler} = new StringValueHandler($2);"},
		{"trigger": "I-StringValueHelper\tinit", "contents": "StringValueHelper ${1:helper} = new StringValueHelper($2);"},
		{"trigger": "I-StringVector\tinit", "contents": "StringVector ${1:vector} = new StringVector($2);"},
		{"trigger": "I-StringWriter\tinit", "contents": "StringWriter ${1:writer} = new StringWriter($2);"},
		{"trigger": "I-StripFilter\tinit", "contents": "StripFilter ${1:filter} = new StripFilter($2);"},
		{"trigger": "I-StripWhitespaceFilter\tinit", "contents": "StripWhitespaceFilter ${1:filter} = new StripWhitespaceFilter($2);"},
		{"trigger": "I-Stroke\tinit", "contents": "Stroke ${1:stroke} = new Stroke($2);"},
		{"trigger": "I-StrokeBorder\tinit", "contents": "StrokeBorder ${1:border} = new StrokeBorder($2);"},
		{"trigger": "I-StrokeBorderPaintConverter\tinit", "contents": "StrokeBorderPaintConverter ${1:converter} = new StrokeBorderPaintConverter($2);"},
		{"trigger": "I-StrokeLineCap\tinit", "contents": "StrokeLineCap ${1:cap} = new StrokeLineCap($2);"},
		{"trigger": "I-StrokeLineJoin\tinit", "contents": "StrokeLineJoin ${1:join} = new StrokeLineJoin($2);"},
		{"trigger": "I-StrokeTransition\tinit", "contents": "StrokeTransition ${1:transition} = new StrokeTransition($2);"},
		{"trigger": "I-StrokeTransitionBuilder\tinit", "contents": "StrokeTransitionBuilder ${1:builder} = new StrokeTransitionBuilder($2);"},
		{"trigger": "I-StrokeType\tinit", "contents": "StrokeType ${1:type} = new StrokeType($2);"},
		{"trigger": "I-Stroker\tinit", "contents": "Stroker ${1:stroker} = new Stroker($2);"},
		{"trigger": "I-Struct\tinit", "contents": "Struct ${1:struct} = new Struct($2);"},
		{"trigger": "I-StructMember\tinit", "contents": "StructMember ${1:member} = new StructMember($2);"},
		{"trigger": "I-StructMemberHelper\tinit", "contents": "StructMemberHelper ${1:helper} = new StructMemberHelper($2);"},
		{"trigger": "I-Stub\tinit", "contents": "Stub ${1:stub} = new Stub($2);"},
		{"trigger": "I-StubAdapter\tinit", "contents": "StubAdapter ${1:adapter} = new StubAdapter($2);"},
		{"trigger": "I-StubDelegate\tinit", "contents": "StubDelegate ${1:delegate} = new StubDelegate($2);"},
		{"trigger": "I-StubNotFoundException\tinit", "contents": "StubNotFoundException ${1:exception} = new StubNotFoundException($2);"},
		{"trigger": "I-StubWrapper\tinit", "contents": "StubWrapper ${1:wrapper} = new StubWrapper($2);"},
		{"trigger": "I-Style\tinit", "contents": "Style ${1:style} = new Style($2);"},
		{"trigger": "I-StyleCache\tinit", "contents": "StyleCache ${1:cache} = new StyleCache($2);"},
		{"trigger": "I-StyleCacheEntry\tinit", "contents": "StyleCacheEntry ${1:entry} = new StyleCacheEntry($2);"},
		{"trigger": "I-StyleClass\tinit", "contents": "StyleClass ${1:class} = new StyleClass($2);"},
		{"trigger": "I-StyleClassSet\tinit", "contents": "StyleClassSet ${1:set} = new StyleClassSet($2);"},
		{"trigger": "I-StyleConstants\tinit", "contents": "StyleConstants ${1:constants} = new StyleConstants($2);"},
		{"trigger": "I-StyleContext\tinit", "contents": "StyleContext ${1:context} = new StyleContext($2);"},
		{"trigger": "I-StyleConverter\tinit", "contents": "StyleConverter ${1:converter} = new StyleConverter($2);"},
		{"trigger": "I-StyleConverterImpl\tinit", "contents": "StyleConverterImpl ${1:impl} = new StyleConverterImpl($2);"},
		{"trigger": "I-StyleManager\tinit", "contents": "StyleManager ${1:manager} = new StyleManager($2);"},
		{"trigger": "I-StyleMap\tinit", "contents": "StyleMap ${1:map} = new StyleMap($2);"},
		{"trigger": "I-StyleOrigin\tinit", "contents": "StyleOrigin ${1:origin} = new StyleOrigin($2);"},
		{"trigger": "I-StyleSheet\tinit", "contents": "StyleSheet ${1:sheet} = new StyleSheet($2);"},
		{"trigger": "I-StyleSheetImpl\tinit", "contents": "StyleSheetImpl ${1:impl} = new StyleSheetImpl($2);"},
		{"trigger": "I-StyleSheetList\tinit", "contents": "StyleSheetList ${1:list} = new StyleSheetList($2);"},
		{"trigger": "I-StyleSheetListImpl\tinit", "contents": "StyleSheetListImpl ${1:impl} = new StyleSheetListImpl($2);"},
		{"trigger": "I-Styleable\tinit", "contents": "Styleable ${1:styleable} = new Styleable($2);"},
		{"trigger": "I-StyleableBooleanProperty\tinit", "contents": "StyleableBooleanProperty ${1:property} = new StyleableBooleanProperty($2);"},
		{"trigger": "I-StyleableDoubleProperty\tinit", "contents": "StyleableDoubleProperty ${1:property} = new StyleableDoubleProperty($2);"},
		{"trigger": "I-StyleableFloatProperty\tinit", "contents": "StyleableFloatProperty ${1:property} = new StyleableFloatProperty($2);"},
		{"trigger": "I-StyleableIntegerProperty\tinit", "contents": "StyleableIntegerProperty ${1:property} = new StyleableIntegerProperty($2);"},
		{"trigger": "I-StyleableLongProperty\tinit", "contents": "StyleableLongProperty ${1:property} = new StyleableLongProperty($2);"},
		{"trigger": "I-StyleableObjectProperty\tinit", "contents": "StyleableObjectProperty ${1:property} = new StyleableObjectProperty($2);"},
		{"trigger": "I-StyleableProperty\tinit", "contents": "StyleableProperty ${1:property} = new StyleableProperty($2);"},
		{"trigger": "I-StyleablePropertyFactory\tinit", "contents": "StyleablePropertyFactory ${1:factory} = new StyleablePropertyFactory($2);"},
		{"trigger": "I-StyleableStringProperty\tinit", "contents": "StyleableStringProperty ${1:property} = new StyleableStringProperty($2);"},
		{"trigger": "I-StyledDocument\tinit", "contents": "StyledDocument ${1:document} = new StyledDocument($2);"},
		{"trigger": "I-StyledEditorKit\tinit", "contents": "StyledEditorKit ${1:kit} = new StyledEditorKit($2);"},
		{"trigger": "I-StyledParagraph\tinit", "contents": "StyledParagraph ${1:paragraph} = new StyledParagraph($2);"},
		{"trigger": "I-Stylesheet\tinit", "contents": "Stylesheet ${1:stylesheet} = new Stylesheet($2);"},
		{"trigger": "I-StylesheetPIHandler\tinit", "contents": "StylesheetPIHandler ${1:handler} = new StylesheetPIHandler($2);"},
		{"trigger": "I-SubContextList\tinit", "contents": "SubContextList ${1:list} = new SubContextList($2);"},
		{"trigger": "I-SubCssMetaData\tinit", "contents": "SubCssMetaData ${1:data} = new SubCssMetaData($2);"},
		{"trigger": "I-SubImageInputStream\tinit", "contents": "SubImageInputStream ${1:stream} = new SubImageInputStream($2);"},
		{"trigger": "I-SubScene\tinit", "contents": "SubScene ${1:scene} = new SubScene($2);"},
		{"trigger": "I-SubSceneHelper\tinit", "contents": "SubSceneHelper ${1:helper} = new SubSceneHelper($2);"},
		{"trigger": "I-SubSceneTraversalEngine\tinit", "contents": "SubSceneTraversalEngine ${1:engine} = new SubSceneTraversalEngine($2);"},
		{"trigger": "I-SuballocatedByteVector\tinit", "contents": "SuballocatedByteVector ${1:vector} = new SuballocatedByteVector($2);"},
		{"trigger": "I-SuballocatedIntVector\tinit", "contents": "SuballocatedIntVector ${1:vector} = new SuballocatedIntVector($2);"},
		{"trigger": "I-Subject\tinit", "contents": "Subject ${1:subject} = new Subject($2);"},
		{"trigger": "I-SubjectDelegationPermission\tinit", "contents": "SubjectDelegationPermission ${1:permission} = new SubjectDelegationPermission($2);"},
		{"trigger": "I-SubjectDelegator\tinit", "contents": "SubjectDelegator ${1:delegator} = new SubjectDelegator($2);"},
		{"trigger": "I-SubjectDomainCombiner\tinit", "contents": "SubjectDomainCombiner ${1:combiner} = new SubjectDomainCombiner($2);"},
		{"trigger": "I-SubstitutionGroupHandler\tinit", "contents": "SubstitutionGroupHandler ${1:handler} = new SubstitutionGroupHandler($2);"},
		{"trigger": "I-SubtitleTrack\tinit", "contents": "SubtitleTrack ${1:track} = new SubtitleTrack($2);"},
		{"trigger": "I-SunJmxMBeanServer\tinit", "contents": "SunJmxMBeanServer ${1:server} = new SunJmxMBeanServer($2);"},
		{"trigger": "I-Supplier\tinit", "contents": "Supplier ${1:supplier} = new Supplier($2);"},
		{"trigger": "I-SupportedAnnotationTypes\tinit", "contents": "SupportedAnnotationTypes ${1:types} = new SupportedAnnotationTypes($2);"},
		{"trigger": "I-SupportedOptions\tinit", "contents": "SupportedOptions ${1:options} = new SupportedOptions($2);"},
		{"trigger": "I-SupportedSourceVersion\tinit", "contents": "SupportedSourceVersion ${1:version} = new SupportedSourceVersion($2);"},
		{"trigger": "I-SupportedValuesAttribute\tinit", "contents": "SupportedValuesAttribute ${1:attribute} = new SupportedValuesAttribute($2);"},
		{"trigger": "I-SuppressWarnings\tinit", "contents": "SuppressWarnings ${1:warnings} = new SuppressWarnings($2);"},
		{"trigger": "I-Surface\tinit", "contents": "Surface ${1:surface} = new Surface($2);"},
		{"trigger": "I-SwingConstants\tinit", "contents": "SwingConstants ${1:constants} = new SwingConstants($2);"},
		{"trigger": "I-SwingCursors\tinit", "contents": "SwingCursors ${1:cursors} = new SwingCursors($2);"},
		{"trigger": "I-SwingDnD\tinit", "contents": "SwingDnD ${1:swingdnd} = new SwingDnD($2);"},
		{"trigger": "I-SwingDragSource\tinit", "contents": "SwingDragSource ${1:source} = new SwingDragSource($2);"},
		{"trigger": "I-SwingEvents\tinit", "contents": "SwingEvents ${1:events} = new SwingEvents($2);"},
		{"trigger": "I-SwingFXUtils\tinit", "contents": "SwingFXUtils ${1:utils} = new SwingFXUtils($2);"},
		{"trigger": "I-SwingHeavyWeight\tinit", "contents": "SwingHeavyWeight ${1:weight} = new SwingHeavyWeight($2);"},
		{"trigger": "I-SwingNode\tinit", "contents": "SwingNode ${1:node} = new SwingNode($2);"},
		{"trigger": "I-SwingPaintEventDispatcher\tinit", "contents": "SwingPaintEventDispatcher ${1:dispatcher} = new SwingPaintEventDispatcher($2);"},
		{"trigger": "I-SwingPropertyChangeSupport\tinit", "contents": "SwingPropertyChangeSupport ${1:support} = new SwingPropertyChangeSupport($2);"},
		{"trigger": "I-SwingUtilities\tinit", "contents": "SwingUtilities ${1:utilities} = new SwingUtilities($2);"},
		{"trigger": "I-SwingWorker\tinit", "contents": "SwingWorker ${1:worker} = new SwingWorker($2);"},
		{"trigger": "I-SwipeEvent\tinit", "contents": "SwipeEvent ${1:event} = new SwipeEvent($2);"},
		{"trigger": "I-SwipeGesture\tinit", "contents": "SwipeGesture ${1:gesture} = new SwipeGesture($2);"},
		{"trigger": "I-SwipeGestureRecognizer\tinit", "contents": "SwipeGestureRecognizer ${1:recognizer} = new SwipeGestureRecognizer($2);"},
		{"trigger": "I-SwitchPoint\tinit", "contents": "SwitchPoint ${1:point} = new SwitchPoint($2);"},
		{"trigger": "I-SwitchTree\tinit", "contents": "SwitchTree ${1:tree} = new SwitchTree($2);"},
		{"trigger": "I-Symbol\tinit", "contents": "Symbol ${1:symbol} = new Symbol($2);"},
		{"trigger": "I-SymbolHash\tinit", "contents": "SymbolHash ${1:hash} = new SymbolHash($2);"},
		{"trigger": "I-SymbolTable\tinit", "contents": "SymbolTable ${1:table} = new SymbolTable($2);"},
		{"trigger": "I-SyncFactory\tinit", "contents": "SyncFactory ${1:factory} = new SyncFactory($2);"},
		{"trigger": "I-SyncFactoryException\tinit", "contents": "SyncFactoryException ${1:exception} = new SyncFactoryException($2);"},
		{"trigger": "I-SyncFailedException\tinit", "contents": "SyncFailedException ${1:exception} = new SyncFailedException($2);"},
		{"trigger": "I-SyncProvider\tinit", "contents": "SyncProvider ${1:provider} = new SyncProvider($2);"},
		{"trigger": "I-SyncProviderException\tinit", "contents": "SyncProviderException ${1:exception} = new SyncProviderException($2);"},
		{"trigger": "I-SyncResolver\tinit", "contents": "SyncResolver ${1:resolver} = new SyncResolver($2);"},
		{"trigger": "I-SyncScopeHelper\tinit", "contents": "SyncScopeHelper ${1:helper} = new SyncScopeHelper($2);"},
		{"trigger": "I-SynchronizedSymbolTable\tinit", "contents": "SynchronizedSymbolTable ${1:table} = new SynchronizedSymbolTable($2);"},
		{"trigger": "I-SynchronizedTree\tinit", "contents": "SynchronizedTree ${1:tree} = new SynchronizedTree($2);"},
		{"trigger": "I-SynchronousQueue\tinit", "contents": "SynchronousQueue ${1:queue} = new SynchronousQueue($2);"},
		{"trigger": "I-SyntaxTreeNode\tinit", "contents": "SyntaxTreeNode ${1:node} = new SyntaxTreeNode($2);"},
		{"trigger": "I-SynthArrowButton\tinit", "contents": "SynthArrowButton ${1:button} = new SynthArrowButton($2);"},
		{"trigger": "I-SynthBorder\tinit", "contents": "SynthBorder ${1:border} = new SynthBorder($2);"},
		{"trigger": "I-SynthButtonUI\tinit", "contents": "SynthButtonUI ${1:synthbuttonui} = new SynthButtonUI($2);"},
		{"trigger": "I-SynthCheckBoxMenuItemUI\tinit", "contents": "SynthCheckBoxMenuItemUI ${1:synthcheckboxmenuitemui} = new SynthCheckBoxMenuItemUI($2);"},
		{"trigger": "I-SynthCheckBoxUI\tinit", "contents": "SynthCheckBoxUI ${1:synthcheckboxui} = new SynthCheckBoxUI($2);"},
		{"trigger": "I-SynthColorChooserUI\tinit", "contents": "SynthColorChooserUI ${1:synthcolorchooserui} = new SynthColorChooserUI($2);"},
		{"trigger": "I-SynthComboBoxUI\tinit", "contents": "SynthComboBoxUI ${1:synthcomboboxui} = new SynthComboBoxUI($2);"},
		{"trigger": "I-SynthComboPopup\tinit", "contents": "SynthComboPopup ${1:popup} = new SynthComboPopup($2);"},
		{"trigger": "I-SynthConstants\tinit", "contents": "SynthConstants ${1:constants} = new SynthConstants($2);"},
		{"trigger": "I-SynthContext\tinit", "contents": "SynthContext ${1:context} = new SynthContext($2);"},
		{"trigger": "I-SynthDefaultLookup\tinit", "contents": "SynthDefaultLookup ${1:lookup} = new SynthDefaultLookup($2);"},
		{"trigger": "I-SynthDesktopIconUI\tinit", "contents": "SynthDesktopIconUI ${1:synthdesktopiconui} = new SynthDesktopIconUI($2);"},
		{"trigger": "I-SynthDesktopPaneUI\tinit", "contents": "SynthDesktopPaneUI ${1:synthdesktoppaneui} = new SynthDesktopPaneUI($2);"},
		{"trigger": "I-SynthEditorPaneUI\tinit", "contents": "SynthEditorPaneUI ${1:syntheditorpaneui} = new SynthEditorPaneUI($2);"},
		{"trigger": "I-SynthFormattedTextFieldUI\tinit", "contents": "SynthFormattedTextFieldUI ${1:synthformattedtextfieldui} = new SynthFormattedTextFieldUI($2);"},
		{"trigger": "I-SynthGraphicsUtils\tinit", "contents": "SynthGraphicsUtils ${1:utils} = new SynthGraphicsUtils($2);"},
		{"trigger": "I-SynthInternalFrameTitlePane\tinit", "contents": "SynthInternalFrameTitlePane ${1:pane} = new SynthInternalFrameTitlePane($2);"},
		{"trigger": "I-SynthInternalFrameUI\tinit", "contents": "SynthInternalFrameUI ${1:synthinternalframeui} = new SynthInternalFrameUI($2);"},
		{"trigger": "I-SynthLabelUI\tinit", "contents": "SynthLabelUI ${1:synthlabelui} = new SynthLabelUI($2);"},
		{"trigger": "I-SynthListUI\tinit", "contents": "SynthListUI ${1:synthlistui} = new SynthListUI($2);"},
		{"trigger": "I-SynthLookAndFeel\tinit", "contents": "SynthLookAndFeel ${1:feel} = new SynthLookAndFeel($2);"},
		{"trigger": "I-SynthMenuBarUI\tinit", "contents": "SynthMenuBarUI ${1:synthmenubarui} = new SynthMenuBarUI($2);"},
		{"trigger": "I-SynthMenuItemLayoutHelper\tinit", "contents": "SynthMenuItemLayoutHelper ${1:helper} = new SynthMenuItemLayoutHelper($2);"},
		{"trigger": "I-SynthMenuItemUI\tinit", "contents": "SynthMenuItemUI ${1:synthmenuitemui} = new SynthMenuItemUI($2);"},
		{"trigger": "I-SynthMenuLayout\tinit", "contents": "SynthMenuLayout ${1:layout} = new SynthMenuLayout($2);"},
		{"trigger": "I-SynthMenuUI\tinit", "contents": "SynthMenuUI ${1:synthmenuui} = new SynthMenuUI($2);"},
		{"trigger": "I-SynthOptionPaneUI\tinit", "contents": "SynthOptionPaneUI ${1:synthoptionpaneui} = new SynthOptionPaneUI($2);"},
		{"trigger": "I-SynthPainter\tinit", "contents": "SynthPainter ${1:painter} = new SynthPainter($2);"},
		{"trigger": "I-SynthPainterImpl\tinit", "contents": "SynthPainterImpl ${1:impl} = new SynthPainterImpl($2);"},
		{"trigger": "I-SynthPanelUI\tinit", "contents": "SynthPanelUI ${1:synthpanelui} = new SynthPanelUI($2);"},
		{"trigger": "I-SynthParser\tinit", "contents": "SynthParser ${1:parser} = new SynthParser($2);"},
		{"trigger": "I-SynthPasswordFieldUI\tinit", "contents": "SynthPasswordFieldUI ${1:synthpasswordfieldui} = new SynthPasswordFieldUI($2);"},
		{"trigger": "I-SynthPopupMenuUI\tinit", "contents": "SynthPopupMenuUI ${1:synthpopupmenuui} = new SynthPopupMenuUI($2);"},
		{"trigger": "I-SynthProgressBarUI\tinit", "contents": "SynthProgressBarUI ${1:synthprogressbarui} = new SynthProgressBarUI($2);"},
		{"trigger": "I-SynthRadioButtonMenuItemUI\tinit", "contents": "SynthRadioButtonMenuItemUI ${1:synthradiobuttonmenuitemui} = new SynthRadioButtonMenuItemUI($2);"},
		{"trigger": "I-SynthRadioButtonUI\tinit", "contents": "SynthRadioButtonUI ${1:synthradiobuttonui} = new SynthRadioButtonUI($2);"},
		{"trigger": "I-SynthRootPaneUI\tinit", "contents": "SynthRootPaneUI ${1:synthrootpaneui} = new SynthRootPaneUI($2);"},
		{"trigger": "I-SynthScrollBarUI\tinit", "contents": "SynthScrollBarUI ${1:synthscrollbarui} = new SynthScrollBarUI($2);"},
		{"trigger": "I-SynthScrollPaneUI\tinit", "contents": "SynthScrollPaneUI ${1:synthscrollpaneui} = new SynthScrollPaneUI($2);"},
		{"trigger": "I-SynthSeparatorUI\tinit", "contents": "SynthSeparatorUI ${1:synthseparatorui} = new SynthSeparatorUI($2);"},
		{"trigger": "I-SynthSliderUI\tinit", "contents": "SynthSliderUI ${1:synthsliderui} = new SynthSliderUI($2);"},
		{"trigger": "I-SynthSpinnerUI\tinit", "contents": "SynthSpinnerUI ${1:synthspinnerui} = new SynthSpinnerUI($2);"},
		{"trigger": "I-SynthSplitPaneDivider\tinit", "contents": "SynthSplitPaneDivider ${1:divider} = new SynthSplitPaneDivider($2);"},
		{"trigger": "I-SynthSplitPaneUI\tinit", "contents": "SynthSplitPaneUI ${1:synthsplitpaneui} = new SynthSplitPaneUI($2);"},
		{"trigger": "I-SynthStyle\tinit", "contents": "SynthStyle ${1:style} = new SynthStyle($2);"},
		{"trigger": "I-SynthStyleFactory\tinit", "contents": "SynthStyleFactory ${1:factory} = new SynthStyleFactory($2);"},
		{"trigger": "I-SynthTabbedPaneUI\tinit", "contents": "SynthTabbedPaneUI ${1:synthtabbedpaneui} = new SynthTabbedPaneUI($2);"},
		{"trigger": "I-SynthTableHeaderUI\tinit", "contents": "SynthTableHeaderUI ${1:synthtableheaderui} = new SynthTableHeaderUI($2);"},
		{"trigger": "I-SynthTableUI\tinit", "contents": "SynthTableUI ${1:synthtableui} = new SynthTableUI($2);"},
		{"trigger": "I-SynthTextAreaUI\tinit", "contents": "SynthTextAreaUI ${1:synthtextareaui} = new SynthTextAreaUI($2);"},
		{"trigger": "I-SynthTextFieldUI\tinit", "contents": "SynthTextFieldUI ${1:synthtextfieldui} = new SynthTextFieldUI($2);"},
		{"trigger": "I-SynthTextPaneUI\tinit", "contents": "SynthTextPaneUI ${1:synthtextpaneui} = new SynthTextPaneUI($2);"},
		{"trigger": "I-SynthToggleButtonUI\tinit", "contents": "SynthToggleButtonUI ${1:synthtogglebuttonui} = new SynthToggleButtonUI($2);"},
		{"trigger": "I-SynthToolBarUI\tinit", "contents": "SynthToolBarUI ${1:synthtoolbarui} = new SynthToolBarUI($2);"},
		{"trigger": "I-SynthToolTipUI\tinit", "contents": "SynthToolTipUI ${1:synthtooltipui} = new SynthToolTipUI($2);"},
		{"trigger": "I-SynthTreeUI\tinit", "contents": "SynthTreeUI ${1:synthtreeui} = new SynthTreeUI($2);"},
		{"trigger": "I-SynthUI\tinit", "contents": "SynthUI ${1:synthui} = new SynthUI($2);"},
		{"trigger": "I-SynthViewportUI\tinit", "contents": "SynthViewportUI ${1:synthviewportui} = new SynthViewportUI($2);"},
		{"trigger": "I-Synthesizer\tinit", "contents": "Synthesizer ${1:synthesizer} = new Synthesizer($2);"},
		{"trigger": "I-Synthetic\tinit", "contents": "Synthetic ${1:synthetic} = new Synthetic($2);"},
		{"trigger": "I-SyntheticRepository\tinit", "contents": "SyntheticRepository ${1:repository} = new SyntheticRepository($2);"},
		{"trigger": "I-SysFS\tinit", "contents": "SysFS ${1:sysfs} = new SysFS($2);"},
		{"trigger": "I-SysexMessage\tinit", "contents": "SysexMessage ${1:message} = new SysexMessage($2);"},
		{"trigger": "I-System\tinit", "contents": "System ${1:system} = new System($2);"},
		{"trigger": "I-SystemClipboard\tinit", "contents": "SystemClipboard ${1:clipboard} = new SystemClipboard($2);"},
		{"trigger": "I-SystemColor\tinit", "contents": "SystemColor ${1:color} = new SystemColor($2);"},
		{"trigger": "I-SystemException\tinit", "contents": "SystemException ${1:exception} = new SystemException($2);"},
		{"trigger": "I-SystemFlavorMap\tinit", "contents": "SystemFlavorMap ${1:map} = new SystemFlavorMap($2);"},
		{"trigger": "I-SystemIDResolver\tinit", "contents": "SystemIDResolver ${1:resolver} = new SystemIDResolver($2);"},
		{"trigger": "I-SystemProperties\tinit", "contents": "SystemProperties ${1:properties} = new SystemProperties($2);"},
		{"trigger": "I-SystemTray\tinit", "contents": "SystemTray ${1:tray} = new SystemTray($2);"},
		{"trigger": "I-SystemTrayPeer\tinit", "contents": "SystemTrayPeer ${1:peer} = new SystemTrayPeer($2);"},
		{"trigger": "I-TABLESWITCH\tinit", "contents": "TABLESWITCH ${1:tableswitch} = new TABLESWITCH($2);"},
		{"trigger": "I-TAG_ALTERNATE_IIOP_ADDRESS\tinit", "contents": "TAG_ALTERNATE_IIOP_ADDRESS ${1:tag} = new TAG_ALTERNATE_IIOP_ADDRESS($2);"},
		{"trigger": "I-TAG_CODE_SETS\tinit", "contents": "TAG_CODE_SETS ${1:tag} = new TAG_CODE_SETS($2);"},
		{"trigger": "I-TAG_INTERNET_IOP\tinit", "contents": "TAG_INTERNET_IOP ${1:tag} = new TAG_INTERNET_IOP($2);"},
		{"trigger": "I-TAG_JAVA_CODEBASE\tinit", "contents": "TAG_JAVA_CODEBASE ${1:tag} = new TAG_JAVA_CODEBASE($2);"},
		{"trigger": "I-TAG_MULTIPLE_COMPONENTS\tinit", "contents": "TAG_MULTIPLE_COMPONENTS ${1:tag} = new TAG_MULTIPLE_COMPONENTS($2);"},
		{"trigger": "I-TAG_ORB_TYPE\tinit", "contents": "TAG_ORB_TYPE ${1:tag} = new TAG_ORB_TYPE($2);"},
		{"trigger": "I-TAG_POLICIES\tinit", "contents": "TAG_POLICIES ${1:tag} = new TAG_POLICIES($2);"},
		{"trigger": "I-TAG_RMI_CUSTOM_MAX_STREAM_FORMAT\tinit", "contents": "TAG_RMI_CUSTOM_MAX_STREAM_FORMAT ${1:tag} = new TAG_RMI_CUSTOM_MAX_STREAM_FORMAT($2);"},
		{"trigger": "I-TCKind\tinit", "contents": "TCKind ${1:kind} = new TCKind($2);"},
		{"trigger": "I-TCPPortHelper\tinit", "contents": "TCPPortHelper ${1:helper} = new TCPPortHelper($2);"},
		{"trigger": "I-THREAD_POLICY_ID\tinit", "contents": "THREAD_POLICY_ID ${1:thread} = new THREAD_POLICY_ID($2);"},
		{"trigger": "I-TIMEOUT\tinit", "contents": "TIMEOUT ${1:timeout} = new TIMEOUT($2);"},
		{"trigger": "I-TKClipboard\tinit", "contents": "TKClipboard ${1:clipboard} = new TKClipboard($2);"},
		{"trigger": "I-TKDragGestureListener\tinit", "contents": "TKDragGestureListener ${1:listener} = new TKDragGestureListener($2);"},
		{"trigger": "I-TKDragSourceListener\tinit", "contents": "TKDragSourceListener ${1:listener} = new TKDragSourceListener($2);"},
		{"trigger": "I-TKDropTargetListener\tinit", "contents": "TKDropTargetListener ${1:listener} = new TKDropTargetListener($2);"},
		{"trigger": "I-TKListener\tinit", "contents": "TKListener ${1:listener} = new TKListener($2);"},
		{"trigger": "I-TKPulseListener\tinit", "contents": "TKPulseListener ${1:listener} = new TKPulseListener($2);"},
		{"trigger": "I-TKScene\tinit", "contents": "TKScene ${1:scene} = new TKScene($2);"},
		{"trigger": "I-TKSceneListener\tinit", "contents": "TKSceneListener ${1:listener} = new TKSceneListener($2);"},
		{"trigger": "I-TKScenePaintListener\tinit", "contents": "TKScenePaintListener ${1:listener} = new TKScenePaintListener($2);"},
		{"trigger": "I-TKScreenConfigurationListener\tinit", "contents": "TKScreenConfigurationListener ${1:listener} = new TKScreenConfigurationListener($2);"},
		{"trigger": "I-TKStage\tinit", "contents": "TKStage ${1:stage} = new TKStage($2);"},
		{"trigger": "I-TKStageListener\tinit", "contents": "TKStageListener ${1:listener} = new TKStageListener($2);"},
		{"trigger": "I-TKSystemMenu\tinit", "contents": "TKSystemMenu ${1:menu} = new TKSystemMenu($2);"},
		{"trigger": "I-TMSchema\tinit", "contents": "TMSchema ${1:schema} = new TMSchema($2);"},
		{"trigger": "I-TR9401CatalogReader\tinit", "contents": "TR9401CatalogReader ${1:reader} = new TR9401CatalogReader($2);"},
		{"trigger": "I-TRANSACTION_MODE\tinit", "contents": "TRANSACTION_MODE ${1:transaction} = new TRANSACTION_MODE($2);"},
		{"trigger": "I-TRANSACTION_REQUIRED\tinit", "contents": "TRANSACTION_REQUIRED ${1:transaction} = new TRANSACTION_REQUIRED($2);"},
		{"trigger": "I-TRANSACTION_ROLLEDBACK\tinit", "contents": "TRANSACTION_ROLLEDBACK ${1:transaction} = new TRANSACTION_ROLLEDBACK($2);"},
		{"trigger": "I-TRANSACTION_UNAVAILABLE\tinit", "contents": "TRANSACTION_UNAVAILABLE ${1:transaction} = new TRANSACTION_UNAVAILABLE($2);"},
		{"trigger": "I-TRANSIENT\tinit", "contents": "TRANSIENT ${1:transient} = new TRANSIENT($2);"},
		{"trigger": "I-TRANSPORT_RETRY\tinit", "contents": "TRANSPORT_RETRY ${1:transport} = new TRANSPORT_RETRY($2);"},
		{"trigger": "I-Tab\tinit", "contents": "Tab ${1:tab} = new Tab($2);"},
		{"trigger": "I-TabBuilder\tinit", "contents": "TabBuilder ${1:builder} = new TabBuilder($2);"},
		{"trigger": "I-TabExpander\tinit", "contents": "TabExpander ${1:expander} = new TabExpander($2);"},
		{"trigger": "I-TabOrderHelper\tinit", "contents": "TabOrderHelper ${1:helper} = new TabOrderHelper($2);"},
		{"trigger": "I-TabPane\tinit", "contents": "TabPane ${1:pane} = new TabPane($2);"},
		{"trigger": "I-TabPaneBehavior\tinit", "contents": "TabPaneBehavior ${1:behavior} = new TabPaneBehavior($2);"},
		{"trigger": "I-TabPaneBuilder\tinit", "contents": "TabPaneBuilder ${1:builder} = new TabPaneBuilder($2);"},
		{"trigger": "I-TabPaneSkin\tinit", "contents": "TabPaneSkin ${1:skin} = new TabPaneSkin($2);"},
		{"trigger": "I-TabSet\tinit", "contents": "TabSet ${1:set} = new TabSet($2);"},
		{"trigger": "I-TabStop\tinit", "contents": "TabStop ${1:stop} = new TabStop($2);"},
		{"trigger": "I-TabableView\tinit", "contents": "TabableView ${1:view} = new TabableView($2);"},
		{"trigger": "I-TabbedPanePainter\tinit", "contents": "TabbedPanePainter ${1:painter} = new TabbedPanePainter($2);"},
		{"trigger": "I-TabbedPaneTabAreaPainter\tinit", "contents": "TabbedPaneTabAreaPainter ${1:painter} = new TabbedPaneTabAreaPainter($2);"},
		{"trigger": "I-TabbedPaneTabPainter\tinit", "contents": "TabbedPaneTabPainter ${1:painter} = new TabbedPaneTabPainter($2);"},
		{"trigger": "I-TabbedPaneUI\tinit", "contents": "TabbedPaneUI ${1:tabbedpaneui} = new TabbedPaneUI($2);"},
		{"trigger": "I-TableCell\tinit", "contents": "TableCell ${1:cell} = new TableCell($2);"},
		{"trigger": "I-TableCellBehavior\tinit", "contents": "TableCellBehavior ${1:behavior} = new TableCellBehavior($2);"},
		{"trigger": "I-TableCellBehaviorBase\tinit", "contents": "TableCellBehaviorBase ${1:base} = new TableCellBehaviorBase($2);"},
		{"trigger": "I-TableCellBuilder\tinit", "contents": "TableCellBuilder ${1:builder} = new TableCellBuilder($2);"},
		{"trigger": "I-TableCellEditor\tinit", "contents": "TableCellEditor ${1:editor} = new TableCellEditor($2);"},
		{"trigger": "I-TableCellRenderer\tinit", "contents": "TableCellRenderer ${1:renderer} = new TableCellRenderer($2);"},
		{"trigger": "I-TableCellSkin\tinit", "contents": "TableCellSkin ${1:skin} = new TableCellSkin($2);"},
		{"trigger": "I-TableCellSkinBase\tinit", "contents": "TableCellSkinBase ${1:base} = new TableCellSkinBase($2);"},
		{"trigger": "I-TableColumn\tinit", "contents": "TableColumn ${1:column} = new TableColumn($2);"},
		{"trigger": "I-TableColumnBase\tinit", "contents": "TableColumnBase ${1:base} = new TableColumnBase($2);"},
		{"trigger": "I-TableColumnBuilder\tinit", "contents": "TableColumnBuilder ${1:builder} = new TableColumnBuilder($2);"},
		{"trigger": "I-TableColumnComparatorBase\tinit", "contents": "TableColumnComparatorBase ${1:base} = new TableColumnComparatorBase($2);"},
		{"trigger": "I-TableColumnHeader\tinit", "contents": "TableColumnHeader ${1:header} = new TableColumnHeader($2);"},
		{"trigger": "I-TableColumnModel\tinit", "contents": "TableColumnModel ${1:model} = new TableColumnModel($2);"},
		{"trigger": "I-TableColumnModelEvent\tinit", "contents": "TableColumnModelEvent ${1:event} = new TableColumnModelEvent($2);"},
		{"trigger": "I-TableColumnModelListener\tinit", "contents": "TableColumnModelListener ${1:listener} = new TableColumnModelListener($2);"},
		{"trigger": "I-TableColumnSortTypeWrapper\tinit", "contents": "TableColumnSortTypeWrapper ${1:wrapper} = new TableColumnSortTypeWrapper($2);"},
		{"trigger": "I-TableEditorPainter\tinit", "contents": "TableEditorPainter ${1:painter} = new TableEditorPainter($2);"},
		{"trigger": "I-TableFocusModel\tinit", "contents": "TableFocusModel ${1:model} = new TableFocusModel($2);"},
		{"trigger": "I-TableHeaderPainter\tinit", "contents": "TableHeaderPainter ${1:painter} = new TableHeaderPainter($2);"},
		{"trigger": "I-TableHeaderRendererPainter\tinit", "contents": "TableHeaderRendererPainter ${1:painter} = new TableHeaderRendererPainter($2);"},
		{"trigger": "I-TableHeaderRendererSortedState\tinit", "contents": "TableHeaderRendererSortedState ${1:state} = new TableHeaderRendererSortedState($2);"},
		{"trigger": "I-TableHeaderRow\tinit", "contents": "TableHeaderRow ${1:row} = new TableHeaderRow($2);"},
		{"trigger": "I-TableHeaderUI\tinit", "contents": "TableHeaderUI ${1:tableheaderui} = new TableHeaderUI($2);"},
		{"trigger": "I-TableModel\tinit", "contents": "TableModel ${1:model} = new TableModel($2);"},
		{"trigger": "I-TableModelEvent\tinit", "contents": "TableModelEvent ${1:event} = new TableModelEvent($2);"},
		{"trigger": "I-TableModelListener\tinit", "contents": "TableModelListener ${1:listener} = new TableModelListener($2);"},
		{"trigger": "I-TablePosition\tinit", "contents": "TablePosition ${1:position} = new TablePosition($2);"},
		{"trigger": "I-TablePositionBase\tinit", "contents": "TablePositionBase ${1:base} = new TablePositionBase($2);"},
		{"trigger": "I-TablePositionBuilder\tinit", "contents": "TablePositionBuilder ${1:builder} = new TablePositionBuilder($2);"},
		{"trigger": "I-TablePrintable\tinit", "contents": "TablePrintable ${1:printable} = new TablePrintable($2);"},
		{"trigger": "I-TableRow\tinit", "contents": "TableRow ${1:row} = new TableRow($2);"},
		{"trigger": "I-TableRowBehavior\tinit", "contents": "TableRowBehavior ${1:behavior} = new TableRowBehavior($2);"},
		{"trigger": "I-TableRowBehaviorBase\tinit", "contents": "TableRowBehaviorBase ${1:base} = new TableRowBehaviorBase($2);"},
		{"trigger": "I-TableRowBuilder\tinit", "contents": "TableRowBuilder ${1:builder} = new TableRowBuilder($2);"},
		{"trigger": "I-TableRowSkin\tinit", "contents": "TableRowSkin ${1:skin} = new TableRowSkin($2);"},
		{"trigger": "I-TableRowSkinBase\tinit", "contents": "TableRowSkinBase ${1:base} = new TableRowSkinBase($2);"},
		{"trigger": "I-TableRowSorter\tinit", "contents": "TableRowSorter ${1:sorter} = new TableRowSorter($2);"},
		{"trigger": "I-TableScrollPaneCorner\tinit", "contents": "TableScrollPaneCorner ${1:corner} = new TableScrollPaneCorner($2);"},
		{"trigger": "I-TableSelectionModel\tinit", "contents": "TableSelectionModel ${1:model} = new TableSelectionModel($2);"},
		{"trigger": "I-TableStringConverter\tinit", "contents": "TableStringConverter ${1:converter} = new TableStringConverter($2);"},
		{"trigger": "I-TableUI\tinit", "contents": "TableUI ${1:tableui} = new TableUI($2);"},
		{"trigger": "I-TableUtil\tinit", "contents": "TableUtil ${1:util} = new TableUtil($2);"},
		{"trigger": "I-TableView\tinit", "contents": "TableView ${1:view} = new TableView($2);"},
		{"trigger": "I-TableViewBehavior\tinit", "contents": "TableViewBehavior ${1:behavior} = new TableViewBehavior($2);"},
		{"trigger": "I-TableViewBehaviorBase\tinit", "contents": "TableViewBehaviorBase ${1:base} = new TableViewBehaviorBase($2);"},
		{"trigger": "I-TableViewBuilder\tinit", "contents": "TableViewBuilder ${1:builder} = new TableViewBuilder($2);"},
		{"trigger": "I-TableViewSkin\tinit", "contents": "TableViewSkin ${1:skin} = new TableViewSkin($2);"},
		{"trigger": "I-TableViewSkinBase\tinit", "contents": "TableViewSkinBase ${1:base} = new TableViewSkinBase($2);"},
		{"trigger": "I-TabularData\tinit", "contents": "TabularData ${1:data} = new TabularData($2);"},
		{"trigger": "I-TabularDataSupport\tinit", "contents": "TabularDataSupport ${1:support} = new TabularDataSupport($2);"},
		{"trigger": "I-TabularType\tinit", "contents": "TabularType ${1:type} = new TabularType($2);"},
		{"trigger": "I-Tag\tinit", "contents": "Tag ${1:tag} = new Tag($2);"},
		{"trigger": "I-TagElement\tinit", "contents": "TagElement ${1:element} = new TagElement($2);"},
		{"trigger": "I-TagStack\tinit", "contents": "TagStack ${1:stack} = new TagStack($2);"},
		{"trigger": "I-TaggedComponent\tinit", "contents": "TaggedComponent ${1:component} = new TaggedComponent($2);"},
		{"trigger": "I-TaggedComponentBase\tinit", "contents": "TaggedComponentBase ${1:base} = new TaggedComponentBase($2);"},
		{"trigger": "I-TaggedComponentFactoryFinder\tinit", "contents": "TaggedComponentFactoryFinder ${1:finder} = new TaggedComponentFactoryFinder($2);"},
		{"trigger": "I-TaggedComponentHelper\tinit", "contents": "TaggedComponentHelper ${1:helper} = new TaggedComponentHelper($2);"},
		{"trigger": "I-TaggedComponentHolder\tinit", "contents": "TaggedComponentHolder ${1:holder} = new TaggedComponentHolder($2);"},
		{"trigger": "I-TaggedProfile\tinit", "contents": "TaggedProfile ${1:profile} = new TaggedProfile($2);"},
		{"trigger": "I-TaggedProfileHelper\tinit", "contents": "TaggedProfileHelper ${1:helper} = new TaggedProfileHelper($2);"},
		{"trigger": "I-TaggedProfileHolder\tinit", "contents": "TaggedProfileHolder ${1:holder} = new TaggedProfileHolder($2);"},
		{"trigger": "I-TaggedProfileTemplate\tinit", "contents": "TaggedProfileTemplate ${1:template} = new TaggedProfileTemplate($2);"},
		{"trigger": "I-TaggedProfileTemplateBase\tinit", "contents": "TaggedProfileTemplateBase ${1:base} = new TaggedProfileTemplateBase($2);"},
		{"trigger": "I-Target\tinit", "contents": "Target ${1:target} = new Target($2);"},
		{"trigger": "I-TargetDataLine\tinit", "contents": "TargetDataLine ${1:line} = new TargetDataLine($2);"},
		{"trigger": "I-TargetLostException\tinit", "contents": "TargetLostException ${1:exception} = new TargetLostException($2);"},
		{"trigger": "I-TargetedNotification\tinit", "contents": "TargetedNotification ${1:notification} = new TargetedNotification($2);"},
		{"trigger": "I-Task\tinit", "contents": "Task ${1:task} = new Task($2);"},
		{"trigger": "I-TaskEvent\tinit", "contents": "TaskEvent ${1:event} = new TaskEvent($2);"},
		{"trigger": "I-TaskListener\tinit", "contents": "TaskListener ${1:listener} = new TaskListener($2);"},
		{"trigger": "I-TaskServer\tinit", "contents": "TaskServer ${1:server} = new TaskServer($2);"},
		{"trigger": "I-TeeXMLDocumentFilterImpl\tinit", "contents": "TeeXMLDocumentFilterImpl ${1:impl} = new TeeXMLDocumentFilterImpl($2);"},
		{"trigger": "I-TempFileHelper\tinit", "contents": "TempFileHelper ${1:helper} = new TempFileHelper($2);"},
		{"trigger": "I-TempState\tinit", "contents": "TempState ${1:state} = new TempState($2);"},
		{"trigger": "I-Template\tinit", "contents": "Template ${1:template} = new Template($2);"},
		{"trigger": "I-Templates\tinit", "contents": "Templates ${1:templates} = new Templates($2);"},
		{"trigger": "I-TemplatesHandler\tinit", "contents": "TemplatesHandler ${1:handler} = new TemplatesHandler($2);"},
		{"trigger": "I-TemplatesHandlerImpl\tinit", "contents": "TemplatesHandlerImpl ${1:impl} = new TemplatesHandlerImpl($2);"},
		{"trigger": "I-TemplatesImpl\tinit", "contents": "TemplatesImpl ${1:impl} = new TemplatesImpl($2);"},
		{"trigger": "I-Temporal\tinit", "contents": "Temporal ${1:temporal} = new Temporal($2);"},
		{"trigger": "I-TemporalAccessor\tinit", "contents": "TemporalAccessor ${1:accessor} = new TemporalAccessor($2);"},
		{"trigger": "I-TemporalAdjuster\tinit", "contents": "TemporalAdjuster ${1:adjuster} = new TemporalAdjuster($2);"},
		{"trigger": "I-TemporalAdjusters\tinit", "contents": "TemporalAdjusters ${1:adjusters} = new TemporalAdjusters($2);"},
		{"trigger": "I-TemporalAmount\tinit", "contents": "TemporalAmount ${1:amount} = new TemporalAmount($2);"},
		{"trigger": "I-TemporalField\tinit", "contents": "TemporalField ${1:field} = new TemporalField($2);"},
		{"trigger": "I-TemporalQueries\tinit", "contents": "TemporalQueries ${1:queries} = new TemporalQueries($2);"},
		{"trigger": "I-TemporalQuery\tinit", "contents": "TemporalQuery ${1:query} = new TemporalQuery($2);"},
		{"trigger": "I-TemporalUnit\tinit", "contents": "TemporalUnit ${1:unit} = new TemporalUnit($2);"},
		{"trigger": "I-TerminalOp\tinit", "contents": "TerminalOp ${1:op} = new TerminalOp($2);"},
		{"trigger": "I-TerminalSink\tinit", "contents": "TerminalSink ${1:sink} = new TerminalSink($2);"},
		{"trigger": "I-Terminator\tinit", "contents": "Terminator ${1:terminator} = new Terminator($2);"},
		{"trigger": "I-TestGenerator\tinit", "contents": "TestGenerator ${1:generator} = new TestGenerator($2);"},
		{"trigger": "I-TestSeq\tinit", "contents": "TestSeq ${1:seq} = new TestSeq($2);"},
		{"trigger": "I-Text\tinit", "contents": "Text ${1:text} = new Text($2);"},
		{"trigger": "I-TextAction\tinit", "contents": "TextAction ${1:action} = new TextAction($2);"},
		{"trigger": "I-TextAlignment\tinit", "contents": "TextAlignment ${1:alignment} = new TextAlignment($2);"},
		{"trigger": "I-TextArea\tinit", "contents": "TextArea ${1:area} = new TextArea($2);"},
		{"trigger": "I-TextAreaBehavior\tinit", "contents": "TextAreaBehavior ${1:behavior} = new TextAreaBehavior($2);"},
		{"trigger": "I-TextAreaBuilder\tinit", "contents": "TextAreaBuilder ${1:builder} = new TextAreaBuilder($2);"},
		{"trigger": "I-TextAreaDocument\tinit", "contents": "TextAreaDocument ${1:document} = new TextAreaDocument($2);"},
		{"trigger": "I-TextAreaNotInScrollPaneState\tinit", "contents": "TextAreaNotInScrollPaneState ${1:state} = new TextAreaNotInScrollPaneState($2);"},
		{"trigger": "I-TextAreaPainter\tinit", "contents": "TextAreaPainter ${1:painter} = new TextAreaPainter($2);"},
		{"trigger": "I-TextAreaPeer\tinit", "contents": "TextAreaPeer ${1:peer} = new TextAreaPeer($2);"},
		{"trigger": "I-TextAreaSkin\tinit", "contents": "TextAreaSkin ${1:skin} = new TextAreaSkin($2);"},
		{"trigger": "I-TextAttribute\tinit", "contents": "TextAttribute ${1:attribute} = new TextAttribute($2);"},
		{"trigger": "I-TextBinding\tinit", "contents": "TextBinding ${1:binding} = new TextBinding($2);"},
		{"trigger": "I-TextBoundsType\tinit", "contents": "TextBoundsType ${1:type} = new TextBoundsType($2);"},
		{"trigger": "I-TextBreakIterator\tinit", "contents": "TextBreakIterator ${1:iterator} = new TextBreakIterator($2);"},
		{"trigger": "I-TextBuilder\tinit", "contents": "TextBuilder ${1:builder} = new TextBuilder($2);"},
		{"trigger": "I-TextCallbackHandler\tinit", "contents": "TextCallbackHandler ${1:handler} = new TextCallbackHandler($2);"},
		{"trigger": "I-TextCatalogReader\tinit", "contents": "TextCatalogReader ${1:reader} = new TextCatalogReader($2);"},
		{"trigger": "I-TextCodec\tinit", "contents": "TextCodec ${1:codec} = new TextCodec($2);"},
		{"trigger": "I-TextComponent\tinit", "contents": "TextComponent ${1:component} = new TextComponent($2);"},
		{"trigger": "I-TextComponentPeer\tinit", "contents": "TextComponentPeer ${1:peer} = new TextComponentPeer($2);"},
		{"trigger": "I-TextEvent\tinit", "contents": "TextEvent ${1:event} = new TextEvent($2);"},
		{"trigger": "I-TextField\tinit", "contents": "TextField ${1:field} = new TextField($2);"},
		{"trigger": "I-TextFieldBehavior\tinit", "contents": "TextFieldBehavior ${1:behavior} = new TextFieldBehavior($2);"},
		{"trigger": "I-TextFieldBuilder\tinit", "contents": "TextFieldBuilder ${1:builder} = new TextFieldBuilder($2);"},
		{"trigger": "I-TextFieldListCell\tinit", "contents": "TextFieldListCell ${1:cell} = new TextFieldListCell($2);"},
		{"trigger": "I-TextFieldListCellBuilder\tinit", "contents": "TextFieldListCellBuilder ${1:builder} = new TextFieldListCellBuilder($2);"},
		{"trigger": "I-TextFieldPainter\tinit", "contents": "TextFieldPainter ${1:painter} = new TextFieldPainter($2);"},
		{"trigger": "I-TextFieldPeer\tinit", "contents": "TextFieldPeer ${1:peer} = new TextFieldPeer($2);"},
		{"trigger": "I-TextFieldSkin\tinit", "contents": "TextFieldSkin ${1:skin} = new TextFieldSkin($2);"},
		{"trigger": "I-TextFieldTableCell\tinit", "contents": "TextFieldTableCell ${1:cell} = new TextFieldTableCell($2);"},
		{"trigger": "I-TextFieldTableCellBuilder\tinit", "contents": "TextFieldTableCellBuilder ${1:builder} = new TextFieldTableCellBuilder($2);"},
		{"trigger": "I-TextFieldTreeCell\tinit", "contents": "TextFieldTreeCell ${1:cell} = new TextFieldTreeCell($2);"},
		{"trigger": "I-TextFieldTreeCellBuilder\tinit", "contents": "TextFieldTreeCellBuilder ${1:builder} = new TextFieldTreeCellBuilder($2);"},
		{"trigger": "I-TextFieldTreeTableCell\tinit", "contents": "TextFieldTreeTableCell ${1:cell} = new TextFieldTreeTableCell($2);"},
		{"trigger": "I-TextFlow\tinit", "contents": "TextFlow ${1:flow} = new TextFlow($2);"},
		{"trigger": "I-TextFormatter\tinit", "contents": "TextFormatter ${1:formatter} = new TextFormatter($2);"},
		{"trigger": "I-TextHitInfo\tinit", "contents": "TextHitInfo ${1:info} = new TextHitInfo($2);"},
		{"trigger": "I-TextImpl\tinit", "contents": "TextImpl ${1:impl} = new TextImpl($2);"},
		{"trigger": "I-TextInputCallback\tinit", "contents": "TextInputCallback ${1:callback} = new TextInputCallback($2);"},
		{"trigger": "I-TextInputControl\tinit", "contents": "TextInputControl ${1:control} = new TextInputControl($2);"},
		{"trigger": "I-TextInputControlBehavior\tinit", "contents": "TextInputControlBehavior ${1:behavior} = new TextInputControlBehavior($2);"},
		{"trigger": "I-TextInputControlBindings\tinit", "contents": "TextInputControlBindings ${1:bindings} = new TextInputControlBindings($2);"},
		{"trigger": "I-TextInputControlBuilder\tinit", "contents": "TextInputControlBuilder ${1:builder} = new TextInputControlBuilder($2);"},
		{"trigger": "I-TextInputControlSkin\tinit", "contents": "TextInputControlSkin ${1:skin} = new TextInputControlSkin($2);"},
		{"trigger": "I-TextInputDialog\tinit", "contents": "TextInputDialog ${1:dialog} = new TextInputDialog($2);"},
		{"trigger": "I-TextJustifier\tinit", "contents": "TextJustifier ${1:justifier} = new TextJustifier($2);"},
		{"trigger": "I-TextLayout\tinit", "contents": "TextLayout ${1:layout} = new TextLayout($2);"},
		{"trigger": "I-TextLayoutFactory\tinit", "contents": "TextLayoutFactory ${1:factory} = new TextLayoutFactory($2);"},
		{"trigger": "I-TextLayoutStrategy\tinit", "contents": "TextLayoutStrategy ${1:strategy} = new TextLayoutStrategy($2);"},
		{"trigger": "I-TextLine\tinit", "contents": "TextLine ${1:line} = new TextLine($2);"},
		{"trigger": "I-TextListener\tinit", "contents": "TextListener ${1:listener} = new TextListener($2);"},
		{"trigger": "I-TextMeasurer\tinit", "contents": "TextMeasurer ${1:measurer} = new TextMeasurer($2);"},
		{"trigger": "I-TextNormalizer\tinit", "contents": "TextNormalizer ${1:normalizer} = new TextNormalizer($2);"},
		{"trigger": "I-TextOutputCallback\tinit", "contents": "TextOutputCallback ${1:callback} = new TextOutputCallback($2);"},
		{"trigger": "I-TextPanePainter\tinit", "contents": "TextPanePainter ${1:painter} = new TextPanePainter($2);"},
		{"trigger": "I-TextRun\tinit", "contents": "TextRun ${1:run} = new TextRun($2);"},
		{"trigger": "I-TextSerializer\tinit", "contents": "TextSerializer ${1:serializer} = new TextSerializer($2);"},
		{"trigger": "I-TextSpan\tinit", "contents": "TextSpan ${1:span} = new TextSpan($2);"},
		{"trigger": "I-TextStyle\tinit", "contents": "TextStyle ${1:style} = new TextStyle($2);"},
		{"trigger": "I-TextSyntax\tinit", "contents": "TextSyntax ${1:syntax} = new TextSyntax($2);"},
		{"trigger": "I-TextTree\tinit", "contents": "TextTree ${1:tree} = new TextTree($2);"},
		{"trigger": "I-TextUI\tinit", "contents": "TextUI ${1:textui} = new TextUI($2);"},
		{"trigger": "I-TextUtilities\tinit", "contents": "TextUtilities ${1:utilities} = new TextUtilities($2);"},
		{"trigger": "I-Texture\tinit", "contents": "Texture ${1:texture} = new Texture($2);"},
		{"trigger": "I-TextureMap\tinit", "contents": "TextureMap ${1:map} = new TextureMap($2);"},
		{"trigger": "I-TexturePaint\tinit", "contents": "TexturePaint ${1:paint} = new TexturePaint($2);"},
		{"trigger": "I-TexturePaintContext\tinit", "contents": "TexturePaintContext ${1:context} = new TexturePaintContext($2);"},
		{"trigger": "I-TextureResourcePool\tinit", "contents": "TextureResourcePool ${1:pool} = new TextureResourcePool($2);"},
		{"trigger": "I-ThaiBuddhistChronology\tinit", "contents": "ThaiBuddhistChronology ${1:chronology} = new ThaiBuddhistChronology($2);"},
		{"trigger": "I-ThaiBuddhistDate\tinit", "contents": "ThaiBuddhistDate ${1:date} = new ThaiBuddhistDate($2);"},
		{"trigger": "I-ThaiBuddhistEra\tinit", "contents": "ThaiBuddhistEra ${1:era} = new ThaiBuddhistEra($2);"},
		{"trigger": "I-ThemeClient\tinit", "contents": "ThemeClient ${1:client} = new ThemeClient($2);"},
		{"trigger": "I-ThemeClientImpl\tinit", "contents": "ThemeClientImpl ${1:impl} = new ThemeClientImpl($2);"},
		{"trigger": "I-Thread\tinit", "contents": "Thread ${1:thread} = new Thread($2);"},
		{"trigger": "I-ThreadContext\tinit", "contents": "ThreadContext ${1:context} = new ThreadContext($2);"},
		{"trigger": "I-ThreadControllerWrapper\tinit", "contents": "ThreadControllerWrapper ${1:wrapper} = new ThreadControllerWrapper($2);"},
		{"trigger": "I-ThreadDeath\tinit", "contents": "ThreadDeath ${1:death} = new ThreadDeath($2);"},
		{"trigger": "I-ThreadFactory\tinit", "contents": "ThreadFactory ${1:factory} = new ThreadFactory($2);"},
		{"trigger": "I-ThreadGroup\tinit", "contents": "ThreadGroup ${1:group} = new ThreadGroup($2);"},
		{"trigger": "I-ThreadGroupContext\tinit", "contents": "ThreadGroupContext ${1:context} = new ThreadGroupContext($2);"},
		{"trigger": "I-ThreadInfo\tinit", "contents": "ThreadInfo ${1:info} = new ThreadInfo($2);"},
		{"trigger": "I-ThreadLocal\tinit", "contents": "ThreadLocal ${1:local} = new ThreadLocal($2);"},
		{"trigger": "I-ThreadLocalRandom\tinit", "contents": "ThreadLocalRandom ${1:random} = new ThreadLocalRandom($2);"},
		{"trigger": "I-ThreadMXBean\tinit", "contents": "ThreadMXBean ${1:bean} = new ThreadMXBean($2);"},
		{"trigger": "I-ThreadPolicy\tinit", "contents": "ThreadPolicy ${1:policy} = new ThreadPolicy($2);"},
		{"trigger": "I-ThreadPolicyOperations\tinit", "contents": "ThreadPolicyOperations ${1:operations} = new ThreadPolicyOperations($2);"},
		{"trigger": "I-ThreadPolicyValue\tinit", "contents": "ThreadPolicyValue ${1:value} = new ThreadPolicyValue($2);"},
		{"trigger": "I-ThreadPool\tinit", "contents": "ThreadPool ${1:pool} = new ThreadPool($2);"},
		{"trigger": "I-ThreadPoolChooser\tinit", "contents": "ThreadPoolChooser ${1:chooser} = new ThreadPoolChooser($2);"},
		{"trigger": "I-ThreadPoolExecutor\tinit", "contents": "ThreadPoolExecutor ${1:executor} = new ThreadPoolExecutor($2);"},
		{"trigger": "I-ThreadPoolManager\tinit", "contents": "ThreadPoolManager ${1:manager} = new ThreadPoolManager($2);"},
		{"trigger": "I-ThreadService\tinit", "contents": "ThreadService ${1:service} = new ThreadService($2);"},
		{"trigger": "I-ThrowTree\tinit", "contents": "ThrowTree ${1:tree} = new ThrowTree($2);"},
		{"trigger": "I-Throwable\tinit", "contents": "Throwable ${1:throwable} = new Throwable($2);"},
		{"trigger": "I-ThrowsTag\tinit", "contents": "ThrowsTag ${1:tag} = new ThrowsTag($2);"},
		{"trigger": "I-ThrowsTree\tinit", "contents": "ThrowsTree ${1:tree} = new ThrowsTree($2);"},
		{"trigger": "I-TickCalculation\tinit", "contents": "TickCalculation ${1:calculation} = new TickCalculation($2);"},
		{"trigger": "I-Tie\tinit", "contents": "Tie ${1:tie} = new Tie($2);"},
		{"trigger": "I-TileObserver\tinit", "contents": "TileObserver ${1:observer} = new TileObserver($2);"},
		{"trigger": "I-TilePane\tinit", "contents": "TilePane ${1:pane} = new TilePane($2);"},
		{"trigger": "I-TilePaneBuilder\tinit", "contents": "TilePaneBuilder ${1:builder} = new TilePaneBuilder($2);"},
		{"trigger": "I-TimSort\tinit", "contents": "TimSort ${1:sort} = new TimSort($2);"},
		{"trigger": "I-Time\tinit", "contents": "Time ${1:time} = new Time($2);"},
		{"trigger": "I-TimeDV\tinit", "contents": "TimeDV ${1:timedv} = new TimeDV($2);"},
		{"trigger": "I-TimeLimitExceededException\tinit", "contents": "TimeLimitExceededException ${1:exception} = new TimeLimitExceededException($2);"},
		{"trigger": "I-TimeStringConverter\tinit", "contents": "TimeStringConverter ${1:converter} = new TimeStringConverter($2);"},
		{"trigger": "I-TimeUnit\tinit", "contents": "TimeUnit ${1:unit} = new TimeUnit($2);"},
		{"trigger": "I-TimeZone\tinit", "contents": "TimeZone ${1:zone} = new TimeZone($2);"},
		{"trigger": "I-TimeZoneNameProvider\tinit", "contents": "TimeZoneNameProvider ${1:provider} = new TimeZoneNameProvider($2);"},
		{"trigger": "I-Timeline\tinit", "contents": "Timeline ${1:timeline} = new Timeline($2);"},
		{"trigger": "I-TimelineBuilder\tinit", "contents": "TimelineBuilder ${1:builder} = new TimelineBuilder($2);"},
		{"trigger": "I-TimelineClipCore\tinit", "contents": "TimelineClipCore ${1:core} = new TimelineClipCore($2);"},
		{"trigger": "I-TimeoutException\tinit", "contents": "TimeoutException ${1:exception} = new TimeoutException($2);"},
		{"trigger": "I-Timer\tinit", "contents": "Timer ${1:timer} = new Timer($2);"},
		{"trigger": "I-TimerAlarmClock\tinit", "contents": "TimerAlarmClock ${1:clock} = new TimerAlarmClock($2);"},
		{"trigger": "I-TimerAlarmClockNotification\tinit", "contents": "TimerAlarmClockNotification ${1:notification} = new TimerAlarmClockNotification($2);"},
		{"trigger": "I-TimerMBean\tinit", "contents": "TimerMBean ${1:bean} = new TimerMBean($2);"},
		{"trigger": "I-TimerNotification\tinit", "contents": "TimerNotification ${1:notification} = new TimerNotification($2);"},
		{"trigger": "I-TimerQueue\tinit", "contents": "TimerQueue ${1:queue} = new TimerQueue($2);"},
		{"trigger": "I-TimerReceiver\tinit", "contents": "TimerReceiver ${1:receiver} = new TimerReceiver($2);"},
		{"trigger": "I-TimerTask\tinit", "contents": "TimerTask ${1:task} = new TimerTask($2);"},
		{"trigger": "I-Timestamp\tinit", "contents": "Timestamp ${1:timestamp} = new Timestamp($2);"},
		{"trigger": "I-TitledBorder\tinit", "contents": "TitledBorder ${1:border} = new TitledBorder($2);"},
		{"trigger": "I-TitledPane\tinit", "contents": "TitledPane ${1:pane} = new TitledPane($2);"},
		{"trigger": "I-TitledPaneBehavior\tinit", "contents": "TitledPaneBehavior ${1:behavior} = new TitledPaneBehavior($2);"},
		{"trigger": "I-TitledPaneBuilder\tinit", "contents": "TitledPaneBuilder ${1:builder} = new TitledPaneBuilder($2);"},
		{"trigger": "I-TitledPaneSkin\tinit", "contents": "TitledPaneSkin ${1:skin} = new TitledPaneSkin($2);"},
		{"trigger": "I-ToDoubleBiFunction\tinit", "contents": "ToDoubleBiFunction ${1:function} = new ToDoubleBiFunction($2);"},
		{"trigger": "I-ToDoubleFunction\tinit", "contents": "ToDoubleFunction ${1:function} = new ToDoubleFunction($2);"},
		{"trigger": "I-ToHTMLSAXHandler\tinit", "contents": "ToHTMLSAXHandler ${1:handler} = new ToHTMLSAXHandler($2);"},
		{"trigger": "I-ToHTMLStream\tinit", "contents": "ToHTMLStream ${1:stream} = new ToHTMLStream($2);"},
		{"trigger": "I-ToIntBiFunction\tinit", "contents": "ToIntBiFunction ${1:function} = new ToIntBiFunction($2);"},
		{"trigger": "I-ToIntFunction\tinit", "contents": "ToIntFunction ${1:function} = new ToIntFunction($2);"},
		{"trigger": "I-ToLongBiFunction\tinit", "contents": "ToLongBiFunction ${1:function} = new ToLongBiFunction($2);"},
		{"trigger": "I-ToLongFunction\tinit", "contents": "ToLongFunction ${1:function} = new ToLongFunction($2);"},
		{"trigger": "I-ToSAXHandler\tinit", "contents": "ToSAXHandler ${1:handler} = new ToSAXHandler($2);"},
		{"trigger": "I-ToStream\tinit", "contents": "ToStream ${1:stream} = new ToStream($2);"},
		{"trigger": "I-ToTextSAXHandler\tinit", "contents": "ToTextSAXHandler ${1:handler} = new ToTextSAXHandler($2);"},
		{"trigger": "I-ToTextStream\tinit", "contents": "ToTextStream ${1:stream} = new ToTextStream($2);"},
		{"trigger": "I-ToUnknownStream\tinit", "contents": "ToUnknownStream ${1:stream} = new ToUnknownStream($2);"},
		{"trigger": "I-ToXMLSAXHandler\tinit", "contents": "ToXMLSAXHandler ${1:handler} = new ToXMLSAXHandler($2);"},
		{"trigger": "I-ToXMLStream\tinit", "contents": "ToXMLStream ${1:stream} = new ToXMLStream($2);"},
		{"trigger": "I-Toggle\tinit", "contents": "Toggle ${1:toggle} = new Toggle($2);"},
		{"trigger": "I-ToggleButton\tinit", "contents": "ToggleButton ${1:button} = new ToggleButton($2);"},
		{"trigger": "I-ToggleButtonBehavior\tinit", "contents": "ToggleButtonBehavior ${1:behavior} = new ToggleButtonBehavior($2);"},
		{"trigger": "I-ToggleButtonBuilder\tinit", "contents": "ToggleButtonBuilder ${1:builder} = new ToggleButtonBuilder($2);"},
		{"trigger": "I-ToggleButtonPainter\tinit", "contents": "ToggleButtonPainter ${1:painter} = new ToggleButtonPainter($2);"},
		{"trigger": "I-ToggleButtonSkin\tinit", "contents": "ToggleButtonSkin ${1:skin} = new ToggleButtonSkin($2);"},
		{"trigger": "I-ToggleGroup\tinit", "contents": "ToggleGroup ${1:group} = new ToggleGroup($2);"},
		{"trigger": "I-ToggleGroupBuilder\tinit", "contents": "ToggleGroupBuilder ${1:builder} = new ToggleGroupBuilder($2);"},
		{"trigger": "I-Token\tinit", "contents": "Token ${1:token} = new Token($2);"},
		{"trigger": "I-TokenMgrError\tinit", "contents": "TokenMgrError ${1:error} = new TokenMgrError($2);"},
		{"trigger": "I-TooManyListenersException\tinit", "contents": "TooManyListenersException ${1:exception} = new TooManyListenersException($2);"},
		{"trigger": "I-Tool\tinit", "contents": "Tool ${1:tool} = new Tool($2);"},
		{"trigger": "I-ToolBar\tinit", "contents": "ToolBar ${1:bar} = new ToolBar($2);"},
		{"trigger": "I-ToolBarBehavior\tinit", "contents": "ToolBarBehavior ${1:behavior} = new ToolBarBehavior($2);"},
		{"trigger": "I-ToolBarBuilder\tinit", "contents": "ToolBarBuilder ${1:builder} = new ToolBarBuilder($2);"},
		{"trigger": "I-ToolBarButtonPainter\tinit", "contents": "ToolBarButtonPainter ${1:painter} = new ToolBarButtonPainter($2);"},
		{"trigger": "I-ToolBarEastState\tinit", "contents": "ToolBarEastState ${1:state} = new ToolBarEastState($2);"},
		{"trigger": "I-ToolBarNorthState\tinit", "contents": "ToolBarNorthState ${1:state} = new ToolBarNorthState($2);"},
		{"trigger": "I-ToolBarPainter\tinit", "contents": "ToolBarPainter ${1:painter} = new ToolBarPainter($2);"},
		{"trigger": "I-ToolBarSeparatorPainter\tinit", "contents": "ToolBarSeparatorPainter ${1:painter} = new ToolBarSeparatorPainter($2);"},
		{"trigger": "I-ToolBarSkin\tinit", "contents": "ToolBarSkin ${1:skin} = new ToolBarSkin($2);"},
		{"trigger": "I-ToolBarSouthState\tinit", "contents": "ToolBarSouthState ${1:state} = new ToolBarSouthState($2);"},
		{"trigger": "I-ToolBarToggleButtonPainter\tinit", "contents": "ToolBarToggleButtonPainter ${1:painter} = new ToolBarToggleButtonPainter($2);"},
		{"trigger": "I-ToolBarUI\tinit", "contents": "ToolBarUI ${1:toolbarui} = new ToolBarUI($2);"},
		{"trigger": "I-ToolBarWestState\tinit", "contents": "ToolBarWestState ${1:state} = new ToolBarWestState($2);"},
		{"trigger": "I-ToolProvider\tinit", "contents": "ToolProvider ${1:provider} = new ToolProvider($2);"},
		{"trigger": "I-ToolTipManager\tinit", "contents": "ToolTipManager ${1:manager} = new ToolTipManager($2);"},
		{"trigger": "I-ToolTipPainter\tinit", "contents": "ToolTipPainter ${1:painter} = new ToolTipPainter($2);"},
		{"trigger": "I-ToolTipUI\tinit", "contents": "ToolTipUI ${1:tooltipui} = new ToolTipUI($2);"},
		{"trigger": "I-Toolkit\tinit", "contents": "Toolkit ${1:toolkit} = new Toolkit($2);"},
		{"trigger": "I-Tooltip\tinit", "contents": "Tooltip ${1:tooltip} = new Tooltip($2);"},
		{"trigger": "I-TooltipBuilder\tinit", "contents": "TooltipBuilder ${1:builder} = new TooltipBuilder($2);"},
		{"trigger": "I-TooltipSkin\tinit", "contents": "TooltipSkin ${1:skin} = new TooltipSkin($2);"},
		{"trigger": "I-TopLevelElement\tinit", "contents": "TopLevelElement ${1:element} = new TopLevelElement($2);"},
		{"trigger": "I-TopMostTraversalEngine\tinit", "contents": "TopMostTraversalEngine ${1:engine} = new TopMostTraversalEngine($2);"},
		{"trigger": "I-TouchEvent\tinit", "contents": "TouchEvent ${1:event} = new TouchEvent($2);"},
		{"trigger": "I-TouchFilter\tinit", "contents": "TouchFilter ${1:filter} = new TouchFilter($2);"},
		{"trigger": "I-TouchInput\tinit", "contents": "TouchInput ${1:input} = new TouchInput($2);"},
		{"trigger": "I-TouchInputSupport\tinit", "contents": "TouchInputSupport ${1:support} = new TouchInputSupport($2);"},
		{"trigger": "I-TouchPipeline\tinit", "contents": "TouchPipeline ${1:pipeline} = new TouchPipeline($2);"},
		{"trigger": "I-TouchPoint\tinit", "contents": "TouchPoint ${1:point} = new TouchPoint($2);"},
		{"trigger": "I-TouchState\tinit", "contents": "TouchState ${1:state} = new TouchState($2);"},
		{"trigger": "I-TrAXFilter\tinit", "contents": "TrAXFilter ${1:filter} = new TrAXFilter($2);"},
		{"trigger": "I-Track\tinit", "contents": "Track ${1:track} = new Track($2);"},
		{"trigger": "I-TrackableObservableList\tinit", "contents": "TrackableObservableList ${1:list} = new TrackableObservableList($2);"},
		{"trigger": "I-TransactionService\tinit", "contents": "TransactionService ${1:service} = new TransactionService($2);"},
		{"trigger": "I-TransactionalWriter\tinit", "contents": "TransactionalWriter ${1:writer} = new TransactionalWriter($2);"},
		{"trigger": "I-TransferHandler\tinit", "contents": "TransferHandler ${1:handler} = new TransferHandler($2);"},
		{"trigger": "I-TransferMode\tinit", "contents": "TransferMode ${1:mode} = new TransferMode($2);"},
		{"trigger": "I-TransferQueue\tinit", "contents": "TransferQueue ${1:queue} = new TransferQueue($2);"},
		{"trigger": "I-Transferable\tinit", "contents": "Transferable ${1:transferable} = new Transferable($2);"},
		{"trigger": "I-Transform\tinit", "contents": "Transform ${1:transform} = new Transform($2);"},
		{"trigger": "I-TransformAttribute\tinit", "contents": "TransformAttribute ${1:attribute} = new TransformAttribute($2);"},
		{"trigger": "I-TransformBase64Decode\tinit", "contents": "TransformBase64Decode ${1:decode} = new TransformBase64Decode($2);"},
		{"trigger": "I-TransformC14N\tinit", "contents": "TransformC14N ${1:transformc14n} = new TransformC14N($2);"},
		{"trigger": "I-TransformC14N11_WithComments\tinit", "contents": "TransformC14N11_WithComments ${1:comments} = new TransformC14N11_WithComments($2);"},
		{"trigger": "I-TransformC14NExclusive\tinit", "contents": "TransformC14NExclusive ${1:exclusive} = new TransformC14NExclusive($2);"},
		{"trigger": "I-TransformC14NExclusiveWithComments\tinit", "contents": "TransformC14NExclusiveWithComments ${1:comments} = new TransformC14NExclusiveWithComments($2);"},
		{"trigger": "I-TransformC14NWithComments\tinit", "contents": "TransformC14NWithComments ${1:comments} = new TransformC14NWithComments($2);"},
		{"trigger": "I-TransformChangedEvent\tinit", "contents": "TransformChangedEvent ${1:event} = new TransformChangedEvent($2);"},
		{"trigger": "I-TransformEnvelopedSignature\tinit", "contents": "TransformEnvelopedSignature ${1:signature} = new TransformEnvelopedSignature($2);"},
		{"trigger": "I-TransformException\tinit", "contents": "TransformException ${1:exception} = new TransformException($2);"},
		{"trigger": "I-TransformHelper\tinit", "contents": "TransformHelper ${1:helper} = new TransformHelper($2);"},
		{"trigger": "I-TransformParam\tinit", "contents": "TransformParam ${1:param} = new TransformParam($2);"},
		{"trigger": "I-TransformParameterSpec\tinit", "contents": "TransformParameterSpec ${1:spec} = new TransformParameterSpec($2);"},
		{"trigger": "I-TransformService\tinit", "contents": "TransformService ${1:service} = new TransformService($2);"},
		{"trigger": "I-TransformSpi\tinit", "contents": "TransformSpi ${1:spi} = new TransformSpi($2);"},
		{"trigger": "I-TransformStateSetter\tinit", "contents": "TransformStateSetter ${1:setter} = new TransformStateSetter($2);"},
		{"trigger": "I-TransformUtils\tinit", "contents": "TransformUtils ${1:utils} = new TransformUtils($2);"},
		{"trigger": "I-TransformXPath\tinit", "contents": "TransformXPath ${1:path} = new TransformXPath($2);"},
		{"trigger": "I-TransformXPath2Filter\tinit", "contents": "TransformXPath2Filter ${1:filter} = new TransformXPath2Filter($2);"},
		{"trigger": "I-TransformXPointer\tinit", "contents": "TransformXPointer ${1:pointer} = new TransformXPointer($2);"},
		{"trigger": "I-TransformXSLT\tinit", "contents": "TransformXSLT ${1:transformxslt} = new TransformXSLT($2);"},
		{"trigger": "I-TransformationException\tinit", "contents": "TransformationException ${1:exception} = new TransformationException($2);"},
		{"trigger": "I-TransformationList\tinit", "contents": "TransformationList ${1:list} = new TransformationList($2);"},
		{"trigger": "I-TransformedShape\tinit", "contents": "TransformedShape ${1:shape} = new TransformedShape($2);"},
		{"trigger": "I-Transformer\tinit", "contents": "Transformer ${1:transformer} = new Transformer($2);"},
		{"trigger": "I-TransformerConfigurationException\tinit", "contents": "TransformerConfigurationException ${1:exception} = new TransformerConfigurationException($2);"},
		{"trigger": "I-TransformerException\tinit", "contents": "TransformerException ${1:exception} = new TransformerException($2);"},
		{"trigger": "I-TransformerFactory\tinit", "contents": "TransformerFactory ${1:factory} = new TransformerFactory($2);"},
		{"trigger": "I-TransformerFactoryConfigurationError\tinit", "contents": "TransformerFactoryConfigurationError ${1:error} = new TransformerFactoryConfigurationError($2);"},
		{"trigger": "I-TransformerFactoryImpl\tinit", "contents": "TransformerFactoryImpl ${1:impl} = new TransformerFactoryImpl($2);"},
		{"trigger": "I-TransformerHandler\tinit", "contents": "TransformerHandler ${1:handler} = new TransformerHandler($2);"},
		{"trigger": "I-TransformerHandlerImpl\tinit", "contents": "TransformerHandlerImpl ${1:impl} = new TransformerHandlerImpl($2);"},
		{"trigger": "I-TransformerImpl\tinit", "contents": "TransformerImpl ${1:impl} = new TransformerImpl($2);"},
		{"trigger": "I-TransformingPathConsumer2D\tinit", "contents": "TransformingPathConsumer2D ${1:transformingpathconsumer2d} = new TransformingPathConsumer2D($2);"},
		{"trigger": "I-Transforms\tinit", "contents": "Transforms ${1:transforms} = new Transforms($2);"},
		{"trigger": "I-Transient\tinit", "contents": "Transient ${1:transient} = new Transient($2);"},
		{"trigger": "I-Transition\tinit", "contents": "Transition ${1:transition} = new Transition($2);"},
		{"trigger": "I-TransitionBuilder\tinit", "contents": "TransitionBuilder ${1:builder} = new TransitionBuilder($2);"},
		{"trigger": "I-Translate\tinit", "contents": "Translate ${1:translate} = new Translate($2);"},
		{"trigger": "I-Translate2D\tinit", "contents": "Translate2D ${1:translate2d} = new Translate2D($2);"},
		{"trigger": "I-TranslateBuilder\tinit", "contents": "TranslateBuilder ${1:builder} = new TranslateBuilder($2);"},
		{"trigger": "I-TranslateTransition\tinit", "contents": "TranslateTransition ${1:transition} = new TranslateTransition($2);"},
		{"trigger": "I-TranslateTransitionBuilder\tinit", "contents": "TranslateTransitionBuilder ${1:builder} = new TranslateTransitionBuilder($2);"},
		{"trigger": "I-Translet\tinit", "contents": "Translet ${1:translet} = new Translet($2);"},
		{"trigger": "I-TransletException\tinit", "contents": "TransletException ${1:exception} = new TransletException($2);"},
		{"trigger": "I-TransletOutput\tinit", "contents": "TransletOutput ${1:output} = new TransletOutput($2);"},
		{"trigger": "I-TransletOutputHandlerFactory\tinit", "contents": "TransletOutputHandlerFactory ${1:factory} = new TransletOutputHandlerFactory($2);"},
		{"trigger": "I-Transmitter\tinit", "contents": "Transmitter ${1:transmitter} = new Transmitter($2);"},
		{"trigger": "I-Transparency\tinit", "contents": "Transparency ${1:transparency} = new Transparency($2);"},
		{"trigger": "I-TransportDefault\tinit", "contents": "TransportDefault ${1:default} = new TransportDefault($2);"},
		{"trigger": "I-TraversalContext\tinit", "contents": "TraversalContext ${1:context} = new TraversalContext($2);"},
		{"trigger": "I-TraversalEngine\tinit", "contents": "TraversalEngine ${1:engine} = new TraversalEngine($2);"},
		{"trigger": "I-TraverseListener\tinit", "contents": "TraverseListener ${1:listener} = new TraverseListener($2);"},
		{"trigger": "I-TrayIcon\tinit", "contents": "TrayIcon ${1:icon} = new TrayIcon($2);"},
		{"trigger": "I-TrayIconPeer\tinit", "contents": "TrayIconPeer ${1:peer} = new TrayIconPeer($2);"},
		{"trigger": "I-Tree\tinit", "contents": "Tree ${1:tree} = new Tree($2);"},
		{"trigger": "I-TreeCell\tinit", "contents": "TreeCell ${1:cell} = new TreeCell($2);"},
		{"trigger": "I-TreeCellBehavior\tinit", "contents": "TreeCellBehavior ${1:behavior} = new TreeCellBehavior($2);"},
		{"trigger": "I-TreeCellBuilder\tinit", "contents": "TreeCellBuilder ${1:builder} = new TreeCellBuilder($2);"},
		{"trigger": "I-TreeCellEditor\tinit", "contents": "TreeCellEditor ${1:editor} = new TreeCellEditor($2);"},
		{"trigger": "I-TreeCellEditorPainter\tinit", "contents": "TreeCellEditorPainter ${1:painter} = new TreeCellEditorPainter($2);"},
		{"trigger": "I-TreeCellPainter\tinit", "contents": "TreeCellPainter ${1:painter} = new TreeCellPainter($2);"},
		{"trigger": "I-TreeCellRenderer\tinit", "contents": "TreeCellRenderer ${1:renderer} = new TreeCellRenderer($2);"},
		{"trigger": "I-TreeCellSkin\tinit", "contents": "TreeCellSkin ${1:skin} = new TreeCellSkin($2);"},
		{"trigger": "I-TreeExpansionEvent\tinit", "contents": "TreeExpansionEvent ${1:event} = new TreeExpansionEvent($2);"},
		{"trigger": "I-TreeExpansionListener\tinit", "contents": "TreeExpansionListener ${1:listener} = new TreeExpansionListener($2);"},
		{"trigger": "I-TreeItem\tinit", "contents": "TreeItem ${1:item} = new TreeItem($2);"},
		{"trigger": "I-TreeItemBuilder\tinit", "contents": "TreeItemBuilder ${1:builder} = new TreeItemBuilder($2);"},
		{"trigger": "I-TreeItemPropertyValueFactory\tinit", "contents": "TreeItemPropertyValueFactory ${1:factory} = new TreeItemPropertyValueFactory($2);"},
		{"trigger": "I-TreeMap\tinit", "contents": "TreeMap ${1:map} = new TreeMap($2);"},
		{"trigger": "I-TreeModel\tinit", "contents": "TreeModel ${1:model} = new TreeModel($2);"},
		{"trigger": "I-TreeModelEvent\tinit", "contents": "TreeModelEvent ${1:event} = new TreeModelEvent($2);"},
		{"trigger": "I-TreeModelListener\tinit", "contents": "TreeModelListener ${1:listener} = new TreeModelListener($2);"},
		{"trigger": "I-TreeNode\tinit", "contents": "TreeNode ${1:node} = new TreeNode($2);"},
		{"trigger": "I-TreePainter\tinit", "contents": "TreePainter ${1:painter} = new TreePainter($2);"},
		{"trigger": "I-TreePath\tinit", "contents": "TreePath ${1:path} = new TreePath($2);"},
		{"trigger": "I-TreePathScanner\tinit", "contents": "TreePathScanner ${1:scanner} = new TreePathScanner($2);"},
		{"trigger": "I-TreeScanner\tinit", "contents": "TreeScanner ${1:scanner} = new TreeScanner($2);"},
		{"trigger": "I-TreeSelectionEvent\tinit", "contents": "TreeSelectionEvent ${1:event} = new TreeSelectionEvent($2);"},
		{"trigger": "I-TreeSelectionListener\tinit", "contents": "TreeSelectionListener ${1:listener} = new TreeSelectionListener($2);"},
		{"trigger": "I-TreeSelectionModel\tinit", "contents": "TreeSelectionModel ${1:model} = new TreeSelectionModel($2);"},
		{"trigger": "I-TreeSet\tinit", "contents": "TreeSet<${1:String}> ${2:set} = new TreeSet<${1:String}>();"},
		{"trigger": "I-TreeSortMode\tinit", "contents": "TreeSortMode ${1:mode} = new TreeSortMode($2);"},
		{"trigger": "I-TreeTableCell\tinit", "contents": "TreeTableCell ${1:cell} = new TreeTableCell($2);"},
		{"trigger": "I-TreeTableCellBehavior\tinit", "contents": "TreeTableCellBehavior ${1:behavior} = new TreeTableCellBehavior($2);"},
		{"trigger": "I-TreeTableCellSkin\tinit", "contents": "TreeTableCellSkin ${1:skin} = new TreeTableCellSkin($2);"},
		{"trigger": "I-TreeTableColumn\tinit", "contents": "TreeTableColumn ${1:column} = new TreeTableColumn($2);"},
		{"trigger": "I-TreeTablePosition\tinit", "contents": "TreeTablePosition ${1:position} = new TreeTablePosition($2);"},
		{"trigger": "I-TreeTableRow\tinit", "contents": "TreeTableRow ${1:row} = new TreeTableRow($2);"},
		{"trigger": "I-TreeTableRowBehavior\tinit", "contents": "TreeTableRowBehavior ${1:behavior} = new TreeTableRowBehavior($2);"},
		{"trigger": "I-TreeTableRowSkin\tinit", "contents": "TreeTableRowSkin ${1:skin} = new TreeTableRowSkin($2);"},
		{"trigger": "I-TreeTableView\tinit", "contents": "TreeTableView ${1:view} = new TreeTableView($2);"},
		{"trigger": "I-TreeTableViewBehavior\tinit", "contents": "TreeTableViewBehavior ${1:behavior} = new TreeTableViewBehavior($2);"},
		{"trigger": "I-TreeTableViewSkin\tinit", "contents": "TreeTableViewSkin ${1:skin} = new TreeTableViewSkin($2);"},
		{"trigger": "I-TreeUI\tinit", "contents": "TreeUI ${1:treeui} = new TreeUI($2);"},
		{"trigger": "I-TreeUtil\tinit", "contents": "TreeUtil ${1:util} = new TreeUtil($2);"},
		{"trigger": "I-TreeView\tinit", "contents": "TreeView ${1:view} = new TreeView($2);"},
		{"trigger": "I-TreeViewBehavior\tinit", "contents": "TreeViewBehavior ${1:behavior} = new TreeViewBehavior($2);"},
		{"trigger": "I-TreeViewBuilder\tinit", "contents": "TreeViewBuilder ${1:builder} = new TreeViewBuilder($2);"},
		{"trigger": "I-TreeViewSkin\tinit", "contents": "TreeViewSkin ${1:skin} = new TreeViewSkin($2);"},
		{"trigger": "I-TreeVisitor\tinit", "contents": "TreeVisitor ${1:visitor} = new TreeVisitor($2);"},
		{"trigger": "I-TreeWalker\tinit", "contents": "TreeWalker ${1:walker} = new TreeWalker($2);"},
		{"trigger": "I-TreeWalkerImpl\tinit", "contents": "TreeWalkerImpl ${1:impl} = new TreeWalkerImpl($2);"},
		{"trigger": "I-TreeWillExpandListener\tinit", "contents": "TreeWillExpandListener ${1:listener} = new TreeWillExpandListener($2);"},
		{"trigger": "I-Trees\tinit", "contents": "Trees ${1:trees} = new Trees($2);"},
		{"trigger": "I-TriangleMesh\tinit", "contents": "TriangleMesh ${1:mesh} = new TriangleMesh($2);"},
		{"trigger": "I-TriangleMeshBuilder\tinit", "contents": "TriangleMeshBuilder ${1:builder} = new TriangleMeshBuilder($2);"},
		{"trigger": "I-Trie\tinit", "contents": "Trie ${1:trie} = new Trie($2);"},
		{"trigger": "I-Tripwire\tinit", "contents": "Tripwire ${1:tripwire} = new Tripwire($2);"},
		{"trigger": "I-TruncatedFileException\tinit", "contents": "TruncatedFileException ${1:exception} = new TruncatedFileException($2);"},
		{"trigger": "I-TrustAnchor\tinit", "contents": "TrustAnchor ${1:anchor} = new TrustAnchor($2);"},
		{"trigger": "I-TryTree\tinit", "contents": "TryTree ${1:tree} = new TryTree($2);"},
		{"trigger": "I-TwoLevelFocusBehavior\tinit", "contents": "TwoLevelFocusBehavior ${1:behavior} = new TwoLevelFocusBehavior($2);"},
		{"trigger": "I-TwoLevelFocusComboBehavior\tinit", "contents": "TwoLevelFocusComboBehavior ${1:behavior} = new TwoLevelFocusComboBehavior($2);"},
		{"trigger": "I-TwoLevelFocusListBehavior\tinit", "contents": "TwoLevelFocusListBehavior ${1:behavior} = new TwoLevelFocusListBehavior($2);"},
		{"trigger": "I-TwoLevelFocusPopupBehavior\tinit", "contents": "TwoLevelFocusPopupBehavior ${1:behavior} = new TwoLevelFocusPopupBehavior($2);"},
		{"trigger": "I-TwoStacksPlainDatagramSocketImpl\tinit", "contents": "TwoStacksPlainDatagramSocketImpl ${1:impl} = new TwoStacksPlainDatagramSocketImpl($2);"},
		{"trigger": "I-TwoStacksPlainSocketImpl\tinit", "contents": "TwoStacksPlainSocketImpl ${1:impl} = new TwoStacksPlainSocketImpl($2);"},
		{"trigger": "I-Type\tinit", "contents": "Type ${1:type} = new Type($2);"},
		{"trigger": "I-TypeCastTree\tinit", "contents": "TypeCastTree ${1:tree} = new TypeCastTree($2);"},
		{"trigger": "I-TypeCheckError\tinit", "contents": "TypeCheckError ${1:error} = new TypeCheckError($2);"},
		{"trigger": "I-TypeCode\tinit", "contents": "TypeCode ${1:code} = new TypeCode($2);"},
		{"trigger": "I-TypeCodeHolder\tinit", "contents": "TypeCodeHolder ${1:holder} = new TypeCodeHolder($2);"},
		{"trigger": "I-TypeConstraintException\tinit", "contents": "TypeConstraintException ${1:exception} = new TypeConstraintException($2);"},
		{"trigger": "I-TypeConvertingMethodAdapter\tinit", "contents": "TypeConvertingMethodAdapter ${1:adapter} = new TypeConvertingMethodAdapter($2);"},
		{"trigger": "I-TypeElement\tinit", "contents": "TypeElement ${1:element} = new TypeElement($2);"},
		{"trigger": "I-TypeInfo\tinit", "contents": "TypeInfo ${1:info} = new TypeInfo($2);"},
		{"trigger": "I-TypeInfoImpl\tinit", "contents": "TypeInfoImpl ${1:impl} = new TypeInfoImpl($2);"},
		{"trigger": "I-TypeInfoProvider\tinit", "contents": "TypeInfoProvider ${1:provider} = new TypeInfoProvider($2);"},
		{"trigger": "I-TypeKind\tinit", "contents": "TypeKind ${1:kind} = new TypeKind($2);"},
		{"trigger": "I-TypeMirror\tinit", "contents": "TypeMirror ${1:mirror} = new TypeMirror($2);"},
		{"trigger": "I-TypeMismatch\tinit", "contents": "TypeMismatch ${1:mismatch} = new TypeMismatch($2);"},
		{"trigger": "I-TypeMismatchHelper\tinit", "contents": "TypeMismatchHelper ${1:helper} = new TypeMismatchHelper($2);"},
		{"trigger": "I-TypeNotPresentException\tinit", "contents": "TypeNotPresentException ${1:exception} = new TypeNotPresentException($2);"},
		{"trigger": "I-TypeParameterElement\tinit", "contents": "TypeParameterElement ${1:element} = new TypeParameterElement($2);"},
		{"trigger": "I-TypeParameterTree\tinit", "contents": "TypeParameterTree ${1:tree} = new TypeParameterTree($2);"},
		{"trigger": "I-TypeValidator\tinit", "contents": "TypeValidator ${1:validator} = new TypeValidator($2);"},
		{"trigger": "I-TypeVariable\tinit", "contents": "TypeVariable ${1:variable} = new TypeVariable($2);"},
		{"trigger": "I-TypeVisitor\tinit", "contents": "TypeVisitor ${1:visitor} = new TypeVisitor($2);"},
		{"trigger": "I-TypedInstruction\tinit", "contents": "TypedInstruction ${1:instruction} = new TypedInstruction($2);"},
		{"trigger": "I-Types\tinit", "contents": "Types ${1:types} = new Types($2);"},
		{"trigger": "I-TzdbZoneRulesProvider\tinit", "contents": "TzdbZoneRulesProvider ${1:provider} = new TzdbZoneRulesProvider($2);"},
		{"trigger": "I-UCSReader\tinit", "contents": "UCSReader ${1:reader} = new UCSReader($2);"},
		{"trigger": "I-UEInfoServiceContext\tinit", "contents": "UEInfoServiceContext ${1:context} = new UEInfoServiceContext($2);"},
		{"trigger": "I-UIClient\tinit", "contents": "UIClient ${1:client} = new UIClient($2);"},
		{"trigger": "I-UIClientImpl\tinit", "contents": "UIClientImpl ${1:impl} = new UIClientImpl($2);"},
		{"trigger": "I-UID\tinit", "contents": "UID ${1:uid} = new UID($2);"},
		{"trigger": "I-UIDefaults\tinit", "contents": "UIDefaults ${1:defaults} = new UIDefaults($2);"},
		{"trigger": "I-UIEvent\tinit", "contents": "UIEvent ${1:event} = new UIEvent($2);"},
		{"trigger": "I-UIEventImpl\tinit", "contents": "UIEventImpl ${1:impl} = new UIEventImpl($2);"},
		{"trigger": "I-UIManager\tinit", "contents": "UIManager ${1:manager} = new UIManager($2);"},
		{"trigger": "I-UIResource\tinit", "contents": "UIResource ${1:resource} = new UIResource($2);"},
		{"trigger": "I-ULongLongSeqHelper\tinit", "contents": "ULongLongSeqHelper ${1:helper} = new ULongLongSeqHelper($2);"},
		{"trigger": "I-ULongLongSeqHolder\tinit", "contents": "ULongLongSeqHolder ${1:holder} = new ULongLongSeqHolder($2);"},
		{"trigger": "I-ULongSeqHelper\tinit", "contents": "ULongSeqHelper ${1:helper} = new ULongSeqHelper($2);"},
		{"trigger": "I-ULongSeqHolder\tinit", "contents": "ULongSeqHolder ${1:holder} = new ULongSeqHolder($2);"},
		{"trigger": "I-UNKNOWN\tinit", "contents": "UNKNOWN ${1:unknown} = new UNKNOWN($2);"},
		{"trigger": "I-UNSUPPORTED_POLICY\tinit", "contents": "UNSUPPORTED_POLICY ${1:unsupported} = new UNSUPPORTED_POLICY($2);"},
		{"trigger": "I-UNSUPPORTED_POLICY_VALUE\tinit", "contents": "UNSUPPORTED_POLICY_VALUE ${1:unsupported} = new UNSUPPORTED_POLICY_VALUE($2);"},
		{"trigger": "I-URI\tinit", "contents": "URI ${1:uri} = new URI($2);"},
		{"trigger": "I-URIDereferencer\tinit", "contents": "URIDereferencer ${1:dereferencer} = new URIDereferencer($2);"},
		{"trigger": "I-URIException\tinit", "contents": "URIException ${1:exception} = new URIException($2);"},
		{"trigger": "I-URIParameter\tinit", "contents": "URIParameter ${1:parameter} = new URIParameter($2);"},
		{"trigger": "I-URIReference\tinit", "contents": "URIReference ${1:reference} = new URIReference($2);"},
		{"trigger": "I-URIReferenceException\tinit", "contents": "URIReferenceException ${1:exception} = new URIReferenceException($2);"},
		{"trigger": "I-URIResolver\tinit", "contents": "URIResolver ${1:resolver} = new URIResolver($2);"},
		{"trigger": "I-URISyntax\tinit", "contents": "URISyntax ${1:syntax} = new URISyntax($2);"},
		{"trigger": "I-URISyntaxException\tinit", "contents": "URISyntaxException ${1:exception} = new URISyntaxException($2);"},
		{"trigger": "I-URL\tinit", "contents": "URL ${1:url} = new URL(${2:\"website\"});"},
		{"trigger": "I-URLBuilder\tinit", "contents": "URLBuilder ${1:builder} = new URLBuilder($2);"},
		{"trigger": "I-URLClassLoader\tinit", "contents": "URLClassLoader ${1:loader} = new URLClassLoader($2);"},
		{"trigger": "I-URLConnection\tinit", "contents": "URLConnection ${1:connection} = new URLConnection($2);"},
		{"trigger": "I-URLConverter\tinit", "contents": "URLConverter ${1:converter} = new URLConverter($2);"},
		{"trigger": "I-URLDecoder\tinit", "contents": "URLDecoder ${1:decoder} = new URLDecoder($2);"},
		{"trigger": "I-URLEncoder\tinit", "contents": "URLEncoder ${1:encoder} = new URLEncoder($2);"},
		{"trigger": "I-URLLoader\tinit", "contents": "URLLoader ${1:loader} = new URLLoader($2);"},
		{"trigger": "I-URLPermission\tinit", "contents": "URLPermission ${1:permission} = new URLPermission($2);"},
		{"trigger": "I-URLStreamHandler\tinit", "contents": "URLStreamHandler ${1:handler} = new URLStreamHandler($2);"},
		{"trigger": "I-URLStreamHandlerFactory\tinit", "contents": "URLStreamHandlerFactory ${1:factory} = new URLStreamHandlerFactory($2);"},
		{"trigger": "I-URLStringHelper\tinit", "contents": "URLStringHelper ${1:helper} = new URLStringHelper($2);"},
		{"trigger": "I-URLs\tinit", "contents": "URLs ${1:ls} = new URLs($2);"},
		{"trigger": "I-USER_EXCEPTION\tinit", "contents": "USER_EXCEPTION ${1:user} = new USER_EXCEPTION($2);"},
		{"trigger": "I-UShortSeqHelper\tinit", "contents": "UShortSeqHelper ${1:helper} = new UShortSeqHelper($2);"},
		{"trigger": "I-UShortSeqHolder\tinit", "contents": "UShortSeqHolder ${1:holder} = new UShortSeqHolder($2);"},
		{"trigger": "I-UTF8Reader\tinit", "contents": "UTF8Reader ${1:reader} = new UTF8Reader($2);"},
		{"trigger": "I-UTFDataFormatException\tinit", "contents": "UTFDataFormatException ${1:exception} = new UTFDataFormatException($2);"},
		{"trigger": "I-UUID\tinit", "contents": "UUID ${1:uuid} = new UUID($2);"},
		{"trigger": "I-Udev\tinit", "contents": "Udev ${1:udev} = new Udev($2);"},
		{"trigger": "I-UdevListener\tinit", "contents": "UdevListener ${1:listener} = new UdevListener($2);"},
		{"trigger": "I-UnImplNode\tinit", "contents": "UnImplNode ${1:node} = new UnImplNode($2);"},
		{"trigger": "I-UnaryExpression\tinit", "contents": "UnaryExpression ${1:expression} = new UnaryExpression($2);"},
		{"trigger": "I-UnaryOpExpr\tinit", "contents": "UnaryOpExpr ${1:expr} = new UnaryOpExpr($2);"},
		{"trigger": "I-UnaryOperation\tinit", "contents": "UnaryOperation ${1:operation} = new UnaryOperation($2);"},
		{"trigger": "I-UnaryOperator\tinit", "contents": "UnaryOperator ${1:operator} = new UnaryOperator($2);"},
		{"trigger": "I-UnaryTree\tinit", "contents": "UnaryTree ${1:tree} = new UnaryTree($2);"},
		{"trigger": "I-UncheckedIOException\tinit", "contents": "UncheckedIOException ${1:exception} = new UncheckedIOException($2);"},
		{"trigger": "I-UnconditionalBranch\tinit", "contents": "UnconditionalBranch ${1:branch} = new UnconditionalBranch($2);"},
		{"trigger": "I-UndeclaredThrowableException\tinit", "contents": "UndeclaredThrowableException ${1:exception} = new UndeclaredThrowableException($2);"},
		{"trigger": "I-UndoManager\tinit", "contents": "UndoManager ${1:manager} = new UndoManager($2);"},
		{"trigger": "I-UndoableEdit\tinit", "contents": "UndoableEdit ${1:edit} = new UndoableEdit($2);"},
		{"trigger": "I-UndoableEditEvent\tinit", "contents": "UndoableEditEvent ${1:event} = new UndoableEditEvent($2);"},
		{"trigger": "I-UndoableEditListener\tinit", "contents": "UndoableEditListener ${1:listener} = new UndoableEditListener($2);"},
		{"trigger": "I-UndoableEditSupport\tinit", "contents": "UndoableEditSupport ${1:support} = new UndoableEditSupport($2);"},
		{"trigger": "I-UnexpectedException\tinit", "contents": "UnexpectedException ${1:exception} = new UnexpectedException($2);"},
		{"trigger": "I-UnicastRemoteObject\tinit", "contents": "UnicastRemoteObject ${1:object} = new UnicastRemoteObject($2);"},
		{"trigger": "I-UnicodeProp\tinit", "contents": "UnicodeProp ${1:prop} = new UnicodeProp($2);"},
		{"trigger": "I-UnionChildIterator\tinit", "contents": "UnionChildIterator ${1:iterator} = new UnionChildIterator($2);"},
		{"trigger": "I-UnionDV\tinit", "contents": "UnionDV ${1:uniondv} = new UnionDV($2);"},
		{"trigger": "I-UnionIterator\tinit", "contents": "UnionIterator ${1:iterator} = new UnionIterator($2);"},
		{"trigger": "I-UnionMember\tinit", "contents": "UnionMember ${1:member} = new UnionMember($2);"},
		{"trigger": "I-UnionMemberHelper\tinit", "contents": "UnionMemberHelper ${1:helper} = new UnionMemberHelper($2);"},
		{"trigger": "I-UnionPathExpr\tinit", "contents": "UnionPathExpr ${1:expr} = new UnionPathExpr($2);"},
		{"trigger": "I-UnionPathIterator\tinit", "contents": "UnionPathIterator ${1:iterator} = new UnionPathIterator($2);"},
		{"trigger": "I-UnionPattern\tinit", "contents": "UnionPattern ${1:pattern} = new UnionPattern($2);"},
		{"trigger": "I-UnionType\tinit", "contents": "UnionType ${1:type} = new UnionType($2);"},
		{"trigger": "I-UnionTypeTree\tinit", "contents": "UnionTypeTree ${1:tree} = new UnionTypeTree($2);"},
		{"trigger": "I-UniqueOrKey\tinit", "contents": "UniqueOrKey ${1:key} = new UniqueOrKey($2);"},
		{"trigger": "I-Units\tinit", "contents": "Units ${1:units} = new Units($2);"},
		{"trigger": "I-UnixLoginModule\tinit", "contents": "UnixLoginModule ${1:module} = new UnixLoginModule($2);"},
		{"trigger": "I-UnixNumericGroupPrincipal\tinit", "contents": "UnixNumericGroupPrincipal ${1:principal} = new UnixNumericGroupPrincipal($2);"},
		{"trigger": "I-UnixNumericUserPrincipal\tinit", "contents": "UnixNumericUserPrincipal ${1:principal} = new UnixNumericUserPrincipal($2);"},
		{"trigger": "I-UnixPrincipal\tinit", "contents": "UnixPrincipal ${1:principal} = new UnixPrincipal($2);"},
		{"trigger": "I-UnixSystem\tinit", "contents": "UnixSystem ${1:system} = new UnixSystem($2);"},
		{"trigger": "I-Unknown\tinit", "contents": "Unknown ${1:unknown} = new Unknown($2);"},
		{"trigger": "I-UnknownAnnotationValueException\tinit", "contents": "UnknownAnnotationValueException ${1:exception} = new UnknownAnnotationValueException($2);"},
		{"trigger": "I-UnknownBlockTagTree\tinit", "contents": "UnknownBlockTagTree ${1:tree} = new UnknownBlockTagTree($2);"},
		{"trigger": "I-UnknownElementException\tinit", "contents": "UnknownElementException ${1:exception} = new UnknownElementException($2);"},
		{"trigger": "I-UnknownEncoding\tinit", "contents": "UnknownEncoding ${1:encoding} = new UnknownEncoding($2);"},
		{"trigger": "I-UnknownEncodingHelper\tinit", "contents": "UnknownEncodingHelper ${1:helper} = new UnknownEncodingHelper($2);"},
		{"trigger": "I-UnknownEntityException\tinit", "contents": "UnknownEntityException ${1:exception} = new UnknownEntityException($2);"},
		{"trigger": "I-UnknownError\tinit", "contents": "UnknownError ${1:error} = new UnknownError($2);"},
		{"trigger": "I-UnknownException\tinit", "contents": "UnknownException ${1:exception} = new UnknownException($2);"},
		{"trigger": "I-UnknownFormatConversionException\tinit", "contents": "UnknownFormatConversionException ${1:exception} = new UnknownFormatConversionException($2);"},
		{"trigger": "I-UnknownFormatFlagsException\tinit", "contents": "UnknownFormatFlagsException ${1:exception} = new UnknownFormatFlagsException($2);"},
		{"trigger": "I-UnknownGroupException\tinit", "contents": "UnknownGroupException ${1:exception} = new UnknownGroupException($2);"},
		{"trigger": "I-UnknownHostException\tinit", "contents": "UnknownHostException ${1:exception} = new UnknownHostException($2);"},
		{"trigger": "I-UnknownInlineTagTree\tinit", "contents": "UnknownInlineTagTree ${1:tree} = new UnknownInlineTagTree($2);"},
		{"trigger": "I-UnknownObjectException\tinit", "contents": "UnknownObjectException ${1:exception} = new UnknownObjectException($2);"},
		{"trigger": "I-UnknownServiceContext\tinit", "contents": "UnknownServiceContext ${1:context} = new UnknownServiceContext($2);"},
		{"trigger": "I-UnknownServiceException\tinit", "contents": "UnknownServiceException ${1:exception} = new UnknownServiceException($2);"},
		{"trigger": "I-UnknownType\tinit", "contents": "UnknownType ${1:type} = new UnknownType($2);"},
		{"trigger": "I-UnknownTypeException\tinit", "contents": "UnknownTypeException ${1:exception} = new UnknownTypeException($2);"},
		{"trigger": "I-UnknownUserException\tinit", "contents": "UnknownUserException ${1:exception} = new UnknownUserException($2);"},
		{"trigger": "I-UnknownUserExceptionHelper\tinit", "contents": "UnknownUserExceptionHelper ${1:helper} = new UnknownUserExceptionHelper($2);"},
		{"trigger": "I-UnknownUserExceptionHolder\tinit", "contents": "UnknownUserExceptionHolder ${1:holder} = new UnknownUserExceptionHolder($2);"},
		{"trigger": "I-UnmappableCharacterException\tinit", "contents": "UnmappableCharacterException ${1:exception} = new UnmappableCharacterException($2);"},
		{"trigger": "I-Unmarshal\tinit", "contents": "Unmarshal ${1:unmarshal} = new Unmarshal($2);"},
		{"trigger": "I-UnmarshalException\tinit", "contents": "UnmarshalException ${1:exception} = new UnmarshalException($2);"},
		{"trigger": "I-Unmarshaller\tinit", "contents": "Unmarshaller ${1:unmarshaller} = new Unmarshaller($2);"},
		{"trigger": "I-UnmarshallerHandler\tinit", "contents": "UnmarshallerHandler ${1:handler} = new UnmarshallerHandler($2);"},
		{"trigger": "I-UnmodifiableArrayList\tinit", "contents": "UnmodifiableArrayList ${1:list} = new UnmodifiableArrayList($2);"},
		{"trigger": "I-UnmodifiableClassException\tinit", "contents": "UnmodifiableClassException ${1:exception} = new UnmodifiableClassException($2);"},
		{"trigger": "I-UnmodifiableListSet\tinit", "contents": "UnmodifiableListSet ${1:set} = new UnmodifiableListSet($2);"},
		{"trigger": "I-UnmodifiableObservableMap\tinit", "contents": "UnmodifiableObservableMap ${1:map} = new UnmodifiableObservableMap($2);"},
		{"trigger": "I-UnmodifiableSetException\tinit", "contents": "UnmodifiableSetException ${1:exception} = new UnmodifiableSetException($2);"},
		{"trigger": "I-UnparsedEntityHandler\tinit", "contents": "UnparsedEntityHandler ${1:handler} = new UnparsedEntityHandler($2);"},
		{"trigger": "I-UnparsedEntityUriCall\tinit", "contents": "UnparsedEntityUriCall ${1:call} = new UnparsedEntityUriCall($2);"},
		{"trigger": "I-UnrecoverableEntryException\tinit", "contents": "UnrecoverableEntryException ${1:exception} = new UnrecoverableEntryException($2);"},
		{"trigger": "I-UnrecoverableKeyException\tinit", "contents": "UnrecoverableKeyException ${1:exception} = new UnrecoverableKeyException($2);"},
		{"trigger": "I-Unreferenced\tinit", "contents": "Unreferenced ${1:unreferenced} = new Unreferenced($2);"},
		{"trigger": "I-UnresolvedAddressException\tinit", "contents": "UnresolvedAddressException ${1:exception} = new UnresolvedAddressException($2);"},
		{"trigger": "I-UnresolvedPermission\tinit", "contents": "UnresolvedPermission ${1:permission} = new UnresolvedPermission($2);"},
		{"trigger": "I-UnresolvedPermissionCollection\tinit", "contents": "UnresolvedPermissionCollection ${1:collection} = new UnresolvedPermissionCollection($2);"},
		{"trigger": "I-UnresolvedRef\tinit", "contents": "UnresolvedRef ${1:ref} = new UnresolvedRef($2);"},
		{"trigger": "I-UnsatisfiedLinkError\tinit", "contents": "UnsatisfiedLinkError ${1:error} = new UnsatisfiedLinkError($2);"},
		{"trigger": "I-UnsolicitedNotification\tinit", "contents": "UnsolicitedNotification ${1:notification} = new UnsolicitedNotification($2);"},
		{"trigger": "I-UnsolicitedNotificationEvent\tinit", "contents": "UnsolicitedNotificationEvent ${1:event} = new UnsolicitedNotificationEvent($2);"},
		{"trigger": "I-UnsolicitedNotificationListener\tinit", "contents": "UnsolicitedNotificationListener ${1:listener} = new UnsolicitedNotificationListener($2);"},
		{"trigger": "I-UnsupportedAddressTypeException\tinit", "contents": "UnsupportedAddressTypeException ${1:exception} = new UnsupportedAddressTypeException($2);"},
		{"trigger": "I-UnsupportedAudioFileException\tinit", "contents": "UnsupportedAudioFileException ${1:exception} = new UnsupportedAudioFileException($2);"},
		{"trigger": "I-UnsupportedCallbackException\tinit", "contents": "UnsupportedCallbackException ${1:exception} = new UnsupportedCallbackException($2);"},
		{"trigger": "I-UnsupportedCharsetException\tinit", "contents": "UnsupportedCharsetException ${1:exception} = new UnsupportedCharsetException($2);"},
		{"trigger": "I-UnsupportedClassVersionError\tinit", "contents": "UnsupportedClassVersionError ${1:error} = new UnsupportedClassVersionError($2);"},
		{"trigger": "I-UnsupportedElement\tinit", "contents": "UnsupportedElement ${1:element} = new UnsupportedElement($2);"},
		{"trigger": "I-UnsupportedEncodingException\tinit", "contents": "UnsupportedEncodingException ${1:exception} = new UnsupportedEncodingException($2);"},
		{"trigger": "I-UnsupportedFlavorException\tinit", "contents": "UnsupportedFlavorException ${1:exception} = new UnsupportedFlavorException($2);"},
		{"trigger": "I-UnsupportedLookAndFeelException\tinit", "contents": "UnsupportedLookAndFeelException ${1:exception} = new UnsupportedLookAndFeelException($2);"},
		{"trigger": "I-UnsupportedOperationException\tinit", "contents": "UnsupportedOperationException ${1:exception} = new UnsupportedOperationException($2);"},
		{"trigger": "I-UnsupportedTemporalTypeException\tinit", "contents": "UnsupportedTemporalTypeException ${1:exception} = new UnsupportedTemporalTypeException($2);"},
		{"trigger": "I-UnsyncBufferedOutputStream\tinit", "contents": "UnsyncBufferedOutputStream ${1:stream} = new UnsyncBufferedOutputStream($2);"},
		{"trigger": "I-UnsyncByteArrayOutputStream\tinit", "contents": "UnsyncByteArrayOutputStream ${1:stream} = new UnsyncByteArrayOutputStream($2);"},
		{"trigger": "I-UploadingPainter\tinit", "contents": "UploadingPainter ${1:painter} = new UploadingPainter($2);"},
		{"trigger": "I-UseAttributeSets\tinit", "contents": "UseAttributeSets ${1:sets} = new UseAttributeSets($2);"},
		{"trigger": "I-UserAcl\tinit", "contents": "UserAcl ${1:acl} = new UserAcl($2);"},
		{"trigger": "I-UserDataHandler\tinit", "contents": "UserDataHandler ${1:handler} = new UserDataHandler($2);"},
		{"trigger": "I-UserDefinedFileAttributeView\tinit", "contents": "UserDefinedFileAttributeView ${1:view} = new UserDefinedFileAttributeView($2);"},
		{"trigger": "I-UserException\tinit", "contents": "UserException ${1:exception} = new UserException($2);"},
		{"trigger": "I-UserPrincipal\tinit", "contents": "UserPrincipal ${1:principal} = new UserPrincipal($2);"},
		{"trigger": "I-UserPrincipalLookupService\tinit", "contents": "UserPrincipalLookupService ${1:service} = new UserPrincipalLookupService($2);"},
		{"trigger": "I-UserPrincipalNotFoundException\tinit", "contents": "UserPrincipalNotFoundException ${1:exception} = new UserPrincipalNotFoundException($2);"},
		{"trigger": "I-UtfHelpper\tinit", "contents": "UtfHelpper ${1:helpper} = new UtfHelpper($2);"},
		{"trigger": "I-Util\tinit", "contents": "Util ${1:util} = new Util($2);"},
		{"trigger": "I-UtilDelegate\tinit", "contents": "UtilDelegate ${1:delegate} = new UtilDelegate($2);"},
		{"trigger": "I-Utilities\tinit", "contents": "Utilities ${1:utilities} = new Utilities($2);"},
		{"trigger": "I-UtilitiesImpl\tinit", "contents": "UtilitiesImpl ${1:impl} = new UtilitiesImpl($2);"},
		{"trigger": "I-Utility\tinit", "contents": "Utility ${1:utility} = new Utility($2);"},
		{"trigger": "I-Utils\tinit", "contents": "Utils ${1:utils} = new Utils($2);"},
		{"trigger": "I-VBox\tinit", "contents": "VBox ${1:box} = new VBox($2);"},
		{"trigger": "I-VBoxBuilder\tinit", "contents": "VBoxBuilder ${1:builder} = new VBoxBuilder($2);"},
		{"trigger": "I-VLineTo\tinit", "contents": "VLineTo ${1:to} = new VLineTo($2);"},
		{"trigger": "I-VLineToBuilder\tinit", "contents": "VLineToBuilder ${1:builder} = new VLineToBuilder($2);"},
		{"trigger": "I-VMID\tinit", "contents": "VMID ${1:vmid} = new VMID($2);"},
		{"trigger": "I-VM_ABSTRACT\tinit", "contents": "VM_ABSTRACT ${1:vm} = new VM_ABSTRACT($2);"},
		{"trigger": "I-VM_CUSTOM\tinit", "contents": "VM_CUSTOM ${1:vm} = new VM_CUSTOM($2);"},
		{"trigger": "I-VM_NONE\tinit", "contents": "VM_NONE ${1:vm} = new VM_NONE($2);"},
		{"trigger": "I-VM_TRUNCATABLE\tinit", "contents": "VM_TRUNCATABLE ${1:vm} = new VM_TRUNCATABLE($2);"},
		{"trigger": "I-VNCPlatform\tinit", "contents": "VNCPlatform ${1:platform} = new VNCPlatform($2);"},
		{"trigger": "I-VNCPlatformFactory\tinit", "contents": "VNCPlatformFactory ${1:factory} = new VNCPlatformFactory($2);"},
		{"trigger": "I-VNCScreen\tinit", "contents": "VNCScreen ${1:screen} = new VNCScreen($2);"},
		{"trigger": "I-VPos\tinit", "contents": "VPos ${1:pos} = new VPos($2);"},
		{"trigger": "I-ValidatedInfo\tinit", "contents": "ValidatedInfo ${1:info} = new ValidatedInfo($2);"},
		{"trigger": "I-ValidationContext\tinit", "contents": "ValidationContext ${1:context} = new ValidationContext($2);"},
		{"trigger": "I-ValidationEvent\tinit", "contents": "ValidationEvent ${1:event} = new ValidationEvent($2);"},
		{"trigger": "I-ValidationEventCollector\tinit", "contents": "ValidationEventCollector ${1:collector} = new ValidationEventCollector($2);"},
		{"trigger": "I-ValidationEventHandler\tinit", "contents": "ValidationEventHandler ${1:handler} = new ValidationEventHandler($2);"},
		{"trigger": "I-ValidationEventImpl\tinit", "contents": "ValidationEventImpl ${1:impl} = new ValidationEventImpl($2);"},
		{"trigger": "I-ValidationEventLocator\tinit", "contents": "ValidationEventLocator ${1:locator} = new ValidationEventLocator($2);"},
		{"trigger": "I-ValidationEventLocatorImpl\tinit", "contents": "ValidationEventLocatorImpl ${1:impl} = new ValidationEventLocatorImpl($2);"},
		{"trigger": "I-ValidationException\tinit", "contents": "ValidationException ${1:exception} = new ValidationException($2);"},
		{"trigger": "I-ValidationManager\tinit", "contents": "ValidationManager ${1:manager} = new ValidationManager($2);"},
		{"trigger": "I-ValidationState\tinit", "contents": "ValidationState ${1:state} = new ValidationState($2);"},
		{"trigger": "I-Validator\tinit", "contents": "Validator ${1:validator} = new Validator($2);"},
		{"trigger": "I-ValidatorHandler\tinit", "contents": "ValidatorHandler ${1:handler} = new ValidatorHandler($2);"},
		{"trigger": "I-ValidatorHandlerImpl\tinit", "contents": "ValidatorHandlerImpl ${1:impl} = new ValidatorHandlerImpl($2);"},
		{"trigger": "I-ValidatorHelper\tinit", "contents": "ValidatorHelper ${1:helper} = new ValidatorHelper($2);"},
		{"trigger": "I-ValidatorImpl\tinit", "contents": "ValidatorImpl ${1:impl} = new ValidatorImpl($2);"},
		{"trigger": "I-ValueAxis\tinit", "contents": "ValueAxis ${1:axis} = new ValueAxis($2);"},
		{"trigger": "I-ValueAxisBuilder\tinit", "contents": "ValueAxisBuilder ${1:builder} = new ValueAxisBuilder($2);"},
		{"trigger": "I-ValueBase\tinit", "contents": "ValueBase ${1:base} = new ValueBase($2);"},
		{"trigger": "I-ValueBaseHelper\tinit", "contents": "ValueBaseHelper ${1:helper} = new ValueBaseHelper($2);"},
		{"trigger": "I-ValueBaseHolder\tinit", "contents": "ValueBaseHolder ${1:holder} = new ValueBaseHolder($2);"},
		{"trigger": "I-ValueExp\tinit", "contents": "ValueExp ${1:exp} = new ValueExp($2);"},
		{"trigger": "I-ValueFactory\tinit", "contents": "ValueFactory ${1:factory} = new ValueFactory($2);"},
		{"trigger": "I-ValueFormatter\tinit", "contents": "ValueFormatter ${1:formatter} = new ValueFormatter($2);"},
		{"trigger": "I-ValueHandler\tinit", "contents": "ValueHandler ${1:handler} = new ValueHandler($2);"},
		{"trigger": "I-ValueHandlerMultiFormat\tinit", "contents": "ValueHandlerMultiFormat ${1:format} = new ValueHandlerMultiFormat($2);"},
		{"trigger": "I-ValueInputStream\tinit", "contents": "ValueInputStream ${1:stream} = new ValueInputStream($2);"},
		{"trigger": "I-ValueMember\tinit", "contents": "ValueMember ${1:member} = new ValueMember($2);"},
		{"trigger": "I-ValueMemberHelper\tinit", "contents": "ValueMemberHelper ${1:helper} = new ValueMemberHelper($2);"},
		{"trigger": "I-ValueOf\tinit", "contents": "ValueOf ${1:of} = new ValueOf($2);"},
		{"trigger": "I-ValueOutputStream\tinit", "contents": "ValueOutputStream ${1:stream} = new ValueOutputStream($2);"},
		{"trigger": "I-ValueRange\tinit", "contents": "ValueRange ${1:range} = new ValueRange($2);"},
		{"trigger": "I-ValueStore\tinit", "contents": "ValueStore ${1:store} = new ValueStore($2);"},
		{"trigger": "I-ValueTree\tinit", "contents": "ValueTree ${1:tree} = new ValueTree($2);"},
		{"trigger": "I-Variable\tinit", "contents": "Variable ${1:variable} = new Variable($2);"},
		{"trigger": "I-VariableBase\tinit", "contents": "VariableBase ${1:base} = new VariableBase($2);"},
		{"trigger": "I-VariableElement\tinit", "contents": "VariableElement ${1:element} = new VariableElement($2);"},
		{"trigger": "I-VariableExpression\tinit", "contents": "VariableExpression ${1:expression} = new VariableExpression($2);"},
		{"trigger": "I-VariableHeightLayoutCache\tinit", "contents": "VariableHeightLayoutCache ${1:cache} = new VariableHeightLayoutCache($2);"},
		{"trigger": "I-VariableLengthInstruction\tinit", "contents": "VariableLengthInstruction ${1:instruction} = new VariableLengthInstruction($2);"},
		{"trigger": "I-VariableRef\tinit", "contents": "VariableRef ${1:ref} = new VariableRef($2);"},
		{"trigger": "I-VariableRefBase\tinit", "contents": "VariableRefBase ${1:base} = new VariableRefBase($2);"},
		{"trigger": "I-VariableSafeAbsRef\tinit", "contents": "VariableSafeAbsRef ${1:ref} = new VariableSafeAbsRef($2);"},
		{"trigger": "I-VariableStack\tinit", "contents": "VariableStack ${1:stack} = new VariableStack($2);"},
		{"trigger": "I-VariableTree\tinit", "contents": "VariableTree ${1:tree} = new VariableTree($2);"},
		{"trigger": "I-Vec2d\tinit", "contents": "Vec2d ${1:vec2d} = new Vec2d($2);"},
		{"trigger": "I-Vec2f\tinit", "contents": "Vec2f ${1:vec2f} = new Vec2f($2);"},
		{"trigger": "I-Vec3d\tinit", "contents": "Vec3d ${1:vec3d} = new Vec3d($2);"},
		{"trigger": "I-Vec3f\tinit", "contents": "Vec3f ${1:vec3f} = new Vec3f($2);"},
		{"trigger": "I-Vec4d\tinit", "contents": "Vec4d ${1:vec4d} = new Vec4d($2);"},
		{"trigger": "I-Vec4f\tinit", "contents": "Vec4f ${1:vec4f} = new Vec4f($2);"},
		{"trigger": "I-Vector\tinit", "contents": "Vector ${1:vector} = new Vector($2);"},
		{"trigger": "I-VerifyError\tinit", "contents": "VerifyError ${1:error} = new VerifyError($2);"},
		{"trigger": "I-Version\tinit", "contents": "Version ${1:version} = new Version($2);"},
		{"trigger": "I-VersionHelper\tinit", "contents": "VersionHelper ${1:helper} = new VersionHelper($2);"},
		{"trigger": "I-VersionInfo\tinit", "contents": "VersionInfo ${1:info} = new VersionInfo($2);"},
		{"trigger": "I-VersionSpecHelper\tinit", "contents": "VersionSpecHelper ${1:helper} = new VersionSpecHelper($2);"},
		{"trigger": "I-VersionTree\tinit", "contents": "VersionTree ${1:tree} = new VersionTree($2);"},
		{"trigger": "I-VertexBuffer\tinit", "contents": "VertexBuffer ${1:buffer} = new VertexBuffer($2);"},
		{"trigger": "I-VertexFormat\tinit", "contents": "VertexFormat ${1:format} = new VertexFormat($2);"},
		{"trigger": "I-VerticalDirection\tinit", "contents": "VerticalDirection ${1:direction} = new VerticalDirection($2);"},
		{"trigger": "I-VetoableChangeListener\tinit", "contents": "VetoableChangeListener ${1:listener} = new VetoableChangeListener($2);"},
		{"trigger": "I-VetoableChangeListenerProxy\tinit", "contents": "VetoableChangeListenerProxy ${1:proxy} = new VetoableChangeListenerProxy($2);"},
		{"trigger": "I-VetoableChangeSupport\tinit", "contents": "VetoableChangeSupport ${1:support} = new VetoableChangeSupport($2);"},
		{"trigger": "I-VetoableListDecorator\tinit", "contents": "VetoableListDecorator ${1:decorator} = new VetoableListDecorator($2);"},
		{"trigger": "I-VideoDataBuffer\tinit", "contents": "VideoDataBuffer ${1:buffer} = new VideoDataBuffer($2);"},
		{"trigger": "I-VideoFormat\tinit", "contents": "VideoFormat ${1:format} = new VideoFormat($2);"},
		{"trigger": "I-VideoFrameRateListener\tinit", "contents": "VideoFrameRateListener ${1:listener} = new VideoFrameRateListener($2);"},
		{"trigger": "I-VideoRenderControl\tinit", "contents": "VideoRenderControl ${1:control} = new VideoRenderControl($2);"},
		{"trigger": "I-VideoRendererListener\tinit", "contents": "VideoRendererListener ${1:listener} = new VideoRendererListener($2);"},
		{"trigger": "I-VideoResolution\tinit", "contents": "VideoResolution ${1:resolution} = new VideoResolution($2);"},
		{"trigger": "I-VideoTrack\tinit", "contents": "VideoTrack ${1:track} = new VideoTrack($2);"},
		{"trigger": "I-VideoTrackSizeListener\tinit", "contents": "VideoTrackSizeListener ${1:listener} = new VideoTrackSizeListener($2);"},
		{"trigger": "I-View\tinit", "contents": "View ${1:view} = new View($2);"},
		{"trigger": "I-ViewCSS\tinit", "contents": "ViewCSS ${1:viewcss} = new ViewCSS($2);"},
		{"trigger": "I-ViewEvent\tinit", "contents": "ViewEvent ${1:event} = new ViewEvent($2);"},
		{"trigger": "I-ViewFactory\tinit", "contents": "ViewFactory ${1:factory} = new ViewFactory($2);"},
		{"trigger": "I-ViewPainter\tinit", "contents": "ViewPainter ${1:painter} = new ViewPainter($2);"},
		{"trigger": "I-ViewPort\tinit", "contents": "ViewPort ${1:port} = new ViewPort($2);"},
		{"trigger": "I-ViewScene\tinit", "contents": "ViewScene ${1:scene} = new ViewScene($2);"},
		{"trigger": "I-ViewportLayout\tinit", "contents": "ViewportLayout ${1:layout} = new ViewportLayout($2);"},
		{"trigger": "I-ViewportUI\tinit", "contents": "ViewportUI ${1:viewportui} = new ViewportUI($2);"},
		{"trigger": "I-VirtualContainerBase\tinit", "contents": "VirtualContainerBase ${1:base} = new VirtualContainerBase($2);"},
		{"trigger": "I-VirtualFlow\tinit", "contents": "VirtualFlow ${1:flow} = new VirtualFlow($2);"},
		{"trigger": "I-VirtualMachineError\tinit", "contents": "VirtualMachineError ${1:error} = new VirtualMachineError($2);"},
		{"trigger": "I-VirtualScrollBar\tinit", "contents": "VirtualScrollBar ${1:bar} = new VirtualScrollBar($2);"},
		{"trigger": "I-Visibility\tinit", "contents": "Visibility ${1:visibility} = new Visibility($2);"},
		{"trigger": "I-VisibilityHelper\tinit", "contents": "VisibilityHelper ${1:helper} = new VisibilityHelper($2);"},
		{"trigger": "I-Visitor\tinit", "contents": "Visitor ${1:visitor} = new Visitor($2);"},
		{"trigger": "I-VoiceStatus\tinit", "contents": "VoiceStatus ${1:status} = new VoiceStatus($2);"},
		{"trigger": "I-Void\tinit", "contents": "Void ${1:void} = new Void($2);"},
		{"trigger": "I-VoidType\tinit", "contents": "VoidType ${1:type} = new VoidType($2);"},
		{"trigger": "I-VolatileCallSite\tinit", "contents": "VolatileCallSite ${1:site} = new VolatileCallSite($2);"},
		{"trigger": "I-VolatileImage\tinit", "contents": "VolatileImage ${1:image} = new VolatileImage($2);"},
		{"trigger": "I-W3CDomHandler\tinit", "contents": "W3CDomHandler ${1:handler} = new W3CDomHandler($2);"},
		{"trigger": "I-W3CEndpointReference\tinit", "contents": "W3CEndpointReference ${1:reference} = new W3CEndpointReference($2);"},
		{"trigger": "I-W3CEndpointReferenceBuilder\tinit", "contents": "W3CEndpointReferenceBuilder ${1:builder} = new W3CEndpointReferenceBuilder($2);"},
		{"trigger": "I-WBMPImageReader\tinit", "contents": "WBMPImageReader ${1:reader} = new WBMPImageReader($2);"},
		{"trigger": "I-WBMPImageReaderSpi\tinit", "contents": "WBMPImageReaderSpi ${1:spi} = new WBMPImageReaderSpi($2);"},
		{"trigger": "I-WBMPImageWriter\tinit", "contents": "WBMPImageWriter ${1:writer} = new WBMPImageWriter($2);"},
		{"trigger": "I-WBMPImageWriterSpi\tinit", "contents": "WBMPImageWriterSpi ${1:spi} = new WBMPImageWriterSpi($2);"},
		{"trigger": "I-WBMPMetadata\tinit", "contents": "WBMPMetadata ${1:metadata} = new WBMPMetadata($2);"},
		{"trigger": "I-WBMPMetadataFormat\tinit", "contents": "WBMPMetadataFormat ${1:format} = new WBMPMetadataFormat($2);"},
		{"trigger": "I-WCBufferedContext\tinit", "contents": "WCBufferedContext ${1:context} = new WCBufferedContext($2);"},
		{"trigger": "I-WCChangeEvent\tinit", "contents": "WCChangeEvent ${1:event} = new WCChangeEvent($2);"},
		{"trigger": "I-WCChangeListener\tinit", "contents": "WCChangeListener ${1:listener} = new WCChangeListener($2);"},
		{"trigger": "I-WCFocusEvent\tinit", "contents": "WCFocusEvent ${1:event} = new WCFocusEvent($2);"},
		{"trigger": "I-WCFont\tinit", "contents": "WCFont ${1:font} = new WCFont($2);"},
		{"trigger": "I-WCFontCustomPlatformData\tinit", "contents": "WCFontCustomPlatformData ${1:data} = new WCFontCustomPlatformData($2);"},
		{"trigger": "I-WCFontCustomPlatformDataImpl\tinit", "contents": "WCFontCustomPlatformDataImpl ${1:impl} = new WCFontCustomPlatformDataImpl($2);"},
		{"trigger": "I-WCFontImpl\tinit", "contents": "WCFontImpl ${1:impl} = new WCFontImpl($2);"},
		{"trigger": "I-WCFontPerfLogger\tinit", "contents": "WCFontPerfLogger ${1:logger} = new WCFontPerfLogger($2);"},
		{"trigger": "I-WCFrameView\tinit", "contents": "WCFrameView ${1:view} = new WCFrameView($2);"},
		{"trigger": "I-WCGradient\tinit", "contents": "WCGradient ${1:gradient} = new WCGradient($2);"},
		{"trigger": "I-WCGraphicsContext\tinit", "contents": "WCGraphicsContext ${1:context} = new WCGraphicsContext($2);"},
		{"trigger": "I-WCGraphicsManager\tinit", "contents": "WCGraphicsManager ${1:manager} = new WCGraphicsManager($2);"},
		{"trigger": "I-WCGraphicsPerfLogger\tinit", "contents": "WCGraphicsPerfLogger ${1:logger} = new WCGraphicsPerfLogger($2);"},
		{"trigger": "I-WCGraphicsPrismContext\tinit", "contents": "WCGraphicsPrismContext ${1:context} = new WCGraphicsPrismContext($2);"},
		{"trigger": "I-WCIcon\tinit", "contents": "WCIcon ${1:icon} = new WCIcon($2);"},
		{"trigger": "I-WCImage\tinit", "contents": "WCImage ${1:image} = new WCImage($2);"},
		{"trigger": "I-WCImageDecoder\tinit", "contents": "WCImageDecoder ${1:decoder} = new WCImageDecoder($2);"},
		{"trigger": "I-WCImageDecoderImpl\tinit", "contents": "WCImageDecoderImpl ${1:impl} = new WCImageDecoderImpl($2);"},
		{"trigger": "I-WCImageFrame\tinit", "contents": "WCImageFrame ${1:frame} = new WCImageFrame($2);"},
		{"trigger": "I-WCImageImpl\tinit", "contents": "WCImageImpl ${1:impl} = new WCImageImpl($2);"},
		{"trigger": "I-WCInputMethodEvent\tinit", "contents": "WCInputMethodEvent ${1:event} = new WCInputMethodEvent($2);"},
		{"trigger": "I-WCKeyEvent\tinit", "contents": "WCKeyEvent ${1:event} = new WCKeyEvent($2);"},
		{"trigger": "I-WCLinearGradient\tinit", "contents": "WCLinearGradient ${1:gradient} = new WCLinearGradient($2);"},
		{"trigger": "I-WCMediaPlayer\tinit", "contents": "WCMediaPlayer ${1:player} = new WCMediaPlayer($2);"},
		{"trigger": "I-WCMediaPlayerImpl\tinit", "contents": "WCMediaPlayerImpl ${1:impl} = new WCMediaPlayerImpl($2);"},
		{"trigger": "I-WCMouseEvent\tinit", "contents": "WCMouseEvent ${1:event} = new WCMouseEvent($2);"},
		{"trigger": "I-WCMouseWheelEvent\tinit", "contents": "WCMouseWheelEvent ${1:event} = new WCMouseWheelEvent($2);"},
		{"trigger": "I-WCPageBackBuffer\tinit", "contents": "WCPageBackBuffer ${1:buffer} = new WCPageBackBuffer($2);"},
		{"trigger": "I-WCPageBackBufferImpl\tinit", "contents": "WCPageBackBufferImpl ${1:impl} = new WCPageBackBufferImpl($2);"},
		{"trigger": "I-WCPasteboard\tinit", "contents": "WCPasteboard ${1:pasteboard} = new WCPasteboard($2);"},
		{"trigger": "I-WCPath\tinit", "contents": "WCPath ${1:path} = new WCPath($2);"},
		{"trigger": "I-WCPathImpl\tinit", "contents": "WCPathImpl ${1:impl} = new WCPathImpl($2);"},
		{"trigger": "I-WCPathIterator\tinit", "contents": "WCPathIterator ${1:iterator} = new WCPathIterator($2);"},
		{"trigger": "I-WCPluginWidget\tinit", "contents": "WCPluginWidget ${1:widget} = new WCPluginWidget($2);"},
		{"trigger": "I-WCPoint\tinit", "contents": "WCPoint ${1:point} = new WCPoint($2);"},
		{"trigger": "I-WCRadialGradient\tinit", "contents": "WCRadialGradient ${1:gradient} = new WCRadialGradient($2);"},
		{"trigger": "I-WCRectangle\tinit", "contents": "WCRectangle ${1:rectangle} = new WCRectangle($2);"},
		{"trigger": "I-WCRenderQueue\tinit", "contents": "WCRenderQueue ${1:queue} = new WCRenderQueue($2);"},
		{"trigger": "I-WCRenderQueueImpl\tinit", "contents": "WCRenderQueueImpl ${1:impl} = new WCRenderQueueImpl($2);"},
		{"trigger": "I-WCSize\tinit", "contents": "WCSize ${1:size} = new WCSize($2);"},
		{"trigger": "I-WCStroke\tinit", "contents": "WCStroke ${1:stroke} = new WCStroke($2);"},
		{"trigger": "I-WCStrokeImpl\tinit", "contents": "WCStrokeImpl ${1:impl} = new WCStrokeImpl($2);"},
		{"trigger": "I-WCTransform\tinit", "contents": "WCTransform ${1:transform} = new WCTransform($2);"},
		{"trigger": "I-WCWidget\tinit", "contents": "WCWidget ${1:widget} = new WCWidget($2);"},
		{"trigger": "I-WCharSeqHelper\tinit", "contents": "WCharSeqHelper ${1:helper} = new WCharSeqHelper($2);"},
		{"trigger": "I-WCharSeqHolder\tinit", "contents": "WCharSeqHolder ${1:holder} = new WCharSeqHolder($2);"},
		{"trigger": "I-WStringSeqHelper\tinit", "contents": "WStringSeqHelper ${1:helper} = new WStringSeqHelper($2);"},
		{"trigger": "I-WStringSeqHolder\tinit", "contents": "WStringSeqHolder ${1:holder} = new WStringSeqHolder($2);"},
		{"trigger": "I-WStringValueHelper\tinit", "contents": "WStringValueHelper ${1:helper} = new WStringValueHelper($2);"},
		{"trigger": "I-WaitDispatchSupport\tinit", "contents": "WaitDispatchSupport ${1:support} = new WaitDispatchSupport($2);"},
		{"trigger": "I-WalkerFactory\tinit", "contents": "WalkerFactory ${1:factory} = new WalkerFactory($2);"},
		{"trigger": "I-WalkingIterator\tinit", "contents": "WalkingIterator ${1:iterator} = new WalkingIterator($2);"},
		{"trigger": "I-WalkingIteratorSorted\tinit", "contents": "WalkingIteratorSorted ${1:sorted} = new WalkingIteratorSorted($2);"},
		{"trigger": "I-WatchEvent\tinit", "contents": "WatchEvent ${1:event} = new WatchEvent($2);"},
		{"trigger": "I-WatchKey\tinit", "contents": "WatchKey ${1:key} = new WatchKey($2);"},
		{"trigger": "I-WatchService\tinit", "contents": "WatchService ${1:service} = new WatchService($2);"},
		{"trigger": "I-Watchable\tinit", "contents": "Watchable ${1:watchable} = new Watchable($2);"},
		{"trigger": "I-WatchdogTimer\tinit", "contents": "WatchdogTimer ${1:timer} = new WatchdogTimer($2);"},
		{"trigger": "I-WeakCache\tinit", "contents": "WeakCache ${1:cache} = new WeakCache($2);"},
		{"trigger": "I-WeakChangeListener\tinit", "contents": "WeakChangeListener ${1:listener} = new WeakChangeListener($2);"},
		{"trigger": "I-WeakEventHandler\tinit", "contents": "WeakEventHandler ${1:handler} = new WeakEventHandler($2);"},
		{"trigger": "I-WeakHashMap\tinit", "contents": "WeakHashMap ${1:map} = new WeakHashMap($2);"},
		{"trigger": "I-WeakIdentityHashMap\tinit", "contents": "WeakIdentityHashMap ${1:map} = new WeakIdentityHashMap($2);"},
		{"trigger": "I-WeakIdentityMap\tinit", "contents": "WeakIdentityMap ${1:map} = new WeakIdentityMap($2);"},
		{"trigger": "I-WeakInvalidationListener\tinit", "contents": "WeakInvalidationListener ${1:listener} = new WeakInvalidationListener($2);"},
		{"trigger": "I-WeakListChangeListener\tinit", "contents": "WeakListChangeListener ${1:listener} = new WeakListChangeListener($2);"},
		{"trigger": "I-WeakListener\tinit", "contents": "WeakListener ${1:listener} = new WeakListener($2);"},
		{"trigger": "I-WeakMapChangeListener\tinit", "contents": "WeakMapChangeListener ${1:listener} = new WeakMapChangeListener($2);"},
		{"trigger": "I-WeakReference\tinit", "contents": "WeakReference ${1:reference} = new WeakReference($2);"},
		{"trigger": "I-WeakReferenceQueue\tinit", "contents": "WeakReferenceQueue ${1:queue} = new WeakReferenceQueue($2);"},
		{"trigger": "I-WeakReferenceXMLSchema\tinit", "contents": "WeakReferenceXMLSchema ${1:schema} = new WeakReferenceXMLSchema($2);"},
		{"trigger": "I-WeakSetChangeListener\tinit", "contents": "WeakSetChangeListener ${1:listener} = new WeakSetChangeListener($2);"},
		{"trigger": "I-WebColorField\tinit", "contents": "WebColorField ${1:field} = new WebColorField($2);"},
		{"trigger": "I-WebColorFieldSkin\tinit", "contents": "WebColorFieldSkin ${1:skin} = new WebColorFieldSkin($2);"},
		{"trigger": "I-WebEndpoint\tinit", "contents": "WebEndpoint ${1:endpoint} = new WebEndpoint($2);"},
		{"trigger": "I-WebEngine\tinit", "contents": "WebEngine ${1:engine} = new WebEngine($2);"},
		{"trigger": "I-WebEngineBuilder\tinit", "contents": "WebEngineBuilder ${1:builder} = new WebEngineBuilder($2);"},
		{"trigger": "I-WebErrorEvent\tinit", "contents": "WebErrorEvent ${1:event} = new WebErrorEvent($2);"},
		{"trigger": "I-WebEvent\tinit", "contents": "WebEvent ${1:event} = new WebEvent($2);"},
		{"trigger": "I-WebFault\tinit", "contents": "WebFault ${1:fault} = new WebFault($2);"},
		{"trigger": "I-WebHistory\tinit", "contents": "WebHistory ${1:history} = new WebHistory($2);"},
		{"trigger": "I-WebPage\tinit", "contents": "WebPage ${1:page} = new WebPage($2);"},
		{"trigger": "I-WebPageClient\tinit", "contents": "WebPageClient ${1:client} = new WebPageClient($2);"},
		{"trigger": "I-WebPageClientImpl\tinit", "contents": "WebPageClientImpl ${1:impl} = new WebPageClientImpl($2);"},
		{"trigger": "I-WebRowSet\tinit", "contents": "WebRowSet ${1:set} = new WebRowSet($2);"},
		{"trigger": "I-WebServiceClient\tinit", "contents": "WebServiceClient ${1:client} = new WebServiceClient($2);"},
		{"trigger": "I-WebServiceContext\tinit", "contents": "WebServiceContext ${1:context} = new WebServiceContext($2);"},
		{"trigger": "I-WebServiceException\tinit", "contents": "WebServiceException ${1:exception} = new WebServiceException($2);"},
		{"trigger": "I-WebServiceFeature\tinit", "contents": "WebServiceFeature ${1:feature} = new WebServiceFeature($2);"},
		{"trigger": "I-WebServiceFeatureAnnotation\tinit", "contents": "WebServiceFeatureAnnotation ${1:annotation} = new WebServiceFeatureAnnotation($2);"},
		{"trigger": "I-WebServicePermission\tinit", "contents": "WebServicePermission ${1:permission} = new WebServicePermission($2);"},
		{"trigger": "I-WebServiceProvider\tinit", "contents": "WebServiceProvider ${1:provider} = new WebServiceProvider($2);"},
		{"trigger": "I-WebServiceRef\tinit", "contents": "WebServiceRef ${1:ref} = new WebServiceRef($2);"},
		{"trigger": "I-WebServiceRefs\tinit", "contents": "WebServiceRefs ${1:refs} = new WebServiceRefs($2);"},
		{"trigger": "I-WebView\tinit", "contents": "WebView ${1:view} = new WebView($2);"},
		{"trigger": "I-WebViewBuilder\tinit", "contents": "WebViewBuilder ${1:builder} = new WebViewBuilder($2);"},
		{"trigger": "I-WeekFields\tinit", "contents": "WeekFields ${1:fields} = new WeekFields($2);"},
		{"trigger": "I-WeightedClosestCorner\tinit", "contents": "WeightedClosestCorner ${1:corner} = new WeightedClosestCorner($2);"},
		{"trigger": "I-WheelEvent\tinit", "contents": "WheelEvent ${1:event} = new WheelEvent($2);"},
		{"trigger": "I-WheelEventImpl\tinit", "contents": "WheelEventImpl ${1:impl} = new WheelEventImpl($2);"},
		{"trigger": "I-When\tinit", "contents": "When ${1:when} = new When($2);"},
		{"trigger": "I-WhileLoopTree\tinit", "contents": "WhileLoopTree ${1:tree} = new WhileLoopTree($2);"},
		{"trigger": "I-WhiteSpaceProcessor\tinit", "contents": "WhiteSpaceProcessor ${1:processor} = new WhiteSpaceProcessor($2);"},
		{"trigger": "I-Whitespace\tinit", "contents": "Whitespace ${1:whitespace} = new Whitespace($2);"},
		{"trigger": "I-WhitespaceBasedBreakIterator\tinit", "contents": "WhitespaceBasedBreakIterator ${1:iterator} = new WhitespaceBasedBreakIterator($2);"},
		{"trigger": "I-WhitespaceStrippingElementMatcher\tinit", "contents": "WhitespaceStrippingElementMatcher ${1:matcher} = new WhitespaceStrippingElementMatcher($2);"},
		{"trigger": "I-WildcardTree\tinit", "contents": "WildcardTree ${1:tree} = new WildcardTree($2);"},
		{"trigger": "I-WildcardType\tinit", "contents": "WildcardType ${1:type} = new WildcardType($2);"},
		{"trigger": "I-WinAccessible\tinit", "contents": "WinAccessible ${1:accessible} = new WinAccessible($2);"},
		{"trigger": "I-WinApplication\tinit", "contents": "WinApplication ${1:application} = new WinApplication($2);"},
		{"trigger": "I-WinChildWindow\tinit", "contents": "WinChildWindow ${1:window} = new WinChildWindow($2);"},
		{"trigger": "I-WinClipboardDelegate\tinit", "contents": "WinClipboardDelegate ${1:delegate} = new WinClipboardDelegate($2);"},
		{"trigger": "I-WinCommonDialogs\tinit", "contents": "WinCommonDialogs ${1:dialogs} = new WinCommonDialogs($2);"},
		{"trigger": "I-WinCursor\tinit", "contents": "WinCursor ${1:cursor} = new WinCursor($2);"},
		{"trigger": "I-WinDnDClipboard\tinit", "contents": "WinDnDClipboard ${1:clipboard} = new WinDnDClipboard($2);"},
		{"trigger": "I-WinGLContext\tinit", "contents": "WinGLContext ${1:context} = new WinGLContext($2);"},
		{"trigger": "I-WinGLDrawable\tinit", "contents": "WinGLDrawable ${1:drawable} = new WinGLDrawable($2);"},
		{"trigger": "I-WinGLFactory\tinit", "contents": "WinGLFactory ${1:factory} = new WinGLFactory($2);"},
		{"trigger": "I-WinGLPixelFormat\tinit", "contents": "WinGLPixelFormat ${1:format} = new WinGLPixelFormat($2);"},
		{"trigger": "I-WinGestureSupport\tinit", "contents": "WinGestureSupport ${1:support} = new WinGestureSupport($2);"},
		{"trigger": "I-WinHTMLCodec\tinit", "contents": "WinHTMLCodec ${1:codec} = new WinHTMLCodec($2);"},
		{"trigger": "I-WinMenuBarDelegate\tinit", "contents": "WinMenuBarDelegate ${1:delegate} = new WinMenuBarDelegate($2);"},
		{"trigger": "I-WinMenuDelegate\tinit", "contents": "WinMenuDelegate ${1:delegate} = new WinMenuDelegate($2);"},
		{"trigger": "I-WinMenuImpl\tinit", "contents": "WinMenuImpl ${1:impl} = new WinMenuImpl($2);"},
		{"trigger": "I-WinMenuItemDelegate\tinit", "contents": "WinMenuItemDelegate ${1:delegate} = new WinMenuItemDelegate($2);"},
		{"trigger": "I-WinNTFileSystem\tinit", "contents": "WinNTFileSystem ${1:system} = new WinNTFileSystem($2);"},
		{"trigger": "I-WinPixels\tinit", "contents": "WinPixels ${1:pixels} = new WinPixels($2);"},
		{"trigger": "I-WinPlatformFactory\tinit", "contents": "WinPlatformFactory ${1:factory} = new WinPlatformFactory($2);"},
		{"trigger": "I-WinRobot\tinit", "contents": "WinRobot ${1:robot} = new WinRobot($2);"},
		{"trigger": "I-WinSystemClipboard\tinit", "contents": "WinSystemClipboard ${1:clipboard} = new WinSystemClipboard($2);"},
		{"trigger": "I-WinTextRangeProvider\tinit", "contents": "WinTextRangeProvider ${1:provider} = new WinTextRangeProvider($2);"},
		{"trigger": "I-WinTimer\tinit", "contents": "WinTimer ${1:timer} = new WinTimer($2);"},
		{"trigger": "I-WinVariant\tinit", "contents": "WinVariant ${1:variant} = new WinVariant($2);"},
		{"trigger": "I-WinView\tinit", "contents": "WinView ${1:view} = new WinView($2);"},
		{"trigger": "I-WinWindow\tinit", "contents": "WinWindow ${1:window} = new WinWindow($2);"},
		{"trigger": "I-Window\tinit", "contents": "Window ${1:window} = new Window($2);"},
		{"trigger": "I-WindowAdapter\tinit", "contents": "WindowAdapter ${1:adapter} = new WindowAdapter($2);"},
		{"trigger": "I-WindowBuilder\tinit", "contents": "WindowBuilder ${1:builder} = new WindowBuilder($2);"},
		{"trigger": "I-WindowCloseRequestHandler\tinit", "contents": "WindowCloseRequestHandler ${1:handler} = new WindowCloseRequestHandler($2);"},
		{"trigger": "I-WindowConstants\tinit", "contents": "WindowConstants ${1:constants} = new WindowConstants($2);"},
		{"trigger": "I-WindowEvent\tinit", "contents": "WindowEvent ${1:event} = new WindowEvent($2);"},
		{"trigger": "I-WindowEventDispatcher\tinit", "contents": "WindowEventDispatcher ${1:dispatcher} = new WindowEventDispatcher($2);"},
		{"trigger": "I-WindowFocusListener\tinit", "contents": "WindowFocusListener ${1:listener} = new WindowFocusListener($2);"},
		{"trigger": "I-WindowHelper\tinit", "contents": "WindowHelper ${1:helper} = new WindowHelper($2);"},
		{"trigger": "I-WindowListener\tinit", "contents": "WindowListener ${1:listener} = new WindowListener($2);"},
		{"trigger": "I-WindowPeer\tinit", "contents": "WindowPeer ${1:peer} = new WindowPeer($2);"},
		{"trigger": "I-WindowPeerListener\tinit", "contents": "WindowPeerListener ${1:listener} = new WindowPeerListener($2);"},
		{"trigger": "I-WindowStage\tinit", "contents": "WindowStage ${1:stage} = new WindowStage($2);"},
		{"trigger": "I-WindowStateListener\tinit", "contents": "WindowStateListener ${1:listener} = new WindowStateListener($2);"},
		{"trigger": "I-WindowsBorders\tinit", "contents": "WindowsBorders ${1:borders} = new WindowsBorders($2);"},
		{"trigger": "I-WindowsButtonListener\tinit", "contents": "WindowsButtonListener ${1:listener} = new WindowsButtonListener($2);"},
		{"trigger": "I-WindowsButtonUI\tinit", "contents": "WindowsButtonUI ${1:windowsbuttonui} = new WindowsButtonUI($2);"},
		{"trigger": "I-WindowsCheckBoxMenuItemUI\tinit", "contents": "WindowsCheckBoxMenuItemUI ${1:windowscheckboxmenuitemui} = new WindowsCheckBoxMenuItemUI($2);"},
		{"trigger": "I-WindowsCheckBoxUI\tinit", "contents": "WindowsCheckBoxUI ${1:windowscheckboxui} = new WindowsCheckBoxUI($2);"},
		{"trigger": "I-WindowsClassicLookAndFeel\tinit", "contents": "WindowsClassicLookAndFeel ${1:feel} = new WindowsClassicLookAndFeel($2);"},
		{"trigger": "I-WindowsComboBoxUI\tinit", "contents": "WindowsComboBoxUI ${1:windowscomboboxui} = new WindowsComboBoxUI($2);"},
		{"trigger": "I-WindowsDesktopIconUI\tinit", "contents": "WindowsDesktopIconUI ${1:windowsdesktopiconui} = new WindowsDesktopIconUI($2);"},
		{"trigger": "I-WindowsDesktopManager\tinit", "contents": "WindowsDesktopManager ${1:manager} = new WindowsDesktopManager($2);"},
		{"trigger": "I-WindowsDesktopPaneUI\tinit", "contents": "WindowsDesktopPaneUI ${1:windowsdesktoppaneui} = new WindowsDesktopPaneUI($2);"},
		{"trigger": "I-WindowsEditorPaneUI\tinit", "contents": "WindowsEditorPaneUI ${1:windowseditorpaneui} = new WindowsEditorPaneUI($2);"},
		{"trigger": "I-WindowsFileChooserUI\tinit", "contents": "WindowsFileChooserUI ${1:windowsfilechooserui} = new WindowsFileChooserUI($2);"},
		{"trigger": "I-WindowsFontMap\tinit", "contents": "WindowsFontMap ${1:map} = new WindowsFontMap($2);"},
		{"trigger": "I-WindowsGraphicsUtils\tinit", "contents": "WindowsGraphicsUtils ${1:utils} = new WindowsGraphicsUtils($2);"},
		{"trigger": "I-WindowsIconFactory\tinit", "contents": "WindowsIconFactory ${1:factory} = new WindowsIconFactory($2);"},
		{"trigger": "I-WindowsInternalFrameTitlePane\tinit", "contents": "WindowsInternalFrameTitlePane ${1:pane} = new WindowsInternalFrameTitlePane($2);"},
		{"trigger": "I-WindowsInternalFrameUI\tinit", "contents": "WindowsInternalFrameUI ${1:windowsinternalframeui} = new WindowsInternalFrameUI($2);"},
		{"trigger": "I-WindowsLabelUI\tinit", "contents": "WindowsLabelUI ${1:windowslabelui} = new WindowsLabelUI($2);"},
		{"trigger": "I-WindowsLookAndFeel\tinit", "contents": "WindowsLookAndFeel ${1:feel} = new WindowsLookAndFeel($2);"},
		{"trigger": "I-WindowsMenuBarUI\tinit", "contents": "WindowsMenuBarUI ${1:windowsmenubarui} = new WindowsMenuBarUI($2);"},
		{"trigger": "I-WindowsMenuItemUI\tinit", "contents": "WindowsMenuItemUI ${1:windowsmenuitemui} = new WindowsMenuItemUI($2);"},
		{"trigger": "I-WindowsMenuItemUIAccessor\tinit", "contents": "WindowsMenuItemUIAccessor ${1:accessor} = new WindowsMenuItemUIAccessor($2);"},
		{"trigger": "I-WindowsMenuUI\tinit", "contents": "WindowsMenuUI ${1:windowsmenuui} = new WindowsMenuUI($2);"},
		{"trigger": "I-WindowsOptionPaneUI\tinit", "contents": "WindowsOptionPaneUI ${1:windowsoptionpaneui} = new WindowsOptionPaneUI($2);"},
		{"trigger": "I-WindowsPasswordFieldUI\tinit", "contents": "WindowsPasswordFieldUI ${1:windowspasswordfieldui} = new WindowsPasswordFieldUI($2);"},
		{"trigger": "I-WindowsPopupMenuSeparatorUI\tinit", "contents": "WindowsPopupMenuSeparatorUI ${1:windowspopupmenuseparatorui} = new WindowsPopupMenuSeparatorUI($2);"},
		{"trigger": "I-WindowsPopupMenuUI\tinit", "contents": "WindowsPopupMenuUI ${1:windowspopupmenuui} = new WindowsPopupMenuUI($2);"},
		{"trigger": "I-WindowsPopupWindow\tinit", "contents": "WindowsPopupWindow ${1:window} = new WindowsPopupWindow($2);"},
		{"trigger": "I-WindowsPreferences\tinit", "contents": "WindowsPreferences ${1:preferences} = new WindowsPreferences($2);"},
		{"trigger": "I-WindowsPreferencesFactory\tinit", "contents": "WindowsPreferencesFactory ${1:factory} = new WindowsPreferencesFactory($2);"},
		{"trigger": "I-WindowsProgressBarUI\tinit", "contents": "WindowsProgressBarUI ${1:windowsprogressbarui} = new WindowsProgressBarUI($2);"},
		{"trigger": "I-WindowsRadioButtonMenuItemUI\tinit", "contents": "WindowsRadioButtonMenuItemUI ${1:windowsradiobuttonmenuitemui} = new WindowsRadioButtonMenuItemUI($2);"},
		{"trigger": "I-WindowsRadioButtonUI\tinit", "contents": "WindowsRadioButtonUI ${1:windowsradiobuttonui} = new WindowsRadioButtonUI($2);"},
		{"trigger": "I-WindowsRootPaneUI\tinit", "contents": "WindowsRootPaneUI ${1:windowsrootpaneui} = new WindowsRootPaneUI($2);"},
		{"trigger": "I-WindowsScrollBarUI\tinit", "contents": "WindowsScrollBarUI ${1:windowsscrollbarui} = new WindowsScrollBarUI($2);"},
		{"trigger": "I-WindowsScrollPaneUI\tinit", "contents": "WindowsScrollPaneUI ${1:windowsscrollpaneui} = new WindowsScrollPaneUI($2);"},
		{"trigger": "I-WindowsSeparatorUI\tinit", "contents": "WindowsSeparatorUI ${1:windowsseparatorui} = new WindowsSeparatorUI($2);"},
		{"trigger": "I-WindowsSliderUI\tinit", "contents": "WindowsSliderUI ${1:windowssliderui} = new WindowsSliderUI($2);"},
		{"trigger": "I-WindowsSpinnerUI\tinit", "contents": "WindowsSpinnerUI ${1:windowsspinnerui} = new WindowsSpinnerUI($2);"},
		{"trigger": "I-WindowsSplitPaneDivider\tinit", "contents": "WindowsSplitPaneDivider ${1:divider} = new WindowsSplitPaneDivider($2);"},
		{"trigger": "I-WindowsSplitPaneUI\tinit", "contents": "WindowsSplitPaneUI ${1:windowssplitpaneui} = new WindowsSplitPaneUI($2);"},
		{"trigger": "I-WindowsTabbedPaneUI\tinit", "contents": "WindowsTabbedPaneUI ${1:windowstabbedpaneui} = new WindowsTabbedPaneUI($2);"},
		{"trigger": "I-WindowsTableHeaderUI\tinit", "contents": "WindowsTableHeaderUI ${1:windowstableheaderui} = new WindowsTableHeaderUI($2);"},
		{"trigger": "I-WindowsTextAreaUI\tinit", "contents": "WindowsTextAreaUI ${1:windowstextareaui} = new WindowsTextAreaUI($2);"},
		{"trigger": "I-WindowsTextFieldUI\tinit", "contents": "WindowsTextFieldUI ${1:windowstextfieldui} = new WindowsTextFieldUI($2);"},
		{"trigger": "I-WindowsTextPaneUI\tinit", "contents": "WindowsTextPaneUI ${1:windowstextpaneui} = new WindowsTextPaneUI($2);"},
		{"trigger": "I-WindowsTextUI\tinit", "contents": "WindowsTextUI ${1:windowstextui} = new WindowsTextUI($2);"},
		{"trigger": "I-WindowsToggleButtonUI\tinit", "contents": "WindowsToggleButtonUI ${1:windowstogglebuttonui} = new WindowsToggleButtonUI($2);"},
		{"trigger": "I-WindowsToolBarSeparatorUI\tinit", "contents": "WindowsToolBarSeparatorUI ${1:windowstoolbarseparatorui} = new WindowsToolBarSeparatorUI($2);"},
		{"trigger": "I-WindowsToolBarUI\tinit", "contents": "WindowsToolBarUI ${1:windowstoolbarui} = new WindowsToolBarUI($2);"},
		{"trigger": "I-WindowsTreeUI\tinit", "contents": "WindowsTreeUI ${1:windowstreeui} = new WindowsTreeUI($2);"},
		{"trigger": "I-WithParam\tinit", "contents": "WithParam ${1:param} = new WithParam($2);"},
		{"trigger": "I-WoffDecoder\tinit", "contents": "WoffDecoder ${1:decoder} = new WoffDecoder($2);"},
		{"trigger": "I-Work\tinit", "contents": "Work ${1:work} = new Work($2);"},
		{"trigger": "I-WorkQueue\tinit", "contents": "WorkQueue ${1:queue} = new WorkQueue($2);"},
		{"trigger": "I-Worker\tinit", "contents": "Worker ${1:worker} = new Worker($2);"},
		{"trigger": "I-WorkerStateEvent\tinit", "contents": "WorkerStateEvent ${1:event} = new WorkerStateEvent($2);"},
		{"trigger": "I-WrappedPlainView\tinit", "contents": "WrappedPlainView ${1:view} = new WrappedPlainView($2);"},
		{"trigger": "I-WrappedRuntimeException\tinit", "contents": "WrappedRuntimeException ${1:exception} = new WrappedRuntimeException($2);"},
		{"trigger": "I-WrappedSAXException\tinit", "contents": "WrappedSAXException ${1:exception} = new WrappedSAXException($2);"},
		{"trigger": "I-Wrapper\tinit", "contents": "Wrapper ${1:wrapper} = new Wrapper($2);"},
		{"trigger": "I-WritableBooleanValue\tinit", "contents": "WritableBooleanValue ${1:value} = new WritableBooleanValue($2);"},
		{"trigger": "I-WritableByteChannel\tinit", "contents": "WritableByteChannel ${1:channel} = new WritableByteChannel($2);"},
		{"trigger": "I-WritableDoubleValue\tinit", "contents": "WritableDoubleValue ${1:value} = new WritableDoubleValue($2);"},
		{"trigger": "I-WritableFloatValue\tinit", "contents": "WritableFloatValue ${1:value} = new WritableFloatValue($2);"},
		{"trigger": "I-WritableImage\tinit", "contents": "WritableImage ${1:image} = new WritableImage($2);"},
		{"trigger": "I-WritableIntegerValue\tinit", "contents": "WritableIntegerValue ${1:value} = new WritableIntegerValue($2);"},
		{"trigger": "I-WritableListValue\tinit", "contents": "WritableListValue ${1:value} = new WritableListValue($2);"},
		{"trigger": "I-WritableLongValue\tinit", "contents": "WritableLongValue ${1:value} = new WritableLongValue($2);"},
		{"trigger": "I-WritableMapValue\tinit", "contents": "WritableMapValue ${1:value} = new WritableMapValue($2);"},
		{"trigger": "I-WritableNumberValue\tinit", "contents": "WritableNumberValue ${1:value} = new WritableNumberValue($2);"},
		{"trigger": "I-WritableObjectValue\tinit", "contents": "WritableObjectValue ${1:value} = new WritableObjectValue($2);"},
		{"trigger": "I-WritablePixelFormat\tinit", "contents": "WritablePixelFormat ${1:format} = new WritablePixelFormat($2);"},
		{"trigger": "I-WritableRaster\tinit", "contents": "WritableRaster ${1:raster} = new WritableRaster($2);"},
		{"trigger": "I-WritableRenderedImage\tinit", "contents": "WritableRenderedImage ${1:image} = new WritableRenderedImage($2);"},
		{"trigger": "I-WritableSetValue\tinit", "contents": "WritableSetValue ${1:value} = new WritableSetValue($2);"},
		{"trigger": "I-WritableStringValue\tinit", "contents": "WritableStringValue ${1:value} = new WritableStringValue($2);"},
		{"trigger": "I-WritableValue\tinit", "contents": "WritableValue ${1:value} = new WritableValue($2);"},
		{"trigger": "I-WriteAbortedException\tinit", "contents": "WriteAbortedException ${1:exception} = new WriteAbortedException($2);"},
		{"trigger": "I-WriteContents\tinit", "contents": "WriteContents ${1:contents} = new WriteContents($2);"},
		{"trigger": "I-WritePendingException\tinit", "contents": "WritePendingException ${1:exception} = new WritePendingException($2);"},
		{"trigger": "I-Writeable\tinit", "contents": "Writeable ${1:writeable} = new Writeable($2);"},
		{"trigger": "I-Writer\tinit", "contents": "Writer ${1:writer} = new Writer($2);"},
		{"trigger": "I-WriterChain\tinit", "contents": "WriterChain ${1:chain} = new WriterChain($2);"},
		{"trigger": "I-WriterOutputBuffer\tinit", "contents": "WriterOutputBuffer ${1:buffer} = new WriterOutputBuffer($2);"},
		{"trigger": "I-WriterToASCI\tinit", "contents": "WriterToASCI ${1:writertoasci} = new WriterToASCI($2);"},
		{"trigger": "I-WriterToUTF8Buffered\tinit", "contents": "WriterToUTF8Buffered ${1:buffered} = new WriterToUTF8Buffered($2);"},
		{"trigger": "I-WrongAdapter\tinit", "contents": "WrongAdapter ${1:adapter} = new WrongAdapter($2);"},
		{"trigger": "I-WrongAdapterHelper\tinit", "contents": "WrongAdapterHelper ${1:helper} = new WrongAdapterHelper($2);"},
		{"trigger": "I-WrongMethodTypeException\tinit", "contents": "WrongMethodTypeException ${1:exception} = new WrongMethodTypeException($2);"},
		{"trigger": "I-WrongNumberArgsException\tinit", "contents": "WrongNumberArgsException ${1:exception} = new WrongNumberArgsException($2);"},
		{"trigger": "I-WrongParserException\tinit", "contents": "WrongParserException ${1:exception} = new WrongParserException($2);"},
		{"trigger": "I-WrongPolicy\tinit", "contents": "WrongPolicy ${1:policy} = new WrongPolicy($2);"},
		{"trigger": "I-WrongPolicyHelper\tinit", "contents": "WrongPolicyHelper ${1:helper} = new WrongPolicyHelper($2);"},
		{"trigger": "I-WrongTransaction\tinit", "contents": "WrongTransaction ${1:transaction} = new WrongTransaction($2);"},
		{"trigger": "I-WrongTransactionHelper\tinit", "contents": "WrongTransactionHelper ${1:helper} = new WrongTransactionHelper($2);"},
		{"trigger": "I-WrongTransactionHolder\tinit", "contents": "WrongTransactionHolder ${1:holder} = new WrongTransactionHolder($2);"},
		{"trigger": "I-X\tinit", "contents": "X ${1:x} = new X($2);"},
		{"trigger": "I-X11AcceleratedScreen\tinit", "contents": "X11AcceleratedScreen ${1:screen} = new X11AcceleratedScreen($2);"},
		{"trigger": "I-X11Cursor\tinit", "contents": "X11Cursor ${1:cursor} = new X11Cursor($2);"},
		{"trigger": "I-X11GLContext\tinit", "contents": "X11GLContext ${1:context} = new X11GLContext($2);"},
		{"trigger": "I-X11GLDrawable\tinit", "contents": "X11GLDrawable ${1:drawable} = new X11GLDrawable($2);"},
		{"trigger": "I-X11GLFactory\tinit", "contents": "X11GLFactory ${1:factory} = new X11GLFactory($2);"},
		{"trigger": "I-X11GLPixelFormat\tinit", "contents": "X11GLPixelFormat ${1:format} = new X11GLPixelFormat($2);"},
		{"trigger": "I-X11InputDeviceRegistry\tinit", "contents": "X11InputDeviceRegistry ${1:registry} = new X11InputDeviceRegistry($2);"},
		{"trigger": "I-X11Platform\tinit", "contents": "X11Platform ${1:platform} = new X11Platform($2);"},
		{"trigger": "I-X11PlatformFactory\tinit", "contents": "X11PlatformFactory ${1:factory} = new X11PlatformFactory($2);"},
		{"trigger": "I-X11Screen\tinit", "contents": "X11Screen ${1:screen} = new X11Screen($2);"},
		{"trigger": "I-X11WarpingCursor\tinit", "contents": "X11WarpingCursor ${1:cursor} = new X11WarpingCursor($2);"},
		{"trigger": "I-X500Principal\tinit", "contents": "X500Principal ${1:principal} = new X500Principal($2);"},
		{"trigger": "I-X500PrivateCredential\tinit", "contents": "X500PrivateCredential ${1:credential} = new X500PrivateCredential($2);"},
		{"trigger": "I-X509CRL\tinit", "contents": "X509CRL ${1:x509crl} = new X509CRL($2);"},
		{"trigger": "I-X509CRLEntry\tinit", "contents": "X509CRLEntry ${1:entry} = new X509CRLEntry($2);"},
		{"trigger": "I-X509CRLSelector\tinit", "contents": "X509CRLSelector ${1:selector} = new X509CRLSelector($2);"},
		{"trigger": "I-X509CertSelector\tinit", "contents": "X509CertSelector ${1:selector} = new X509CertSelector($2);"},
		{"trigger": "I-X509Certificate\tinit", "contents": "X509Certificate ${1:certificate} = new X509Certificate($2);"},
		{"trigger": "I-X509CertificateResolver\tinit", "contents": "X509CertificateResolver ${1:resolver} = new X509CertificateResolver($2);"},
		{"trigger": "I-X509Data\tinit", "contents": "X509Data ${1:data} = new X509Data($2);"},
		{"trigger": "I-X509DigestResolver\tinit", "contents": "X509DigestResolver ${1:resolver} = new X509DigestResolver($2);"},
		{"trigger": "I-X509EncodedKeySpec\tinit", "contents": "X509EncodedKeySpec ${1:spec} = new X509EncodedKeySpec($2);"},
		{"trigger": "I-X509Extension\tinit", "contents": "X509Extension ${1:extension} = new X509Extension($2);"},
		{"trigger": "I-X509IssuerSerial\tinit", "contents": "X509IssuerSerial ${1:serial} = new X509IssuerSerial($2);"},
		{"trigger": "I-X509IssuerSerialResolver\tinit", "contents": "X509IssuerSerialResolver ${1:resolver} = new X509IssuerSerialResolver($2);"},
		{"trigger": "I-X509SKIResolver\tinit", "contents": "X509SKIResolver ${1:resolver} = new X509SKIResolver($2);"},
		{"trigger": "I-X509SubjectNameResolver\tinit", "contents": "X509SubjectNameResolver ${1:resolver} = new X509SubjectNameResolver($2);"},
		{"trigger": "I-XAConnection\tinit", "contents": "XAConnection ${1:connection} = new XAConnection($2);"},
		{"trigger": "I-XADataSource\tinit", "contents": "XADataSource ${1:source} = new XADataSource($2);"},
		{"trigger": "I-XBoolean\tinit", "contents": "XBoolean ${1:boolean} = new XBoolean($2);"},
		{"trigger": "I-XBooleanStatic\tinit", "contents": "XBooleanStatic ${1:static} = new XBooleanStatic($2);"},
		{"trigger": "I-XCatalogReader\tinit", "contents": "XCatalogReader ${1:reader} = new XCatalogReader($2);"},
		{"trigger": "I-XColors\tinit", "contents": "XColors ${1:colors} = new XColors($2);"},
		{"trigger": "I-XHTMLSerializer\tinit", "contents": "XHTMLSerializer ${1:serializer} = new XHTMLSerializer($2);"},
		{"trigger": "I-XInclude11TextReader\tinit", "contents": "XInclude11TextReader ${1:reader} = new XInclude11TextReader($2);"},
		{"trigger": "I-XIncludeAwareParserConfiguration\tinit", "contents": "XIncludeAwareParserConfiguration ${1:configuration} = new XIncludeAwareParserConfiguration($2);"},
		{"trigger": "I-XIncludeHandler\tinit", "contents": "XIncludeHandler ${1:handler} = new XIncludeHandler($2);"},
		{"trigger": "I-XIncludeMessageFormatter\tinit", "contents": "XIncludeMessageFormatter ${1:formatter} = new XIncludeMessageFormatter($2);"},
		{"trigger": "I-XIncludeNamespaceSupport\tinit", "contents": "XIncludeNamespaceSupport ${1:support} = new XIncludeNamespaceSupport($2);"},
		{"trigger": "I-XIncludeParserConfiguration\tinit", "contents": "XIncludeParserConfiguration ${1:configuration} = new XIncludeParserConfiguration($2);"},
		{"trigger": "I-XIncludeTextReader\tinit", "contents": "XIncludeTextReader ${1:reader} = new XIncludeTextReader($2);"},
		{"trigger": "I-XInt\tinit", "contents": "XInt ${1:int} = new XInt($2);"},
		{"trigger": "I-XIntPool\tinit", "contents": "XIntPool ${1:pool} = new XIntPool($2);"},
		{"trigger": "I-XML11Char\tinit", "contents": "XML11Char ${1:char} = new XML11Char($2);"},
		{"trigger": "I-XML11Configurable\tinit", "contents": "XML11Configurable ${1:configurable} = new XML11Configurable($2);"},
		{"trigger": "I-XML11Configuration\tinit", "contents": "XML11Configuration ${1:configuration} = new XML11Configuration($2);"},
		{"trigger": "I-XML11DTDConfiguration\tinit", "contents": "XML11DTDConfiguration ${1:configuration} = new XML11DTDConfiguration($2);"},
		{"trigger": "I-XML11DTDDVFactoryImpl\tinit", "contents": "XML11DTDDVFactoryImpl ${1:impl} = new XML11DTDDVFactoryImpl($2);"},
		{"trigger": "I-XML11DTDProcessor\tinit", "contents": "XML11DTDProcessor ${1:processor} = new XML11DTDProcessor($2);"},
		{"trigger": "I-XML11DTDScannerImpl\tinit", "contents": "XML11DTDScannerImpl ${1:impl} = new XML11DTDScannerImpl($2);"},
		{"trigger": "I-XML11DTDValidator\tinit", "contents": "XML11DTDValidator ${1:validator} = new XML11DTDValidator($2);"},
		{"trigger": "I-XML11DocumentScannerImpl\tinit", "contents": "XML11DocumentScannerImpl ${1:impl} = new XML11DocumentScannerImpl($2);"},
		{"trigger": "I-XML11EntityScanner\tinit", "contents": "XML11EntityScanner ${1:scanner} = new XML11EntityScanner($2);"},
		{"trigger": "I-XML11IDDatatypeValidator\tinit", "contents": "XML11IDDatatypeValidator ${1:validator} = new XML11IDDatatypeValidator($2);"},
		{"trigger": "I-XML11IDREFDatatypeValidator\tinit", "contents": "XML11IDREFDatatypeValidator ${1:validator} = new XML11IDREFDatatypeValidator($2);"},
		{"trigger": "I-XML11NMTOKENDatatypeValidator\tinit", "contents": "XML11NMTOKENDatatypeValidator ${1:validator} = new XML11NMTOKENDatatypeValidator($2);"},
		{"trigger": "I-XML11NSDTDValidator\tinit", "contents": "XML11NSDTDValidator ${1:validator} = new XML11NSDTDValidator($2);"},
		{"trigger": "I-XML11NSDocumentScannerImpl\tinit", "contents": "XML11NSDocumentScannerImpl ${1:impl} = new XML11NSDocumentScannerImpl($2);"},
		{"trigger": "I-XML11NamespaceBinder\tinit", "contents": "XML11NamespaceBinder ${1:binder} = new XML11NamespaceBinder($2);"},
		{"trigger": "I-XML11NonValidatingConfiguration\tinit", "contents": "XML11NonValidatingConfiguration ${1:configuration} = new XML11NonValidatingConfiguration($2);"},
		{"trigger": "I-XML11Serializer\tinit", "contents": "XML11Serializer ${1:serializer} = new XML11Serializer($2);"},
		{"trigger": "I-XMLAttributeDecl\tinit", "contents": "XMLAttributeDecl ${1:decl} = new XMLAttributeDecl($2);"},
		{"trigger": "I-XMLAttributes\tinit", "contents": "XMLAttributes ${1:attributes} = new XMLAttributes($2);"},
		{"trigger": "I-XMLAttributesImpl\tinit", "contents": "XMLAttributesImpl ${1:impl} = new XMLAttributesImpl($2);"},
		{"trigger": "I-XMLAttributesIteratorImpl\tinit", "contents": "XMLAttributesIteratorImpl ${1:impl} = new XMLAttributesIteratorImpl($2);"},
		{"trigger": "I-XMLCatalogResolver\tinit", "contents": "XMLCatalogResolver ${1:resolver} = new XMLCatalogResolver($2);"},
		{"trigger": "I-XMLChar\tinit", "contents": "XMLChar ${1:char} = new XMLChar($2);"},
		{"trigger": "I-XMLCharacterRecognizer\tinit", "contents": "XMLCharacterRecognizer ${1:recognizer} = new XMLCharacterRecognizer($2);"},
		{"trigger": "I-XMLCipher\tinit", "contents": "XMLCipher ${1:cipher} = new XMLCipher($2);"},
		{"trigger": "I-XMLCipherInput\tinit", "contents": "XMLCipherInput ${1:input} = new XMLCipherInput($2);"},
		{"trigger": "I-XMLCipherParameters\tinit", "contents": "XMLCipherParameters ${1:parameters} = new XMLCipherParameters($2);"},
		{"trigger": "I-XMLComponent\tinit", "contents": "XMLComponent ${1:component} = new XMLComponent($2);"},
		{"trigger": "I-XMLComponentManager\tinit", "contents": "XMLComponentManager ${1:manager} = new XMLComponentManager($2);"},
		{"trigger": "I-XMLConfigurationException\tinit", "contents": "XMLConfigurationException ${1:exception} = new XMLConfigurationException($2);"},
		{"trigger": "I-XMLConstants\tinit", "contents": "XMLConstants ${1:constants} = new XMLConstants($2);"},
		{"trigger": "I-XMLContentSpec\tinit", "contents": "XMLContentSpec ${1:spec} = new XMLContentSpec($2);"},
		{"trigger": "I-XMLCryptoContext\tinit", "contents": "XMLCryptoContext ${1:context} = new XMLCryptoContext($2);"},
		{"trigger": "I-XMLDTDContentModelFilter\tinit", "contents": "XMLDTDContentModelFilter ${1:filter} = new XMLDTDContentModelFilter($2);"},
		{"trigger": "I-XMLDTDContentModelHandler\tinit", "contents": "XMLDTDContentModelHandler ${1:handler} = new XMLDTDContentModelHandler($2);"},
		{"trigger": "I-XMLDTDContentModelSource\tinit", "contents": "XMLDTDContentModelSource ${1:source} = new XMLDTDContentModelSource($2);"},
		{"trigger": "I-XMLDTDDescription\tinit", "contents": "XMLDTDDescription ${1:description} = new XMLDTDDescription($2);"},
		{"trigger": "I-XMLDTDFilter\tinit", "contents": "XMLDTDFilter ${1:filter} = new XMLDTDFilter($2);"},
		{"trigger": "I-XMLDTDHandler\tinit", "contents": "XMLDTDHandler ${1:handler} = new XMLDTDHandler($2);"},
		{"trigger": "I-XMLDTDLoader\tinit", "contents": "XMLDTDLoader ${1:loader} = new XMLDTDLoader($2);"},
		{"trigger": "I-XMLDTDProcessor\tinit", "contents": "XMLDTDProcessor ${1:processor} = new XMLDTDProcessor($2);"},
		{"trigger": "I-XMLDTDScanner\tinit", "contents": "XMLDTDScanner ${1:scanner} = new XMLDTDScanner($2);"},
		{"trigger": "I-XMLDTDScannerImpl\tinit", "contents": "XMLDTDScannerImpl ${1:impl} = new XMLDTDScannerImpl($2);"},
		{"trigger": "I-XMLDTDSource\tinit", "contents": "XMLDTDSource ${1:source} = new XMLDTDSource($2);"},
		{"trigger": "I-XMLDTDValidator\tinit", "contents": "XMLDTDValidator ${1:validator} = new XMLDTDValidator($2);"},
		{"trigger": "I-XMLDTDValidatorFilter\tinit", "contents": "XMLDTDValidatorFilter ${1:filter} = new XMLDTDValidatorFilter($2);"},
		{"trigger": "I-XMLDecoder\tinit", "contents": "XMLDecoder ${1:decoder} = new XMLDecoder($2);"},
		{"trigger": "I-XMLDocumentFilter\tinit", "contents": "XMLDocumentFilter ${1:filter} = new XMLDocumentFilter($2);"},
		{"trigger": "I-XMLDocumentFilterImpl\tinit", "contents": "XMLDocumentFilterImpl ${1:impl} = new XMLDocumentFilterImpl($2);"},
		{"trigger": "I-XMLDocumentFragmentHandler\tinit", "contents": "XMLDocumentFragmentHandler ${1:handler} = new XMLDocumentFragmentHandler($2);"},
		{"trigger": "I-XMLDocumentFragmentScannerImpl\tinit", "contents": "XMLDocumentFragmentScannerImpl ${1:impl} = new XMLDocumentFragmentScannerImpl($2);"},
		{"trigger": "I-XMLDocumentHandler\tinit", "contents": "XMLDocumentHandler ${1:handler} = new XMLDocumentHandler($2);"},
		{"trigger": "I-XMLDocumentParser\tinit", "contents": "XMLDocumentParser ${1:parser} = new XMLDocumentParser($2);"},
		{"trigger": "I-XMLDocumentScanner\tinit", "contents": "XMLDocumentScanner ${1:scanner} = new XMLDocumentScanner($2);"},
		{"trigger": "I-XMLDocumentScannerImpl\tinit", "contents": "XMLDocumentScannerImpl ${1:impl} = new XMLDocumentScannerImpl($2);"},
		{"trigger": "I-XMLDocumentSource\tinit", "contents": "XMLDocumentSource ${1:source} = new XMLDocumentSource($2);"},
		{"trigger": "I-XMLElementDecl\tinit", "contents": "XMLElementDecl ${1:decl} = new XMLElementDecl($2);"},
		{"trigger": "I-XMLEncoder\tinit", "contents": "XMLEncoder ${1:encoder} = new XMLEncoder($2);"},
		{"trigger": "I-XMLEncryptionException\tinit", "contents": "XMLEncryptionException ${1:exception} = new XMLEncryptionException($2);"},
		{"trigger": "I-XMLEntityDecl\tinit", "contents": "XMLEntityDecl ${1:decl} = new XMLEntityDecl($2);"},
		{"trigger": "I-XMLEntityDescription\tinit", "contents": "XMLEntityDescription ${1:description} = new XMLEntityDescription($2);"},
		{"trigger": "I-XMLEntityDescriptionImpl\tinit", "contents": "XMLEntityDescriptionImpl ${1:impl} = new XMLEntityDescriptionImpl($2);"},
		{"trigger": "I-XMLEntityHandler\tinit", "contents": "XMLEntityHandler ${1:handler} = new XMLEntityHandler($2);"},
		{"trigger": "I-XMLEntityManager\tinit", "contents": "XMLEntityManager ${1:manager} = new XMLEntityManager($2);"},
		{"trigger": "I-XMLEntityResolver\tinit", "contents": "XMLEntityResolver ${1:resolver} = new XMLEntityResolver($2);"},
		{"trigger": "I-XMLEntityScanner\tinit", "contents": "XMLEntityScanner ${1:scanner} = new XMLEntityScanner($2);"},
		{"trigger": "I-XMLErrorCode\tinit", "contents": "XMLErrorCode ${1:code} = new XMLErrorCode($2);"},
		{"trigger": "I-XMLErrorHandler\tinit", "contents": "XMLErrorHandler ${1:handler} = new XMLErrorHandler($2);"},
		{"trigger": "I-XMLErrorReporter\tinit", "contents": "XMLErrorReporter ${1:reporter} = new XMLErrorReporter($2);"},
		{"trigger": "I-XMLErrorResources\tinit", "contents": "XMLErrorResources ${1:resources} = new XMLErrorResources($2);"},
		{"trigger": "I-XMLEvent\tinit", "contents": "XMLEvent ${1:event} = new XMLEvent($2);"},
		{"trigger": "I-XMLEventAllocator\tinit", "contents": "XMLEventAllocator ${1:allocator} = new XMLEventAllocator($2);"},
		{"trigger": "I-XMLEventConsumer\tinit", "contents": "XMLEventConsumer ${1:consumer} = new XMLEventConsumer($2);"},
		{"trigger": "I-XMLEventFactory\tinit", "contents": "XMLEventFactory ${1:factory} = new XMLEventFactory($2);"},
		{"trigger": "I-XMLEventReader\tinit", "contents": "XMLEventReader ${1:reader} = new XMLEventReader($2);"},
		{"trigger": "I-XMLEventWriter\tinit", "contents": "XMLEventWriter ${1:writer} = new XMLEventWriter($2);"},
		{"trigger": "I-XMLFilter\tinit", "contents": "XMLFilter ${1:filter} = new XMLFilter($2);"},
		{"trigger": "I-XMLFilterImpl\tinit", "contents": "XMLFilterImpl ${1:impl} = new XMLFilterImpl($2);"},
		{"trigger": "I-XMLFormatter\tinit", "contents": "XMLFormatter ${1:formatter} = new XMLFormatter($2);"},
		{"trigger": "I-XMLGrammarCachingConfiguration\tinit", "contents": "XMLGrammarCachingConfiguration ${1:configuration} = new XMLGrammarCachingConfiguration($2);"},
		{"trigger": "I-XMLGrammarDescription\tinit", "contents": "XMLGrammarDescription ${1:description} = new XMLGrammarDescription($2);"},
		{"trigger": "I-XMLGrammarLoader\tinit", "contents": "XMLGrammarLoader ${1:loader} = new XMLGrammarLoader($2);"},
		{"trigger": "I-XMLGrammarParser\tinit", "contents": "XMLGrammarParser ${1:parser} = new XMLGrammarParser($2);"},
		{"trigger": "I-XMLGrammarPool\tinit", "contents": "XMLGrammarPool ${1:pool} = new XMLGrammarPool($2);"},
		{"trigger": "I-XMLGrammarPoolImpl\tinit", "contents": "XMLGrammarPoolImpl ${1:impl} = new XMLGrammarPoolImpl($2);"},
		{"trigger": "I-XMLGrammarPreparser\tinit", "contents": "XMLGrammarPreparser ${1:preparser} = new XMLGrammarPreparser($2);"},
		{"trigger": "I-XMLGregorianCalendar\tinit", "contents": "XMLGregorianCalendar ${1:calendar} = new XMLGregorianCalendar($2);"},
		{"trigger": "I-XMLGregorianCalendarImpl\tinit", "contents": "XMLGregorianCalendarImpl ${1:impl} = new XMLGregorianCalendarImpl($2);"},
		{"trigger": "I-XMLInputFactory\tinit", "contents": "XMLInputFactory ${1:factory} = new XMLInputFactory($2);"},
		{"trigger": "I-XMLInputSource\tinit", "contents": "XMLInputSource ${1:source} = new XMLInputSource($2);"},
		{"trigger": "I-XMLInputSourceAdaptor\tinit", "contents": "XMLInputSourceAdaptor ${1:adaptor} = new XMLInputSourceAdaptor($2);"},
		{"trigger": "I-XMLLimitAnalyzer\tinit", "contents": "XMLLimitAnalyzer ${1:analyzer} = new XMLLimitAnalyzer($2);"},
		{"trigger": "I-XMLLocator\tinit", "contents": "XMLLocator ${1:locator} = new XMLLocator($2);"},
		{"trigger": "I-XMLMessageFormatter\tinit", "contents": "XMLMessageFormatter ${1:formatter} = new XMLMessageFormatter($2);"},
		{"trigger": "I-XMLMessageFormatter\tinit", "contents": "XMLMessageFormatter ${1:formatter} = new XMLMessageFormatter($2);"},
		{"trigger": "I-XMLMessages\tinit", "contents": "XMLMessages ${1:messages} = new XMLMessages($2);"},
		{"trigger": "I-XMLNSDTDValidator\tinit", "contents": "XMLNSDTDValidator ${1:validator} = new XMLNSDTDValidator($2);"},
		{"trigger": "I-XMLNSDocumentScannerImpl\tinit", "contents": "XMLNSDocumentScannerImpl ${1:impl} = new XMLNSDocumentScannerImpl($2);"},
		{"trigger": "I-XMLNamespaceBinder\tinit", "contents": "XMLNamespaceBinder ${1:binder} = new XMLNamespaceBinder($2);"},
		{"trigger": "I-XMLNotationDecl\tinit", "contents": "XMLNotationDecl ${1:decl} = new XMLNotationDecl($2);"},
		{"trigger": "I-XMLObject\tinit", "contents": "XMLObject ${1:object} = new XMLObject($2);"},
		{"trigger": "I-XMLOutputFactory\tinit", "contents": "XMLOutputFactory ${1:factory} = new XMLOutputFactory($2);"},
		{"trigger": "I-XMLParseException\tinit", "contents": "XMLParseException ${1:exception} = new XMLParseException($2);"},
		{"trigger": "I-XMLParser\tinit", "contents": "XMLParser ${1:parser} = new XMLParser($2);"},
		{"trigger": "I-XMLParserConfiguration\tinit", "contents": "XMLParserConfiguration ${1:configuration} = new XMLParserConfiguration($2);"},
		{"trigger": "I-XMLPullParserConfiguration\tinit", "contents": "XMLPullParserConfiguration ${1:configuration} = new XMLPullParserConfiguration($2);"},
		{"trigger": "I-XMLReader\tinit", "contents": "XMLReader ${1:reader} = new XMLReader($2);"},
		{"trigger": "I-XMLReaderAdapter\tinit", "contents": "XMLReaderAdapter ${1:adapter} = new XMLReaderAdapter($2);"},
		{"trigger": "I-XMLReaderFactory\tinit", "contents": "XMLReaderFactory ${1:factory} = new XMLReaderFactory($2);"},
		{"trigger": "I-XMLReaderManager\tinit", "contents": "XMLReaderManager ${1:manager} = new XMLReaderManager($2);"},
		{"trigger": "I-XMLReporter\tinit", "contents": "XMLReporter ${1:reporter} = new XMLReporter($2);"},
		{"trigger": "I-XMLResolver\tinit", "contents": "XMLResolver ${1:resolver} = new XMLResolver($2);"},
		{"trigger": "I-XMLResourceIdentifier\tinit", "contents": "XMLResourceIdentifier ${1:identifier} = new XMLResourceIdentifier($2);"},
		{"trigger": "I-XMLResourceIdentifierImpl\tinit", "contents": "XMLResourceIdentifierImpl ${1:impl} = new XMLResourceIdentifierImpl($2);"},
		{"trigger": "I-XMLScanner\tinit", "contents": "XMLScanner ${1:scanner} = new XMLScanner($2);"},
		{"trigger": "I-XMLSchema\tinit", "contents": "XMLSchema ${1:schema} = new XMLSchema($2);"},
		{"trigger": "I-XMLSchemaDescription\tinit", "contents": "XMLSchemaDescription ${1:description} = new XMLSchemaDescription($2);"},
		{"trigger": "I-XMLSchemaException\tinit", "contents": "XMLSchemaException ${1:exception} = new XMLSchemaException($2);"},
		{"trigger": "I-XMLSchemaFactory\tinit", "contents": "XMLSchemaFactory ${1:factory} = new XMLSchemaFactory($2);"},
		{"trigger": "I-XMLSchemaLoader\tinit", "contents": "XMLSchemaLoader ${1:loader} = new XMLSchemaLoader($2);"},
		{"trigger": "I-XMLSchemaValidator\tinit", "contents": "XMLSchemaValidator ${1:validator} = new XMLSchemaValidator($2);"},
		{"trigger": "I-XMLSchemaValidatorComponentManager\tinit", "contents": "XMLSchemaValidatorComponentManager ${1:manager} = new XMLSchemaValidatorComponentManager($2);"},
		{"trigger": "I-XMLSecurityException\tinit", "contents": "XMLSecurityException ${1:exception} = new XMLSecurityException($2);"},
		{"trigger": "I-XMLSecurityManager\tinit", "contents": "XMLSecurityManager ${1:manager} = new XMLSecurityManager($2);"},
		{"trigger": "I-XMLSecurityPropertyManager\tinit", "contents": "XMLSecurityPropertyManager ${1:manager} = new XMLSecurityPropertyManager($2);"},
		{"trigger": "I-XMLSecurityRuntimeException\tinit", "contents": "XMLSecurityRuntimeException ${1:exception} = new XMLSecurityRuntimeException($2);"},
		{"trigger": "I-XMLSerializer\tinit", "contents": "XMLSerializer ${1:serializer} = new XMLSerializer($2);"},
		{"trigger": "I-XMLSignContext\tinit", "contents": "XMLSignContext ${1:context} = new XMLSignContext($2);"},
		{"trigger": "I-XMLSignature\tinit", "contents": "XMLSignature ${1:signature} = new XMLSignature($2);"},
		{"trigger": "I-XMLSignatureException\tinit", "contents": "XMLSignatureException ${1:exception} = new XMLSignatureException($2);"},
		{"trigger": "I-XMLSignatureFactory\tinit", "contents": "XMLSignatureFactory ${1:factory} = new XMLSignatureFactory($2);"},
		{"trigger": "I-XMLSignatureInput\tinit", "contents": "XMLSignatureInput ${1:input} = new XMLSignatureInput($2);"},
		{"trigger": "I-XMLSignatureInputDebugger\tinit", "contents": "XMLSignatureInputDebugger ${1:debugger} = new XMLSignatureInputDebugger($2);"},
		{"trigger": "I-XMLSimpleType\tinit", "contents": "XMLSimpleType ${1:type} = new XMLSimpleType($2);"},
		{"trigger": "I-XMLStreamConstants\tinit", "contents": "XMLStreamConstants ${1:constants} = new XMLStreamConstants($2);"},
		{"trigger": "I-XMLStreamException\tinit", "contents": "XMLStreamException ${1:exception} = new XMLStreamException($2);"},
		{"trigger": "I-XMLStreamFilterImpl\tinit", "contents": "XMLStreamFilterImpl ${1:impl} = new XMLStreamFilterImpl($2);"},
		{"trigger": "I-XMLStreamReader\tinit", "contents": "XMLStreamReader ${1:reader} = new XMLStreamReader($2);"},
		{"trigger": "I-XMLStreamReaderImpl\tinit", "contents": "XMLStreamReaderImpl ${1:impl} = new XMLStreamReaderImpl($2);"},
		{"trigger": "I-XMLStreamWriter\tinit", "contents": "XMLStreamWriter ${1:writer} = new XMLStreamWriter($2);"},
		{"trigger": "I-XMLString\tinit", "contents": "XMLString ${1:string} = new XMLString($2);"},
		{"trigger": "I-XMLStringBuffer\tinit", "contents": "XMLStringBuffer ${1:buffer} = new XMLStringBuffer($2);"},
		{"trigger": "I-XMLStringDefault\tinit", "contents": "XMLStringDefault ${1:default} = new XMLStringDefault($2);"},
		{"trigger": "I-XMLStringFactory\tinit", "contents": "XMLStringFactory ${1:factory} = new XMLStringFactory($2);"},
		{"trigger": "I-XMLStringFactoryDefault\tinit", "contents": "XMLStringFactoryDefault ${1:default} = new XMLStringFactoryDefault($2);"},
		{"trigger": "I-XMLStringFactoryImpl\tinit", "contents": "XMLStringFactoryImpl ${1:impl} = new XMLStringFactoryImpl($2);"},
		{"trigger": "I-XMLStructure\tinit", "contents": "XMLStructure ${1:structure} = new XMLStructure($2);"},
		{"trigger": "I-XMLSymbols\tinit", "contents": "XMLSymbols ${1:symbols} = new XMLSymbols($2);"},
		{"trigger": "I-XMLUtils\tinit", "contents": "XMLUtils ${1:utils} = new XMLUtils($2);"},
		{"trigger": "I-XMLValidateContext\tinit", "contents": "XMLValidateContext ${1:context} = new XMLValidateContext($2);"},
		{"trigger": "I-XMLVersionDetector\tinit", "contents": "XMLVersionDetector ${1:detector} = new XMLVersionDetector($2);"},
		{"trigger": "I-XMLX509CRL\tinit", "contents": "XMLX509CRL ${1:xmlx509crl} = new XMLX509CRL($2);"},
		{"trigger": "I-XMLX509Certificate\tinit", "contents": "XMLX509Certificate ${1:certificate} = new XMLX509Certificate($2);"},
		{"trigger": "I-XMLX509DataContent\tinit", "contents": "XMLX509DataContent ${1:content} = new XMLX509DataContent($2);"},
		{"trigger": "I-XMLX509Digest\tinit", "contents": "XMLX509Digest ${1:digest} = new XMLX509Digest($2);"},
		{"trigger": "I-XMLX509IssuerSerial\tinit", "contents": "XMLX509IssuerSerial ${1:serial} = new XMLX509IssuerSerial($2);"},
		{"trigger": "I-XMLX509SKI\tinit", "contents": "XMLX509SKI ${1:xmlx509ski} = new XMLX509SKI($2);"},
		{"trigger": "I-XMLX509SubjectName\tinit", "contents": "XMLX509SubjectName ${1:name} = new XMLX509SubjectName($2);"},
		{"trigger": "I-XNIException\tinit", "contents": "XNIException ${1:exception} = new XNIException($2);"},
		{"trigger": "I-XNodeSet\tinit", "contents": "XNodeSet ${1:set} = new XNodeSet($2);"},
		{"trigger": "I-XNodeSetForDOM\tinit", "contents": "XNodeSetForDOM ${1:xnodesetfordom} = new XNodeSetForDOM($2);"},
		{"trigger": "I-XNull\tinit", "contents": "XNull ${1:null} = new XNull($2);"},
		{"trigger": "I-XNumber\tinit", "contents": "XNumber ${1:number} = new XNumber($2);"},
		{"trigger": "I-XObject\tinit", "contents": "XObject ${1:object} = new XObject($2);"},
		{"trigger": "I-XObjectFactory\tinit", "contents": "XObjectFactory ${1:factory} = new XObjectFactory($2);"},
		{"trigger": "I-XPATHErrorResources\tinit", "contents": "XPATHErrorResources ${1:resources} = new XPATHErrorResources($2);"},
		{"trigger": "I-XPATHMessages\tinit", "contents": "XPATHMessages ${1:messages} = new XPATHMessages($2);"},
		{"trigger": "I-XPStyle\tinit", "contents": "XPStyle ${1:style} = new XPStyle($2);"},
		{"trigger": "I-XPath\tinit", "contents": "XPath ${1:path} = new XPath($2);"},
		{"trigger": "I-XPath2FilterContainer\tinit", "contents": "XPath2FilterContainer ${1:container} = new XPath2FilterContainer($2);"},
		{"trigger": "I-XPathAPI\tinit", "contents": "XPathAPI ${1:xpathapi} = new XPathAPI($2);"},
		{"trigger": "I-XPathConstants\tinit", "contents": "XPathConstants ${1:constants} = new XPathConstants($2);"},
		{"trigger": "I-XPathContainer\tinit", "contents": "XPathContainer ${1:container} = new XPathContainer($2);"},
		{"trigger": "I-XPathContext\tinit", "contents": "XPathContext ${1:context} = new XPathContext($2);"},
		{"trigger": "I-XPathDumper\tinit", "contents": "XPathDumper ${1:dumper} = new XPathDumper($2);"},
		{"trigger": "I-XPathEvaluator\tinit", "contents": "XPathEvaluator ${1:evaluator} = new XPathEvaluator($2);"},
		{"trigger": "I-XPathEvaluatorImpl\tinit", "contents": "XPathEvaluatorImpl ${1:impl} = new XPathEvaluatorImpl($2);"},
		{"trigger": "I-XPathException\tinit", "contents": "XPathException ${1:exception} = new XPathException($2);"},
		{"trigger": "I-XPathExpression\tinit", "contents": "XPathExpression ${1:expression} = new XPathExpression($2);"},
		{"trigger": "I-XPathExpressionException\tinit", "contents": "XPathExpressionException ${1:exception} = new XPathExpressionException($2);"},
		{"trigger": "I-XPathExpressionImpl\tinit", "contents": "XPathExpressionImpl ${1:impl} = new XPathExpressionImpl($2);"},
		{"trigger": "I-XPathFactory\tinit", "contents": "XPathFactory ${1:factory} = new XPathFactory($2);"},
		{"trigger": "I-XPathFactoryConfigurationException\tinit", "contents": "XPathFactoryConfigurationException ${1:exception} = new XPathFactoryConfigurationException($2);"},
		{"trigger": "I-XPathFactoryFinder\tinit", "contents": "XPathFactoryFinder ${1:finder} = new XPathFactoryFinder($2);"},
		{"trigger": "I-XPathFactoryImpl\tinit", "contents": "XPathFactoryImpl ${1:impl} = new XPathFactoryImpl($2);"},
		{"trigger": "I-XPathFilter2ParameterSpec\tinit", "contents": "XPathFilter2ParameterSpec ${1:spec} = new XPathFilter2ParameterSpec($2);"},
		{"trigger": "I-XPathFilterCHGPContainer\tinit", "contents": "XPathFilterCHGPContainer ${1:container} = new XPathFilterCHGPContainer($2);"},
		{"trigger": "I-XPathFilterParameterSpec\tinit", "contents": "XPathFilterParameterSpec ${1:spec} = new XPathFilterParameterSpec($2);"},
		{"trigger": "I-XPathFunction\tinit", "contents": "XPathFunction ${1:function} = new XPathFunction($2);"},
		{"trigger": "I-XPathFunctionException\tinit", "contents": "XPathFunctionException ${1:exception} = new XPathFunctionException($2);"},
		{"trigger": "I-XPathFunctionResolver\tinit", "contents": "XPathFunctionResolver ${1:resolver} = new XPathFunctionResolver($2);"},
		{"trigger": "I-XPathImpl\tinit", "contents": "XPathImpl ${1:impl} = new XPathImpl($2);"},
		{"trigger": "I-XPathLexer\tinit", "contents": "XPathLexer ${1:lexer} = new XPathLexer($2);"},
		{"trigger": "I-XPathMatcher\tinit", "contents": "XPathMatcher ${1:matcher} = new XPathMatcher($2);"},
		{"trigger": "I-XPathNSResolver\tinit", "contents": "XPathNSResolver ${1:resolver} = new XPathNSResolver($2);"},
		{"trigger": "I-XPathNSResolverImpl\tinit", "contents": "XPathNSResolverImpl ${1:impl} = new XPathNSResolverImpl($2);"},
		{"trigger": "I-XPathNamespace\tinit", "contents": "XPathNamespace ${1:namespace} = new XPathNamespace($2);"},
		{"trigger": "I-XPathNamespaceImpl\tinit", "contents": "XPathNamespaceImpl ${1:impl} = new XPathNamespaceImpl($2);"},
		{"trigger": "I-XPathParser\tinit", "contents": "XPathParser ${1:parser} = new XPathParser($2);"},
		{"trigger": "I-XPathProcessorException\tinit", "contents": "XPathProcessorException ${1:exception} = new XPathProcessorException($2);"},
		{"trigger": "I-XPathResult\tinit", "contents": "XPathResult ${1:result} = new XPathResult($2);"},
		{"trigger": "I-XPathResultImpl\tinit", "contents": "XPathResultImpl ${1:impl} = new XPathResultImpl($2);"},
		{"trigger": "I-XPathStylesheetDOM3Exception\tinit", "contents": "XPathStylesheetDOM3Exception ${1:exception} = new XPathStylesheetDOM3Exception($2);"},
		{"trigger": "I-XPathType\tinit", "contents": "XPathType ${1:type} = new XPathType($2);"},
		{"trigger": "I-XPathVariableResolver\tinit", "contents": "XPathVariableResolver ${1:resolver} = new XPathVariableResolver($2);"},
		{"trigger": "I-XPathVisitable\tinit", "contents": "XPathVisitable ${1:visitable} = new XPathVisitable($2);"},
		{"trigger": "I-XPathVisitor\tinit", "contents": "XPathVisitor ${1:visitor} = new XPathVisitor($2);"},
		{"trigger": "I-XPointerElementHandler\tinit", "contents": "XPointerElementHandler ${1:handler} = new XPointerElementHandler($2);"},
		{"trigger": "I-XPointerErrorHandler\tinit", "contents": "XPointerErrorHandler ${1:handler} = new XPointerErrorHandler($2);"},
		{"trigger": "I-XPointerFramework\tinit", "contents": "XPointerFramework ${1:framework} = new XPointerFramework($2);"},
		{"trigger": "I-XPointerHandler\tinit", "contents": "XPointerHandler ${1:handler} = new XPointerHandler($2);"},
		{"trigger": "I-XPointerMessageFormatter\tinit", "contents": "XPointerMessageFormatter ${1:formatter} = new XPointerMessageFormatter($2);"},
		{"trigger": "I-XPointerParserConfiguration\tinit", "contents": "XPointerParserConfiguration ${1:configuration} = new XPointerParserConfiguration($2);"},
		{"trigger": "I-XPointerPart\tinit", "contents": "XPointerPart ${1:part} = new XPointerPart($2);"},
		{"trigger": "I-XPointerProcessor\tinit", "contents": "XPointerProcessor ${1:processor} = new XPointerProcessor($2);"},
		{"trigger": "I-XPointerSchema\tinit", "contents": "XPointerSchema ${1:schema} = new XPointerSchema($2);"},
		{"trigger": "I-XRTreeFrag\tinit", "contents": "XRTreeFrag ${1:frag} = new XRTreeFrag($2);"},
		{"trigger": "I-XRTreeFragSelectWrapper\tinit", "contents": "XRTreeFragSelectWrapper ${1:wrapper} = new XRTreeFragSelectWrapper($2);"},
		{"trigger": "I-XResourceBundle\tinit", "contents": "XResourceBundle ${1:bundle} = new XResourceBundle($2);"},
		{"trigger": "I-XResourceBundleBase\tinit", "contents": "XResourceBundleBase ${1:base} = new XResourceBundleBase($2);"},
		{"trigger": "I-XSAllCM\tinit", "contents": "XSAllCM ${1:xsallcm} = new XSAllCM($2);"},
		{"trigger": "I-XSAnnotation\tinit", "contents": "XSAnnotation ${1:annotation} = new XSAnnotation($2);"},
		{"trigger": "I-XSAnnotationImpl\tinit", "contents": "XSAnnotationImpl ${1:impl} = new XSAnnotationImpl($2);"},
		{"trigger": "I-XSAnnotationInfo\tinit", "contents": "XSAnnotationInfo ${1:info} = new XSAnnotationInfo($2);"},
		{"trigger": "I-XSAttributeChecker\tinit", "contents": "XSAttributeChecker ${1:checker} = new XSAttributeChecker($2);"},
		{"trigger": "I-XSAttributeDecl\tinit", "contents": "XSAttributeDecl ${1:decl} = new XSAttributeDecl($2);"},
		{"trigger": "I-XSAttributeDeclaration\tinit", "contents": "XSAttributeDeclaration ${1:declaration} = new XSAttributeDeclaration($2);"},
		{"trigger": "I-XSAttributeGroupDecl\tinit", "contents": "XSAttributeGroupDecl ${1:decl} = new XSAttributeGroupDecl($2);"},
		{"trigger": "I-XSAttributeGroupDefinition\tinit", "contents": "XSAttributeGroupDefinition ${1:definition} = new XSAttributeGroupDefinition($2);"},
		{"trigger": "I-XSAttributeUse\tinit", "contents": "XSAttributeUse ${1:use} = new XSAttributeUse($2);"},
		{"trigger": "I-XSAttributeUseImpl\tinit", "contents": "XSAttributeUseImpl ${1:impl} = new XSAttributeUseImpl($2);"},
		{"trigger": "I-XSCMBinOp\tinit", "contents": "XSCMBinOp ${1:op} = new XSCMBinOp($2);"},
		{"trigger": "I-XSCMLeaf\tinit", "contents": "XSCMLeaf ${1:leaf} = new XSCMLeaf($2);"},
		{"trigger": "I-XSCMRepeatingLeaf\tinit", "contents": "XSCMRepeatingLeaf ${1:leaf} = new XSCMRepeatingLeaf($2);"},
		{"trigger": "I-XSCMUniOp\tinit", "contents": "XSCMUniOp ${1:op} = new XSCMUniOp($2);"},
		{"trigger": "I-XSCMValidator\tinit", "contents": "XSCMValidator ${1:validator} = new XSCMValidator($2);"},
		{"trigger": "I-XSComplexTypeDecl\tinit", "contents": "XSComplexTypeDecl ${1:decl} = new XSComplexTypeDecl($2);"},
		{"trigger": "I-XSComplexTypeDefinition\tinit", "contents": "XSComplexTypeDefinition ${1:definition} = new XSComplexTypeDefinition($2);"},
		{"trigger": "I-XSConstants\tinit", "contents": "XSConstants ${1:constants} = new XSConstants($2);"},
		{"trigger": "I-XSConstraints\tinit", "contents": "XSConstraints ${1:constraints} = new XSConstraints($2);"},
		{"trigger": "I-XSDAbstractIDConstraintTraverser\tinit", "contents": "XSDAbstractIDConstraintTraverser ${1:traverser} = new XSDAbstractIDConstraintTraverser($2);"},
		{"trigger": "I-XSDAbstractParticleTraverser\tinit", "contents": "XSDAbstractParticleTraverser ${1:traverser} = new XSDAbstractParticleTraverser($2);"},
		{"trigger": "I-XSDAbstractTraverser\tinit", "contents": "XSDAbstractTraverser ${1:traverser} = new XSDAbstractTraverser($2);"},
		{"trigger": "I-XSDAttributeGroupTraverser\tinit", "contents": "XSDAttributeGroupTraverser ${1:traverser} = new XSDAttributeGroupTraverser($2);"},
		{"trigger": "I-XSDAttributeTraverser\tinit", "contents": "XSDAttributeTraverser ${1:traverser} = new XSDAttributeTraverser($2);"},
		{"trigger": "I-XSDComplexTypeTraverser\tinit", "contents": "XSDComplexTypeTraverser ${1:traverser} = new XSDComplexTypeTraverser($2);"},
		{"trigger": "I-XSDDescription\tinit", "contents": "XSDDescription ${1:description} = new XSDDescription($2);"},
		{"trigger": "I-XSDElementTraverser\tinit", "contents": "XSDElementTraverser ${1:traverser} = new XSDElementTraverser($2);"},
		{"trigger": "I-XSDFACM\tinit", "contents": "XSDFACM ${1:xsdfacm} = new XSDFACM($2);"},
		{"trigger": "I-XSDGroupTraverser\tinit", "contents": "XSDGroupTraverser ${1:traverser} = new XSDGroupTraverser($2);"},
		{"trigger": "I-XSDHandler\tinit", "contents": "XSDHandler ${1:handler} = new XSDHandler($2);"},
		{"trigger": "I-XSDKeyrefTraverser\tinit", "contents": "XSDKeyrefTraverser ${1:traverser} = new XSDKeyrefTraverser($2);"},
		{"trigger": "I-XSDNotationTraverser\tinit", "contents": "XSDNotationTraverser ${1:traverser} = new XSDNotationTraverser($2);"},
		{"trigger": "I-XSDSimpleTypeTraverser\tinit", "contents": "XSDSimpleTypeTraverser ${1:traverser} = new XSDSimpleTypeTraverser($2);"},
		{"trigger": "I-XSDUniqueOrKeyTraverser\tinit", "contents": "XSDUniqueOrKeyTraverser ${1:traverser} = new XSDUniqueOrKeyTraverser($2);"},
		{"trigger": "I-XSDWildcardTraverser\tinit", "contents": "XSDWildcardTraverser ${1:traverser} = new XSDWildcardTraverser($2);"},
		{"trigger": "I-XSDateTime\tinit", "contents": "XSDateTime ${1:time} = new XSDateTime($2);"},
		{"trigger": "I-XSDecimal\tinit", "contents": "XSDecimal ${1:decimal} = new XSDecimal($2);"},
		{"trigger": "I-XSDeclarationPool\tinit", "contents": "XSDeclarationPool ${1:pool} = new XSDeclarationPool($2);"},
		{"trigger": "I-XSDocumentInfo\tinit", "contents": "XSDocumentInfo ${1:info} = new XSDocumentInfo($2);"},
		{"trigger": "I-XSDouble\tinit", "contents": "XSDouble ${1:double} = new XSDouble($2);"},
		{"trigger": "I-XSElementDecl\tinit", "contents": "XSElementDecl ${1:decl} = new XSElementDecl($2);"},
		{"trigger": "I-XSElementDeclaration\tinit", "contents": "XSElementDeclaration ${1:declaration} = new XSElementDeclaration($2);"},
		{"trigger": "I-XSEmptyCM\tinit", "contents": "XSEmptyCM ${1:xsemptycm} = new XSEmptyCM($2);"},
		{"trigger": "I-XSException\tinit", "contents": "XSException ${1:exception} = new XSException($2);"},
		{"trigger": "I-XSFacet\tinit", "contents": "XSFacet ${1:facet} = new XSFacet($2);"},
		{"trigger": "I-XSFacets\tinit", "contents": "XSFacets ${1:facets} = new XSFacets($2);"},
		{"trigger": "I-XSFloat\tinit", "contents": "XSFloat ${1:float} = new XSFloat($2);"},
		{"trigger": "I-XSGrammar\tinit", "contents": "XSGrammar ${1:grammar} = new XSGrammar($2);"},
		{"trigger": "I-XSGrammarBucket\tinit", "contents": "XSGrammarBucket ${1:bucket} = new XSGrammarBucket($2);"},
		{"trigger": "I-XSGrammarPool\tinit", "contents": "XSGrammarPool ${1:pool} = new XSGrammarPool($2);"},
		{"trigger": "I-XSGrammarPoolContainer\tinit", "contents": "XSGrammarPoolContainer ${1:container} = new XSGrammarPoolContainer($2);"},
		{"trigger": "I-XSGroupDecl\tinit", "contents": "XSGroupDecl ${1:decl} = new XSGroupDecl($2);"},
		{"trigger": "I-XSIDCDefinition\tinit", "contents": "XSIDCDefinition ${1:definition} = new XSIDCDefinition($2);"},
		{"trigger": "I-XSImplementation\tinit", "contents": "XSImplementation ${1:implementation} = new XSImplementation($2);"},
		{"trigger": "I-XSImplementationImpl\tinit", "contents": "XSImplementationImpl ${1:impl} = new XSImplementationImpl($2);"},
		{"trigger": "I-XSInputSource\tinit", "contents": "XSInputSource ${1:source} = new XSInputSource($2);"},
		{"trigger": "I-XSLMessages\tinit", "contents": "XSLMessages ${1:messages} = new XSLMessages($2);"},
		{"trigger": "I-XSLOutputAttributes\tinit", "contents": "XSLOutputAttributes ${1:attributes} = new XSLOutputAttributes($2);"},
		{"trigger": "I-XSLTC\tinit", "contents": "XSLTC ${1:xsltc} = new XSLTC($2);"},
		{"trigger": "I-XSLTCDTMManager\tinit", "contents": "XSLTCDTMManager ${1:manager} = new XSLTCDTMManager($2);"},
		{"trigger": "I-XSLTCSource\tinit", "contents": "XSLTCSource ${1:source} = new XSLTCSource($2);"},
		{"trigger": "I-XSLTErrorResources\tinit", "contents": "XSLTErrorResources ${1:resources} = new XSLTErrorResources($2);"},
		{"trigger": "I-XSLTTransformParameterSpec\tinit", "contents": "XSLTTransformParameterSpec ${1:spec} = new XSLTTransformParameterSpec($2);"},
		{"trigger": "I-XSLoader\tinit", "contents": "XSLoader ${1:loader} = new XSLoader($2);"},
		{"trigger": "I-XSLoaderImpl\tinit", "contents": "XSLoaderImpl ${1:impl} = new XSLoaderImpl($2);"},
		{"trigger": "I-XSMessageFormatter\tinit", "contents": "XSMessageFormatter ${1:formatter} = new XSMessageFormatter($2);"},
		{"trigger": "I-XSModel\tinit", "contents": "XSModel ${1:model} = new XSModel($2);"},
		{"trigger": "I-XSModelGroup\tinit", "contents": "XSModelGroup ${1:group} = new XSModelGroup($2);"},
		{"trigger": "I-XSModelGroupDefinition\tinit", "contents": "XSModelGroupDefinition ${1:definition} = new XSModelGroupDefinition($2);"},
		{"trigger": "I-XSModelGroupImpl\tinit", "contents": "XSModelGroupImpl ${1:impl} = new XSModelGroupImpl($2);"},
		{"trigger": "I-XSModelImpl\tinit", "contents": "XSModelImpl ${1:impl} = new XSModelImpl($2);"},
		{"trigger": "I-XSMultiValueFacet\tinit", "contents": "XSMultiValueFacet ${1:facet} = new XSMultiValueFacet($2);"},
		{"trigger": "I-XSNamedMap\tinit", "contents": "XSNamedMap ${1:map} = new XSNamedMap($2);"},
		{"trigger": "I-XSNamedMap4Types\tinit", "contents": "XSNamedMap4Types ${1:types} = new XSNamedMap4Types($2);"},
		{"trigger": "I-XSNamedMapImpl\tinit", "contents": "XSNamedMapImpl ${1:impl} = new XSNamedMapImpl($2);"},
		{"trigger": "I-XSNamespaceItem\tinit", "contents": "XSNamespaceItem ${1:item} = new XSNamespaceItem($2);"},
		{"trigger": "I-XSNamespaceItemList\tinit", "contents": "XSNamespaceItemList ${1:list} = new XSNamespaceItemList($2);"},
		{"trigger": "I-XSNotationDecl\tinit", "contents": "XSNotationDecl ${1:decl} = new XSNotationDecl($2);"},
		{"trigger": "I-XSNotationDeclaration\tinit", "contents": "XSNotationDeclaration ${1:declaration} = new XSNotationDeclaration($2);"},
		{"trigger": "I-XSObject\tinit", "contents": "XSObject ${1:object} = new XSObject($2);"},
		{"trigger": "I-XSObjectList\tinit", "contents": "XSObjectList ${1:list} = new XSObjectList($2);"},
		{"trigger": "I-XSObjectListImpl\tinit", "contents": "XSObjectListImpl ${1:impl} = new XSObjectListImpl($2);"},
		{"trigger": "I-XSParticle\tinit", "contents": "XSParticle ${1:particle} = new XSParticle($2);"},
		{"trigger": "I-XSParticleDecl\tinit", "contents": "XSParticleDecl ${1:decl} = new XSParticleDecl($2);"},
		{"trigger": "I-XSQName\tinit", "contents": "XSQName ${1:name} = new XSQName($2);"},
		{"trigger": "I-XSSimpleType\tinit", "contents": "XSSimpleType ${1:type} = new XSSimpleType($2);"},
		{"trigger": "I-XSSimpleTypeDecl\tinit", "contents": "XSSimpleTypeDecl ${1:decl} = new XSSimpleTypeDecl($2);"},
		{"trigger": "I-XSSimpleTypeDefinition\tinit", "contents": "XSSimpleTypeDefinition ${1:definition} = new XSSimpleTypeDefinition($2);"},
		{"trigger": "I-XSSimpleTypeDelegate\tinit", "contents": "XSSimpleTypeDelegate ${1:delegate} = new XSSimpleTypeDelegate($2);"},
		{"trigger": "I-XSTerm\tinit", "contents": "XSTerm ${1:term} = new XSTerm($2);"},
		{"trigger": "I-XSTypeDefinition\tinit", "contents": "XSTypeDefinition ${1:definition} = new XSTypeDefinition($2);"},
		{"trigger": "I-XSWildcard\tinit", "contents": "XSWildcard ${1:wildcard} = new XSWildcard($2);"},
		{"trigger": "I-XSWildcardDecl\tinit", "contents": "XSWildcardDecl ${1:decl} = new XSWildcardDecl($2);"},
		{"trigger": "I-XString\tinit", "contents": "XString ${1:string} = new XString($2);"},
		{"trigger": "I-XStringForChars\tinit", "contents": "XStringForChars ${1:chars} = new XStringForChars($2);"},
		{"trigger": "I-XStringForFSB\tinit", "contents": "XStringForFSB ${1:xstringforfsb} = new XStringForFSB($2);"},
		{"trigger": "I-XYChart\tinit", "contents": "XYChart ${1:chart} = new XYChart($2);"},
		{"trigger": "I-XYChartBuilder\tinit", "contents": "XYChartBuilder ${1:builder} = new XYChartBuilder($2);"},
		{"trigger": "I-XalanConstants\tinit", "contents": "XalanConstants ${1:constants} = new XalanConstants($2);"},
		{"trigger": "I-XalanXPathAPI\tinit", "contents": "XalanXPathAPI ${1:xalanxpathapi} = new XalanXPathAPI($2);"},
		{"trigger": "I-XalanXPathFactory\tinit", "contents": "XalanXPathFactory ${1:factory} = new XalanXPathFactory($2);"},
		{"trigger": "I-XmlAccessOrder\tinit", "contents": "XmlAccessOrder ${1:order} = new XmlAccessOrder($2);"},
		{"trigger": "I-XmlAccessType\tinit", "contents": "XmlAccessType ${1:type} = new XmlAccessType($2);"},
		{"trigger": "I-XmlAccessorOrder\tinit", "contents": "XmlAccessorOrder ${1:order} = new XmlAccessorOrder($2);"},
		{"trigger": "I-XmlAccessorType\tinit", "contents": "XmlAccessorType ${1:type} = new XmlAccessorType($2);"},
		{"trigger": "I-XmlAdapter\tinit", "contents": "XmlAdapter ${1:adapter} = new XmlAdapter($2);"},
		{"trigger": "I-XmlAnyAttribute\tinit", "contents": "XmlAnyAttribute ${1:attribute} = new XmlAnyAttribute($2);"},
		{"trigger": "I-XmlAnyElement\tinit", "contents": "XmlAnyElement ${1:element} = new XmlAnyElement($2);"},
		{"trigger": "I-XmlAttachmentRef\tinit", "contents": "XmlAttachmentRef ${1:ref} = new XmlAttachmentRef($2);"},
		{"trigger": "I-XmlAttribute\tinit", "contents": "XmlAttribute ${1:attribute} = new XmlAttribute($2);"},
		{"trigger": "I-XmlElement\tinit", "contents": "XmlElement ${1:element} = new XmlElement($2);"},
		{"trigger": "I-XmlElementDecl\tinit", "contents": "XmlElementDecl ${1:decl} = new XmlElementDecl($2);"},
		{"trigger": "I-XmlElementRef\tinit", "contents": "XmlElementRef ${1:ref} = new XmlElementRef($2);"},
		{"trigger": "I-XmlElementRefs\tinit", "contents": "XmlElementRefs ${1:refs} = new XmlElementRefs($2);"},
		{"trigger": "I-XmlElementWrapper\tinit", "contents": "XmlElementWrapper ${1:wrapper} = new XmlElementWrapper($2);"},
		{"trigger": "I-XmlElements\tinit", "contents": "XmlElements ${1:elements} = new XmlElements($2);"},
		{"trigger": "I-XmlEnum\tinit", "contents": "XmlEnum ${1:enum} = new XmlEnum($2);"},
		{"trigger": "I-XmlEnumValue\tinit", "contents": "XmlEnumValue ${1:value} = new XmlEnumValue($2);"},
		{"trigger": "I-XmlID\tinit", "contents": "XmlID ${1:xmlid} = new XmlID($2);"},
		{"trigger": "I-XmlIDREF\tinit", "contents": "XmlIDREF ${1:xmlidref} = new XmlIDREF($2);"},
		{"trigger": "I-XmlInlineBinaryData\tinit", "contents": "XmlInlineBinaryData ${1:data} = new XmlInlineBinaryData($2);"},
		{"trigger": "I-XmlJavaTypeAdapter\tinit", "contents": "XmlJavaTypeAdapter ${1:adapter} = new XmlJavaTypeAdapter($2);"},
		{"trigger": "I-XmlJavaTypeAdapters\tinit", "contents": "XmlJavaTypeAdapters ${1:adapters} = new XmlJavaTypeAdapters($2);"},
		{"trigger": "I-XmlList\tinit", "contents": "XmlList ${1:list} = new XmlList($2);"},
		{"trigger": "I-XmlMimeType\tinit", "contents": "XmlMimeType ${1:type} = new XmlMimeType($2);"},
		{"trigger": "I-XmlMixed\tinit", "contents": "XmlMixed ${1:mixed} = new XmlMixed($2);"},
		{"trigger": "I-XmlNs\tinit", "contents": "XmlNs ${1:ns} = new XmlNs($2);"},
		{"trigger": "I-XmlNsForm\tinit", "contents": "XmlNsForm ${1:form} = new XmlNsForm($2);"},
		{"trigger": "I-XmlReader\tinit", "contents": "XmlReader ${1:reader} = new XmlReader($2);"},
		{"trigger": "I-XmlRegistry\tinit", "contents": "XmlRegistry ${1:registry} = new XmlRegistry($2);"},
		{"trigger": "I-XmlRootElement\tinit", "contents": "XmlRootElement ${1:element} = new XmlRootElement($2);"},
		{"trigger": "I-XmlSchema\tinit", "contents": "XmlSchema ${1:schema} = new XmlSchema($2);"},
		{"trigger": "I-XmlSchemaType\tinit", "contents": "XmlSchemaType ${1:type} = new XmlSchemaType($2);"},
		{"trigger": "I-XmlSchemaTypes\tinit", "contents": "XmlSchemaTypes ${1:types} = new XmlSchemaTypes($2);"},
		{"trigger": "I-XmlSeeAlso\tinit", "contents": "XmlSeeAlso ${1:also} = new XmlSeeAlso($2);"},
		{"trigger": "I-XmlSupport\tinit", "contents": "XmlSupport ${1:support} = new XmlSupport($2);"},
		{"trigger": "I-XmlTransient\tinit", "contents": "XmlTransient ${1:transient} = new XmlTransient($2);"},
		{"trigger": "I-XmlType\tinit", "contents": "XmlType ${1:type} = new XmlType($2);"},
		{"trigger": "I-XmlValue\tinit", "contents": "XmlValue ${1:value} = new XmlValue($2);"},
		{"trigger": "I-XmlWriter\tinit", "contents": "XmlWriter ${1:writer} = new XmlWriter($2);"},
		{"trigger": "I-XslAttribute\tinit", "contents": "XslAttribute ${1:attribute} = new XslAttribute($2);"},
		{"trigger": "I-XslElement\tinit", "contents": "XslElement ${1:element} = new XslElement($2);"},
		{"trigger": "I-Year\tinit", "contents": "Year ${1:year} = new Year($2);"},
		{"trigger": "I-YearDV\tinit", "contents": "YearDV ${1:yeardv} = new YearDV($2);"},
		{"trigger": "I-YearMonth\tinit", "contents": "YearMonth ${1:month} = new YearMonth($2);"},
		{"trigger": "I-YearMonthDV\tinit", "contents": "YearMonthDV ${1:yearmonthdv} = new YearMonthDV($2);"},
		{"trigger": "I-YearMonthDurationDV\tinit", "contents": "YearMonthDurationDV ${1:yearmonthdurationdv} = new YearMonthDurationDV($2);"},
		{"trigger": "I-ZStreamRef\tinit", "contents": "ZStreamRef ${1:ref} = new ZStreamRef($2);"},
		{"trigger": "I-ZeroPortPolicy\tinit", "contents": "ZeroPortPolicy ${1:policy} = new ZeroPortPolicy($2);"},
		{"trigger": "I-ZipCoder\tinit", "contents": "ZipCoder ${1:coder} = new ZipCoder($2);"},
		{"trigger": "I-ZipConstants\tinit", "contents": "ZipConstants ${1:constants} = new ZipConstants($2);"},
		{"trigger": "I-ZipEntry\tinit", "contents": "ZipEntry ${1:entry} = new ZipEntry($2);"},
		{"trigger": "I-ZipError\tinit", "contents": "ZipError ${1:error} = new ZipError($2);"},
		{"trigger": "I-ZipException\tinit", "contents": "ZipException ${1:exception} = new ZipException($2);"},
		{"trigger": "I-ZipFile\tinit", "contents": "ZipFile ${1:file} = new ZipFile($2);"},
		{"trigger": "I-ZipInputStream\tinit", "contents": "ZipInputStream ${1:stream} = new ZipInputStream($2);"},
		{"trigger": "I-ZipOutputStream\tinit", "contents": "ZipOutputStream ${1:stream} = new ZipOutputStream($2);"},
		{"trigger": "I-ZipUtils\tinit", "contents": "ZipUtils ${1:utils} = new ZipUtils($2);"},
		{"trigger": "I-ZoneId\tinit", "contents": "ZoneId ${1:id} = new ZoneId($2);"},
		{"trigger": "I-ZoneName\tinit", "contents": "ZoneName ${1:name} = new ZoneName($2);"},
		{"trigger": "I-ZoneOffset\tinit", "contents": "ZoneOffset ${1:offset} = new ZoneOffset($2);"},
		{"trigger": "I-ZoneOffsetTransition\tinit", "contents": "ZoneOffsetTransition ${1:transition} = new ZoneOffsetTransition($2);"},
		{"trigger": "I-ZoneOffsetTransitionRule\tinit", "contents": "ZoneOffsetTransitionRule ${1:rule} = new ZoneOffsetTransitionRule($2);"},
		{"trigger": "I-ZoneRegion\tinit", "contents": "ZoneRegion ${1:region} = new ZoneRegion($2);"},
		{"trigger": "I-ZoneRules\tinit", "contents": "ZoneRules ${1:rules} = new ZoneRules($2);"},
		{"trigger": "I-ZoneRulesException\tinit", "contents": "ZoneRulesException ${1:exception} = new ZoneRulesException($2);"},
		{"trigger": "I-ZoneRulesProvider\tinit", "contents": "ZoneRulesProvider ${1:provider} = new ZoneRulesProvider($2);"},
		{"trigger": "I-ZoneView\tinit", "contents": "ZoneView ${1:view} = new ZoneView($2);"},
		{"trigger": "I-ZonedDateTime\tinit", "contents": "ZonedDateTime ${1:time} = new ZonedDateTime($2);"},
		{"trigger": "I-ZoomEvent\tinit", "contents": "ZoomEvent ${1:event} = new ZoomEvent($2);"},
		{"trigger": "I-ZoomGestureRecognizer\tinit", "contents": "ZoomGestureRecognizer ${1:recognizer} = new ZoomGestureRecognizer($2);"},
		{"trigger": "I-ZoomRadialBlur\tinit", "contents": "ZoomRadialBlur ${1:blur} = new ZoomRadialBlur($2);"},
		{"trigger": "I-ZoomRadialBlurState\tinit", "contents": "ZoomRadialBlurState ${1:state} = new ZoomRadialBlurState($2);"},
	]
}