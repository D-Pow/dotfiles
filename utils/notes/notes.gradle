// Declare main class here for automatic usage everywhere else
application {
    mainClass = "org.mycompany.Main";
}

/**
 * Note: Gradle <= v6 use `configurations.compile` just like their `dependencies block uses.
 * Gradle >= 7 uses `configurations.runtimeClasspath` since `compile` was deprecated.
 */


/**
 * {@inheritDoc}
 *
 * Creates a "fat JAR" which bundles all libs/dependencies into the resulting
 * {@code .jar} file.
 *
 * This has some trade-offs:
 *
 * Pros
 *     - It allows end users to run the file instantly without having to install
 *       its dependencies locally.
 * Cons:
 *     - Anytime you update your app, end users have to re-download all dependencies
 *       again even if they haven't changed.
 *     - You can't implement an "installer" system (i.e. downloading dependencies
 *       from a parent "install manager" app separately, e.g. how Java itself is
 *       usually installed) because there are no libs to download (they're already
 *       bundled in the JAR), which results in a serial download instead of a parallel
 *       one and slows down installs.
 */
task fatJar(type: Jar) {
    // Include sources from built-in Jar task
    from sourceSets.main.output

    manifest {
        attributes(
            'Main-Class':  application.mainClass,
            // TODO - Fill out the rest of the fields needed for a fully valid manifest.json
            //  See:
            //      - https://stackoverflow.com/questions/39406822/change-file-permission-by-gradle
            // 'Implementation-Title': 'My App',
            // 'Implementation-Version': "${version}",
            // 'Main-Class':'com.mycompany.App',
            // 'Class-Path': 'com.mycompany'
        )
    }

    // Copy dependencies into jar
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }

    // Exclude signature files
    exclude('META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA');
}


/* Libs separate from jar */
tasks.register('libJar', Jar) {
    // Include sources from built-in Jar task
    from sourceSets.main.output

    // Set destination locations (optional)
    def jarDir = file("${project.buildDir}/${project.libsDirName}");
    def libName = "lib";
    def libDir = file("$jarDir/$libName");

    doLast {
        // Copy dependencies to `libDir`
        // Using `libName` in `manifest.attributes.Class-Path` means the lib
        // folder *must* be in the same dir as the .jar file.
        copy {
            from configurations.runtimeClasspath.files.collect {
                // Since dependencies are .jar files, no need to call `zipTree()`
                it
            }
            into libDir
        }
    }

    // Include all libraries in classpath
    manifest {
        attributes (
            'Main-Class': application.mainClass,
            'Class-Path': configurations.runtimeClasspath.files.collect {
                "$libName/$it.name"
            }.join(' ')
        )
    }

    // Exclude signature files
    exclude('META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA');
}


// war task configuration from
// https://docs.gradle.org/current/userguide/war_plugin.html#sec:war_default_settings

war {
    from 'src/rootContent' // adds a file-set to the root of the archive
    webInf { from 'src/additionalWebInf' } // adds a file-set to the WEB-INF dir.
    classpath fileTree('additionalLibs') // adds a file-set to the WEB-INF/lib dir.
    classpath configurations.moreLibs // adds a configuration to the WEB-INF/lib dir.
    webXml = file('src/someWeb.xml') // copies a file to WEB-INF/web.xml
}


// Adding local directories to `repositories` search block (for if a dependency is downloaded locally)

repositories {
   flatDir { dirs "lib" }
   jcenter()
}
