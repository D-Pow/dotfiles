#!/usr/bin/env -S bash

USAGE="$(basename "${BASH_SOURCE[0]}") [-s] [-o]
    Outputs a summary of your OS info.

    Options:
        -s      |   Simple - Output a shorter OS summary instead of the full one.
        -o      |   OS-only - Output only the generic version of your OS (Linux, Darwin, etc.).
        -v      |   Verbose - Output all information from various sources (/etc/os-release, uname, etc.).
"

simplifiedOnly=
osOnly=
verbose=
OPTIND=1

while getopts ':sov' opt; do
    case "$opt" in
        s)
            simplifiedOnly=true
            ;;
        o)
            osOnly=true
            ;;
        v)
            verbose=true
            ;;
        *)
            echo -e "$USAGE"
            exit 1
            ;;
    esac
done

shift $(( OPTIND - 1 ))


allSysInfo="$(uname -a)"
simpleSysInfo="$(echo "$allSysInfo" | cut -f 1-3 -d ' ')"
osSysInfo="$(uname)"


if [[ -n "$simplifiedOnly" ]]; then
    echo "$simpleSysInfo"
    exit
fi

if [[ -n "$osOnly" ]]; then
    echo "$osSysInfo"
    exit
fi

# Fix for Mac and other wannabe Linux systems
if [[ "$allSysInfo" != *"Linux"* ]]; then
    if echo "$allSysInfo" | egrep -iq '(Mac)|(Darwin)|(CYGWIN)|(MINGW)'; then
        echo "$simpleSysInfo"
        exit
    fi
fi


osSimpleNameFile=/etc/issue.net
# Following files follow the same format as .env/.properties files,
# i.e. each line is `key=value`
allOsInfoFile=/etc/os-release
allBranchedFromOsInfoFile=/etc/upstream-release/lsb-release  # Could also use `lsb_release`

osSimpleName="$(cat $osSimpleNameFile)"

echo "OS: $osSimpleName"

# TODO fix this since the format has changed
if [[ "$allSysInfo" == *"~"* ]]; then
    osBranchedFrom="$(echo $allSysInfo | grep -P -o '(?<=~)[\S]+')"

    echo "Branched from: $osBranchedFrom"
elif [[ -f "$allBranchedFromOsInfoFile" ]]; then
    osBranchedFrom=''

    # Cannot use `cat file | while read` because pipes create subshells,
    # meaning that writing to a variable stays only in that subshell, not the
    # parent (this script's) shell.
    # Thus, use the file as redirected input instead.
    while IFS='=' read key value; do
        case "$key" in
            DISTRIB_ID|DISTRIB_RELEASE|DISTRIB_CODENAME)
                osBranchedFrom+="$value "
                ;;
            DISTRIB_DESCRIPTION|*)
                # Long code name, ignore
                ;;
        esac
    done < $allBranchedFromOsInfoFile

    echo "Branched from: $osBranchedFrom"
fi


if [[ -z "$verbose" ]]; then
    exit
fi


echo -e "\n${allSysInfo}\n"

if [[ -f "$allOsInfoFile" ]]; then
    cat "$allOsInfoFile"
fi
